
build/zephyr/zephyr.elf:     file format elf32-i386


Disassembly of section text:

00100000 <__start>:
  100000:	3d 02 b0 ad 2b       	cmp    $0x2badb002,%eax
  100005:	74 02                	je     100009 <__start+0x9>
  100007:	31 db                	xor    %ebx,%ebx
  100009:	b0 ff                	mov    $0xff,%al
  10000b:	e6 21                	out    %al,$0x21
  10000d:	e6 a1                	out    %al,$0xa1
  10000f:	eb 0f                	jmp    100020 <__start+0x20>
  100011:	8d 76 00             	lea    0x0(%esi),%esi
  100014:	02 b0 ad 1b 02 00    	add    0x21bad(%eax),%dh
  10001a:	00 00                	add    %al,(%eax)
  10001c:	fc                   	cld
  10001d:	4f                   	dec    %edi
  10001e:	52                   	push   %edx
  10001f:	e4 0f                	in     $0xf,%al
  100021:	20 c0                	and    %al,%al
  100023:	25 ff ff ff 9f       	and    $0x9fffffff,%eax
  100028:	0f 22 c0             	mov    %eax,%cr0
  10002b:	fa                   	cli
  10002c:	0f 01 15 b8 06 11 00 	lgdtl  0x1106b8
  100033:	66 b8 10 00          	mov    $0x10,%ax
  100037:	8e d8                	mov    %eax,%ds
  100039:	8e c0                	mov    %eax,%es
  10003b:	8e d0                	mov    %eax,%ss
  10003d:	66 31 c0             	xor    %ax,%ax
  100040:	8e e0                	mov    %eax,%fs
  100042:	8e e8                	mov    %eax,%gs
  100044:	ea 4b 00 10 00 08 00 	ljmp   $0x8,$0x10004b

0010004b <__csSet>:
  10004b:	0f 20 c0             	mov    %cr0,%eax
  10004e:	83 c8 2e             	or     $0x2e,%eax
  100051:	0f 22 c0             	mov    %eax,%cr0
  100054:	bc 00 c0 13 00       	mov    $0x13c000,%esp
  100059:	81 c4 00 18 00 00    	add    $0x1800,%esp
  10005f:	b8 00 30 12 00       	mov    $0x123000,%eax
  100064:	0f 22 d8             	mov    %eax,%cr3
  100067:	0f 20 e0             	mov    %cr4,%eax
  10006a:	83 c8 20             	or     $0x20,%eax
  10006d:	0f 22 e0             	mov    %eax,%cr4

00100070 <_kobject_text_area_used>:
  100070:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
  100075:	0f 32                	rdmsr
  100077:	0d 00 08 00 00       	or     $0x800,%eax
  10007c:	0f 30                	wrmsr
  10007e:	0f 20 c0             	mov    %cr0,%eax
  100081:	0d 00 00 01 80       	or     $0x80010000,%eax
  100086:	0f 22 c0             	mov    %eax,%cr0
  100089:	0f 01 15 e8 c0 11 00 	lgdtl  0x11c0e8
  100090:	66 b8 18 00          	mov    $0x18,%ax
  100094:	0f 00 d8             	ltr    %eax
  100097:	54                   	push   %esp
  100098:	e8 7a 3f 00 00       	call   104017 <z_x86_early_tls_update_gdt>
  10009d:	5c                   	pop    %esp
  10009e:	e8 86 69 00 00       	call   106a29 <z_bss_zero>
  1000a3:	0f 01 1d c9 00 10 00 	lidtl  0x1000c9
  1000aa:	bd 8c cc 12 00       	mov    $0x12cc8c,%ebp
  1000af:	c7 85 00 00 00 00 01 	movl   $0x1,0x0(%ebp)
  1000b6:	00 00 00 
  1000b9:	89 9d 04 00 00 00    	mov    %ebx,0x4(%ebp)
  1000bf:	68 8c cc 12 00       	push   $0x12cc8c
  1000c4:	e8 1a 25 00 00       	call   1025e3 <z_prep_c>

001000c9 <z_x86_idt>:
  1000c9:	ff 07 50 42 11 00                                   ..PB..

001000cf <hpet_isr_irq2_stub>:
  1000cf:	6a 00                	push   $0x0
  1000d1:	68 95 60 10 00       	push   $0x106095
  1000d6:	e9 ba 3c 00 00       	jmp    103d95 <_interrupt_enter>

001000db <_handle_exc_0_vector_0_stub>:
  1000db:	6a 00                	push   $0x0
  1000dd:	68 03 42 10 00       	push   $0x104203
  1000e2:	e9 60 3c 00 00       	jmp    103d47 <_exception_enter>

001000e7 <_handle_exc_2_vector_2_stub>:
  1000e7:	6a 00                	push   $0x0
  1000e9:	68 10 42 10 00       	push   $0x104210
  1000ee:	e9 54 3c 00 00       	jmp    103d47 <_exception_enter>

001000f3 <_handle_exc_4_vector_4_stub>:
  1000f3:	6a 00                	push   $0x0
  1000f5:	68 1d 42 10 00       	push   $0x10421d
  1000fa:	e9 48 3c 00 00       	jmp    103d47 <_exception_enter>

001000ff <_handle_exc_5_vector_5_stub>:
  1000ff:	6a 00                	push   $0x0
  100101:	68 2a 42 10 00       	push   $0x10422a
  100106:	e9 3c 3c 00 00       	jmp    103d47 <_exception_enter>

0010010b <_handle_exc_6_vector_6_stub>:
  10010b:	6a 00                	push   $0x0
  10010d:	68 37 42 10 00       	push   $0x104237
  100112:	e9 30 3c 00 00       	jmp    103d47 <_exception_enter>

00100117 <_handle_exc_7_vector_7_stub>:
  100117:	6a 00                	push   $0x0
  100119:	68 44 42 10 00       	push   $0x104244
  10011e:	e9 24 3c 00 00       	jmp    103d47 <_exception_enter>

00100123 <_handle_exc_10_vector_10_stub>:
  100123:	68 51 42 10 00       	push   $0x104251
  100128:	e9 1a 3c 00 00       	jmp    103d47 <_exception_enter>

0010012d <_handle_exc_11_vector_11_stub>:
  10012d:	68 5e 42 10 00       	push   $0x10425e
  100132:	e9 10 3c 00 00       	jmp    103d47 <_exception_enter>

00100137 <_handle_exc_12_vector_12_stub>:
  100137:	68 6b 42 10 00       	push   $0x10426b
  10013c:	e9 06 3c 00 00       	jmp    103d47 <_exception_enter>

00100141 <_handle_exc_13_vector_13_stub>:
  100141:	68 78 42 10 00       	push   $0x104278
  100146:	e9 fc 3b 00 00       	jmp    103d47 <_exception_enter>

0010014b <_handle_exc_16_vector_16_stub>:
  10014b:	6a 00                	push   $0x0
  10014d:	68 85 42 10 00       	push   $0x104285
  100152:	e9 f0 3b 00 00       	jmp    103d47 <_exception_enter>

00100157 <_handle_exc_17_vector_17_stub>:
  100157:	68 92 42 10 00       	push   $0x104292
  10015c:	e9 e6 3b 00 00       	jmp    103d47 <_exception_enter>

00100161 <_handle_exc_18_vector_18_stub>:
  100161:	6a 00                	push   $0x0
  100163:	68 9f 42 10 00       	push   $0x10429f
  100168:	e9 da 3b 00 00       	jmp    103d47 <_exception_enter>

0010016d <_z_x86_page_fault_handler_vector_14_stub>:
  10016d:	68 fa 28 10 00       	push   $0x1028fa
  100172:	e9 d0 3b 00 00       	jmp    103d47 <_exception_enter>

00100177 <__udivdi3>:
  100177:	55                   	push   %ebp
  100178:	89 e5                	mov    %esp,%ebp
  10017a:	57                   	push   %edi
  10017b:	56                   	push   %esi
  10017c:	53                   	push   %ebx
  10017d:	83 ec 1c             	sub    $0x1c,%esp
  100180:	8b 55 14             	mov    0x14(%ebp),%edx
  100183:	8b 45 08             	mov    0x8(%ebp),%eax
  100186:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100189:	8b 7d 0c             	mov    0xc(%ebp),%edi
  10018c:	8b 75 10             	mov    0x10(%ebp),%esi
  10018f:	89 d1                	mov    %edx,%ecx
  100191:	85 d2                	test   %edx,%edx
  100193:	75 2f                	jne    1001c4 <__udivdi3+0x4d>
  100195:	39 f7                	cmp    %esi,%edi
  100197:	73 06                	jae    10019f <__udivdi3+0x28>
  100199:	89 fa                	mov    %edi,%edx
  10019b:	f7 f6                	div    %esi
  10019d:	eb 1e                	jmp    1001bd <__udivdi3+0x46>
  10019f:	89 f3                	mov    %esi,%ebx
  1001a1:	85 f6                	test   %esi,%esi
  1001a3:	75 0b                	jne    1001b0 <__udivdi3+0x39>
  1001a5:	b8 01 00 00 00       	mov    $0x1,%eax
  1001aa:	31 d2                	xor    %edx,%edx
  1001ac:	f7 f6                	div    %esi
  1001ae:	89 c3                	mov    %eax,%ebx
  1001b0:	31 d2                	xor    %edx,%edx
  1001b2:	89 f8                	mov    %edi,%eax
  1001b4:	f7 f3                	div    %ebx
  1001b6:	89 c1                	mov    %eax,%ecx
  1001b8:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1001bb:	f7 f3                	div    %ebx
  1001bd:	89 c3                	mov    %eax,%ebx
  1001bf:	e9 99 00 00 00       	jmp    10025d <__udivdi3+0xe6>
  1001c4:	39 d7                	cmp    %edx,%edi
  1001c6:	0f 82 89 00 00 00    	jb     100255 <__udivdi3+0xde>
  1001cc:	0f bd c2             	bsr    %edx,%eax
  1001cf:	83 f0 1f             	xor    $0x1f,%eax
  1001d2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1001d5:	75 15                	jne    1001ec <__udivdi3+0x75>
  1001d7:	39 fa                	cmp    %edi,%edx
  1001d9:	b9 00 00 00 00       	mov    $0x0,%ecx
  1001de:	72 05                	jb     1001e5 <__udivdi3+0x6e>
  1001e0:	39 75 e0             	cmp    %esi,-0x20(%ebp)
  1001e3:	72 72                	jb     100257 <__udivdi3+0xe0>
  1001e5:	bb 01 00 00 00       	mov    $0x1,%ebx
  1001ea:	eb 71                	jmp    10025d <__udivdi3+0xe6>
  1001ec:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  1001ef:	b8 20 00 00 00       	mov    $0x20,%eax
  1001f4:	29 d8                	sub    %ebx,%eax
  1001f6:	8a 4d e4             	mov    -0x1c(%ebp),%cl
  1001f9:	d3 e2                	shl    %cl,%edx
  1001fb:	89 f3                	mov    %esi,%ebx
  1001fd:	88 c1                	mov    %al,%cl
  1001ff:	d3 eb                	shr    %cl,%ebx
  100201:	89 d9                	mov    %ebx,%ecx
  100203:	8b 5d e0             	mov    -0x20(%ebp),%ebx
  100206:	09 d1                	or     %edx,%ecx
  100208:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  10020b:	8a 4d e4             	mov    -0x1c(%ebp),%cl
  10020e:	d3 e6                	shl    %cl,%esi
  100210:	89 75 d8             	mov    %esi,-0x28(%ebp)
  100213:	88 c1                	mov    %al,%cl
  100215:	89 fe                	mov    %edi,%esi
  100217:	d3 ee                	shr    %cl,%esi
  100219:	8a 4d e4             	mov    -0x1c(%ebp),%cl
  10021c:	89 f2                	mov    %esi,%edx
  10021e:	d3 e7                	shl    %cl,%edi
  100220:	88 c1                	mov    %al,%cl
  100222:	d3 eb                	shr    %cl,%ebx
  100224:	09 fb                	or     %edi,%ebx
  100226:	89 d8                	mov    %ebx,%eax
  100228:	f7 75 dc             	divl   -0x24(%ebp)
  10022b:	89 d6                	mov    %edx,%esi
  10022d:	89 c7                	mov    %eax,%edi
  10022f:	89 c3                	mov    %eax,%ebx
  100231:	f7 65 d8             	mull   -0x28(%ebp)
  100234:	89 45 dc             	mov    %eax,-0x24(%ebp)
  100237:	39 d6                	cmp    %edx,%esi
  100239:	72 15                	jb     100250 <__udivdi3+0xd9>
  10023b:	8a 4d e4             	mov    -0x1c(%ebp),%cl
  10023e:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100241:	d3 e0                	shl    %cl,%eax
  100243:	89 c1                	mov    %eax,%ecx
  100245:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100248:	39 c1                	cmp    %eax,%ecx
  10024a:	73 0f                	jae    10025b <__udivdi3+0xe4>
  10024c:	39 d6                	cmp    %edx,%esi
  10024e:	75 0b                	jne    10025b <__udivdi3+0xe4>
  100250:	8d 5f ff             	lea    -0x1(%edi),%ebx
  100253:	eb 06                	jmp    10025b <__udivdi3+0xe4>
  100255:	31 c9                	xor    %ecx,%ecx
  100257:	31 db                	xor    %ebx,%ebx
  100259:	eb 02                	jmp    10025d <__udivdi3+0xe6>
  10025b:	31 c9                	xor    %ecx,%ecx
  10025d:	89 d8                	mov    %ebx,%eax
  10025f:	89 ca                	mov    %ecx,%edx
  100261:	83 c4 1c             	add    $0x1c,%esp
  100264:	5b                   	pop    %ebx
  100265:	5e                   	pop    %esi
  100266:	5f                   	pop    %edi
  100267:	5d                   	pop    %ebp
  100268:	c3                   	ret

00100269 <strlen>:
  100269:	55                   	push   %ebp
  10026a:	89 e5                	mov    %esp,%ebp
  10026c:	57                   	push   %edi
  10026d:	8b 55 08             	mov    0x8(%ebp),%edx
  100270:	fc                   	cld
  100271:	89 d7                	mov    %edx,%edi
  100273:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  100278:	31 c0                	xor    %eax,%eax
  10027a:	f2 ae                	repnz scas %es:(%edi),%al

0010027c <L15>:
  10027c:	29 d7                	sub    %edx,%edi
  10027e:	8d 47 ff             	lea    -0x1(%edi),%eax
  100281:	8d 65 fc             	lea    -0x4(%ebp),%esp
  100284:	5f                   	pop    %edi
  100285:	c9                   	leave
  100286:	c3                   	ret
	...

00100290 <strcmp>:
  100290:	55                   	push   %ebp
  100291:	89 e5                	mov    %esp,%ebp
  100293:	53                   	push   %ebx
  100294:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100297:	8b 55 0c             	mov    0xc(%ebp),%edx
  10029a:	89 c8                	mov    %ecx,%eax
  10029c:	09 d0                	or     %edx,%eax
  10029e:	a8 03                	test   $0x3,%al
  1002a0:	75 2c                	jne    1002ce <strcmp+0x3e>
  1002a2:	eb 1c                	jmp    1002c0 <strcmp+0x30>
  1002a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  1002a8:	8d 98 ff fe fe fe    	lea    -0x1010101(%eax),%ebx
  1002ae:	83 f0 ff             	xor    $0xffffffff,%eax
  1002b1:	21 d8                	and    %ebx,%eax
  1002b3:	a9 80 80 80 80       	test   $0x80808080,%eax
  1002b8:	75 36                	jne    1002f0 <strcmp+0x60>
  1002ba:	83 c1 04             	add    $0x4,%ecx
  1002bd:	83 c2 04             	add    $0x4,%edx
  1002c0:	8b 01                	mov    (%ecx),%eax
  1002c2:	3b 02                	cmp    (%edx),%eax
  1002c4:	74 e2                	je     1002a8 <strcmp+0x18>
  1002c6:	eb 06                	jmp    1002ce <strcmp+0x3e>
  1002c8:	38 02                	cmp    %al,(%edx)
  1002ca:	75 1c                	jne    1002e8 <strcmp+0x58>
  1002cc:	41                   	inc    %ecx
  1002cd:	42                   	inc    %edx
  1002ce:	8a 01                	mov    (%ecx),%al
  1002d0:	84 c0                	test   %al,%al
  1002d2:	75 f4                	jne    1002c8 <strcmp+0x38>
  1002d4:	31 c0                	xor    %eax,%eax
  1002d6:	31 db                	xor    %ebx,%ebx
  1002d8:	8a 1a                	mov    (%edx),%bl
  1002da:	89 da                	mov    %ebx,%edx
  1002dc:	5b                   	pop    %ebx
  1002dd:	29 d0                	sub    %edx,%eax
  1002df:	5d                   	pop    %ebp
  1002e0:	c3                   	ret
  1002e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  1002e8:	25 ff 00 00 00       	and    $0xff,%eax
  1002ed:	eb e7                	jmp    1002d6 <strcmp+0x46>
  1002ef:	90                   	nop
  1002f0:	5b                   	pop    %ebx
  1002f1:	31 c0                	xor    %eax,%eax
  1002f3:	5d                   	pop    %ebp
  1002f4:	c3                   	ret

001002f5 <_OffsetAbsSyms>:
  1002f5:	c3                   	ret

001002f6 <k_sem_count_get>:
  1002f6:	8c ca                	mov    %cs,%edx
  1002f8:	83 fa 2b             	cmp    $0x2b,%edx
  1002fb:	75 0e                	jne    10030b <k_sem_count_get+0x15>
  1002fd:	55                   	push   %ebp
  1002fe:	89 e5                	mov    %esp,%ebp
  100300:	56                   	push   %esi
  100301:	be 3a 00 00 00       	mov    $0x3a,%esi
  100306:	cd 80                	int    $0x80
  100308:	5e                   	pop    %esi
  100309:	5d                   	pop    %ebp
  10030a:	c3                   	ret
  10030b:	8b 40 10             	mov    0x10(%eax),%eax
  10030e:	c3                   	ret

0010030f <k_sem_give>:
  10030f:	55                   	push   %ebp
  100310:	89 e5                	mov    %esp,%ebp
  100312:	56                   	push   %esi
  100313:	8c ca                	mov    %cs,%edx
  100315:	83 fa 2b             	cmp    $0x2b,%edx
  100318:	75 09                	jne    100323 <k_sem_give+0x14>
  10031a:	be 3b 00 00 00       	mov    $0x3b,%esi
  10031f:	cd 80                	int    $0x80
  100321:	eb 07                	jmp    10032a <k_sem_give+0x1b>
  100323:	50                   	push   %eax
  100324:	e8 2f 77 00 00       	call   107a58 <z_impl_k_sem_give>
  100329:	58                   	pop    %eax
  10032a:	8b 75 fc             	mov    -0x4(%ebp),%esi
  10032d:	c9                   	leave
  10032e:	c3                   	ret

0010032f <sem_thread_give>:
  10032f:	b8 74 cc 12 00       	mov    $0x12cc74,%eax
  100334:	c7 05 04 90 11 00 01 	movl   $0x1,0x119004
  10033b:	00 00 00 
  10033e:	e9 cc ff ff ff       	jmp    10030f <k_sem_give>

00100343 <k_object_access_grant>:
  100343:	55                   	push   %ebp
  100344:	89 e5                	mov    %esp,%ebp
  100346:	56                   	push   %esi
  100347:	8c c9                	mov    %cs,%ecx
  100349:	83 f9 2b             	cmp    $0x2b,%ecx
  10034c:	75 09                	jne    100357 <k_object_access_grant+0x14>
  10034e:	be 21 00 00 00       	mov    $0x21,%esi
  100353:	cd 80                	int    $0x80
  100355:	eb 09                	jmp    100360 <k_object_access_grant+0x1d>
  100357:	52                   	push   %edx
  100358:	50                   	push   %eax
  100359:	e8 8f d5 00 00       	call   10d8ed <z_impl_k_object_access_grant>
  10035e:	58                   	pop    %eax
  10035f:	5a                   	pop    %edx
  100360:	8b 75 fc             	mov    -0x4(%ebp),%esi
  100363:	c9                   	leave
  100364:	c3                   	ret

00100365 <test_init>:
  100365:	55                   	push   %ebp
  100366:	b8 74 cc 12 00       	mov    $0x12cc74,%eax
  10036b:	89 e5                	mov    %esp,%ebp
  10036d:	53                   	push   %ebx
  10036e:	65 8b 1d 00 00 00 00 	mov    %gs:0x0,%ebx
  100375:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  10037b:	e8 c3 ff ff ff       	call   100343 <k_object_access_grant>
  100380:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  100386:	b8 5c cc 12 00       	mov    $0x12cc5c,%eax
  10038b:	e8 b3 ff ff ff       	call   100343 <k_object_access_grant>
  100390:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  100396:	b8 44 cc 12 00       	mov    $0x12cc44,%eax
  10039b:	e8 a3 ff ff ff       	call   100343 <k_object_access_grant>
  1003a0:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  1003a6:	b8 20 43 12 00       	mov    $0x124320,%eax
  1003ab:	e8 93 ff ff ff       	call   100343 <k_object_access_grant>
  1003b0:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  1003b6:	b8 c0 43 12 00       	mov    $0x1243c0,%eax
  1003bb:	e8 83 ff ff ff       	call   100343 <k_object_access_grant>
  1003c0:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  1003c6:	b8 60 44 12 00       	mov    $0x124460,%eax
  1003cb:	e8 73 ff ff ff       	call   100343 <k_object_access_grant>
  1003d0:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  1003d6:	b8 00 45 12 00       	mov    $0x124500,%eax
  1003db:	e8 63 ff ff ff       	call   100343 <k_object_access_grant>
  1003e0:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  1003e6:	b8 a0 45 12 00       	mov    $0x1245a0,%eax
  1003eb:	e8 53 ff ff ff       	call   100343 <k_object_access_grant>
  1003f0:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  1003f6:	b8 80 42 12 00       	mov    $0x124280,%eax
  1003fb:	e8 43 ff ff ff       	call   100343 <k_object_access_grant>
  100400:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  100406:	b8 40 41 12 00       	mov    $0x124140,%eax
  10040b:	e8 33 ff ff ff       	call   100343 <k_object_access_grant>
  100410:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  100416:	b8 e0 41 12 00       	mov    $0x1241e0,%eax
  10041b:	e8 23 ff ff ff       	call   100343 <k_object_access_grant>
  100420:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  100426:	b8 00 40 12 00       	mov    $0x124000,%eax
  10042b:	e8 13 ff ff ff       	call   100343 <k_object_access_grant>
  100430:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  100436:	b8 a0 40 12 00       	mov    $0x1240a0,%eax
  10043b:	e8 03 ff ff ff       	call   100343 <k_object_access_grant>
  100440:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  100446:	b8 40 46 12 00       	mov    $0x124640,%eax
  10044b:	e8 f3 fe ff ff       	call   100343 <k_object_access_grant>
  100450:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  100456:	b8 20 43 12 00       	mov    $0x124320,%eax
  10045b:	e8 e3 fe ff ff       	call   100343 <k_object_access_grant>
  100460:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  100466:	b8 00 10 14 00       	mov    $0x141000,%eax
  10046b:	e8 d3 fe ff ff       	call   100343 <k_object_access_grant>
  100470:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  100476:	b8 00 30 14 00       	mov    $0x143000,%eax
  10047b:	e8 c3 fe ff ff       	call   100343 <k_object_access_grant>
  100480:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  100486:	b8 00 70 14 00       	mov    $0x147000,%eax
  10048b:	e8 b3 fe ff ff       	call   100343 <k_object_access_grant>
  100490:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  100496:	b8 00 90 14 00       	mov    $0x149000,%eax
  10049b:	e8 a3 fe ff ff       	call   100343 <k_object_access_grant>
  1004a0:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  1004a6:	b8 00 50 14 00       	mov    $0x145000,%eax
  1004ab:	e8 93 fe ff ff       	call   100343 <k_object_access_grant>
  1004b0:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  1004b6:	b8 00 b0 14 00       	mov    $0x14b000,%eax
  1004bb:	e8 83 fe ff ff       	call   100343 <k_object_access_grant>
  1004c0:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  1004c6:	b8 00 d0 14 00       	mov    $0x14d000,%eax
  1004cb:	e8 73 fe ff ff       	call   100343 <k_object_access_grant>
  1004d0:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  1004d6:	b8 00 f0 14 00       	mov    $0x14f000,%eax
  1004db:	e8 63 fe ff ff       	call   100343 <k_object_access_grant>
  1004e0:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  1004e6:	b8 00 10 15 00       	mov    $0x151000,%eax
  1004eb:	e8 53 fe ff ff       	call   100343 <k_object_access_grant>
  1004f0:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
  1004f6:	b8 00 30 15 00       	mov    $0x153000,%eax
  1004fb:	e8 43 fe ff ff       	call   100343 <k_object_access_grant>
  100500:	5b                   	pop    %ebx
  100501:	31 c0                	xor    %eax,%eax
  100503:	5d                   	pop    %ebp
  100504:	c3                   	ret

00100505 <sem_thread_give_uninit>:
  100505:	55                   	push   %ebp
  100506:	89 e5                	mov    %esp,%ebp
  100508:	56                   	push   %esi
  100509:	8c c8                	mov    %cs,%eax
  10050b:	83 f8 2b             	cmp    $0x2b,%eax
  10050e:	75 0e                	jne    10051e <sem_thread_give_uninit+0x19>
  100510:	be 89 00 00 00       	mov    $0x89,%esi
  100515:	b8 01 00 00 00       	mov    $0x1,%eax
  10051a:	cd 80                	int    $0x80
  10051c:	eb 08                	jmp    100526 <sem_thread_give_uninit+0x21>
  10051e:	6a 01                	push   $0x1
  100520:	e8 8e 4a 00 00       	call   104fb3 <z_impl_ztest_set_fault_valid>
  100525:	58                   	pop    %eax
  100526:	b8 2c cc 12 00       	mov    $0x12cc2c,%eax
  10052b:	e8 df fd ff ff       	call   10030f <k_sem_give>
  100530:	8b 75 fc             	mov    -0x4(%ebp),%esi
  100533:	c9                   	leave
  100534:	e9 a5 41 00 00       	jmp    1046de <ztest_test_fail>

00100539 <z_zassert.constprop.0>:
  100539:	55                   	push   %ebp
  10053a:	89 e5                	mov    %esp,%ebp
  10053c:	56                   	push   %esi
  10053d:	53                   	push   %ebx
  10053e:	8b 45 08             	mov    0x8(%ebp),%eax
  100541:	88 c3                	mov    %al,%bl
  100543:	84 c0                	test   %al,%al
  100545:	75 40                	jne    100587 <z_zassert.constprop.0+0x4e>
  100547:	68 60 0e 11 00       	push   $0x110e60
  10054c:	e8 b1 4b 00 00       	call   105102 <ztest_relative_filename>
  100551:	5a                   	pop    %edx
  100552:	8d 75 20             	lea    0x20(%ebp),%esi
  100555:	ff 75 0c             	push   0xc(%ebp)
  100558:	ff 75 18             	push   0x18(%ebp)
  10055b:	ff 75 14             	push   0x14(%ebp)
  10055e:	50                   	push   %eax
  10055f:	68 9d 0e 11 00       	push   $0x110e9d
  100564:	e8 ff 0f 00 00       	call   101568 <printk>
  100569:	83 c4 14             	add    $0x14,%esp
  10056c:	56                   	push   %esi
  10056d:	ff 75 1c             	push   0x1c(%ebp)
  100570:	e8 d4 0e 00 00       	call   101449 <vprintk>
  100575:	59                   	pop    %ecx
  100576:	5e                   	pop    %esi
  100577:	68 4b 23 11 00       	push   $0x11234b
  10057c:	e8 e7 0f 00 00       	call   101568 <printk>
  100581:	58                   	pop    %eax
  100582:	e8 57 41 00 00       	call   1046de <ztest_test_fail>
  100587:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10058a:	88 d8                	mov    %bl,%al
  10058c:	5b                   	pop    %ebx
  10058d:	5e                   	pop    %esi
  10058e:	5d                   	pop    %ebp
  10058f:	c3                   	ret

00100590 <k_thread_create.constprop.0.isra.0>:
  100590:	55                   	push   %ebp
  100591:	89 e5                	mov    %esp,%ebp
  100593:	57                   	push   %edi
  100594:	56                   	push   %esi
  100595:	53                   	push   %ebx
  100596:	89 cb                	mov    %ecx,%ebx
  100598:	83 ec 1c             	sub    $0x1c,%esp
  10059b:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10059e:	8c ce                	mov    %cs,%esi
  1005a0:	83 fe 2b             	cmp    $0x2b,%esi
  1005a3:	75 39                	jne    1005de <k_thread_create.constprop.0.isra.0+0x4e>
  1005a5:	31 ff                	xor    %edi,%edi
  1005a7:	8b 75 10             	mov    0x10(%ebp),%esi
  1005aa:	89 7d dc             	mov    %edi,-0x24(%ebp)
  1005ad:	89 7d e0             	mov    %edi,-0x20(%ebp)
  1005b0:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  1005b3:	8b 7d 0c             	mov    0xc(%ebp),%edi
  1005b6:	8d 4d dc             	lea    -0x24(%ebp),%ecx
  1005b9:	89 7d ec             	mov    %edi,-0x14(%ebp)
  1005bc:	89 75 f0             	mov    %esi,-0x10(%ebp)
  1005bf:	89 4d d8             	mov    %ecx,-0x28(%ebp)
  1005c2:	c7 45 e8 0c 00 00 00 	movl   $0xc,-0x18(%ebp)
  1005c9:	be 45 00 00 00       	mov    $0x45,%esi
  1005ce:	b9 00 02 00 00       	mov    $0x200,%ecx
  1005d3:	31 ff                	xor    %edi,%edi
  1005d5:	55                   	push   %ebp
  1005d6:	8b 6d d8             	mov    -0x28(%ebp),%ebp
  1005d9:	cd 80                	int    $0x80
  1005db:	5d                   	pop    %ebp
  1005dc:	eb 1f                	jmp    1005fd <k_thread_create.constprop.0.isra.0+0x6d>
  1005de:	ff 75 10             	push   0x10(%ebp)
  1005e1:	ff 75 0c             	push   0xc(%ebp)
  1005e4:	6a 0c                	push   $0xc
  1005e6:	51                   	push   %ecx
  1005e7:	6a 00                	push   $0x0
  1005e9:	6a 00                	push   $0x0
  1005eb:	6a 00                	push   $0x0
  1005ed:	53                   	push   %ebx
  1005ee:	68 00 02 00 00       	push   $0x200
  1005f3:	52                   	push   %edx
  1005f4:	50                   	push   %eax
  1005f5:	e8 41 82 00 00       	call   10883b <z_impl_k_thread_create>
  1005fa:	83 c4 2c             	add    $0x2c,%esp
  1005fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
  100600:	5b                   	pop    %ebx
  100601:	5e                   	pop    %esi
  100602:	5f                   	pop    %edi
  100603:	5d                   	pop    %ebp
  100604:	c3                   	ret

00100605 <k_thread_join.constprop.0.isra.0>:
  100605:	55                   	push   %ebp
  100606:	89 e5                	mov    %esp,%ebp
  100608:	56                   	push   %esi
  100609:	53                   	push   %ebx
  10060a:	89 cb                	mov    %ecx,%ebx
  10060c:	89 d1                	mov    %edx,%ecx
  10060e:	8c ca                	mov    %cs,%edx
  100610:	83 fa 2b             	cmp    $0x2b,%edx
  100613:	75 0d                	jne    100622 <k_thread_join.constprop.0.isra.0+0x1d>
  100615:	89 ca                	mov    %ecx,%edx
  100617:	be 49 00 00 00       	mov    $0x49,%esi
  10061c:	89 d9                	mov    %ebx,%ecx
  10061e:	cd 80                	int    $0x80
  100620:	eb 0b                	jmp    10062d <k_thread_join.constprop.0.isra.0+0x28>
  100622:	53                   	push   %ebx
  100623:	51                   	push   %ecx
  100624:	50                   	push   %eax
  100625:	e8 70 a2 00 00       	call   10a89a <z_impl_k_thread_join>
  10062a:	83 c4 0c             	add    $0xc,%esp
  10062d:	8d 65 f8             	lea    -0x8(%ebp),%esp
  100630:	5b                   	pop    %ebx
  100631:	5e                   	pop    %esi
  100632:	5d                   	pop    %ebp
  100633:	c3                   	ret

00100634 <k_sem_init.constprop.0.isra.0>:
  100634:	55                   	push   %ebp
  100635:	89 e5                	mov    %esp,%ebp
  100637:	56                   	push   %esi
  100638:	8c ca                	mov    %cs,%edx
  10063a:	83 fa 2b             	cmp    $0x2b,%edx
  10063d:	75 10                	jne    10064f <k_sem_init.constprop.0.isra.0+0x1b>
  10063f:	be 3c 00 00 00       	mov    $0x3c,%esi
  100644:	31 d2                	xor    %edx,%edx
  100646:	b9 03 00 00 00       	mov    $0x3,%ecx
  10064b:	cd 80                	int    $0x80
  10064d:	eb 0d                	jmp    10065c <k_sem_init.constprop.0.isra.0+0x28>
  10064f:	6a 03                	push   $0x3
  100651:	6a 00                	push   $0x0
  100653:	50                   	push   %eax
  100654:	e8 2c 73 00 00       	call   107985 <z_impl_k_sem_init>
  100659:	83 c4 0c             	add    $0xc,%esp
  10065c:	8b 75 fc             	mov    -0x4(%ebp),%esi
  10065f:	c9                   	leave
  100660:	c3                   	ret

00100661 <k_sem_take.constprop.0.isra.0>:
  100661:	55                   	push   %ebp
  100662:	89 e5                	mov    %esp,%ebp
  100664:	56                   	push   %esi
  100665:	53                   	push   %ebx
  100666:	89 cb                	mov    %ecx,%ebx
  100668:	89 d1                	mov    %edx,%ecx
  10066a:	8c ca                	mov    %cs,%edx
  10066c:	83 fa 2b             	cmp    $0x2b,%edx
  10066f:	75 0d                	jne    10067e <k_sem_take.constprop.0.isra.0+0x1d>
  100671:	89 ca                	mov    %ecx,%edx
  100673:	be 3e 00 00 00       	mov    $0x3e,%esi
  100678:	89 d9                	mov    %ebx,%ecx
  10067a:	cd 80                	int    $0x80
  10067c:	eb 0b                	jmp    100689 <k_sem_take.constprop.0.isra.0+0x28>
  10067e:	53                   	push   %ebx
  10067f:	51                   	push   %ecx
  100680:	50                   	push   %eax
  100681:	e8 2b 75 00 00       	call   107bb1 <z_impl_k_sem_take>
  100686:	83 c4 0c             	add    $0xc,%esp
  100689:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10068c:	5b                   	pop    %ebx
  10068d:	5e                   	pop    %esi
  10068e:	5d                   	pop    %ebp
  10068f:	c3                   	ret

00100690 <thread_high_prio_sem_take>:
  100690:	55                   	push   %ebp
  100691:	83 ca ff             	or     $0xffffffff,%edx
  100694:	89 e5                	mov    %esp,%ebp
  100696:	b8 74 cc 12 00       	mov    $0x12cc74,%eax
  10069b:	89 d1                	mov    %edx,%ecx
  10069d:	e8 bf ff ff ff       	call   100661 <k_sem_take.constprop.0.isra.0>
  1006a2:	b8 5c cc 12 00       	mov    $0x12cc5c,%eax
  1006a7:	c7 05 04 90 11 00 02 	movl   $0x2,0x119004
  1006ae:	00 00 00 
  1006b1:	5d                   	pop    %ebp
  1006b2:	e9 58 fc ff ff       	jmp    10030f <k_sem_give>

001006b7 <thread_low_prio_sem_take>:
  1006b7:	55                   	push   %ebp
  1006b8:	83 ca ff             	or     $0xffffffff,%edx
  1006bb:	89 e5                	mov    %esp,%ebp
  1006bd:	b8 74 cc 12 00       	mov    $0x12cc74,%eax
  1006c2:	89 d1                	mov    %edx,%ecx
  1006c4:	e8 98 ff ff ff       	call   100661 <k_sem_take.constprop.0.isra.0>
  1006c9:	b8 5c cc 12 00       	mov    $0x12cc5c,%eax
  1006ce:	c7 05 04 90 11 00 08 	movl   $0x8,0x119004
  1006d5:	00 00 00 
  1006d8:	5d                   	pop    %ebp
  1006d9:	e9 31 fc ff ff       	jmp    10030f <k_sem_give>

001006de <multi_thread_sem_give>:
  1006de:	55                   	push   %ebp
  1006df:	89 e5                	mov    %esp,%ebp
  1006e1:	53                   	push   %ebx
  1006e2:	f0 ff 05 00 90 11 00 	lock incl 0x119000
  1006e9:	b8 44 cc 12 00       	mov    $0x12cc44,%eax
  1006ee:	8b 1d 00 90 11 00    	mov    0x119000,%ebx
  1006f4:	e8 16 fc ff ff       	call   10030f <k_sem_give>
  1006f9:	b8 44 cc 12 00       	mov    $0x12cc44,%eax
  1006fe:	83 fb 03             	cmp    $0x3,%ebx
  100701:	77 22                	ja     100725 <multi_thread_sem_give+0x47>
  100703:	e8 ee fb ff ff       	call   1002f6 <k_sem_count_get>
  100708:	68 c5 0e 11 00       	push   $0x110ec5
  10070d:	68 d0 06 11 00       	push   $0x1106d0
  100712:	39 d8                	cmp    %ebx,%eax
  100714:	68 89 00 00 00       	push   $0x89
  100719:	68 60 0e 11 00       	push   $0x110e60
  10071e:	68 d9 0e 11 00       	push   $0x110ed9
  100723:	eb 21                	jmp    100746 <multi_thread_sem_give+0x68>
  100725:	e8 cc fb ff ff       	call   1002f6 <k_sem_count_get>
  10072a:	68 0a 0f 11 00       	push   $0x110f0a
  10072f:	68 d0 06 11 00       	push   $0x1106d0
  100734:	83 f8 03             	cmp    $0x3,%eax
  100737:	68 8b 00 00 00       	push   $0x8b
  10073c:	68 60 0e 11 00       	push   $0x110e60
  100741:	68 1e 0f 11 00       	push   $0x110f1e
  100746:	0f 94 c0             	sete   %al
  100749:	0f b6 c0             	movzbl %al,%eax
  10074c:	50                   	push   %eax
  10074d:	e8 e7 fd ff ff       	call   100539 <z_zassert.constprop.0>
  100752:	83 ca ff             	or     $0xffffffff,%edx
  100755:	83 c4 18             	add    $0x18,%esp
  100758:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10075b:	89 d1                	mov    %edx,%ecx
  10075d:	b8 5c cc 12 00       	mov    $0x12cc5c,%eax
  100762:	c9                   	leave
  100763:	e9 f9 fe ff ff       	jmp    100661 <k_sem_take.constprop.0.isra.0>

00100768 <k_sleep.isra.0>:
  100768:	55                   	push   %ebp
  100769:	89 e5                	mov    %esp,%ebp
  10076b:	56                   	push   %esi
  10076c:	8c c9                	mov    %cs,%ecx
  10076e:	83 f9 2b             	cmp    $0x2b,%ecx
  100771:	75 09                	jne    10077c <k_sleep.isra.0+0x14>
  100773:	be 3f 00 00 00       	mov    $0x3f,%esi
  100778:	cd 80                	int    $0x80
  10077a:	eb 09                	jmp    100785 <k_sleep.isra.0+0x1d>
  10077c:	52                   	push   %edx
  10077d:	50                   	push   %eax
  10077e:	e8 3d 9d 00 00       	call   10a4c0 <z_impl_k_sleep>
  100783:	58                   	pop    %eax
  100784:	5a                   	pop    %edx
  100785:	8b 75 fc             	mov    -0x4(%ebp),%esi
  100788:	c9                   	leave
  100789:	c3                   	ret

0010078a <multi_thread_sem_take>:
  10078a:	55                   	push   %ebp
  10078b:	83 ca ff             	or     $0xffffffff,%edx
  10078e:	89 e5                	mov    %esp,%ebp
  100790:	89 d1                	mov    %edx,%ecx
  100792:	b8 44 cc 12 00       	mov    $0x12cc44,%eax
  100797:	e8 c5 fe ff ff       	call   100661 <k_sem_take.constprop.0.isra.0>
  10079c:	f0 ff 0d 00 90 11 00 	lock decl 0x119000
  1007a3:	8b 0d 00 90 11 00    	mov    0x119000,%ecx
  1007a9:	b8 44 cc 12 00       	mov    $0x12cc44,%eax
  1007ae:	85 c9                	test   %ecx,%ecx
  1007b0:	78 22                	js     1007d4 <multi_thread_sem_take+0x4a>
  1007b2:	e8 3f fb ff ff       	call   1002f6 <k_sem_count_get>
  1007b7:	68 55 0f 11 00       	push   $0x110f55
  1007bc:	68 e8 06 11 00       	push   $0x1106e8
  1007c1:	39 c8                	cmp    %ecx,%eax
  1007c3:	68 9a 00 00 00       	push   $0x9a
  1007c8:	68 60 0e 11 00       	push   $0x110e60
  1007cd:	68 d9 0e 11 00       	push   $0x110ed9
  1007d2:	eb 20                	jmp    1007f4 <multi_thread_sem_take+0x6a>
  1007d4:	e8 1d fb ff ff       	call   1002f6 <k_sem_count_get>
  1007d9:	68 6a 0f 11 00       	push   $0x110f6a
  1007de:	68 e8 06 11 00       	push   $0x1106e8
  1007e3:	85 c0                	test   %eax,%eax
  1007e5:	68 9c 00 00 00       	push   $0x9c
  1007ea:	68 60 0e 11 00       	push   $0x110e60
  1007ef:	68 7f 0f 11 00       	push   $0x110f7f
  1007f4:	0f 94 c0             	sete   %al
  1007f7:	0f b6 c0             	movzbl %al,%eax
  1007fa:	50                   	push   %eax
  1007fb:	e8 39 fd ff ff       	call   100539 <z_zassert.constprop.0>
  100800:	83 c4 18             	add    $0x18,%esp
  100803:	b8 5c cc 12 00       	mov    $0x12cc5c,%eax
  100808:	c9                   	leave
  100809:	e9 01 fb ff ff       	jmp    10030f <k_sem_give>

0010080e <_kernel_sys_sem_test_multiple_thread_sem_usage_wrapper>:
  10080e:	55                   	push   %ebp
  10080f:	b8 74 cc 12 00       	mov    $0x12cc74,%eax
  100814:	89 e5                	mov    %esp,%ebp
  100816:	56                   	push   %esi
  100817:	e8 18 fe ff ff       	call   100634 <k_sem_init.constprop.0.isra.0>
  10081c:	b8 5c cc 12 00       	mov    $0x12cc5c,%eax
  100821:	e8 0e fe ff ff       	call   100634 <k_sem_init.constprop.0.isra.0>
  100826:	8c c8                	mov    %cs,%eax
  100828:	83 f8 2b             	cmp    $0x2b,%eax
  10082b:	75 0e                	jne    10083b <_kernel_sys_sem_test_multiple_thread_sem_usage_wrapper+0x2d>
  10082d:	be 3d 00 00 00       	mov    $0x3d,%esi
  100832:	b8 74 cc 12 00       	mov    $0x12cc74,%eax
  100837:	cd 80                	int    $0x80
  100839:	eb 0b                	jmp    100846 <_kernel_sys_sem_test_multiple_thread_sem_usage_wrapper+0x38>
  10083b:	68 74 cc 12 00       	push   $0x12cc74
  100840:	e8 b5 74 00 00       	call   107cfa <z_impl_k_sem_reset>
  100845:	5a                   	pop    %edx
  100846:	6a 00                	push   $0x0
  100848:	b9 2f 03 10 00       	mov    $0x10032f,%ecx
  10084d:	6a 00                	push   $0x0
  10084f:	ba 00 b0 14 00       	mov    $0x14b000,%edx
  100854:	6a 05                	push   $0x5
  100856:	b8 20 43 12 00       	mov    $0x124320,%eax
  10085b:	e8 30 fd ff ff       	call   100590 <k_thread_create.constprop.0.isra.0>
  100860:	83 c4 0c             	add    $0xc,%esp
  100863:	83 ca ff             	or     $0xffffffff,%edx
  100866:	b8 74 cc 12 00       	mov    $0x12cc74,%eax
  10086b:	89 d1                	mov    %edx,%ecx
  10086d:	e8 ef fd ff ff       	call   100661 <k_sem_take.constprop.0.isra.0>
  100872:	68 ac 0f 11 00       	push   $0x110fac
  100877:	68 40 01 11 00       	push   $0x110140
  10087c:	31 c0                	xor    %eax,%eax
  10087e:	6a 5a                	push   $0x5a
  100880:	68 60 0e 11 00       	push   $0x110e60
  100885:	68 b7 0f 11 00       	push   $0x110fb7
  10088a:	83 3d 04 90 11 00 01 	cmpl   $0x1,0x119004
  100891:	0f 94 c0             	sete   %al
  100894:	50                   	push   %eax
  100895:	e8 9f fc ff ff       	call   100539 <z_zassert.constprop.0>
  10089a:	83 c4 18             	add    $0x18,%esp
  10089d:	b8 74 cc 12 00       	mov    $0x12cc74,%eax
  1008a2:	e8 4f fa ff ff       	call   1002f6 <k_sem_count_get>
  1008a7:	68 cd 0f 11 00       	push   $0x110fcd
  1008ac:	85 c0                	test   %eax,%eax
  1008ae:	68 40 01 11 00       	push   $0x110140
  1008b3:	6a 5b                	push   $0x5b
  1008b5:	68 60 0e 11 00       	push   $0x110e60
  1008ba:	0f 94 c0             	sete   %al
  1008bd:	68 dd 0f 11 00       	push   $0x110fdd
  1008c2:	0f b6 c0             	movzbl %al,%eax
  1008c5:	50                   	push   %eax
  1008c6:	e8 6e fc ff ff       	call   100539 <z_zassert.constprop.0>
  1008cb:	83 c4 18             	add    $0x18,%esp
  1008ce:	8c c8                	mov    %cs,%eax
  1008d0:	83 f8 2b             	cmp    $0x2b,%eax
  1008d3:	75 0e                	jne    1008e3 <_kernel_sys_sem_test_multiple_thread_sem_usage_wrapper+0xd5>
  1008d5:	be 3d 00 00 00       	mov    $0x3d,%esi
  1008da:	b8 74 cc 12 00       	mov    $0x12cc74,%eax
  1008df:	cd 80                	int    $0x80
  1008e1:	eb 0b                	jmp    1008ee <_kernel_sys_sem_test_multiple_thread_sem_usage_wrapper+0xe0>
  1008e3:	68 74 cc 12 00       	push   $0x12cc74
  1008e8:	e8 0d 74 00 00       	call   107cfa <z_impl_k_sem_reset>
  1008ed:	58                   	pop    %eax
  1008ee:	6a 00                	push   $0x0
  1008f0:	b9 b7 06 10 00       	mov    $0x1006b7,%ecx
  1008f5:	6a 00                	push   $0x0
  1008f7:	ba 00 10 14 00       	mov    $0x141000,%edx
  1008fc:	6a 08                	push   $0x8
  1008fe:	b8 00 40 12 00       	mov    $0x124000,%eax
  100903:	e8 88 fc ff ff       	call   100590 <k_thread_create.constprop.0.isra.0>
  100908:	83 c4 0c             	add    $0xc,%esp
  10090b:	6a 00                	push   $0x0
  10090d:	b9 90 06 10 00       	mov    $0x100690,%ecx
  100912:	6a 00                	push   $0x0
  100914:	ba 00 30 14 00       	mov    $0x143000,%edx
  100919:	6a 02                	push   $0x2
  10091b:	b8 a0 40 12 00       	mov    $0x1240a0,%eax
  100920:	e8 6b fc ff ff       	call   100590 <k_thread_create.constprop.0.isra.0>
  100925:	83 c4 0c             	add    $0xc,%esp
  100928:	31 d2                	xor    %edx,%edx
  10092a:	b8 05 00 00 00       	mov    $0x5,%eax
  10092f:	e8 34 fe ff ff       	call   100768 <k_sleep.isra.0>
  100934:	b8 74 cc 12 00       	mov    $0x12cc74,%eax
  100939:	e8 d1 f9 ff ff       	call   10030f <k_sem_give>
  10093e:	83 ca ff             	or     $0xffffffff,%edx
  100941:	89 d1                	mov    %edx,%ecx
  100943:	b8 5c cc 12 00       	mov    $0x12cc5c,%eax
  100948:	e8 14 fd ff ff       	call   100661 <k_sem_take.constprop.0.isra.0>
  10094d:	68 0a 10 11 00       	push   $0x11100a
  100952:	68 40 01 11 00       	push   $0x110140
  100957:	31 c0                	xor    %eax,%eax
  100959:	6a 6e                	push   $0x6e
  10095b:	68 60 0e 11 00       	push   $0x110e60
  100960:	68 20 10 11 00       	push   $0x111020
  100965:	83 3d 04 90 11 00 02 	cmpl   $0x2,0x119004
  10096c:	0f 94 c0             	sete   %al
  10096f:	50                   	push   %eax
  100970:	e8 c4 fb ff ff       	call   100539 <z_zassert.constprop.0>
  100975:	83 c4 18             	add    $0x18,%esp
  100978:	b8 74 cc 12 00       	mov    $0x12cc74,%eax
  10097d:	e8 8d f9 ff ff       	call   10030f <k_sem_give>
  100982:	83 ca ff             	or     $0xffffffff,%edx
  100985:	89 d1                	mov    %edx,%ecx
  100987:	b8 5c cc 12 00       	mov    $0x12cc5c,%eax
  10098c:	e8 d0 fc ff ff       	call   100661 <k_sem_take.constprop.0.isra.0>
  100991:	68 3e 10 11 00       	push   $0x11103e
  100996:	68 40 01 11 00       	push   $0x110140
  10099b:	31 c0                	xor    %eax,%eax
  10099d:	6a 72                	push   $0x72
  10099f:	68 60 0e 11 00       	push   $0x110e60
  1009a4:	68 53 10 11 00       	push   $0x111053
  1009a9:	83 3d 04 90 11 00 08 	cmpl   $0x8,0x119004
  1009b0:	0f 94 c0             	sete   %al
  1009b3:	50                   	push   %eax
  1009b4:	e8 80 fb ff ff       	call   100539 <z_zassert.constprop.0>
  1009b9:	83 ca ff             	or     $0xffffffff,%edx
  1009bc:	83 c4 18             	add    $0x18,%esp
  1009bf:	89 d1                	mov    %edx,%ecx
  1009c1:	b8 20 43 12 00       	mov    $0x124320,%eax
  1009c6:	e8 3a fc ff ff       	call   100605 <k_thread_join.constprop.0.isra.0>
  1009cb:	83 ca ff             	or     $0xffffffff,%edx
  1009ce:	89 d1                	mov    %edx,%ecx
  1009d0:	b8 00 40 12 00       	mov    $0x124000,%eax
  1009d5:	e8 2b fc ff ff       	call   100605 <k_thread_join.constprop.0.isra.0>
  1009da:	83 ca ff             	or     $0xffffffff,%edx
  1009dd:	89 d1                	mov    %edx,%ecx
  1009df:	b8 a0 40 12 00       	mov    $0x1240a0,%eax
  1009e4:	e8 1c fc ff ff       	call   100605 <k_thread_join.constprop.0.isra.0>
  1009e9:	6a 00                	push   $0x0
  1009eb:	6a 00                	push   $0x0
  1009ed:	b9 05 05 10 00       	mov    $0x100505,%ecx
  1009f2:	6a 05                	push   $0x5
  1009f4:	ba 00 d0 14 00       	mov    $0x14d000,%edx
  1009f9:	b8 c0 43 12 00       	mov    $0x1243c0,%eax
  1009fe:	e8 8d fb ff ff       	call   100590 <k_thread_create.constprop.0.isra.0>
  100a03:	83 c4 0c             	add    $0xc,%esp
  100a06:	b8 02 00 00 00       	mov    $0x2,%eax
  100a0b:	31 d2                	xor    %edx,%edx
  100a0d:	e8 56 fd ff ff       	call   100768 <k_sleep.isra.0>
  100a12:	83 ca ff             	or     $0xffffffff,%edx
  100a15:	8b 75 fc             	mov    -0x4(%ebp),%esi
  100a18:	89 d1                	mov    %edx,%ecx
  100a1a:	b8 c0 43 12 00       	mov    $0x1243c0,%eax
  100a1f:	c9                   	leave
  100a20:	e9 e0 fb ff ff       	jmp    100605 <k_thread_join.constprop.0.isra.0>

00100a25 <_kernel_sys_sem_test_multi_thread_sem_limit_wrapper>:
  100a25:	55                   	push   %ebp
  100a26:	b8 44 cc 12 00       	mov    $0x12cc44,%eax
  100a2b:	89 e5                	mov    %esp,%ebp
  100a2d:	56                   	push   %esi
  100a2e:	53                   	push   %ebx
  100a2f:	e8 00 fc ff ff       	call   100634 <k_sem_init.constprop.0.isra.0>
  100a34:	b8 5c cc 12 00       	mov    $0x12cc5c,%eax
  100a39:	e8 f6 fb ff ff       	call   100634 <k_sem_init.constprop.0.isra.0>
  100a3e:	31 c0                	xor    %eax,%eax
  100a40:	87 05 00 90 11 00    	xchg   %eax,0x119000
  100a46:	bb 01 00 00 00       	mov    $0x1,%ebx
  100a4b:	69 c3 a0 00 00 00    	imul   $0xa0,%ebx,%eax
  100a51:	6a 00                	push   $0x0
  100a53:	89 da                	mov    %ebx,%edx
  100a55:	6a 00                	push   $0x0
  100a57:	05 20 43 12 00       	add    $0x124320,%eax
  100a5c:	c1 e2 0d             	shl    $0xd,%edx
  100a5f:	53                   	push   %ebx
  100a60:	81 c2 00 b0 14 00    	add    $0x14b000,%edx
  100a66:	b9 de 06 10 00       	mov    $0x1006de,%ecx
  100a6b:	43                   	inc    %ebx
  100a6c:	e8 1f fb ff ff       	call   100590 <k_thread_create.constprop.0.isra.0>
  100a71:	83 c4 0c             	add    $0xc,%esp
  100a74:	83 fb 05             	cmp    $0x5,%ebx
  100a77:	75 d2                	jne    100a4b <_kernel_sys_sem_test_multi_thread_sem_limit_wrapper+0x26>
  100a79:	b8 05 00 00 00       	mov    $0x5,%eax
  100a7e:	31 d2                	xor    %edx,%edx
  100a80:	e8 e3 fc ff ff       	call   100768 <k_sleep.isra.0>
  100a85:	b8 03 00 00 00       	mov    $0x3,%eax
  100a8a:	87 05 00 90 11 00    	xchg   %eax,0x119000
  100a90:	bb 01 00 00 00       	mov    $0x1,%ebx
  100a95:	69 c3 a0 00 00 00    	imul   $0xa0,%ebx,%eax
  100a9b:	6a 00                	push   $0x0
  100a9d:	89 da                	mov    %ebx,%edx
  100a9f:	6a 00                	push   $0x0
  100aa1:	05 00 40 12 00       	add    $0x124000,%eax
  100aa6:	c1 e2 0d             	shl    $0xd,%edx
  100aa9:	6a 05                	push   $0x5
  100aab:	81 c2 00 10 14 00    	add    $0x141000,%edx
  100ab1:	b9 8a 07 10 00       	mov    $0x10078a,%ecx
  100ab6:	43                   	inc    %ebx
  100ab7:	e8 d4 fa ff ff       	call   100590 <k_thread_create.constprop.0.isra.0>
  100abc:	83 c4 0c             	add    $0xc,%esp
  100abf:	83 fb 05             	cmp    $0x5,%ebx
  100ac2:	75 d1                	jne    100a95 <_kernel_sys_sem_test_multi_thread_sem_limit_wrapper+0x70>
  100ac4:	b8 05 00 00 00       	mov    $0x5,%eax
  100ac9:	31 d2                	xor    %edx,%edx
  100acb:	e8 98 fc ff ff       	call   100768 <k_sleep.isra.0>
  100ad0:	bb a0 00 00 00       	mov    $0xa0,%ebx
  100ad5:	8d 83 20 43 12 00    	lea    0x124320(%ebx),%eax
  100adb:	8c ca                	mov    %cs,%edx
  100add:	83 fa 2b             	cmp    $0x2b,%edx
  100ae0:	75 09                	jne    100aeb <_kernel_sys_sem_test_multi_thread_sem_limit_wrapper+0xc6>
  100ae2:	be 44 00 00 00       	mov    $0x44,%esi
  100ae7:	cd 80                	int    $0x80
  100ae9:	eb 07                	jmp    100af2 <_kernel_sys_sem_test_multi_thread_sem_limit_wrapper+0xcd>
  100aeb:	50                   	push   %eax
  100aec:	e8 63 9d 00 00       	call   10a854 <z_impl_k_thread_abort>
  100af1:	5a                   	pop    %edx
  100af2:	8d 83 00 40 12 00    	lea    0x124000(%ebx),%eax
  100af8:	8c ca                	mov    %cs,%edx
  100afa:	83 fa 2b             	cmp    $0x2b,%edx
  100afd:	75 09                	jne    100b08 <_kernel_sys_sem_test_multi_thread_sem_limit_wrapper+0xe3>
  100aff:	be 44 00 00 00       	mov    $0x44,%esi
  100b04:	cd 80                	int    $0x80
  100b06:	eb 07                	jmp    100b0f <_kernel_sys_sem_test_multi_thread_sem_limit_wrapper+0xea>
  100b08:	50                   	push   %eax
  100b09:	e8 46 9d 00 00       	call   10a854 <z_impl_k_thread_abort>
  100b0e:	58                   	pop    %eax
  100b0f:	81 c3 a0 00 00 00    	add    $0xa0,%ebx
  100b15:	81 fb 20 03 00 00    	cmp    $0x320,%ebx
  100b1b:	75 b8                	jne    100ad5 <_kernel_sys_sem_test_multi_thread_sem_limit_wrapper+0xb0>
  100b1d:	8d 65 f8             	lea    -0x8(%ebp),%esp
  100b20:	5b                   	pop    %ebx
  100b21:	5e                   	pop    %esi
  100b22:	5d                   	pop    %ebp
  100b23:	c3                   	ret

00100b24 <chunk_field>:
  100b24:	81 78 08 ff 7f 00 00 	cmpl   $0x7fff,0x8(%eax)
  100b2b:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  100b2e:	76 04                	jbe    100b34 <chunk_field+0x10>
  100b30:	8b 04 8a             	mov    (%edx,%ecx,4),%eax
  100b33:	c3                   	ret
  100b34:	0f b7 04 4a          	movzwl (%edx,%ecx,2),%eax
  100b38:	c3                   	ret

00100b39 <chunk_set>:
  100b39:	55                   	push   %ebp
  100b3a:	8d 14 d0             	lea    (%eax,%edx,8),%edx
  100b3d:	89 e5                	mov    %esp,%ebp
  100b3f:	53                   	push   %ebx
  100b40:	81 78 08 ff 7f 00 00 	cmpl   $0x7fff,0x8(%eax)
  100b47:	8b 5d 08             	mov    0x8(%ebp),%ebx
  100b4a:	76 05                	jbe    100b51 <chunk_set+0x18>
  100b4c:	89 1c 8a             	mov    %ebx,(%edx,%ecx,4)
  100b4f:	eb 04                	jmp    100b55 <chunk_set+0x1c>
  100b51:	66 89 1c 4a          	mov    %bx,(%edx,%ecx,2)
  100b55:	5b                   	pop    %ebx
  100b56:	5d                   	pop    %ebp
  100b57:	c3                   	ret

00100b58 <chunk_size>:
  100b58:	55                   	push   %ebp
  100b59:	b9 01 00 00 00       	mov    $0x1,%ecx
  100b5e:	89 e5                	mov    %esp,%ebp
  100b60:	e8 bf ff ff ff       	call   100b24 <chunk_field>
  100b65:	5d                   	pop    %ebp
  100b66:	d1 e8                	shr    $1,%eax
  100b68:	c3                   	ret

00100b69 <set_chunk_used>:
  100b69:	55                   	push   %ebp
  100b6a:	89 e5                	mov    %esp,%ebp
  100b6c:	53                   	push   %ebx
  100b6d:	89 c3                	mov    %eax,%ebx
  100b6f:	8d 04 d0             	lea    (%eax,%edx,8),%eax
  100b72:	81 7b 08 ff 7f 00 00 	cmpl   $0x7fff,0x8(%ebx)
  100b79:	76 14                	jbe    100b8f <set_chunk_used+0x26>
  100b7b:	8b 50 04             	mov    0x4(%eax),%edx
  100b7e:	84 c9                	test   %cl,%cl
  100b80:	74 05                	je     100b87 <set_chunk_used+0x1e>
  100b82:	83 ca 01             	or     $0x1,%edx
  100b85:	eb 03                	jmp    100b8a <set_chunk_used+0x21>
  100b87:	83 e2 fe             	and    $0xfffffffe,%edx
  100b8a:	89 50 04             	mov    %edx,0x4(%eax)
  100b8d:	eb 14                	jmp    100ba3 <set_chunk_used+0x3a>
  100b8f:	66 8b 50 02          	mov    0x2(%eax),%dx
  100b93:	84 c9                	test   %cl,%cl
  100b95:	74 05                	je     100b9c <set_chunk_used+0x33>
  100b97:	83 ca 01             	or     $0x1,%edx
  100b9a:	eb 03                	jmp    100b9f <set_chunk_used+0x36>
  100b9c:	83 e2 fe             	and    $0xfffffffe,%edx
  100b9f:	66 89 50 02          	mov    %dx,0x2(%eax)
  100ba3:	5b                   	pop    %ebx
  100ba4:	5d                   	pop    %ebp
  100ba5:	c3                   	ret

00100ba6 <set_chunk_size>:
  100ba6:	55                   	push   %ebp
  100ba7:	01 c9                	add    %ecx,%ecx
  100ba9:	89 e5                	mov    %esp,%ebp
  100bab:	51                   	push   %ecx
  100bac:	b9 01 00 00 00       	mov    $0x1,%ecx
  100bb1:	e8 83 ff ff ff       	call   100b39 <chunk_set>
  100bb6:	58                   	pop    %eax
  100bb7:	c9                   	leave
  100bb8:	c3                   	ret

00100bb9 <mem_to_chunkid>:
  100bb9:	89 c1                	mov    %eax,%ecx
  100bbb:	89 d0                	mov    %edx,%eax
  100bbd:	81 79 08 00 80 00 00 	cmpl   $0x8000,0x8(%ecx)
  100bc4:	19 d2                	sbb    %edx,%edx
  100bc6:	83 e2 fc             	and    $0xfffffffc,%edx
  100bc9:	83 c2 08             	add    $0x8,%edx
  100bcc:	29 d0                	sub    %edx,%eax
  100bce:	29 c8                	sub    %ecx,%eax
  100bd0:	c1 e8 03             	shr    $0x3,%eax
  100bd3:	c3                   	ret

00100bd4 <bytes_to_chunksz.isra.0>:
  100bd4:	3d 00 80 00 00       	cmp    $0x8000,%eax
  100bd9:	19 c0                	sbb    %eax,%eax
  100bdb:	83 e0 fc             	and    $0xfffffffc,%eax
  100bde:	8d 44 10 0f          	lea    0xf(%eax,%edx,1),%eax
  100be2:	c1 e8 03             	shr    $0x3,%eax
  100be5:	c3                   	ret

00100be6 <bucket_idx.isra.0>:
  100be6:	55                   	push   %ebp
  100be7:	89 d1                	mov    %edx,%ecx
  100be9:	89 e5                	mov    %esp,%ebp
  100beb:	ba 01 00 00 00       	mov    $0x1,%edx
  100bf0:	e8 df ff ff ff       	call   100bd4 <bytes_to_chunksz.isra.0>
  100bf5:	41                   	inc    %ecx
  100bf6:	29 c1                	sub    %eax,%ecx
  100bf8:	5d                   	pop    %ebp
  100bf9:	0f bd c1             	bsr    %ecx,%eax
  100bfc:	c3                   	ret

00100bfd <free_list_remove_bidx>:
  100bfd:	55                   	push   %ebp
  100bfe:	89 e5                	mov    %esp,%ebp
  100c00:	57                   	push   %edi
  100c01:	56                   	push   %esi
  100c02:	53                   	push   %ebx
  100c03:	89 c3                	mov    %eax,%ebx
  100c05:	83 ec 08             	sub    $0x8,%esp
  100c08:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100c0b:	b9 03 00 00 00       	mov    $0x3,%ecx
  100c10:	89 55 ec             	mov    %edx,-0x14(%ebp)
  100c13:	e8 0c ff ff ff       	call   100b24 <chunk_field>
  100c18:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100c1b:	89 c6                	mov    %eax,%esi
  100c1d:	39 c2                	cmp    %eax,%edx
  100c1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100c22:	8d 78 04             	lea    0x4(%eax),%edi
  100c25:	75 14                	jne    100c3b <free_list_remove_bidx+0x3e>
  100c27:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  100c2c:	8a 4d f0             	mov    -0x10(%ebp),%cl
  100c2f:	d3 c0                	rol    %cl,%eax
  100c31:	31 d2                	xor    %edx,%edx
  100c33:	21 43 0c             	and    %eax,0xc(%ebx)
  100c36:	89 14 bb             	mov    %edx,(%ebx,%edi,4)
  100c39:	eb 34                	jmp    100c6f <free_list_remove_bidx+0x72>
  100c3b:	b9 02 00 00 00       	mov    $0x2,%ecx
  100c40:	89 d8                	mov    %ebx,%eax
  100c42:	e8 dd fe ff ff       	call   100b24 <chunk_field>
  100c47:	89 34 bb             	mov    %esi,(%ebx,%edi,4)
  100c4a:	89 c2                	mov    %eax,%edx
  100c4c:	56                   	push   %esi
  100c4d:	b9 03 00 00 00       	mov    $0x3,%ecx
  100c52:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100c55:	89 d8                	mov    %ebx,%eax
  100c57:	e8 dd fe ff ff       	call   100b39 <chunk_set>
  100c5c:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100c5f:	89 14 24             	mov    %edx,(%esp)
  100c62:	b9 02 00 00 00       	mov    $0x2,%ecx
  100c67:	89 f2                	mov    %esi,%edx
  100c69:	e8 cb fe ff ff       	call   100b39 <chunk_set>
  100c6e:	58                   	pop    %eax
  100c6f:	8d 65 f4             	lea    -0xc(%ebp),%esp
  100c72:	5b                   	pop    %ebx
  100c73:	5e                   	pop    %esi
  100c74:	5f                   	pop    %edi
  100c75:	5d                   	pop    %ebp
  100c76:	c3                   	ret

00100c77 <free_list_remove>:
  100c77:	55                   	push   %ebp
  100c78:	89 e5                	mov    %esp,%ebp
  100c7a:	57                   	push   %edi
  100c7b:	56                   	push   %esi
  100c7c:	89 d6                	mov    %edx,%esi
  100c7e:	53                   	push   %ebx
  100c7f:	89 c3                	mov    %eax,%ebx
  100c81:	8b 78 08             	mov    0x8(%eax),%edi
  100c84:	e8 cf fe ff ff       	call   100b58 <chunk_size>
  100c89:	81 ff ff 7f 00 00    	cmp    $0x7fff,%edi
  100c8f:	89 c2                	mov    %eax,%edx
  100c91:	76 05                	jbe    100c98 <free_list_remove+0x21>
  100c93:	83 f8 01             	cmp    $0x1,%eax
  100c96:	74 16                	je     100cae <free_list_remove+0x37>
  100c98:	89 f8                	mov    %edi,%eax
  100c9a:	e8 47 ff ff ff       	call   100be6 <bucket_idx.isra.0>
  100c9f:	89 f2                	mov    %esi,%edx
  100ca1:	89 c1                	mov    %eax,%ecx
  100ca3:	89 d8                	mov    %ebx,%eax
  100ca5:	5b                   	pop    %ebx
  100ca6:	5e                   	pop    %esi
  100ca7:	5f                   	pop    %edi
  100ca8:	5d                   	pop    %ebp
  100ca9:	e9 4f ff ff ff       	jmp    100bfd <free_list_remove_bidx>
  100cae:	5b                   	pop    %ebx
  100caf:	5e                   	pop    %esi
  100cb0:	5f                   	pop    %edi
  100cb1:	5d                   	pop    %ebp
  100cb2:	c3                   	ret

00100cb3 <alloc_chunk>:
  100cb3:	55                   	push   %ebp
  100cb4:	89 e5                	mov    %esp,%ebp
  100cb6:	57                   	push   %edi
  100cb7:	56                   	push   %esi
  100cb8:	89 c6                	mov    %eax,%esi
  100cba:	53                   	push   %ebx
  100cbb:	83 ec 10             	sub    $0x10,%esp
  100cbe:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  100cc1:	8b 40 08             	mov    0x8(%eax),%eax
  100cc4:	e8 1d ff ff ff       	call   100be6 <bucket_idx.isra.0>
  100cc9:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100ccc:	8d 3c 86             	lea    (%esi,%eax,4),%edi
  100ccf:	8b 47 10             	mov    0x10(%edi),%eax
  100cd2:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100cd5:	85 c0                	test   %eax,%eax
  100cd7:	74 3e                	je     100d17 <alloc_chunk+0x64>
  100cd9:	c7 45 e8 03 00 00 00 	movl   $0x3,-0x18(%ebp)
  100ce0:	8b 5f 10             	mov    0x10(%edi),%ebx
  100ce3:	89 f0                	mov    %esi,%eax
  100ce5:	89 da                	mov    %ebx,%edx
  100ce7:	e8 6c fe ff ff       	call   100b58 <chunk_size>
  100cec:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  100cef:	39 d0                	cmp    %edx,%eax
  100cf1:	72 05                	jb     100cf8 <alloc_chunk+0x45>
  100cf3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100cf6:	eb 34                	jmp    100d2c <alloc_chunk+0x79>
  100cf8:	b9 03 00 00 00       	mov    $0x3,%ecx
  100cfd:	89 da                	mov    %ebx,%edx
  100cff:	89 f0                	mov    %esi,%eax
  100d01:	e8 1e fe ff ff       	call   100b24 <chunk_field>
  100d06:	ff 4d e8             	decl   -0x18(%ebp)
  100d09:	89 47 10             	mov    %eax,0x10(%edi)
  100d0c:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  100d0f:	74 06                	je     100d17 <alloc_chunk+0x64>
  100d11:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
  100d15:	75 c9                	jne    100ce0 <alloc_chunk+0x2d>
  100d17:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100d1a:	83 cb ff             	or     $0xffffffff,%ebx
  100d1d:	41                   	inc    %ecx
  100d1e:	d3 e3                	shl    %cl,%ebx
  100d20:	23 5e 0c             	and    0xc(%esi),%ebx
  100d23:	74 10                	je     100d35 <alloc_chunk+0x82>
  100d25:	0f bc cb             	bsf    %ebx,%ecx
  100d28:	8b 5c 8e 10          	mov    0x10(%esi,%ecx,4),%ebx
  100d2c:	89 da                	mov    %ebx,%edx
  100d2e:	89 f0                	mov    %esi,%eax
  100d30:	e8 c8 fe ff ff       	call   100bfd <free_list_remove_bidx>
  100d35:	83 c4 10             	add    $0x10,%esp
  100d38:	89 d8                	mov    %ebx,%eax
  100d3a:	5b                   	pop    %ebx
  100d3b:	5e                   	pop    %esi
  100d3c:	5f                   	pop    %edi
  100d3d:	5d                   	pop    %ebp
  100d3e:	c3                   	ret

00100d3f <split_chunks>:
  100d3f:	55                   	push   %ebp
  100d40:	89 e5                	mov    %esp,%ebp
  100d42:	57                   	push   %edi
  100d43:	56                   	push   %esi
  100d44:	53                   	push   %ebx
  100d45:	89 cb                	mov    %ecx,%ebx
  100d47:	83 ec 08             	sub    $0x8,%esp
  100d4a:	89 55 ec             	mov    %edx,-0x14(%ebp)
  100d4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100d50:	e8 03 fe ff ff       	call   100b58 <chunk_size>
  100d55:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100d58:	89 df                	mov    %ebx,%edi
  100d5a:	89 d6                	mov    %edx,%esi
  100d5c:	29 d7                	sub    %edx,%edi
  100d5e:	29 de                	sub    %ebx,%esi
  100d60:	89 f9                	mov    %edi,%ecx
  100d62:	01 c6                	add    %eax,%esi
  100d64:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100d67:	e8 3a fe ff ff       	call   100ba6 <set_chunk_size>
  100d6c:	89 f1                	mov    %esi,%ecx
  100d6e:	89 da                	mov    %ebx,%edx
  100d70:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100d73:	e8 2e fe ff ff       	call   100ba6 <set_chunk_size>
  100d78:	57                   	push   %edi
  100d79:	31 c9                	xor    %ecx,%ecx
  100d7b:	89 da                	mov    %ebx,%edx
  100d7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100d80:	e8 b4 fd ff ff       	call   100b39 <chunk_set>
  100d85:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100d88:	89 da                	mov    %ebx,%edx
  100d8a:	5f                   	pop    %edi
  100d8b:	e8 c8 fd ff ff       	call   100b58 <chunk_size>
  100d90:	56                   	push   %esi
  100d91:	31 c9                	xor    %ecx,%ecx
  100d93:	8d 14 03             	lea    (%ebx,%eax,1),%edx
  100d96:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100d99:	e8 9b fd ff ff       	call   100b39 <chunk_set>
  100d9e:	58                   	pop    %eax
  100d9f:	8d 65 f4             	lea    -0xc(%ebp),%esp
  100da2:	5b                   	pop    %ebx
  100da3:	5e                   	pop    %esi
  100da4:	5f                   	pop    %edi
  100da5:	5d                   	pop    %ebp
  100da6:	c3                   	ret

00100da7 <merge_chunks>:
  100da7:	55                   	push   %ebp
  100da8:	89 e5                	mov    %esp,%ebp
  100daa:	57                   	push   %edi
  100dab:	56                   	push   %esi
  100dac:	89 d7                	mov    %edx,%edi
  100dae:	53                   	push   %ebx
  100daf:	53                   	push   %ebx
  100db0:	89 cb                	mov    %ecx,%ebx
  100db2:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100db5:	e8 9e fd ff ff       	call   100b58 <chunk_size>
  100dba:	89 da                	mov    %ebx,%edx
  100dbc:	89 c6                	mov    %eax,%esi
  100dbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100dc1:	e8 92 fd ff ff       	call   100b58 <chunk_size>
  100dc6:	89 fa                	mov    %edi,%edx
  100dc8:	01 c6                	add    %eax,%esi
  100dca:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100dcd:	89 f1                	mov    %esi,%ecx
  100dcf:	e8 d2 fd ff ff       	call   100ba6 <set_chunk_size>
  100dd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100dd7:	89 da                	mov    %ebx,%edx
  100dd9:	e8 7a fd ff ff       	call   100b58 <chunk_size>
  100dde:	56                   	push   %esi
  100ddf:	31 c9                	xor    %ecx,%ecx
  100de1:	8d 14 03             	lea    (%ebx,%eax,1),%edx
  100de4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100de7:	e8 4d fd ff ff       	call   100b39 <chunk_set>
  100dec:	5e                   	pop    %esi
  100ded:	8d 65 f4             	lea    -0xc(%ebp),%esp
  100df0:	5b                   	pop    %ebx
  100df1:	5e                   	pop    %esi
  100df2:	5f                   	pop    %edi
  100df3:	5d                   	pop    %ebp
  100df4:	c3                   	ret

00100df5 <free_list_add>:
  100df5:	55                   	push   %ebp
  100df6:	89 e5                	mov    %esp,%ebp
  100df8:	57                   	push   %edi
  100df9:	56                   	push   %esi
  100dfa:	89 d6                	mov    %edx,%esi
  100dfc:	53                   	push   %ebx
  100dfd:	89 c3                	mov    %eax,%ebx
  100dff:	51                   	push   %ecx
  100e00:	8b 78 08             	mov    0x8(%eax),%edi
  100e03:	e8 50 fd ff ff       	call   100b58 <chunk_size>
  100e08:	81 ff ff 7f 00 00    	cmp    $0x7fff,%edi
  100e0e:	89 c2                	mov    %eax,%edx
  100e10:	76 09                	jbe    100e1b <free_list_add+0x26>
  100e12:	83 f8 01             	cmp    $0x1,%eax
  100e15:	0f 84 80 00 00 00    	je     100e9b <free_list_add+0xa6>
  100e1b:	89 f8                	mov    %edi,%eax
  100e1d:	e8 c4 fd ff ff       	call   100be6 <bucket_idx.isra.0>
  100e22:	89 c1                	mov    %eax,%ecx
  100e24:	8d 40 04             	lea    0x4(%eax),%eax
  100e27:	8b 3c 83             	mov    (%ebx,%eax,4),%edi
  100e2a:	85 ff                	test   %edi,%edi
  100e2c:	75 28                	jne    100e56 <free_list_add+0x61>
  100e2e:	ba 01 00 00 00       	mov    $0x1,%edx
  100e33:	d3 e2                	shl    %cl,%edx
  100e35:	09 53 0c             	or     %edx,0xc(%ebx)
  100e38:	b9 02 00 00 00       	mov    $0x2,%ecx
  100e3d:	89 34 83             	mov    %esi,(%ebx,%eax,4)
  100e40:	89 f2                	mov    %esi,%edx
  100e42:	56                   	push   %esi
  100e43:	89 d8                	mov    %ebx,%eax
  100e45:	e8 ef fc ff ff       	call   100b39 <chunk_set>
  100e4a:	89 34 24             	mov    %esi,(%esp)
  100e4d:	b9 03 00 00 00       	mov    $0x3,%ecx
  100e52:	89 f2                	mov    %esi,%edx
  100e54:	eb 3f                	jmp    100e95 <free_list_add+0xa0>
  100e56:	b9 02 00 00 00       	mov    $0x2,%ecx
  100e5b:	89 fa                	mov    %edi,%edx
  100e5d:	89 d8                	mov    %ebx,%eax
  100e5f:	e8 c0 fc ff ff       	call   100b24 <chunk_field>
  100e64:	89 f2                	mov    %esi,%edx
  100e66:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100e69:	50                   	push   %eax
  100e6a:	89 d8                	mov    %ebx,%eax
  100e6c:	e8 c8 fc ff ff       	call   100b39 <chunk_set>
  100e71:	b9 03 00 00 00       	mov    $0x3,%ecx
  100e76:	89 3c 24             	mov    %edi,(%esp)
  100e79:	89 f2                	mov    %esi,%edx
  100e7b:	e8 b9 fc ff ff       	call   100b39 <chunk_set>
  100e80:	89 34 24             	mov    %esi,(%esp)
  100e83:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100e86:	e8 ae fc ff ff       	call   100b39 <chunk_set>
  100e8b:	89 34 24             	mov    %esi,(%esp)
  100e8e:	b9 02 00 00 00       	mov    $0x2,%ecx
  100e93:	89 fa                	mov    %edi,%edx
  100e95:	e8 9f fc ff ff       	call   100b39 <chunk_set>
  100e9a:	58                   	pop    %eax
  100e9b:	8d 65 f4             	lea    -0xc(%ebp),%esp
  100e9e:	5b                   	pop    %ebx
  100e9f:	5e                   	pop    %esi
  100ea0:	5f                   	pop    %edi
  100ea1:	5d                   	pop    %ebp
  100ea2:	c3                   	ret

00100ea3 <free_chunk>:
  100ea3:	55                   	push   %ebp
  100ea4:	89 e5                	mov    %esp,%ebp
  100ea6:	57                   	push   %edi
  100ea7:	56                   	push   %esi
  100ea8:	89 c6                	mov    %eax,%esi
  100eaa:	53                   	push   %ebx
  100eab:	89 d3                	mov    %edx,%ebx
  100ead:	e8 a6 fc ff ff       	call   100b58 <chunk_size>
  100eb2:	b9 01 00 00 00       	mov    $0x1,%ecx
  100eb7:	8d 3c 03             	lea    (%ebx,%eax,1),%edi
  100eba:	89 f0                	mov    %esi,%eax
  100ebc:	89 fa                	mov    %edi,%edx
  100ebe:	e8 61 fc ff ff       	call   100b24 <chunk_field>
  100ec3:	a8 01                	test   $0x1,%al
  100ec5:	75 1e                	jne    100ee5 <free_chunk+0x42>
  100ec7:	89 fa                	mov    %edi,%edx
  100ec9:	89 f0                	mov    %esi,%eax
  100ecb:	e8 a7 fd ff ff       	call   100c77 <free_list_remove>
  100ed0:	89 da                	mov    %ebx,%edx
  100ed2:	89 f0                	mov    %esi,%eax
  100ed4:	e8 7f fc ff ff       	call   100b58 <chunk_size>
  100ed9:	89 da                	mov    %ebx,%edx
  100edb:	8d 0c 03             	lea    (%ebx,%eax,1),%ecx
  100ede:	89 f0                	mov    %esi,%eax
  100ee0:	e8 c2 fe ff ff       	call   100da7 <merge_chunks>
  100ee5:	31 c9                	xor    %ecx,%ecx
  100ee7:	89 da                	mov    %ebx,%edx
  100ee9:	89 f0                	mov    %esi,%eax
  100eeb:	89 df                	mov    %ebx,%edi
  100eed:	e8 32 fc ff ff       	call   100b24 <chunk_field>
  100ef2:	b9 01 00 00 00       	mov    $0x1,%ecx
  100ef7:	29 c7                	sub    %eax,%edi
  100ef9:	89 f0                	mov    %esi,%eax
  100efb:	89 fa                	mov    %edi,%edx
  100efd:	e8 22 fc ff ff       	call   100b24 <chunk_field>
  100f02:	a8 01                	test   $0x1,%al
  100f04:	75 2e                	jne    100f34 <free_chunk+0x91>
  100f06:	89 fa                	mov    %edi,%edx
  100f08:	89 f0                	mov    %esi,%eax
  100f0a:	e8 68 fd ff ff       	call   100c77 <free_list_remove>
  100f0f:	89 da                	mov    %ebx,%edx
  100f11:	31 c9                	xor    %ecx,%ecx
  100f13:	89 f0                	mov    %esi,%eax
  100f15:	e8 0a fc ff ff       	call   100b24 <chunk_field>
  100f1a:	89 da                	mov    %ebx,%edx
  100f1c:	29 c2                	sub    %eax,%edx
  100f1e:	89 d9                	mov    %ebx,%ecx
  100f20:	89 f0                	mov    %esi,%eax
  100f22:	e8 80 fe ff ff       	call   100da7 <merge_chunks>
  100f27:	89 da                	mov    %ebx,%edx
  100f29:	31 c9                	xor    %ecx,%ecx
  100f2b:	89 f0                	mov    %esi,%eax
  100f2d:	e8 f2 fb ff ff       	call   100b24 <chunk_field>
  100f32:	29 c3                	sub    %eax,%ebx
  100f34:	89 da                	mov    %ebx,%edx
  100f36:	5b                   	pop    %ebx
  100f37:	89 f0                	mov    %esi,%eax
  100f39:	5e                   	pop    %esi
  100f3a:	5f                   	pop    %edi
  100f3b:	5d                   	pop    %ebp
  100f3c:	e9 b4 fe ff ff       	jmp    100df5 <free_list_add>

00100f41 <sys_heap_free>:
  100f41:	55                   	push   %ebp
  100f42:	89 e5                	mov    %esp,%ebp
  100f44:	57                   	push   %edi
  100f45:	56                   	push   %esi
  100f46:	53                   	push   %ebx
  100f47:	50                   	push   %eax
  100f48:	8b 7d 0c             	mov    0xc(%ebp),%edi
  100f4b:	8b 45 08             	mov    0x8(%ebp),%eax
  100f4e:	85 ff                	test   %edi,%edi
  100f50:	0f 84 c7 00 00 00    	je     10101d <sys_heap_free+0xdc>
  100f56:	8b 00                	mov    (%eax),%eax
  100f58:	89 fa                	mov    %edi,%edx
  100f5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100f5d:	e8 57 fc ff ff       	call   100bb9 <mem_to_chunkid>
  100f62:	b9 01 00 00 00       	mov    $0x1,%ecx
  100f67:	89 c2                	mov    %eax,%edx
  100f69:	89 c3                	mov    %eax,%ebx
  100f6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100f6e:	e8 b1 fb ff ff       	call   100b24 <chunk_field>
  100f73:	a8 01                	test   $0x1,%al
  100f75:	75 30                	jne    100fa7 <sys_heap_free+0x66>
  100f77:	68 af 00 00 00       	push   $0xaf
  100f7c:	68 ba 10 11 00       	push   $0x1110ba
  100f81:	68 dd 10 11 00       	push   $0x1110dd
  100f86:	68 ee 10 11 00       	push   $0x1110ee
  100f8b:	e8 4d 06 00 00       	call   1015dd <assert_print>
  100f90:	83 c4 10             	add    $0x10,%esp
  100f93:	57                   	push   %edi
  100f94:	68 0b 11 11 00       	push   $0x11110b
  100f99:	e8 3f 06 00 00       	call   1015dd <assert_print>
  100f9e:	5e                   	pop    %esi
  100f9f:	5f                   	pop    %edi
  100fa0:	68 af 00 00 00       	push   $0xaf
  100fa5:	eb 4d                	jmp    100ff4 <sys_heap_free+0xb3>
  100fa7:	89 da                	mov    %ebx,%edx
  100fa9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100fac:	e8 a7 fb ff ff       	call   100b58 <chunk_size>
  100fb1:	31 c9                	xor    %ecx,%ecx
  100fb3:	8d 34 03             	lea    (%ebx,%eax,1),%esi
  100fb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100fb9:	89 f2                	mov    %esi,%edx
  100fbb:	e8 64 fb ff ff       	call   100b24 <chunk_field>
  100fc0:	29 c6                	sub    %eax,%esi
  100fc2:	39 f3                	cmp    %esi,%ebx
  100fc4:	74 3a                	je     101000 <sys_heap_free+0xbf>
  100fc6:	68 b7 00 00 00       	push   $0xb7
  100fcb:	68 ba 10 11 00       	push   $0x1110ba
  100fd0:	68 43 11 11 00       	push   $0x111143
  100fd5:	68 ee 10 11 00       	push   $0x1110ee
  100fda:	e8 fe 05 00 00       	call   1015dd <assert_print>
  100fdf:	83 c4 10             	add    $0x10,%esp
  100fe2:	57                   	push   %edi
  100fe3:	68 69 11 11 00       	push   $0x111169
  100fe8:	e8 f0 05 00 00       	call   1015dd <assert_print>
  100fed:	59                   	pop    %ecx
  100fee:	5b                   	pop    %ebx
  100fef:	68 b7 00 00 00       	push   $0xb7
  100ff4:	68 ba 10 11 00       	push   $0x1110ba
  100ff9:	e8 d0 05 00 00       	call   1015ce <assert_post_action>
  100ffe:	58                   	pop    %eax
  100fff:	5a                   	pop    %edx
  101000:	89 da                	mov    %ebx,%edx
  101002:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101005:	31 c9                	xor    %ecx,%ecx
  101007:	e8 5d fb ff ff       	call   100b69 <set_chunk_used>
  10100c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10100f:	8d 65 f4             	lea    -0xc(%ebp),%esp
  101012:	89 da                	mov    %ebx,%edx
  101014:	5b                   	pop    %ebx
  101015:	5e                   	pop    %esi
  101016:	5f                   	pop    %edi
  101017:	5d                   	pop    %ebp
  101018:	e9 86 fe ff ff       	jmp    100ea3 <free_chunk>
  10101d:	8d 65 f4             	lea    -0xc(%ebp),%esp
  101020:	5b                   	pop    %ebx
  101021:	5e                   	pop    %esi
  101022:	5f                   	pop    %edi
  101023:	5d                   	pop    %ebp
  101024:	c3                   	ret

00101025 <sys_heap_alloc>:
  101025:	55                   	push   %ebp
  101026:	89 e5                	mov    %esp,%ebp
  101028:	57                   	push   %edi
  101029:	56                   	push   %esi
  10102a:	53                   	push   %ebx
  10102b:	8b 45 08             	mov    0x8(%ebp),%eax
  10102e:	8b 55 0c             	mov    0xc(%ebp),%edx
  101031:	85 d2                	test   %edx,%edx
  101033:	8b 18                	mov    (%eax),%ebx
  101035:	75 04                	jne    10103b <sys_heap_alloc+0x16>
  101037:	31 c0                	xor    %eax,%eax
  101039:	eb 65                	jmp    1010a0 <sys_heap_alloc+0x7b>
  10103b:	89 d1                	mov    %edx,%ecx
  10103d:	8b 43 08             	mov    0x8(%ebx),%eax
  101040:	c1 e9 03             	shr    $0x3,%ecx
  101043:	39 c1                	cmp    %eax,%ecx
  101045:	73 f0                	jae    101037 <sys_heap_alloc+0x12>
  101047:	e8 88 fb ff ff       	call   100bd4 <bytes_to_chunksz.isra.0>
  10104c:	89 c2                	mov    %eax,%edx
  10104e:	89 c7                	mov    %eax,%edi
  101050:	89 d8                	mov    %ebx,%eax
  101052:	e8 5c fc ff ff       	call   100cb3 <alloc_chunk>
  101057:	89 c6                	mov    %eax,%esi
  101059:	85 c0                	test   %eax,%eax
  10105b:	74 da                	je     101037 <sys_heap_alloc+0x12>
  10105d:	89 c2                	mov    %eax,%edx
  10105f:	89 d8                	mov    %ebx,%eax
  101061:	e8 f2 fa ff ff       	call   100b58 <chunk_size>
  101066:	39 c7                	cmp    %eax,%edi
  101068:	73 16                	jae    101080 <sys_heap_alloc+0x5b>
  10106a:	01 f7                	add    %esi,%edi
  10106c:	89 f2                	mov    %esi,%edx
  10106e:	89 d8                	mov    %ebx,%eax
  101070:	89 f9                	mov    %edi,%ecx
  101072:	e8 c8 fc ff ff       	call   100d3f <split_chunks>
  101077:	89 fa                	mov    %edi,%edx
  101079:	89 d8                	mov    %ebx,%eax
  10107b:	e8 75 fd ff ff       	call   100df5 <free_list_add>
  101080:	89 d8                	mov    %ebx,%eax
  101082:	b9 01 00 00 00       	mov    $0x1,%ecx
  101087:	89 f2                	mov    %esi,%edx
  101089:	e8 db fa ff ff       	call   100b69 <set_chunk_used>
  10108e:	81 7b 08 00 80 00 00 	cmpl   $0x8000,0x8(%ebx)
  101095:	19 c0                	sbb    %eax,%eax
  101097:	83 e0 fc             	and    $0xfffffffc,%eax
  10109a:	8d 44 f0 08          	lea    0x8(%eax,%esi,8),%eax
  10109e:	01 d8                	add    %ebx,%eax
  1010a0:	5b                   	pop    %ebx
  1010a1:	5e                   	pop    %esi
  1010a2:	5f                   	pop    %edi
  1010a3:	5d                   	pop    %ebp
  1010a4:	c3                   	ret

001010a5 <sys_heap_aligned_alloc>:
  1010a5:	55                   	push   %ebp
  1010a6:	89 e5                	mov    %esp,%ebp
  1010a8:	57                   	push   %edi
  1010a9:	56                   	push   %esi
  1010aa:	53                   	push   %ebx
  1010ab:	83 ec 08             	sub    $0x8,%esp
  1010ae:	8b 45 10             	mov    0x10(%ebp),%eax
  1010b1:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  1010b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1010b7:	8b 45 08             	mov    0x8(%ebp),%eax
  1010ba:	8b 00                	mov    (%eax),%eax
  1010bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1010bf:	8d 43 ff             	lea    -0x1(%ebx),%eax
  1010c2:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1010c5:	21 d8                	and    %ebx,%eax
  1010c7:	8b 4e 08             	mov    0x8(%esi),%ecx
  1010ca:	74 60                	je     10112c <sys_heap_aligned_alloc+0x87>
  1010cc:	81 f9 00 80 00 00    	cmp    $0x8000,%ecx
  1010d2:	89 df                	mov    %ebx,%edi
  1010d4:	19 d2                	sbb    %edx,%edx
  1010d6:	89 c6                	mov    %eax,%esi
  1010d8:	83 e2 fc             	and    $0xfffffffc,%edx
  1010db:	f7 df                	neg    %edi
  1010dd:	21 df                	and    %ebx,%edi
  1010df:	83 c2 08             	add    $0x8,%edx
  1010e2:	89 f8                	mov    %edi,%eax
  1010e4:	39 fa                	cmp    %edi,%edx
  1010e6:	73 02                	jae    1010ea <sys_heap_aligned_alloc+0x45>
  1010e8:	89 d0                	mov    %edx,%eax
  1010ea:	8d 56 ff             	lea    -0x1(%esi),%edx
  1010ed:	89 f3                	mov    %esi,%ebx
  1010ef:	85 f2                	test   %esi,%edx
  1010f1:	74 5f                	je     101152 <sys_heap_aligned_alloc+0xad>
  1010f3:	68 44 01 00 00       	push   $0x144
  1010f8:	68 ba 10 11 00       	push   $0x1110ba
  1010fd:	68 a5 11 11 00       	push   $0x1111a5
  101102:	68 ee 10 11 00       	push   $0x1110ee
  101107:	e8 d1 04 00 00       	call   1015dd <assert_print>
  10110c:	83 c4 10             	add    $0x10,%esp
  10110f:	68 c0 11 11 00       	push   $0x1111c0
  101114:	e8 c4 04 00 00       	call   1015dd <assert_print>
  101119:	c7 04 24 44 01 00 00 	movl   $0x144,(%esp)
  101120:	68 ba 10 11 00       	push   $0x1110ba
  101125:	e8 a4 04 00 00       	call   1015ce <assert_post_action>
  10112a:	58                   	pop    %eax
  10112b:	5a                   	pop    %edx
  10112c:	81 f9 00 80 00 00    	cmp    $0x8000,%ecx
  101132:	19 c0                	sbb    %eax,%eax
  101134:	31 ff                	xor    %edi,%edi
  101136:	83 e0 fc             	and    $0xfffffffc,%eax
  101139:	83 c0 08             	add    $0x8,%eax
  10113c:	39 d8                	cmp    %ebx,%eax
  10113e:	72 12                	jb     101152 <sys_heap_aligned_alloc+0xad>
  101140:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101143:	89 45 0c             	mov    %eax,0xc(%ebp)
  101146:	8d 65 f4             	lea    -0xc(%ebp),%esp
  101149:	5b                   	pop    %ebx
  10114a:	5e                   	pop    %esi
  10114b:	5f                   	pop    %edi
  10114c:	5d                   	pop    %ebp
  10114d:	e9 d3 fe ff ff       	jmp    101025 <sys_heap_alloc>
  101152:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  101156:	75 07                	jne    10115f <sys_heap_aligned_alloc+0xba>
  101158:	31 db                	xor    %ebx,%ebx
  10115a:	e9 c7 00 00 00       	jmp    101226 <sys_heap_aligned_alloc+0x181>
  10115f:	8b 55 ec             	mov    -0x14(%ebp),%edx
  101162:	c1 ea 03             	shr    $0x3,%edx
  101165:	39 ca                	cmp    %ecx,%edx
  101167:	73 ef                	jae    101158 <sys_heap_aligned_alloc+0xb3>
  101169:	8b 75 ec             	mov    -0x14(%ebp),%esi
  10116c:	8d 14 1e             	lea    (%esi,%ebx,1),%edx
  10116f:	29 c2                	sub    %eax,%edx
  101171:	89 c8                	mov    %ecx,%eax
  101173:	e8 5c fa ff ff       	call   100bd4 <bytes_to_chunksz.isra.0>
  101178:	89 c2                	mov    %eax,%edx
  10117a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10117d:	e8 31 fb ff ff       	call   100cb3 <alloc_chunk>
  101182:	89 c6                	mov    %eax,%esi
  101184:	85 c0                	test   %eax,%eax
  101186:	74 d0                	je     101158 <sys_heap_aligned_alloc+0xb3>
  101188:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10118b:	8d 14 f7             	lea    (%edi,%esi,8),%edx
  10118e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  101191:	81 78 08 00 80 00 00 	cmpl   $0x8000,0x8(%eax)
  101198:	19 c0                	sbb    %eax,%eax
  10119a:	83 e0 fc             	and    $0xfffffffc,%eax
  10119d:	8d 44 10 08          	lea    0x8(%eax,%edx,1),%eax
  1011a1:	31 d2                	xor    %edx,%edx
  1011a3:	01 c8                	add    %ecx,%eax
  1011a5:	8d 4c 03 ff          	lea    -0x1(%ebx,%eax,1),%ecx
  1011a9:	89 c8                	mov    %ecx,%eax
  1011ab:	f7 f3                	div    %ebx
  1011ad:	29 d1                	sub    %edx,%ecx
  1011af:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1011b2:	89 cb                	mov    %ecx,%ebx
  1011b4:	29 fb                	sub    %edi,%ebx
  1011b6:	89 da                	mov    %ebx,%edx
  1011b8:	e8 fc f9 ff ff       	call   100bb9 <mem_to_chunkid>
  1011bd:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1011c0:	89 c7                	mov    %eax,%edi
  1011c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1011c5:	8d 44 03 07          	lea    0x7(%ebx,%eax,1),%eax
  1011c9:	83 e0 f8             	and    $0xfffffff8,%eax
  1011cc:	29 c8                	sub    %ecx,%eax
  1011ce:	c1 f8 03             	sar    $0x3,%eax
  1011d1:	39 fe                	cmp    %edi,%esi
  1011d3:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1011d6:	73 16                	jae    1011ee <sys_heap_aligned_alloc+0x149>
  1011d8:	89 f2                	mov    %esi,%edx
  1011da:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1011dd:	89 f9                	mov    %edi,%ecx
  1011df:	e8 5b fb ff ff       	call   100d3f <split_chunks>
  1011e4:	89 f2                	mov    %esi,%edx
  1011e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1011e9:	e8 07 fc ff ff       	call   100df5 <free_list_add>
  1011ee:	89 fa                	mov    %edi,%edx
  1011f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1011f3:	e8 60 f9 ff ff       	call   100b58 <chunk_size>
  1011f8:	01 f8                	add    %edi,%eax
  1011fa:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  1011fd:	73 18                	jae    101217 <sys_heap_aligned_alloc+0x172>
  1011ff:	89 fa                	mov    %edi,%edx
  101201:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101204:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101207:	e8 33 fb ff ff       	call   100d3f <split_chunks>
  10120c:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10120f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101212:	e8 de fb ff ff       	call   100df5 <free_list_add>
  101217:	b9 01 00 00 00       	mov    $0x1,%ecx
  10121c:	89 fa                	mov    %edi,%edx
  10121e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101221:	e8 43 f9 ff ff       	call   100b69 <set_chunk_used>
  101226:	8d 65 f4             	lea    -0xc(%ebp),%esp
  101229:	89 d8                	mov    %ebx,%eax
  10122b:	5b                   	pop    %ebx
  10122c:	5e                   	pop    %esi
  10122d:	5f                   	pop    %edi
  10122e:	5d                   	pop    %ebp
  10122f:	c3                   	ret

00101230 <sys_heap_init>:
  101230:	55                   	push   %ebp
  101231:	89 e5                	mov    %esp,%ebp
  101233:	57                   	push   %edi
  101234:	56                   	push   %esi
  101235:	53                   	push   %ebx
  101236:	83 ec 08             	sub    $0x8,%esp
  101239:	8b 4d 10             	mov    0x10(%ebp),%ecx
  10123c:	8b 55 08             	mov    0x8(%ebp),%edx
  10123f:	8b 45 0c             	mov    0xc(%ebp),%eax
  101242:	81 f9 ff ff 03 00    	cmp    $0x3ffff,%ecx
  101248:	77 39                	ja     101283 <sys_heap_init+0x53>
  10124a:	be 04 00 00 00       	mov    $0x4,%esi
  10124f:	83 f9 04             	cmp    $0x4,%ecx
  101252:	77 34                	ja     101288 <sys_heap_init+0x58>
  101254:	68 f2 01 00 00       	push   $0x1f2
  101259:	68 ba 10 11 00       	push   $0x1110ba
  10125e:	68 dd 11 11 00       	push   $0x1111dd
  101263:	68 ee 10 11 00       	push   $0x1110ee
  101268:	e8 70 03 00 00       	call   1015dd <assert_print>
  10126d:	83 c4 10             	add    $0x10,%esp
  101270:	68 fe 11 11 00       	push   $0x1111fe
  101275:	e8 63 03 00 00       	call   1015dd <assert_print>
  10127a:	c7 04 24 f2 01 00 00 	movl   $0x1f2,(%esp)
  101281:	eb 4e                	jmp    1012d1 <sys_heap_init+0xa1>
  101283:	be 08 00 00 00       	mov    $0x8,%esi
  101288:	29 f1                	sub    %esi,%ecx
  10128a:	8d 58 07             	lea    0x7(%eax),%ebx
  10128d:	01 c8                	add    %ecx,%eax
  10128f:	83 e3 f8             	and    $0xfffffff8,%ebx
  101292:	83 e0 f8             	and    $0xfffffff8,%eax
  101295:	29 d8                	sub    %ebx,%eax
  101297:	89 c7                	mov    %eax,%edi
  101299:	c1 ef 03             	shr    $0x3,%edi
  10129c:	83 f8 17             	cmp    $0x17,%eax
  10129f:	89 7d f0             	mov    %edi,-0x10(%ebp)
  1012a2:	77 39                	ja     1012dd <sys_heap_init+0xad>
  1012a4:	68 fb 01 00 00       	push   $0x1fb
  1012a9:	68 ba 10 11 00       	push   $0x1110ba
  1012ae:	68 17 12 11 00       	push   $0x111217
  1012b3:	68 ee 10 11 00       	push   $0x1110ee
  1012b8:	e8 20 03 00 00       	call   1015dd <assert_print>
  1012bd:	83 c4 10             	add    $0x10,%esp
  1012c0:	68 fe 11 11 00       	push   $0x1111fe
  1012c5:	e8 13 03 00 00       	call   1015dd <assert_print>
  1012ca:	c7 04 24 fb 01 00 00 	movl   $0x1fb,(%esp)
  1012d1:	68 ba 10 11 00       	push   $0x1110ba
  1012d6:	e8 f3 02 00 00       	call   1015ce <assert_post_action>
  1012db:	5b                   	pop    %ebx
  1012dc:	5e                   	pop    %esi
  1012dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1012e0:	31 c9                	xor    %ecx,%ecx
  1012e2:	89 1a                	mov    %ebx,(%edx)
  1012e4:	89 c2                	mov    %eax,%edx
  1012e6:	89 43 08             	mov    %eax,0x8(%ebx)
  1012e9:	89 4b 0c             	mov    %ecx,0xc(%ebx)
  1012ec:	e8 f5 f8 ff ff       	call   100be6 <bucket_idx.isra.0>
  1012f1:	ba 01 00 00 00       	mov    $0x1,%edx
  1012f6:	89 c6                	mov    %eax,%esi
  1012f8:	8d 3c 85 14 00 00 00 	lea    0x14(,%eax,4),%edi
  1012ff:	8d 47 07             	lea    0x7(%edi),%eax
  101302:	c1 e8 03             	shr    $0x3,%eax
  101305:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101308:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10130b:	e8 c4 f8 ff ff       	call   100bd4 <bytes_to_chunksz.isra.0>
  101310:	8b 55 ec             	mov    -0x14(%ebp),%edx
  101313:	01 d0                	add    %edx,%eax
  101315:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  101318:	0f 82 8e 00 00 00    	jb     1013ac <sys_heap_init+0x17c>
  10131e:	31 c9                	xor    %ecx,%ecx
  101320:	46                   	inc    %esi
  101321:	7c 03                	jl     101326 <sys_heap_init+0xf6>
  101323:	8d 4f f0             	lea    -0x10(%edi),%ecx
  101326:	8d 53 10             	lea    0x10(%ebx),%edx
  101329:	31 c0                	xor    %eax,%eax
  10132b:	89 d7                	mov    %edx,%edi
  10132d:	31 d2                	xor    %edx,%edx
  10132f:	f3 aa                	rep stos %al,%es:(%edi)
  101331:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101334:	89 d8                	mov    %ebx,%eax
  101336:	e8 6b f8 ff ff       	call   100ba6 <set_chunk_size>
  10133b:	6a 00                	push   $0x0
  10133d:	89 d8                	mov    %ebx,%eax
  10133f:	31 c9                	xor    %ecx,%ecx
  101341:	31 d2                	xor    %edx,%edx
  101343:	e8 f1 f7 ff ff       	call   100b39 <chunk_set>
  101348:	5a                   	pop    %edx
  101349:	b9 01 00 00 00       	mov    $0x1,%ecx
  10134e:	31 d2                	xor    %edx,%edx
  101350:	e8 14 f8 ff ff       	call   100b69 <set_chunk_used>
  101355:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101358:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10135b:	89 c2                	mov    %eax,%edx
  10135d:	29 c6                	sub    %eax,%esi
  10135f:	89 d8                	mov    %ebx,%eax
  101361:	89 f1                	mov    %esi,%ecx
  101363:	e8 3e f8 ff ff       	call   100ba6 <set_chunk_size>
  101368:	89 d8                	mov    %ebx,%eax
  10136a:	ff 75 ec             	push   -0x14(%ebp)
  10136d:	31 c9                	xor    %ecx,%ecx
  10136f:	8b 55 ec             	mov    -0x14(%ebp),%edx
  101372:	e8 c2 f7 ff ff       	call   100b39 <chunk_set>
  101377:	5f                   	pop    %edi
  101378:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10137b:	e8 26 f8 ff ff       	call   100ba6 <set_chunk_size>
  101380:	56                   	push   %esi
  101381:	89 d8                	mov    %ebx,%eax
  101383:	8b 55 f0             	mov    -0x10(%ebp),%edx
  101386:	31 c9                	xor    %ecx,%ecx
  101388:	e8 ac f7 ff ff       	call   100b39 <chunk_set>
  10138d:	5a                   	pop    %edx
  10138e:	b9 01 00 00 00       	mov    $0x1,%ecx
  101393:	8b 55 f0             	mov    -0x10(%ebp),%edx
  101396:	e8 ce f7 ff ff       	call   100b69 <set_chunk_used>
  10139b:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10139e:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1013a1:	89 d8                	mov    %ebx,%eax
  1013a3:	5b                   	pop    %ebx
  1013a4:	5e                   	pop    %esi
  1013a5:	5f                   	pop    %edi
  1013a6:	5d                   	pop    %ebp
  1013a7:	e9 49 fa ff ff       	jmp    100df5 <free_list_add>
  1013ac:	68 0c 02 00 00       	push   $0x20c
  1013b1:	68 ba 10 11 00       	push   $0x1110ba
  1013b6:	68 40 12 11 00       	push   $0x111240
  1013bb:	68 ee 10 11 00       	push   $0x1110ee
  1013c0:	e8 18 02 00 00       	call   1015dd <assert_print>
  1013c5:	83 c4 10             	add    $0x10,%esp
  1013c8:	68 fe 11 11 00       	push   $0x1111fe
  1013cd:	e8 0b 02 00 00       	call   1015dd <assert_print>
  1013d2:	c7 04 24 0c 02 00 00 	movl   $0x20c,(%esp)
  1013d9:	e9 f3 fe ff ff       	jmp    1012d1 <sys_heap_init+0xa1>

001013de <char_out>:
  1013de:	ff 25 08 b5 11 00    	jmp    *0x11b508

001013e4 <__printk_hook_install>:
  1013e4:	55                   	push   %ebp
  1013e5:	89 e5                	mov    %esp,%ebp
  1013e7:	8b 45 08             	mov    0x8(%ebp),%eax
  1013ea:	5d                   	pop    %ebp
  1013eb:	a3 08 b5 11 00       	mov    %eax,0x11b508
  1013f0:	c3                   	ret

001013f1 <z_impl_k_str_out>:
  1013f1:	55                   	push   %ebp
  1013f2:	89 e5                	mov    %esp,%ebp
  1013f4:	56                   	push   %esi
  1013f5:	53                   	push   %ebx
  1013f6:	8b 5d 08             	mov    0x8(%ebp),%ebx
  1013f9:	8b 75 0c             	mov    0xc(%ebp),%esi
  1013fc:	01 de                	add    %ebx,%esi
  1013fe:	39 f3                	cmp    %esi,%ebx
  101400:	74 0e                	je     101410 <z_impl_k_str_out+0x1f>
  101402:	0f be 03             	movsbl (%ebx),%eax
  101405:	50                   	push   %eax
  101406:	43                   	inc    %ebx
  101407:	ff 15 08 b5 11 00    	call   *0x11b508
  10140d:	58                   	pop    %eax
  10140e:	eb ee                	jmp    1013fe <z_impl_k_str_out+0xd>
  101410:	8d 65 f8             	lea    -0x8(%ebp),%esp
  101413:	5b                   	pop    %ebx
  101414:	5e                   	pop    %esi
  101415:	5d                   	pop    %ebp
  101416:	c3                   	ret

00101417 <buf_flush>:
  101417:	55                   	push   %ebp
  101418:	89 e5                	mov    %esp,%ebp
  10141a:	56                   	push   %esi
  10141b:	53                   	push   %ebx
  10141c:	89 c3                	mov    %eax,%ebx
  10141e:	8b 50 10             	mov    0x10(%eax),%edx
  101421:	83 c0 14             	add    $0x14,%eax
  101424:	8c c9                	mov    %cs,%ecx
  101426:	83 f9 2b             	cmp    $0x2b,%ecx
  101429:	75 09                	jne    101434 <buf_flush+0x1d>
  10142b:	be 43 00 00 00       	mov    $0x43,%esi
  101430:	cd 80                	int    $0x80
  101432:	eb 09                	jmp    10143d <buf_flush+0x26>
  101434:	52                   	push   %edx
  101435:	50                   	push   %eax
  101436:	e8 b6 ff ff ff       	call   1013f1 <z_impl_k_str_out>
  10143b:	5a                   	pop    %edx
  10143c:	59                   	pop    %ecx
  10143d:	31 c0                	xor    %eax,%eax
  10143f:	89 43 10             	mov    %eax,0x10(%ebx)
  101442:	8d 65 f8             	lea    -0x8(%ebp),%esp
  101445:	5b                   	pop    %ebx
  101446:	5e                   	pop    %esi
  101447:	5d                   	pop    %ebp
  101448:	c3                   	ret

00101449 <vprintk>:
  101449:	55                   	push   %ebp
  10144a:	89 e5                	mov    %esp,%ebp
  10144c:	57                   	push   %edi
  10144d:	56                   	push   %esi
  10144e:	53                   	push   %ebx
  10144f:	83 ec 34             	sub    $0x34,%esp
  101452:	8b 55 08             	mov    0x8(%ebp),%edx
  101455:	8b 75 0c             	mov    0xc(%ebp),%esi
  101458:	8c c8                	mov    %cs,%eax
  10145a:	83 f8 2b             	cmp    $0x2b,%eax
  10145d:	8d 5d c0             	lea    -0x40(%ebp),%ebx
  101460:	75 30                	jne    101492 <vprintk+0x49>
  101462:	31 c0                	xor    %eax,%eax
  101464:	b9 0d 00 00 00       	mov    $0xd,%ecx
  101469:	89 df                	mov    %ebx,%edi
  10146b:	f3 ab                	rep stos %eax,%es:(%edi)
  10146d:	c6 45 c2 02          	movb   $0x2,-0x3e(%ebp)
  101471:	c7 45 c4 bb 14 10 00 	movl   $0x1014bb,-0x3c(%ebp)
  101478:	56                   	push   %esi
  101479:	52                   	push   %edx
  10147a:	53                   	push   %ebx
  10147b:	e8 4f dd 00 00       	call   10f1cf <__l_vfprintf>
  101480:	83 c4 0c             	add    $0xc,%esp
  101483:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
  101487:	74 2a                	je     1014b3 <vprintk+0x6a>
  101489:	89 d8                	mov    %ebx,%eax
  10148b:	e8 87 ff ff ff       	call   101417 <buf_flush>
  101490:	eb 21                	jmp    1014b3 <vprintk+0x6a>
  101492:	31 c0                	xor    %eax,%eax
  101494:	b9 04 00 00 00       	mov    $0x4,%ecx
  101499:	89 df                	mov    %ebx,%edi
  10149b:	f3 ab                	rep stos %eax,%es:(%edi)
  10149d:	c6 45 c2 02          	movb   $0x2,-0x3e(%ebp)
  1014a1:	c7 45 c4 de 13 10 00 	movl   $0x1013de,-0x3c(%ebp)
  1014a8:	56                   	push   %esi
  1014a9:	52                   	push   %edx
  1014aa:	53                   	push   %ebx
  1014ab:	e8 1f dd 00 00       	call   10f1cf <__l_vfprintf>
  1014b0:	83 c4 0c             	add    $0xc,%esp
  1014b3:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1014b6:	5b                   	pop    %ebx
  1014b7:	5e                   	pop    %esi
  1014b8:	5f                   	pop    %edi
  1014b9:	5d                   	pop    %ebp
  1014ba:	c3                   	ret

001014bb <buf_char_out>:
  1014bb:	55                   	push   %ebp
  1014bc:	89 e5                	mov    %esp,%ebp
  1014be:	8b 55 0c             	mov    0xc(%ebp),%edx
  1014c1:	8a 4d 08             	mov    0x8(%ebp),%cl
  1014c4:	8b 42 10             	mov    0x10(%edx),%eax
  1014c7:	88 4c 02 14          	mov    %cl,0x14(%edx,%eax,1)
  1014cb:	40                   	inc    %eax
  1014cc:	89 42 10             	mov    %eax,0x10(%edx)
  1014cf:	83 f8 20             	cmp    $0x20,%eax
  1014d2:	75 07                	jne    1014db <buf_char_out+0x20>
  1014d4:	89 d0                	mov    %edx,%eax
  1014d6:	e8 3c ff ff ff       	call   101417 <buf_flush>
  1014db:	8b 45 08             	mov    0x8(%ebp),%eax
  1014de:	5d                   	pop    %ebp
  1014df:	c3                   	ret

001014e0 <z_mrsh_k_str_out>:
  1014e0:	55                   	push   %ebp
  1014e1:	89 e5                	mov    %esp,%ebp
  1014e3:	56                   	push   %esi
  1014e4:	53                   	push   %ebx
  1014e5:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1014ea:	8b 5d 08             	mov    0x8(%ebp),%ebx
  1014ed:	8b 55 20             	mov    0x20(%ebp),%edx
  1014f0:	8b 75 0c             	mov    0xc(%ebp),%esi
  1014f3:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  1014f9:	89 d8                	mov    %ebx,%eax
  1014fb:	01 f0                	add    %esi,%eax
  1014fd:	73 2b                	jae    10152a <z_mrsh_k_str_out+0x4a>
  1014ff:	68 cc 3b 11 00       	push   $0x113bcc
  101504:	56                   	push   %esi
  101505:	53                   	push   %ebx
  101506:	68 00 07 11 00       	push   $0x110700
  10150b:	6a 45                	push   $0x45
  10150d:	68 7c 12 11 00       	push   $0x11127c
  101512:	e8 e1 0f 00 00       	call   1024f8 <z_log_minimal_printk>
  101517:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10151c:	83 c4 18             	add    $0x18,%esp
  10151f:	ff b0 88 00 00 00    	push   0x88(%eax)
  101525:	e8 9c 2c 00 00       	call   1041c6 <arch_syscall_oops>
  10152a:	85 f6                	test   %esi,%esi
  10152c:	74 0b                	je     101539 <z_mrsh_k_str_out+0x59>
  10152e:	89 d8                	mov    %ebx,%eax
  101530:	8d 56 ff             	lea    -0x1(%esi),%edx
  101533:	f7 d0                	not    %eax
  101535:	39 c2                	cmp    %eax,%edx
  101537:	73 c6                	jae    1014ff <z_mrsh_k_str_out+0x1f>
  101539:	6a 00                	push   $0x0
  10153b:	56                   	push   %esi
  10153c:	53                   	push   %ebx
  10153d:	e8 54 22 00 00       	call   103796 <arch_buffer_validate>
  101542:	83 c4 0c             	add    $0xc,%esp
  101545:	85 c0                	test   %eax,%eax
  101547:	75 b6                	jne    1014ff <z_mrsh_k_str_out+0x1f>
  101549:	56                   	push   %esi
  10154a:	53                   	push   %ebx
  10154b:	e8 a1 fe ff ff       	call   1013f1 <z_impl_k_str_out>
  101550:	58                   	pop    %eax
  101551:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  101556:	31 c9                	xor    %ecx,%ecx
  101558:	5a                   	pop    %edx
  101559:	89 88 88 00 00 00    	mov    %ecx,0x88(%eax)
  10155f:	8d 65 f8             	lea    -0x8(%ebp),%esp
  101562:	31 c0                	xor    %eax,%eax
  101564:	5b                   	pop    %ebx
  101565:	5e                   	pop    %esi
  101566:	5d                   	pop    %ebp
  101567:	c3                   	ret

00101568 <printk>:
  101568:	55                   	push   %ebp
  101569:	89 e5                	mov    %esp,%ebp
  10156b:	8d 45 0c             	lea    0xc(%ebp),%eax
  10156e:	50                   	push   %eax
  10156f:	ff 75 08             	push   0x8(%ebp)
  101572:	e8 d2 fe ff ff       	call   101449 <vprintk>
  101577:	58                   	pop    %eax
  101578:	5a                   	pop    %edx
  101579:	c9                   	leave
  10157a:	c3                   	ret

0010157b <z_thread_entry>:
  10157b:	55                   	push   %ebp
  10157c:	89 e5                	mov    %esp,%ebp
  10157e:	56                   	push   %esi
  10157f:	53                   	push   %ebx
  101580:	8c c8                	mov    %cs,%eax
  101582:	83 f8 2b             	cmp    $0x2b,%eax
  101585:	75 09                	jne    101590 <z_thread_entry+0x15>
  101587:	be 39 00 00 00       	mov    $0x39,%esi
  10158c:	cd 80                	int    $0x80
  10158e:	eb 05                	jmp    101595 <z_thread_entry+0x1a>
  101590:	e8 82 91 00 00       	call   10a717 <z_impl_k_sched_current_thread_query>
  101595:	65 8b 1d 00 00 00 00 	mov    %gs:0x0,%ebx
  10159c:	89 83 fc ff ff ff    	mov    %eax,-0x4(%ebx)
  1015a2:	ff 75 14             	push   0x14(%ebp)
  1015a5:	ff 75 10             	push   0x10(%ebp)
  1015a8:	ff 75 0c             	push   0xc(%ebp)
  1015ab:	ff 55 08             	call   *0x8(%ebp)
  1015ae:	83 c4 0c             	add    $0xc,%esp
  1015b1:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
  1015b7:	8c ca                	mov    %cs,%edx
  1015b9:	83 fa 2b             	cmp    $0x2b,%edx
  1015bc:	75 09                	jne    1015c7 <z_thread_entry+0x4c>
  1015be:	be 44 00 00 00       	mov    $0x44,%esi
  1015c3:	cd 80                	int    $0x80
  1015c5:	eb 07                	jmp    1015ce <assert_post_action>
  1015c7:	50                   	push   %eax
  1015c8:	e8 87 92 00 00       	call   10a854 <z_impl_k_thread_abort>
  1015cd:	58                   	pop    %eax

001015ce <assert_post_action>:
  1015ce:	8c c8                	mov    %cs,%eax
  1015d0:	83 f8 2b             	cmp    $0x2b,%eax
  1015d3:	75 04                	jne    1015d9 <assert_post_action+0xb>
  1015d5:	6a 03                	push   $0x3
  1015d7:	cd 20                	int    $0x20
  1015d9:	6a 04                	push   $0x4
  1015db:	cd 20                	int    $0x20

001015dd <assert_print>:
  1015dd:	55                   	push   %ebp
  1015de:	89 e5                	mov    %esp,%ebp
  1015e0:	8d 45 0c             	lea    0xc(%ebp),%eax
  1015e3:	50                   	push   %eax
  1015e4:	ff 75 08             	push   0x8(%ebp)
  1015e7:	e8 5d fe ff ff       	call   101449 <vprintk>
  1015ec:	58                   	pop    %eax
  1015ed:	5a                   	pop    %edx
  1015ee:	c9                   	leave
  1015ef:	c3                   	ret

001015f0 <check_sys_mutex_addr>:
  1015f0:	55                   	push   %ebp
  1015f1:	83 f8 fb             	cmp    $0xfffffffb,%eax
  1015f4:	89 e5                	mov    %esp,%ebp
  1015f6:	53                   	push   %ebx
  1015f7:	89 c3                	mov    %eax,%ebx
  1015f9:	76 20                	jbe    10161b <check_sys_mutex_addr+0x2b>
  1015fb:	68 c7 12 11 00       	push   $0x1112c7
  101600:	6a 04                	push   $0x4
  101602:	53                   	push   %ebx
  101603:	68 14 07 11 00       	push   $0x110714
  101608:	6a 45                	push   $0x45
  10160a:	68 7c 12 11 00       	push   $0x11127c
  10160f:	e8 e4 0e 00 00       	call   1024f8 <z_log_minimal_printk>
  101614:	83 c4 18             	add    $0x18,%esp
  101617:	b0 01                	mov    $0x1,%al
  101619:	eb 11                	jmp    10162c <check_sys_mutex_addr+0x3c>
  10161b:	6a 01                	push   $0x1
  10161d:	6a 04                	push   $0x4
  10161f:	50                   	push   %eax
  101620:	e8 71 21 00 00       	call   103796 <arch_buffer_validate>
  101625:	83 c4 0c             	add    $0xc,%esp
  101628:	85 c0                	test   %eax,%eax
  10162a:	75 cf                	jne    1015fb <check_sys_mutex_addr+0xb>
  10162c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10162f:	c9                   	leave
  101630:	c3                   	ret

00101631 <z_impl_z_sys_mutex_kernel_lock>:
  101631:	55                   	push   %ebp
  101632:	89 e5                	mov    %esp,%ebp
  101634:	57                   	push   %edi
  101635:	56                   	push   %esi
  101636:	53                   	push   %ebx
  101637:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  10163a:	8b 7d 10             	mov    0x10(%ebp),%edi
  10163d:	ff 75 08             	push   0x8(%ebp)
  101640:	e8 f0 bd 00 00       	call   10d435 <k_object_find>
  101645:	5a                   	pop    %edx
  101646:	85 c0                	test   %eax,%eax
  101648:	74 36                	je     101680 <z_impl_z_sys_mutex_kernel_lock+0x4f>
  10164a:	80 78 07 0e          	cmpb   $0xe,0x7(%eax)
  10164e:	75 30                	jne    101680 <z_impl_z_sys_mutex_kernel_lock+0x4f>
  101650:	8b 40 09             	mov    0x9(%eax),%eax
  101653:	85 c0                	test   %eax,%eax
  101655:	74 29                	je     101680 <z_impl_z_sys_mutex_kernel_lock+0x4f>
  101657:	8c ca                	mov    %cs,%edx
  101659:	83 fa 2b             	cmp    $0x2b,%edx
  10165c:	75 0d                	jne    10166b <z_impl_z_sys_mutex_kernel_lock+0x3a>
  10165e:	be 1f 00 00 00       	mov    $0x1f,%esi
  101663:	89 da                	mov    %ebx,%edx
  101665:	89 f9                	mov    %edi,%ecx
  101667:	cd 80                	int    $0x80
  101669:	eb 1a                	jmp    101685 <z_impl_z_sys_mutex_kernel_lock+0x54>
  10166b:	89 5d 0c             	mov    %ebx,0xc(%ebp)
  10166e:	89 7d 10             	mov    %edi,0x10(%ebp)
  101671:	89 45 08             	mov    %eax,0x8(%ebp)
  101674:	8d 65 f4             	lea    -0xc(%ebp),%esp
  101677:	5b                   	pop    %ebx
  101678:	5e                   	pop    %esi
  101679:	5f                   	pop    %edi
  10167a:	5d                   	pop    %ebp
  10167b:	e9 f5 56 00 00       	jmp    106d75 <z_impl_k_mutex_lock>
  101680:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
  101685:	8d 65 f4             	lea    -0xc(%ebp),%esp
  101688:	5b                   	pop    %ebx
  101689:	5e                   	pop    %esi
  10168a:	5f                   	pop    %edi
  10168b:	5d                   	pop    %ebp
  10168c:	c3                   	ret

0010168d <z_mrsh_z_sys_mutex_kernel_lock>:
  10168d:	55                   	push   %ebp
  10168e:	89 e5                	mov    %esp,%ebp
  101690:	57                   	push   %edi
  101691:	56                   	push   %esi
  101692:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  101697:	8b 55 20             	mov    0x20(%ebp),%edx
  10169a:	8b 75 0c             	mov    0xc(%ebp),%esi
  10169d:	8b 7d 10             	mov    0x10(%ebp),%edi
  1016a0:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  1016a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1016a9:	e8 42 ff ff ff       	call   1015f0 <check_sys_mutex_addr>
  1016ae:	88 c2                	mov    %al,%dl
  1016b0:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
  1016b5:	84 d2                	test   %dl,%dl
  1016b7:	75 0d                	jne    1016c6 <z_mrsh_z_sys_mutex_kernel_lock+0x39>
  1016b9:	57                   	push   %edi
  1016ba:	56                   	push   %esi
  1016bb:	ff 75 08             	push   0x8(%ebp)
  1016be:	e8 6e ff ff ff       	call   101631 <z_impl_z_sys_mutex_kernel_lock>
  1016c3:	83 c4 0c             	add    $0xc,%esp
  1016c6:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  1016cc:	31 c9                	xor    %ecx,%ecx
  1016ce:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  1016d4:	8d 65 f8             	lea    -0x8(%ebp),%esp
  1016d7:	5e                   	pop    %esi
  1016d8:	5f                   	pop    %edi
  1016d9:	5d                   	pop    %ebp
  1016da:	c3                   	ret

001016db <z_impl_z_sys_mutex_kernel_unlock>:
  1016db:	55                   	push   %ebp
  1016dc:	89 e5                	mov    %esp,%ebp
  1016de:	56                   	push   %esi
  1016df:	ff 75 08             	push   0x8(%ebp)
  1016e2:	e8 4e bd 00 00       	call   10d435 <k_object_find>
  1016e7:	5a                   	pop    %edx
  1016e8:	85 c0                	test   %eax,%eax
  1016ea:	74 2f                	je     10171b <z_impl_z_sys_mutex_kernel_unlock+0x40>
  1016ec:	80 78 07 0e          	cmpb   $0xe,0x7(%eax)
  1016f0:	75 29                	jne    10171b <z_impl_z_sys_mutex_kernel_unlock+0x40>
  1016f2:	8b 40 09             	mov    0x9(%eax),%eax
  1016f5:	85 c0                	test   %eax,%eax
  1016f7:	74 22                	je     10171b <z_impl_z_sys_mutex_kernel_unlock+0x40>
  1016f9:	83 78 14 00          	cmpl   $0x0,0x14(%eax)
  1016fd:	74 1c                	je     10171b <z_impl_z_sys_mutex_kernel_unlock+0x40>
  1016ff:	8c ca                	mov    %cs,%edx
  101701:	83 fa 2b             	cmp    $0x2b,%edx
  101704:	75 09                	jne    10170f <z_impl_z_sys_mutex_kernel_unlock+0x34>
  101706:	be 20 00 00 00       	mov    $0x20,%esi
  10170b:	cd 80                	int    $0x80
  10170d:	eb 11                	jmp    101720 <z_impl_z_sys_mutex_kernel_unlock+0x45>
  10170f:	89 45 08             	mov    %eax,0x8(%ebp)
  101712:	8b 75 fc             	mov    -0x4(%ebp),%esi
  101715:	c9                   	leave
  101716:	e9 f1 58 00 00       	jmp    10700c <z_impl_k_mutex_unlock>
  10171b:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
  101720:	8b 75 fc             	mov    -0x4(%ebp),%esi
  101723:	c9                   	leave
  101724:	c3                   	ret

00101725 <z_mrsh_z_sys_mutex_kernel_unlock>:
  101725:	55                   	push   %ebp
  101726:	89 e5                	mov    %esp,%ebp
  101728:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10172d:	8b 55 20             	mov    0x20(%ebp),%edx
  101730:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  101736:	8b 45 08             	mov    0x8(%ebp),%eax
  101739:	e8 b2 fe ff ff       	call   1015f0 <check_sys_mutex_addr>
  10173e:	88 c2                	mov    %al,%dl
  101740:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
  101745:	84 d2                	test   %dl,%dl
  101747:	75 09                	jne    101752 <z_mrsh_z_sys_mutex_kernel_unlock+0x2d>
  101749:	ff 75 08             	push   0x8(%ebp)
  10174c:	e8 8a ff ff ff       	call   1016db <z_impl_z_sys_mutex_kernel_unlock>
  101751:	5a                   	pop    %edx
  101752:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  101758:	31 c9                	xor    %ecx,%ecx
  10175a:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  101760:	c9                   	leave
  101761:	c3                   	ret

00101762 <find_and_stack>:
  101762:	55                   	push   %ebp
  101763:	89 e5                	mov    %esp,%ebp
  101765:	57                   	push   %edi
  101766:	56                   	push   %esi
  101767:	89 c7                	mov    %eax,%edi
  101769:	53                   	push   %ebx
  10176a:	89 ce                	mov    %ecx,%esi
  10176c:	53                   	push   %ebx
  10176d:	bb 01 00 00 00       	mov    $0x1,%ebx
  101772:	8b 00                	mov    (%eax),%eax
  101774:	89 01                	mov    %eax,(%ecx)
  101776:	8b 44 9e fc          	mov    -0x4(%esi,%ebx,4),%eax
  10177a:	39 d0                	cmp    %edx,%eax
  10177c:	74 2b                	je     1017a9 <find_and_stack+0x47>
  10177e:	50                   	push   %eax
  10177f:	52                   	push   %edx
  101780:	89 55 f0             	mov    %edx,-0x10(%ebp)
  101783:	ff 57 04             	call   *0x4(%edi)
  101786:	5a                   	pop    %edx
  101787:	59                   	pop    %ecx
  101788:	88 c1                	mov    %al,%cl
  10178a:	84 c9                	test   %cl,%cl
  10178c:	8b 44 9e fc          	mov    -0x4(%esi,%ebx,4),%eax
  101790:	8b 55 f0             	mov    -0x10(%ebp),%edx
  101793:	75 05                	jne    10179a <find_and_stack+0x38>
  101795:	8b 40 04             	mov    0x4(%eax),%eax
  101798:	eb 05                	jmp    10179f <find_and_stack+0x3d>
  10179a:	8b 00                	mov    (%eax),%eax
  10179c:	83 e0 fe             	and    $0xfffffffe,%eax
  10179f:	85 c0                	test   %eax,%eax
  1017a1:	74 06                	je     1017a9 <find_and_stack+0x47>
  1017a3:	89 04 9e             	mov    %eax,(%esi,%ebx,4)
  1017a6:	43                   	inc    %ebx
  1017a7:	eb cd                	jmp    101776 <find_and_stack+0x14>
  1017a9:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1017ac:	89 d8                	mov    %ebx,%eax
  1017ae:	5b                   	pop    %ebx
  1017af:	5e                   	pop    %esi
  1017b0:	5f                   	pop    %edi
  1017b1:	5d                   	pop    %ebp
  1017b2:	c3                   	ret

001017b3 <stack_left_limb>:
  1017b3:	55                   	push   %ebp
  1017b4:	89 c1                	mov    %eax,%ecx
  1017b6:	89 e5                	mov    %esp,%ebp
  1017b8:	53                   	push   %ebx
  1017b9:	89 d0                	mov    %edx,%eax
  1017bb:	8b 5a 08             	mov    0x8(%edx),%ebx
  1017be:	8d 53 01             	lea    0x1(%ebx),%edx
  1017c1:	8b 18                	mov    (%eax),%ebx
  1017c3:	89 50 08             	mov    %edx,0x8(%eax)
  1017c6:	89 0c 93             	mov    %ecx,(%ebx,%edx,4)
  1017c9:	8b 50 08             	mov    0x8(%eax),%edx
  1017cc:	8b 58 04             	mov    0x4(%eax),%ebx
  1017cf:	c6 04 13 00          	movb   $0x0,(%ebx,%edx,1)
  1017d3:	8b 11                	mov    (%ecx),%edx
  1017d5:	83 e2 fe             	and    $0xfffffffe,%edx
  1017d8:	8b 48 08             	mov    0x8(%eax),%ecx
  1017db:	8b 18                	mov    (%eax),%ebx
  1017dd:	85 d2                	test   %edx,%edx
  1017df:	74 15                	je     1017f6 <stack_left_limb+0x43>
  1017e1:	41                   	inc    %ecx
  1017e2:	89 48 08             	mov    %ecx,0x8(%eax)
  1017e5:	89 14 8b             	mov    %edx,(%ebx,%ecx,4)
  1017e8:	8b 58 04             	mov    0x4(%eax),%ebx
  1017eb:	8b 48 08             	mov    0x8(%eax),%ecx
  1017ee:	c6 04 0b 01          	movb   $0x1,(%ebx,%ecx,1)
  1017f2:	8b 12                	mov    (%edx),%edx
  1017f4:	eb df                	jmp    1017d5 <stack_left_limb+0x22>
  1017f6:	8b 04 8b             	mov    (%ebx,%ecx,4),%eax
  1017f9:	5b                   	pop    %ebx
  1017fa:	5d                   	pop    %ebp
  1017fb:	c3                   	ret

001017fc <set_child>:
  1017fc:	84 d2                	test   %dl,%dl
  1017fe:	74 04                	je     101804 <set_child+0x8>
  101800:	89 48 04             	mov    %ecx,0x4(%eax)
  101803:	c3                   	ret
  101804:	8b 10                	mov    (%eax),%edx
  101806:	83 e2 01             	and    $0x1,%edx
  101809:	09 d1                	or     %edx,%ecx
  10180b:	89 08                	mov    %ecx,(%eax)
  10180d:	c3                   	ret

0010180e <rotate>:
  10180e:	55                   	push   %ebp
  10180f:	8d 0c 95 f8 ff ff ff 	lea    -0x8(,%edx,4),%ecx
  101816:	89 e5                	mov    %esp,%ebp
  101818:	57                   	push   %edi
  101819:	56                   	push   %esi
  10181a:	8d 34 08             	lea    (%eax,%ecx,1),%esi
  10181d:	53                   	push   %ebx
  10181e:	8d 5c 08 04          	lea    0x4(%eax,%ecx,1),%ebx
  101822:	83 ec 14             	sub    $0x14,%esp
  101825:	89 5d e0             	mov    %ebx,-0x20(%ebp)
  101828:	8b 1b                	mov    (%ebx),%ebx
  10182a:	89 75 e4             	mov    %esi,-0x1c(%ebp)
  10182d:	8b 36                	mov    (%esi),%esi
  10182f:	8b 7b 04             	mov    0x4(%ebx),%edi
  101832:	89 7d ec             	mov    %edi,-0x14(%ebp)
  101835:	8b 3b                	mov    (%ebx),%edi
  101837:	83 e7 fe             	and    $0xfffffffe,%edi
  10183a:	3b 5e 04             	cmp    0x4(%esi),%ebx
  10183d:	89 7d f0             	mov    %edi,-0x10(%ebp)
  101840:	74 1a                	je     10185c <rotate+0x4e>
  101842:	89 7d e8             	mov    %edi,-0x18(%ebp)
  101845:	8b 7d ec             	mov    -0x14(%ebp),%edi
  101848:	89 7d f0             	mov    %edi,-0x10(%ebp)
  10184b:	8b 7d e8             	mov    -0x18(%ebp),%edi
  10184e:	89 7d ec             	mov    %edi,-0x14(%ebp)
  101851:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
  101858:	31 ff                	xor    %edi,%edi
  10185a:	eb 0c                	jmp    101868 <rotate+0x5a>
  10185c:	bf 01 00 00 00       	mov    $0x1,%edi
  101861:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  101868:	83 fa 02             	cmp    $0x2,%edx
  10186b:	7e 13                	jle    101880 <rotate+0x72>
  10186d:	8b 44 08 fc          	mov    -0x4(%eax,%ecx,1),%eax
  101871:	31 d2                	xor    %edx,%edx
  101873:	89 d9                	mov    %ebx,%ecx
  101875:	39 70 04             	cmp    %esi,0x4(%eax)
  101878:	0f 94 c2             	sete   %dl
  10187b:	e8 7c ff ff ff       	call   1017fc <set_child>
  101880:	89 f8                	mov    %edi,%eax
  101882:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101885:	0f b6 f8             	movzbl %al,%edi
  101888:	89 fa                	mov    %edi,%edx
  10188a:	89 d8                	mov    %ebx,%eax
  10188c:	e8 6b ff ff ff       	call   1017fc <set_child>
  101891:	89 f1                	mov    %esi,%ecx
  101893:	8b 55 e8             	mov    -0x18(%ebp),%edx
  101896:	e8 61 ff ff ff       	call   1017fc <set_child>
  10189b:	89 f0                	mov    %esi,%eax
  10189d:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1018a0:	89 fa                	mov    %edi,%edx
  1018a2:	e8 55 ff ff ff       	call   1017fc <set_child>
  1018a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1018aa:	89 18                	mov    %ebx,(%eax)
  1018ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1018af:	89 30                	mov    %esi,(%eax)
  1018b1:	83 c4 14             	add    $0x14,%esp
  1018b4:	5b                   	pop    %ebx
  1018b5:	5e                   	pop    %esi
  1018b6:	5f                   	pop    %edi
  1018b7:	5d                   	pop    %ebp
  1018b8:	c3                   	ret

001018b9 <z_rb_get_minmax>:
  1018b9:	55                   	push   %ebp
  1018ba:	89 e5                	mov    %esp,%ebp
  1018bc:	8b 45 08             	mov    0x8(%ebp),%eax
  1018bf:	8a 4d 0c             	mov    0xc(%ebp),%cl
  1018c2:	8b 00                	mov    (%eax),%eax
  1018c4:	85 c0                	test   %eax,%eax
  1018c6:	74 16                	je     1018de <z_rb_get_minmax+0x25>
  1018c8:	84 c9                	test   %cl,%cl
  1018ca:	74 05                	je     1018d1 <z_rb_get_minmax+0x18>
  1018cc:	8b 50 04             	mov    0x4(%eax),%edx
  1018cf:	eb 05                	jmp    1018d6 <z_rb_get_minmax+0x1d>
  1018d1:	8b 10                	mov    (%eax),%edx
  1018d3:	83 e2 fe             	and    $0xfffffffe,%edx
  1018d6:	85 d2                	test   %edx,%edx
  1018d8:	74 04                	je     1018de <z_rb_get_minmax+0x25>
  1018da:	89 d0                	mov    %edx,%eax
  1018dc:	eb ea                	jmp    1018c8 <z_rb_get_minmax+0xf>
  1018de:	5d                   	pop    %ebp
  1018df:	c3                   	ret

001018e0 <rb_insert>:
  1018e0:	55                   	push   %ebp
  1018e1:	89 e5                	mov    %esp,%ebp
  1018e3:	57                   	push   %edi
  1018e4:	56                   	push   %esi
  1018e5:	31 f6                	xor    %esi,%esi
  1018e7:	53                   	push   %ebx
  1018e8:	83 ec 18             	sub    $0x18,%esp
  1018eb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  1018ee:	8b 7d 08             	mov    0x8(%ebp),%edi
  1018f1:	83 23 01             	andl   $0x1,(%ebx)
  1018f4:	89 73 04             	mov    %esi,0x4(%ebx)
  1018f7:	83 3f 00             	cmpl   $0x0,(%edi)
  1018fa:	75 11                	jne    10190d <rb_insert+0x2d>
  1018fc:	89 1f                	mov    %ebx,(%edi)
  1018fe:	c7 47 08 01 00 00 00 	movl   $0x1,0x8(%edi)
  101905:	83 0b 01             	orl    $0x1,(%ebx)
  101908:	e9 04 01 00 00       	jmp    101a11 <rb_insert+0x131>
  10190d:	89 e0                	mov    %esp,%eax
  10190f:	89 da                	mov    %ebx,%edx
  101911:	89 45 dc             	mov    %eax,-0x24(%ebp)
  101914:	8b 47 08             	mov    0x8(%edi),%eax
  101917:	8d 04 85 04 00 00 00 	lea    0x4(,%eax,4),%eax
  10191e:	29 c4                	sub    %eax,%esp
  101920:	8d 44 24 03          	lea    0x3(%esp),%eax
  101924:	89 c1                	mov    %eax,%ecx
  101926:	83 e0 fc             	and    $0xfffffffc,%eax
  101929:	c1 e9 02             	shr    $0x2,%ecx
  10192c:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10192f:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  101932:	89 c1                	mov    %eax,%ecx
  101934:	89 f8                	mov    %edi,%eax
  101936:	e8 27 fe ff ff       	call   101762 <find_and_stack>
  10193b:	89 c6                	mov    %eax,%esi
  10193d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101940:	8b 44 b0 fc          	mov    -0x4(%eax,%esi,4),%eax
  101944:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101947:	50                   	push   %eax
  101948:	53                   	push   %ebx
  101949:	ff 57 04             	call   *0x4(%edi)
  10194c:	5a                   	pop    %edx
  10194d:	83 f0 01             	xor    $0x1,%eax
  101950:	59                   	pop    %ecx
  101951:	89 d9                	mov    %ebx,%ecx
  101953:	0f b6 d0             	movzbl %al,%edx
  101956:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101959:	e8 9e fe ff ff       	call   1017fc <set_child>
  10195e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101961:	89 1c b0             	mov    %ebx,(%eax,%esi,4)
  101964:	8d 46 01             	lea    0x1(%esi),%eax
  101967:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10196a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10196d:	83 23 fe             	andl   $0xfffffffe,(%ebx)
  101970:	8d 5c b0 fc          	lea    -0x4(%eax,%esi,4),%ebx
  101974:	8b 75 ec             	mov    -0x14(%ebp),%esi
  101977:	83 fe 01             	cmp    $0x1,%esi
  10197a:	7e 6e                	jle    1019ea <rb_insert+0x10a>
  10197c:	8b 13                	mov    (%ebx),%edx
  10197e:	8b 43 04             	mov    0x4(%ebx),%eax
  101981:	89 45 e0             	mov    %eax,-0x20(%ebp)
  101984:	f6 02 01             	testb  $0x1,(%edx)
  101987:	75 6e                	jne    1019f7 <rb_insert+0x117>
  101989:	8b 4b fc             	mov    -0x4(%ebx),%ecx
  10198c:	c6 45 eb 00          	movb   $0x0,-0x15(%ebp)
  101990:	8b 41 04             	mov    0x4(%ecx),%eax
  101993:	39 c2                	cmp    %eax,%edx
  101995:	75 09                	jne    1019a0 <rb_insert+0xc0>
  101997:	8b 01                	mov    (%ecx),%eax
  101999:	c6 45 eb 01          	movb   $0x1,-0x15(%ebp)
  10199d:	83 e0 fe             	and    $0xfffffffe,%eax
  1019a0:	85 c0                	test   %eax,%eax
  1019a2:	74 16                	je     1019ba <rb_insert+0xda>
  1019a4:	f6 00 01             	testb  $0x1,(%eax)
  1019a7:	75 11                	jne    1019ba <rb_insert+0xda>
  1019a9:	83 21 fe             	andl   $0xfffffffe,(%ecx)
  1019ac:	83 eb 08             	sub    $0x8,%ebx
  1019af:	83 0a 01             	orl    $0x1,(%edx)
  1019b2:	83 ee 02             	sub    $0x2,%esi
  1019b5:	83 08 01             	orl    $0x1,(%eax)
  1019b8:	eb bd                	jmp    101977 <rb_insert+0x97>
  1019ba:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1019bd:	39 42 04             	cmp    %eax,0x4(%edx)
  1019c0:	0f 94 c0             	sete   %al
  1019c3:	3a 45 eb             	cmp    -0x15(%ebp),%al
  1019c6:	74 0a                	je     1019d2 <rb_insert+0xf2>
  1019c8:	89 f2                	mov    %esi,%edx
  1019ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1019cd:	e8 3c fe ff ff       	call   10180e <rotate>
  1019d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1019d5:	8d 56 ff             	lea    -0x1(%esi),%edx
  1019d8:	e8 31 fe ff ff       	call   10180e <rotate>
  1019dd:	8b 43 fc             	mov    -0x4(%ebx),%eax
  1019e0:	83 08 01             	orl    $0x1,(%eax)
  1019e3:	8b 03                	mov    (%ebx),%eax
  1019e5:	83 20 fe             	andl   $0xfffffffe,(%eax)
  1019e8:	eb 0d                	jmp    1019f7 <rb_insert+0x117>
  1019ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1019ed:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
  1019f4:	83 08 01             	orl    $0x1,(%eax)
  1019f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1019fa:	39 47 08             	cmp    %eax,0x8(%edi)
  1019fd:	7d 03                	jge    101a02 <rb_insert+0x122>
  1019ff:	89 47 08             	mov    %eax,0x8(%edi)
  101a02:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101a05:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
  101a0c:	89 07                	mov    %eax,(%edi)
  101a0e:	8b 65 dc             	mov    -0x24(%ebp),%esp
  101a11:	8d 65 f4             	lea    -0xc(%ebp),%esp
  101a14:	5b                   	pop    %ebx
  101a15:	5e                   	pop    %esi
  101a16:	5f                   	pop    %edi
  101a17:	5d                   	pop    %ebp
  101a18:	c3                   	ret

00101a19 <rb_remove>:
  101a19:	55                   	push   %ebp
  101a1a:	89 e5                	mov    %esp,%ebp
  101a1c:	57                   	push   %edi
  101a1d:	56                   	push   %esi
  101a1e:	53                   	push   %ebx
  101a1f:	83 ec 20             	sub    $0x20,%esp
  101a22:	8b 45 08             	mov    0x8(%ebp),%eax
  101a25:	89 65 dc             	mov    %esp,-0x24(%ebp)
  101a28:	8b 7d 0c             	mov    0xc(%ebp),%edi
  101a2b:	8b 40 08             	mov    0x8(%eax),%eax
  101a2e:	89 fa                	mov    %edi,%edx
  101a30:	8d 04 85 04 00 00 00 	lea    0x4(,%eax,4),%eax
  101a37:	29 c4                	sub    %eax,%esp
  101a39:	8d 44 24 03          	lea    0x3(%esp),%eax
  101a3d:	89 c6                	mov    %eax,%esi
  101a3f:	83 e0 fc             	and    $0xfffffffc,%eax
  101a42:	c1 ee 02             	shr    $0x2,%esi
  101a45:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101a48:	89 c1                	mov    %eax,%ecx
  101a4a:	8b 45 08             	mov    0x8(%ebp),%eax
  101a4d:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  101a50:	e8 0d fd ff ff       	call   101762 <find_and_stack>
  101a55:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101a58:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101a5b:	8b 75 f0             	mov    -0x10(%ebp),%esi
  101a5e:	8d 34 b0             	lea    (%eax,%esi,4),%esi
  101a61:	39 7e fc             	cmp    %edi,-0x4(%esi)
  101a64:	0f 85 75 03 00 00    	jne    101ddf <rb_remove+0x3c6>
  101a6a:	8b 1f                	mov    (%edi),%ebx
  101a6c:	83 fb 01             	cmp    $0x1,%ebx
  101a6f:	0f 86 df 00 00 00    	jbe    101b54 <rb_remove+0x13b>
  101a75:	83 7f 04 00          	cmpl   $0x0,0x4(%edi)
  101a79:	0f 84 d5 00 00 00    	je     101b54 <rb_remove+0x13b>
  101a7f:	31 c0                	xor    %eax,%eax
  101a81:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
  101a85:	7e 03                	jle    101a8a <rb_remove+0x71>
  101a87:	8b 46 f8             	mov    -0x8(%esi),%eax
  101a8a:	ff 45 f0             	incl   -0x10(%ebp)
  101a8d:	83 e3 fe             	and    $0xfffffffe,%ebx
  101a90:	89 1e                	mov    %ebx,(%esi)
  101a92:	8b 53 04             	mov    0x4(%ebx),%edx
  101a95:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101a98:	85 d2                	test   %edx,%edx
  101a9a:	74 0d                	je     101aa9 <rb_remove+0x90>
  101a9c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  101a9f:	ff 45 f0             	incl   -0x10(%ebp)
  101aa2:	89 14 99             	mov    %edx,(%ecx,%ebx,4)
  101aa5:	89 d3                	mov    %edx,%ebx
  101aa7:	eb e9                	jmp    101a92 <rb_remove+0x79>
  101aa9:	8b 55 f0             	mov    -0x10(%ebp),%edx
  101aac:	85 c0                	test   %eax,%eax
  101aae:	8d 0c 91             	lea    (%ecx,%edx,4),%ecx
  101ab1:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  101ab4:	8b 49 f8             	mov    -0x8(%ecx),%ecx
  101ab7:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  101aba:	74 11                	je     101acd <rb_remove+0xb4>
  101abc:	31 d2                	xor    %edx,%edx
  101abe:	89 d9                	mov    %ebx,%ecx
  101ac0:	39 78 04             	cmp    %edi,0x4(%eax)
  101ac3:	0f 94 c2             	sete   %dl
  101ac6:	e8 31 fd ff ff       	call   1017fc <set_child>
  101acb:	eb 05                	jmp    101ad2 <rb_remove+0xb9>
  101acd:	8b 45 08             	mov    0x8(%ebp),%eax
  101ad0:	89 18                	mov    %ebx,(%eax)
  101ad2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101ad5:	39 c7                	cmp    %eax,%edi
  101ad7:	75 17                	jne    101af0 <rb_remove+0xd7>
  101ad9:	8b 07                	mov    (%edi),%eax
  101adb:	8b 13                	mov    (%ebx),%edx
  101add:	83 e0 01             	and    $0x1,%eax
  101ae0:	83 e2 fe             	and    $0xfffffffe,%edx
  101ae3:	09 d0                	or     %edx,%eax
  101ae5:	89 07                	mov    %eax,(%edi)
  101ae7:	8b 03                	mov    (%ebx),%eax
  101ae9:	83 e0 01             	and    $0x1,%eax
  101aec:	09 f8                	or     %edi,%eax
  101aee:	eb 2c                	jmp    101b1c <rb_remove+0x103>
  101af0:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101af3:	31 d2                	xor    %edx,%edx
  101af5:	89 f9                	mov    %edi,%ecx
  101af7:	39 58 04             	cmp    %ebx,0x4(%eax)
  101afa:	0f 94 c2             	sete   %dl
  101afd:	e8 fa fc ff ff       	call   1017fc <set_child>
  101b02:	8b 17                	mov    (%edi),%edx
  101b04:	8b 03                	mov    (%ebx),%eax
  101b06:	89 d1                	mov    %edx,%ecx
  101b08:	83 e0 fe             	and    $0xfffffffe,%eax
  101b0b:	83 e1 01             	and    $0x1,%ecx
  101b0e:	09 c8                	or     %ecx,%eax
  101b10:	83 e2 fe             	and    $0xfffffffe,%edx
  101b13:	89 07                	mov    %eax,(%edi)
  101b15:	8b 03                	mov    (%ebx),%eax
  101b17:	83 e0 01             	and    $0x1,%eax
  101b1a:	09 d0                	or     %edx,%eax
  101b1c:	89 03                	mov    %eax,(%ebx)
  101b1e:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  101b21:	8b 47 04             	mov    0x4(%edi),%eax
  101b24:	89 43 04             	mov    %eax,0x4(%ebx)
  101b27:	8b 51 fc             	mov    -0x4(%ecx),%edx
  101b2a:	31 c0                	xor    %eax,%eax
  101b2c:	89 47 04             	mov    %eax,0x4(%edi)
  101b2f:	8b 46 fc             	mov    -0x4(%esi),%eax
  101b32:	89 56 fc             	mov    %edx,-0x4(%esi)
  101b35:	8b 17                	mov    (%edi),%edx
  101b37:	89 41 fc             	mov    %eax,-0x4(%ecx)
  101b3a:	8b 03                	mov    (%ebx),%eax
  101b3c:	89 d1                	mov    %edx,%ecx
  101b3e:	83 e0 01             	and    $0x1,%eax
  101b41:	83 e1 fe             	and    $0xfffffffe,%ecx
  101b44:	83 e2 01             	and    $0x1,%edx
  101b47:	09 c8                	or     %ecx,%eax
  101b49:	89 07                	mov    %eax,(%edi)
  101b4b:	8b 03                	mov    (%ebx),%eax
  101b4d:	83 e0 fe             	and    $0xfffffffe,%eax
  101b50:	09 d0                	or     %edx,%eax
  101b52:	89 03                	mov    %eax,(%ebx)
  101b54:	8b 17                	mov    (%edi),%edx
  101b56:	83 fa 01             	cmp    $0x1,%edx
  101b59:	76 12                	jbe    101b6d <rb_remove+0x154>
  101b5b:	89 d3                	mov    %edx,%ebx
  101b5d:	83 e3 fe             	and    $0xfffffffe,%ebx
  101b60:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
  101b64:	7f 2e                	jg     101b94 <rb_remove+0x17b>
  101b66:	8b 45 08             	mov    0x8(%ebp),%eax
  101b69:	89 18                	mov    %ebx,(%eax)
  101b6b:	eb 12                	jmp    101b7f <rb_remove+0x166>
  101b6d:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
  101b71:	8b 5f 04             	mov    0x4(%edi),%ebx
  101b74:	7f 2d                	jg     101ba3 <rb_remove+0x18a>
  101b76:	8b 45 08             	mov    0x8(%ebp),%eax
  101b79:	85 db                	test   %ebx,%ebx
  101b7b:	89 18                	mov    %ebx,(%eax)
  101b7d:	74 08                	je     101b87 <rb_remove+0x16e>
  101b7f:	83 0b 01             	orl    $0x1,(%ebx)
  101b82:	e9 58 02 00 00       	jmp    101ddf <rb_remove+0x3c6>
  101b87:	8b 45 08             	mov    0x8(%ebp),%eax
  101b8a:	31 c9                	xor    %ecx,%ecx
  101b8c:	89 48 08             	mov    %ecx,0x8(%eax)
  101b8f:	e9 4b 02 00 00       	jmp    101ddf <rb_remove+0x3c6>
  101b94:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101b97:	8b 75 f0             	mov    -0x10(%ebp),%esi
  101b9a:	8b 44 b0 f8          	mov    -0x8(%eax,%esi,4),%eax
  101b9e:	e9 cc 01 00 00       	jmp    101d6f <rb_remove+0x356>
  101ba3:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101ba6:	8b 75 f0             	mov    -0x10(%ebp),%esi
  101ba9:	85 db                	test   %ebx,%ebx
  101bab:	8b 44 b0 f8          	mov    -0x8(%eax,%esi,4),%eax
  101baf:	0f 85 ba 01 00 00    	jne    101d6f <rb_remove+0x356>
  101bb5:	80 e2 01             	and    $0x1,%dl
  101bb8:	0f 84 a0 01 00 00    	je     101d5e <rb_remove+0x345>
  101bbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101bc1:	c6 45 e4 00          	movb   $0x0,-0x1c(%ebp)
  101bc5:	8d 0c 85 fc ff ff ff 	lea    -0x4(,%eax,4),%ecx
  101bcc:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101bcf:	8d 34 08             	lea    (%eax,%ecx,1),%esi
  101bd2:	8b 06                	mov    (%esi),%eax
  101bd4:	89 45 e0             	mov    %eax,-0x20(%ebp)
  101bd7:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101bda:	8b 44 08 fc          	mov    -0x4(%eax,%ecx,1),%eax
  101bde:	89 45 e8             	mov    %eax,-0x18(%ebp)
  101be1:	8b 58 04             	mov    0x4(%eax),%ebx
  101be4:	39 5d e0             	cmp    %ebx,-0x20(%ebp)
  101be7:	75 0e                	jne    101bf7 <rb_remove+0x1de>
  101be9:	8b 00                	mov    (%eax),%eax
  101beb:	89 c3                	mov    %eax,%ebx
  101bed:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  101bf0:	83 e3 fe             	and    $0xfffffffe,%ebx
  101bf3:	c6 45 e4 01          	movb   $0x1,-0x1c(%ebp)
  101bf7:	f6 03 01             	testb  $0x1,(%ebx)
  101bfa:	75 46                	jne    101c42 <rb_remove+0x229>
  101bfc:	89 1e                	mov    %ebx,(%esi)
  101bfe:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101c01:	8b 55 f0             	mov    -0x10(%ebp),%edx
  101c04:	89 4d d8             	mov    %ecx,-0x28(%ebp)
  101c07:	e8 02 fc ff ff       	call   10180e <rotate>
  101c0c:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101c0f:	83 20 fe             	andl   $0xfffffffe,(%eax)
  101c12:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  101c15:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101c18:	83 0b 01             	orl    $0x1,(%ebx)
  101c1b:	8b 5d e0             	mov    -0x20(%ebp),%ebx
  101c1e:	ff 45 f0             	incl   -0x10(%ebp)
  101c21:	89 5c 08 04          	mov    %ebx,0x4(%eax,%ecx,1)
  101c25:	8b 06                	mov    (%esi),%eax
  101c27:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
  101c2b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  101c2e:	75 05                	jne    101c35 <rb_remove+0x21c>
  101c30:	8b 58 04             	mov    0x4(%eax),%ebx
  101c33:	eb 0d                	jmp    101c42 <rb_remove+0x229>
  101c35:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101c38:	8b 00                	mov    (%eax),%eax
  101c3a:	89 c3                	mov    %eax,%ebx
  101c3c:	89 45 d8             	mov    %eax,-0x28(%ebp)
  101c3f:	83 e3 fe             	and    $0xfffffffe,%ebx
  101c42:	8b 13                	mov    (%ebx),%edx
  101c44:	8b 73 04             	mov    0x4(%ebx),%esi
  101c47:	89 d0                	mov    %edx,%eax
  101c49:	83 e0 fe             	and    $0xfffffffe,%eax
  101c4c:	83 fa 01             	cmp    $0x1,%edx
  101c4f:	76 05                	jbe    101c56 <rb_remove+0x23d>
  101c51:	f6 00 01             	testb  $0x1,(%eax)
  101c54:	74 51                	je     101ca7 <rb_remove+0x28e>
  101c56:	85 f6                	test   %esi,%esi
  101c58:	74 05                	je     101c5f <rb_remove+0x246>
  101c5a:	f6 06 01             	testb  $0x1,(%esi)
  101c5d:	74 40                	je     101c9f <rb_remove+0x286>
  101c5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
  101c62:	39 c7                	cmp    %eax,%edi
  101c64:	75 0e                	jne    101c74 <rb_remove+0x25b>
  101c66:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
  101c6a:	31 c9                	xor    %ecx,%ecx
  101c6c:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101c6f:	e8 88 fb ff ff       	call   1017fc <set_child>
  101c74:	83 23 fe             	andl   $0xfffffffe,(%ebx)
  101c77:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101c7a:	8b 00                	mov    (%eax),%eax
  101c7c:	a8 01                	test   $0x1,%al
  101c7e:	74 12                	je     101c92 <rb_remove+0x279>
  101c80:	ff 4d f0             	decl   -0x10(%ebp)
  101c83:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
  101c87:	0f 85 31 ff ff ff    	jne    101bbe <rb_remove+0x1a5>
  101c8d:	e9 3e 01 00 00       	jmp    101dd0 <rb_remove+0x3b7>
  101c92:	8b 7d e8             	mov    -0x18(%ebp),%edi
  101c95:	83 c8 01             	or     $0x1,%eax
  101c98:	89 07                	mov    %eax,(%edi)
  101c9a:	e9 31 01 00 00       	jmp    101dd0 <rb_remove+0x3b7>
  101c9f:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
  101ca3:	75 17                	jne    101cbc <rb_remove+0x2a3>
  101ca5:	eb 0a                	jmp    101cb1 <rb_remove+0x298>
  101ca7:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
  101cab:	75 14                	jne    101cc1 <rb_remove+0x2a8>
  101cad:	85 f6                	test   %esi,%esi
  101caf:	74 1b                	je     101ccc <rb_remove+0x2b3>
  101cb1:	f6 06 01             	testb  $0x1,(%esi)
  101cb4:	c6 45 e4 00          	movb   $0x0,-0x1c(%ebp)
  101cb8:	74 64                	je     101d1e <rb_remove+0x305>
  101cba:	eb 10                	jmp    101ccc <rb_remove+0x2b3>
  101cbc:	83 fa 01             	cmp    $0x1,%edx
  101cbf:	76 0d                	jbe    101cce <rb_remove+0x2b5>
  101cc1:	f6 00 01             	testb  $0x1,(%eax)
  101cc4:	74 52                	je     101d18 <rb_remove+0x2ff>
  101cc6:	c6 45 e4 01          	movb   $0x1,-0x1c(%ebp)
  101cca:	eb 02                	jmp    101cce <rb_remove+0x2b5>
  101ccc:	89 c6                	mov    %eax,%esi
  101cce:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101cd1:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101cd4:	8d 04 85 fc ff ff ff 	lea    -0x4(,%eax,4),%eax
  101cdb:	01 c1                	add    %eax,%ecx
  101cdd:	89 4d d8             	mov    %ecx,-0x28(%ebp)
  101ce0:	89 19                	mov    %ebx,(%ecx)
  101ce2:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101ce5:	89 74 01 04          	mov    %esi,0x4(%ecx,%eax,1)
  101ce9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101cec:	8d 50 01             	lea    0x1(%eax),%edx
  101cef:	89 c8                	mov    %ecx,%eax
  101cf1:	e8 18 fb ff ff       	call   10180e <rotate>
  101cf6:	83 23 fe             	andl   $0xfffffffe,(%ebx)
  101cf9:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  101cfc:	83 0e 01             	orl    $0x1,(%esi)
  101cff:	8b 19                	mov    (%ecx),%ebx
  101d01:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
  101d05:	75 05                	jne    101d0c <rb_remove+0x2f3>
  101d07:	8b 73 04             	mov    0x4(%ebx),%esi
  101d0a:	eb 05                	jmp    101d11 <rb_remove+0x2f8>
  101d0c:	8b 33                	mov    (%ebx),%esi
  101d0e:	83 e6 fe             	and    $0xfffffffe,%esi
  101d11:	8b 45 e0             	mov    -0x20(%ebp),%eax
  101d14:	89 01                	mov    %eax,(%ecx)
  101d16:	eb 06                	jmp    101d1e <rb_remove+0x305>
  101d18:	89 c6                	mov    %eax,%esi
  101d1a:	c6 45 e4 01          	movb   $0x1,-0x1c(%ebp)
  101d1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101d21:	8b 13                	mov    (%ebx),%edx
  101d23:	83 e2 fe             	and    $0xfffffffe,%edx
  101d26:	8b 00                	mov    (%eax),%eax
  101d28:	89 45 d8             	mov    %eax,-0x28(%ebp)
  101d2b:	83 e0 01             	and    $0x1,%eax
  101d2e:	09 d0                	or     %edx,%eax
  101d30:	89 03                	mov    %eax,(%ebx)
  101d32:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101d35:	83 08 01             	orl    $0x1,(%eax)
  101d38:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101d3b:	83 0e 01             	orl    $0x1,(%esi)
  101d3e:	8b 75 f0             	mov    -0x10(%ebp),%esi
  101d41:	89 f2                	mov    %esi,%edx
  101d43:	89 5c b0 fc          	mov    %ebx,-0x4(%eax,%esi,4)
  101d47:	e8 c2 fa ff ff       	call   10180e <rotate>
  101d4c:	8b 45 e0             	mov    -0x20(%ebp),%eax
  101d4f:	39 c7                	cmp    %eax,%edi
  101d51:	75 7d                	jne    101dd0 <rb_remove+0x3b7>
  101d53:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
  101d57:	31 c9                	xor    %ecx,%ecx
  101d59:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101d5c:	eb 0a                	jmp    101d68 <rb_remove+0x34f>
  101d5e:	31 d2                	xor    %edx,%edx
  101d60:	39 78 04             	cmp    %edi,0x4(%eax)
  101d63:	0f 94 c2             	sete   %dl
  101d66:	31 c9                	xor    %ecx,%ecx
  101d68:	e8 8f fa ff ff       	call   1017fc <set_child>
  101d6d:	eb 61                	jmp    101dd0 <rb_remove+0x3b7>
  101d6f:	31 d2                	xor    %edx,%edx
  101d71:	89 d9                	mov    %ebx,%ecx
  101d73:	39 78 04             	cmp    %edi,0x4(%eax)
  101d76:	0f 94 c2             	sete   %dl
  101d79:	e8 7e fa ff ff       	call   1017fc <set_child>
  101d7e:	8b 07                	mov    (%edi),%eax
  101d80:	a8 01                	test   $0x1,%al
  101d82:	75 3e                	jne    101dc2 <rb_remove+0x3a9>
  101d84:	f6 03 01             	testb  $0x1,(%ebx)
  101d87:	75 39                	jne    101dc2 <rb_remove+0x3a9>
  101d89:	68 ed 01 00 00       	push   $0x1ed
  101d8e:	68 cd 12 11 00       	push   $0x1112cd
  101d93:	68 ef 12 11 00       	push   $0x1112ef
  101d98:	68 ee 10 11 00       	push   $0x1110ee
  101d9d:	e8 3b f8 ff ff       	call   1015dd <assert_print>
  101da2:	83 c4 10             	add    $0x10,%esp
  101da5:	68 11 13 11 00       	push   $0x111311
  101daa:	e8 2e f8 ff ff       	call   1015dd <assert_print>
  101daf:	c7 04 24 ed 01 00 00 	movl   $0x1ed,(%esp)
  101db6:	68 cd 12 11 00       	push   $0x1112cd
  101dbb:	e8 0e f8 ff ff       	call   1015ce <assert_post_action>
  101dc0:	58                   	pop    %eax
  101dc1:	5a                   	pop    %edx
  101dc2:	8b 13                	mov    (%ebx),%edx
  101dc4:	a8 01                	test   $0x1,%al
  101dc6:	74 05                	je     101dcd <rb_remove+0x3b4>
  101dc8:	80 e2 01             	and    $0x1,%dl
  101dcb:	75 03                	jne    101dd0 <rb_remove+0x3b7>
  101dcd:	83 0b 01             	orl    $0x1,(%ebx)
  101dd0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  101dd3:	8b 7d 08             	mov    0x8(%ebp),%edi
  101dd6:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
  101ddd:	89 07                	mov    %eax,(%edi)
  101ddf:	8b 65 dc             	mov    -0x24(%ebp),%esp
  101de2:	8d 65 f4             	lea    -0xc(%ebp),%esp
  101de5:	5b                   	pop    %ebx
  101de6:	5e                   	pop    %esi
  101de7:	5f                   	pop    %edi
  101de8:	5d                   	pop    %ebp
  101de9:	c3                   	ret

00101dea <z_rb_foreach_next>:
  101dea:	55                   	push   %ebp
  101deb:	89 e5                	mov    %esp,%ebp
  101ded:	56                   	push   %esi
  101dee:	53                   	push   %ebx
  101def:	8b 45 08             	mov    0x8(%ebp),%eax
  101df2:	8b 55 0c             	mov    0xc(%ebp),%edx
  101df5:	8b 08                	mov    (%eax),%ecx
  101df7:	85 c9                	test   %ecx,%ecx
  101df9:	75 04                	jne    101dff <z_rb_foreach_next+0x15>
  101dfb:	31 c0                	xor    %eax,%eax
  101dfd:	eb 59                	jmp    101e58 <z_rb_foreach_next+0x6e>
  101dff:	8b 42 08             	mov    0x8(%edx),%eax
  101e02:	83 f8 ff             	cmp    $0xffffffff,%eax
  101e05:	75 04                	jne    101e0b <z_rb_foreach_next+0x21>
  101e07:	89 c8                	mov    %ecx,%eax
  101e09:	eb 15                	jmp    101e20 <z_rb_foreach_next+0x36>
  101e0b:	8b 0a                	mov    (%edx),%ecx
  101e0d:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
  101e14:	8b 34 81             	mov    (%ecx,%eax,4),%esi
  101e17:	8b 76 04             	mov    0x4(%esi),%esi
  101e1a:	85 f6                	test   %esi,%esi
  101e1c:	74 0a                	je     101e28 <z_rb_foreach_next+0x3e>
  101e1e:	89 f0                	mov    %esi,%eax
  101e20:	5b                   	pop    %ebx
  101e21:	5e                   	pop    %esi
  101e22:	5d                   	pop    %ebp
  101e23:	e9 8b f9 ff ff       	jmp    1017b3 <stack_left_limb>
  101e28:	8b 72 04             	mov    0x4(%edx),%esi
  101e2b:	80 3c 06 00          	cmpb   $0x0,(%esi,%eax,1)
  101e2f:	74 0a                	je     101e3b <z_rb_foreach_next+0x51>
  101e31:	48                   	dec    %eax
  101e32:	89 42 08             	mov    %eax,0x8(%edx)
  101e35:	8b 44 19 fc          	mov    -0x4(%ecx,%ebx,1),%eax
  101e39:	eb 1d                	jmp    101e58 <z_rb_foreach_next+0x6e>
  101e3b:	8b 5a 08             	mov    0x8(%edx),%ebx
  101e3e:	85 db                	test   %ebx,%ebx
  101e40:	8d 43 ff             	lea    -0x1(%ebx),%eax
  101e43:	7e 0e                	jle    101e53 <z_rb_foreach_next+0x69>
  101e45:	80 3c 1e 00          	cmpb   $0x0,(%esi,%ebx,1)
  101e49:	89 42 08             	mov    %eax,0x8(%edx)
  101e4c:	74 ed                	je     101e3b <z_rb_foreach_next+0x51>
  101e4e:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  101e51:	eb 05                	jmp    101e58 <z_rb_foreach_next+0x6e>
  101e53:	89 42 08             	mov    %eax,0x8(%edx)
  101e56:	eb a3                	jmp    101dfb <z_rb_foreach_next+0x11>
  101e58:	5b                   	pop    %ebx
  101e59:	5e                   	pop    %esi
  101e5a:	5d                   	pop    %ebp
  101e5b:	c3                   	ret

00101e5c <setup_bundle_data.constprop.0>:
  101e5c:	55                   	push   %ebp
  101e5d:	89 e5                	mov    %esp,%ebp
  101e5f:	57                   	push   %edi
  101e60:	56                   	push   %esi
  101e61:	89 d7                	mov    %edx,%edi
  101e63:	c1 ef 05             	shr    $0x5,%edi
  101e66:	53                   	push   %ebx
  101e67:	53                   	push   %ebx
  101e68:	89 cb                	mov    %ecx,%ebx
  101e6a:	89 d1                	mov    %edx,%ecx
  101e6c:	89 38                	mov    %edi,(%eax)
  101e6e:	8d 5c 1a ff          	lea    -0x1(%edx,%ebx,1),%ebx
  101e72:	ba 01 00 00 00       	mov    $0x1,%edx
  101e77:	89 de                	mov    %ebx,%esi
  101e79:	83 e3 1f             	and    $0x1f,%ebx
  101e7c:	83 e1 1f             	and    $0x1f,%ecx
  101e7f:	89 5d f0             	mov    %ebx,-0x10(%ebp)
  101e82:	89 58 0c             	mov    %ebx,0xc(%eax)
  101e85:	89 d3                	mov    %edx,%ebx
  101e87:	d3 e3                	shl    %cl,%ebx
  101e89:	c1 ee 05             	shr    $0x5,%esi
  101e8c:	89 48 08             	mov    %ecx,0x8(%eax)
  101e8f:	89 d9                	mov    %ebx,%ecx
  101e91:	89 70 04             	mov    %esi,0x4(%eax)
  101e94:	f7 d9                	neg    %ecx
  101e96:	89 cb                	mov    %ecx,%ebx
  101e98:	89 48 10             	mov    %ecx,0x10(%eax)
  101e9b:	8a 4d f0             	mov    -0x10(%ebp),%cl
  101e9e:	d3 e2                	shl    %cl,%edx
  101ea0:	8d 4a ff             	lea    -0x1(%edx),%ecx
  101ea3:	09 ca                	or     %ecx,%edx
  101ea5:	39 f7                	cmp    %esi,%edi
  101ea7:	89 50 14             	mov    %edx,0x14(%eax)
  101eaa:	75 07                	jne    101eb3 <setup_bundle_data.constprop.0+0x57>
  101eac:	89 de                	mov    %ebx,%esi
  101eae:	21 d6                	and    %edx,%esi
  101eb0:	89 70 10             	mov    %esi,0x10(%eax)
  101eb3:	58                   	pop    %eax
  101eb4:	5b                   	pop    %ebx
  101eb5:	5e                   	pop    %esi
  101eb6:	5f                   	pop    %edi
  101eb7:	5d                   	pop    %ebp
  101eb8:	c3                   	ret

00101eb9 <match_region>:
  101eb9:	55                   	push   %ebp
  101eba:	89 e5                	mov    %esp,%ebp
  101ebc:	57                   	push   %edi
  101ebd:	56                   	push   %esi
  101ebe:	89 c6                	mov    %eax,%esi
  101ec0:	53                   	push   %ebx
  101ec1:	83 ec 08             	sub    $0x8,%esp
  101ec4:	8b 45 08             	mov    0x8(%ebp),%eax
  101ec7:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101eca:	8a 45 f0             	mov    -0x10(%ebp),%al
  101ecd:	88 45 ef             	mov    %al,-0x11(%ebp)
  101ed0:	8b 45 0c             	mov    0xc(%ebp),%eax
  101ed3:	e8 84 ff ff ff       	call   101e5c <setup_bundle_data.constprop.0>
  101ed8:	8b 45 0c             	mov    0xc(%ebp),%eax
  101edb:	8b 76 08             	mov    0x8(%esi),%esi
  101ede:	8b 10                	mov    (%eax),%edx
  101ee0:	8b 78 04             	mov    0x4(%eax),%edi
  101ee3:	8b 40 10             	mov    0x10(%eax),%eax
  101ee6:	39 fa                	cmp    %edi,%edx
  101ee8:	8b 0c 96             	mov    (%esi,%edx,4),%ecx
  101eeb:	75 15                	jne    101f02 <match_region+0x49>
  101eed:	80 7d f0 00          	cmpb   $0x0,-0x10(%ebp)
  101ef1:	75 02                	jne    101ef5 <match_region+0x3c>
  101ef3:	f7 d1                	not    %ecx
  101ef5:	89 c3                	mov    %eax,%ebx
  101ef7:	21 cb                	and    %ecx,%ebx
  101ef9:	39 d8                	cmp    %ebx,%eax
  101efb:	75 15                	jne    101f12 <match_region+0x59>
  101efd:	e9 9d 00 00 00       	jmp    101f9f <match_region+0xe6>
  101f02:	80 7d f0 00          	cmpb   $0x0,-0x10(%ebp)
  101f06:	75 02                	jne    101f0a <match_region+0x51>
  101f08:	f7 d1                	not    %ecx
  101f0a:	89 c3                	mov    %eax,%ebx
  101f0c:	21 cb                	and    %ecx,%ebx
  101f0e:	39 d8                	cmp    %ebx,%eax
  101f10:	74 06                	je     101f18 <match_region+0x5f>
  101f12:	f7 d1                	not    %ecx
  101f14:	21 c8                	and    %ecx,%eax
  101f16:	eb 3f                	jmp    101f57 <match_region+0x9e>
  101f18:	80 7d f0 00          	cmpb   $0x0,-0x10(%ebp)
  101f1c:	8b 04 be             	mov    (%esi,%edi,4),%eax
  101f1f:	75 02                	jne    101f23 <match_region+0x6a>
  101f21:	f7 d0                	not    %eax
  101f23:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  101f26:	8b 4b 14             	mov    0x14(%ebx),%ecx
  101f29:	89 cb                	mov    %ecx,%ebx
  101f2b:	21 c3                	and    %eax,%ebx
  101f2d:	39 d9                	cmp    %ebx,%ecx
  101f2f:	74 17                	je     101f48 <match_region+0x8f>
  101f31:	f7 d0                	not    %eax
  101f33:	21 c8                	and    %ecx,%eax
  101f35:	89 fa                	mov    %edi,%edx
  101f37:	eb 1e                	jmp    101f57 <match_region+0x9e>
  101f39:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
  101f3d:	8b 04 96             	mov    (%esi,%edx,4),%eax
  101f40:	74 02                	je     101f44 <match_region+0x8b>
  101f42:	f7 d0                	not    %eax
  101f44:	85 c0                	test   %eax,%eax
  101f46:	75 07                	jne    101f4f <match_region+0x96>
  101f48:	42                   	inc    %edx
  101f49:	39 fa                	cmp    %edi,%edx
  101f4b:	72 ec                	jb     101f39 <match_region+0x80>
  101f4d:	eb 50                	jmp    101f9f <match_region+0xe6>
  101f4f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  101f53:	75 39                	jne    101f8e <match_region+0xd5>
  101f55:	eb 44                	jmp    101f9b <match_region+0xe2>
  101f57:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  101f5b:	74 3e                	je     101f9b <match_region+0xe2>
  101f5d:	85 c0                	test   %eax,%eax
  101f5f:	75 2d                	jne    101f8e <match_region+0xd5>
  101f61:	68 96 00 00 00       	push   $0x96
  101f66:	68 24 13 11 00       	push   $0x111324
  101f6b:	68 4c 13 11 00       	push   $0x11134c
  101f70:	68 ee 10 11 00       	push   $0x1110ee
  101f75:	e8 63 f6 ff ff       	call   1015dd <assert_print>
  101f7a:	83 c4 10             	add    $0x10,%esp
  101f7d:	68 96 00 00 00       	push   $0x96
  101f82:	68 24 13 11 00       	push   $0x111324
  101f87:	e8 42 f6 ff ff       	call   1015ce <assert_post_action>
  101f8c:	58                   	pop    %eax
  101f8d:	5a                   	pop    %edx
  101f8e:	0f bc c0             	bsf    %eax,%eax
  101f91:	c1 e2 05             	shl    $0x5,%edx
  101f94:	01 c2                	add    %eax,%edx
  101f96:	8b 45 10             	mov    0x10(%ebp),%eax
  101f99:	89 10                	mov    %edx,(%eax)
  101f9b:	31 c0                	xor    %eax,%eax
  101f9d:	eb 02                	jmp    101fa1 <match_region+0xe8>
  101f9f:	b0 01                	mov    $0x1,%al
  101fa1:	8d 65 f4             	lea    -0xc(%ebp),%esp
  101fa4:	5b                   	pop    %ebx
  101fa5:	5e                   	pop    %esi
  101fa6:	5f                   	pop    %edi
  101fa7:	5d                   	pop    %ebp
  101fa8:	c3                   	ret

00101fa9 <set_region>:
  101fa9:	55                   	push   %ebp
  101faa:	89 e5                	mov    %esp,%ebp
  101fac:	57                   	push   %edi
  101fad:	56                   	push   %esi
  101fae:	53                   	push   %ebx
  101faf:	89 c3                	mov    %eax,%ebx
  101fb1:	83 ec 1c             	sub    $0x1c,%esp
  101fb4:	8b 45 0c             	mov    0xc(%ebp),%eax
  101fb7:	8b 75 08             	mov    0x8(%ebp),%esi
  101fba:	85 c0                	test   %eax,%eax
  101fbc:	75 0b                	jne    101fc9 <set_region+0x20>
  101fbe:	8d 45 dc             	lea    -0x24(%ebp),%eax
  101fc1:	e8 96 fe ff ff       	call   101e5c <setup_bundle_data.constprop.0>
  101fc6:	8d 45 dc             	lea    -0x24(%ebp),%eax
  101fc9:	8b 53 08             	mov    0x8(%ebx),%edx
  101fcc:	8b 38                	mov    (%eax),%edi
  101fce:	8d 3c ba             	lea    (%edx,%edi,4),%edi
  101fd1:	8b 50 10             	mov    0x10(%eax),%edx
  101fd4:	89 55 d8             	mov    %edx,-0x28(%ebp)
  101fd7:	8b 50 04             	mov    0x4(%eax),%edx
  101fda:	39 10                	cmp    %edx,(%eax)
  101fdc:	8b 0f                	mov    (%edi),%ecx
  101fde:	75 1a                	jne    101ffa <set_region+0x51>
  101fe0:	89 f0                	mov    %esi,%eax
  101fe2:	84 c0                	test   %al,%al
  101fe4:	74 09                	je     101fef <set_region+0x46>
  101fe6:	8b 45 d8             	mov    -0x28(%ebp),%eax
  101fe9:	09 c1                	or     %eax,%ecx
  101feb:	89 0f                	mov    %ecx,(%edi)
  101fed:	eb 67                	jmp    102056 <set_region+0xad>
  101fef:	8b 55 d8             	mov    -0x28(%ebp),%edx
  101ff2:	f7 d2                	not    %edx
  101ff4:	21 ca                	and    %ecx,%edx
  101ff6:	89 17                	mov    %edx,(%edi)
  101ff8:	eb 5c                	jmp    102056 <set_region+0xad>
  101ffa:	89 f2                	mov    %esi,%edx
  101ffc:	84 d2                	test   %dl,%dl
  101ffe:	74 2a                	je     10202a <set_region+0x81>
  102000:	8b 75 d8             	mov    -0x28(%ebp),%esi
  102003:	09 f1                	or     %esi,%ecx
  102005:	89 0f                	mov    %ecx,(%edi)
  102007:	8b 53 08             	mov    0x8(%ebx),%edx
  10200a:	8b 48 04             	mov    0x4(%eax),%ecx
  10200d:	8b 70 14             	mov    0x14(%eax),%esi
  102010:	09 34 8a             	or     %esi,(%edx,%ecx,4)
  102013:	8b 30                	mov    (%eax),%esi
  102015:	8d 56 01             	lea    0x1(%esi),%edx
  102018:	3b 50 04             	cmp    0x4(%eax),%edx
  10201b:	73 39                	jae    102056 <set_region+0xad>
  10201d:	8b 4b 08             	mov    0x8(%ebx),%ecx
  102020:	c7 04 91 ff ff ff ff 	movl   $0xffffffff,(%ecx,%edx,4)
  102027:	42                   	inc    %edx
  102028:	eb ee                	jmp    102018 <set_region+0x6f>
  10202a:	8b 55 d8             	mov    -0x28(%ebp),%edx
  10202d:	f7 d2                	not    %edx
  10202f:	21 ca                	and    %ecx,%edx
  102031:	89 17                	mov    %edx,(%edi)
  102033:	8b 50 14             	mov    0x14(%eax),%edx
  102036:	8b 70 04             	mov    0x4(%eax),%esi
  102039:	8b 4b 08             	mov    0x8(%ebx),%ecx
  10203c:	f7 d2                	not    %edx
  10203e:	21 14 b1             	and    %edx,(%ecx,%esi,4)
  102041:	8b 38                	mov    (%eax),%edi
  102043:	8d 57 01             	lea    0x1(%edi),%edx
  102046:	3b 50 04             	cmp    0x4(%eax),%edx
  102049:	73 0b                	jae    102056 <set_region+0xad>
  10204b:	8b 4b 08             	mov    0x8(%ebx),%ecx
  10204e:	31 f6                	xor    %esi,%esi
  102050:	89 34 91             	mov    %esi,(%ecx,%edx,4)
  102053:	42                   	inc    %edx
  102054:	eb f0                	jmp    102046 <set_region+0x9d>
  102056:	83 c4 1c             	add    $0x1c,%esp
  102059:	5b                   	pop    %ebx
  10205a:	5e                   	pop    %esi
  10205b:	5f                   	pop    %edi
  10205c:	5d                   	pop    %ebp
  10205d:	c3                   	ret

0010205e <set_clear_region>:
  10205e:	55                   	push   %ebp
  10205f:	89 e5                	mov    %esp,%ebp
  102061:	57                   	push   %edi
  102062:	56                   	push   %esi
  102063:	53                   	push   %ebx
  102064:	89 c3                	mov    %eax,%ebx
  102066:	83 ec 14             	sub    $0x14,%esp
  102069:	89 55 ec             	mov    %edx,-0x14(%ebp)
  10206c:	8b 45 08             	mov    0x8(%ebp),%eax
  10206f:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  102072:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102075:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102078:	8d 73 0c             	lea    0xc(%ebx),%esi
  10207b:	8d 78 ff             	lea    -0x1(%eax),%edi
  10207e:	8d 04 39             	lea    (%ecx,%edi,1),%eax
  102081:	89 45 f0             	mov    %eax,-0x10(%ebp)
  102084:	9c                   	pushf
  102085:	fa                   	cli
  102086:	8f 45 e4             	pop    -0x1c(%ebp)
  102089:	56                   	push   %esi
  10208a:	e8 60 8c 00 00       	call   10acef <z_spin_lock_valid>
  10208f:	5a                   	pop    %edx
  102090:	84 c0                	test   %al,%al
  102092:	8b 55 e0             	mov    -0x20(%ebp),%edx
  102095:	75 33                	jne    1020ca <set_clear_region+0x6c>
  102097:	68 88 00 00 00       	push   $0x88
  10209c:	68 61 13 11 00       	push   $0x111361
  1020a1:	68 8e 13 11 00       	push   $0x11138e
  1020a6:	68 ee 10 11 00       	push   $0x1110ee
  1020ab:	e8 2d f5 ff ff       	call   1015dd <assert_print>
  1020b0:	83 c4 10             	add    $0x10,%esp
  1020b3:	56                   	push   %esi
  1020b4:	68 a3 13 11 00       	push   $0x1113a3
  1020b9:	e8 1f f5 ff ff       	call   1015dd <assert_print>
  1020be:	5b                   	pop    %ebx
  1020bf:	5e                   	pop    %esi
  1020c0:	68 88 00 00 00       	push   $0x88
  1020c5:	e9 cf 00 00 00       	jmp    102199 <set_clear_region+0x13b>
  1020ca:	89 55 e0             	mov    %edx,-0x20(%ebp)
  1020cd:	56                   	push   %esi
  1020ce:	e8 74 8c 00 00       	call   10ad47 <z_spin_lock_set_owner>
  1020d3:	59                   	pop    %ecx
  1020d4:	85 db                	test   %ebx,%ebx
  1020d6:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1020d9:	75 2d                	jne    102108 <set_clear_region+0xaa>
  1020db:	68 d0 02 00 00       	push   $0x2d0
  1020e0:	68 24 13 11 00       	push   $0x111324
  1020e5:	68 b9 13 11 00       	push   $0x1113b9
  1020ea:	68 ee 10 11 00       	push   $0x1110ee
  1020ef:	e8 e9 f4 ff ff       	call   1015dd <assert_print>
  1020f4:	83 c4 10             	add    $0x10,%esp
  1020f7:	68 d0 02 00 00       	push   $0x2d0
  1020fc:	68 24 13 11 00       	push   $0x111324
  102101:	e8 c8 f4 ff ff       	call   1015ce <assert_post_action>
  102106:	58                   	pop    %eax
  102107:	5a                   	pop    %edx
  102108:	8b 03                	mov    (%ebx),%eax
  10210a:	85 c0                	test   %eax,%eax
  10210c:	75 23                	jne    102131 <set_clear_region+0xd3>
  10210e:	68 d1 02 00 00       	push   $0x2d1
  102113:	68 24 13 11 00       	push   $0x111324
  102118:	68 d1 13 11 00       	push   $0x1113d1
  10211d:	68 ee 10 11 00       	push   $0x1110ee
  102122:	e8 b6 f4 ff ff       	call   1015dd <assert_print>
  102127:	83 c4 10             	add    $0x10,%esp
  10212a:	68 d1 02 00 00       	push   $0x2d1
  10212f:	eb cb                	jmp    1020fc <set_clear_region+0x9e>
  102131:	89 d1                	mov    %edx,%ecx
  102133:	39 fa                	cmp    %edi,%edx
  102135:	73 02                	jae    102139 <set_clear_region+0xdb>
  102137:	89 f9                	mov    %edi,%ecx
  102139:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10213c:	39 f9                	cmp    %edi,%ecx
  10213e:	73 02                	jae    102142 <set_clear_region+0xe4>
  102140:	89 f9                	mov    %edi,%ecx
  102142:	bf ea ff ff ff       	mov    $0xffffffea,%edi
  102147:	39 c1                	cmp    %eax,%ecx
  102149:	73 15                	jae    102160 <set_clear_region+0x102>
  10214b:	6a 00                	push   $0x0
  10214d:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
  102151:	50                   	push   %eax
  102152:	89 d8                	mov    %ebx,%eax
  102154:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102157:	e8 4d fe ff ff       	call   101fa9 <set_region>
  10215c:	5b                   	pop    %ebx
  10215d:	5f                   	pop    %edi
  10215e:	31 ff                	xor    %edi,%edi
  102160:	56                   	push   %esi
  102161:	e8 aa 8b 00 00       	call   10ad10 <z_spin_unlock_valid>
  102166:	59                   	pop    %ecx
  102167:	84 c0                	test   %al,%al
  102169:	75 38                	jne    1021a3 <set_clear_region+0x145>
  10216b:	68 31 01 00 00       	push   $0x131
  102170:	68 61 13 11 00       	push   $0x111361
  102175:	68 e8 13 11 00       	push   $0x1113e8
  10217a:	68 ee 10 11 00       	push   $0x1110ee
  10217f:	e8 59 f4 ff ff       	call   1015dd <assert_print>
  102184:	83 c4 10             	add    $0x10,%esp
  102187:	56                   	push   %esi
  102188:	68 ff 13 11 00       	push   $0x1113ff
  10218d:	e8 4b f4 ff ff       	call   1015dd <assert_print>
  102192:	58                   	pop    %eax
  102193:	5a                   	pop    %edx
  102194:	68 31 01 00 00       	push   $0x131
  102199:	68 61 13 11 00       	push   $0x111361
  10219e:	e9 5e ff ff ff       	jmp    102101 <set_clear_region+0xa3>
  1021a3:	0f ba 65 e4 09       	btl    $0x9,-0x1c(%ebp)
  1021a8:	73 01                	jae    1021ab <set_clear_region+0x14d>
  1021aa:	fb                   	sti
  1021ab:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1021ae:	89 f8                	mov    %edi,%eax
  1021b0:	5b                   	pop    %ebx
  1021b1:	5e                   	pop    %esi
  1021b2:	5f                   	pop    %edi
  1021b3:	5d                   	pop    %ebp
  1021b4:	c3                   	ret

001021b5 <sys_bitarray_alloc>:
  1021b5:	55                   	push   %ebp
  1021b6:	89 e5                	mov    %esp,%ebp
  1021b8:	57                   	push   %edi
  1021b9:	56                   	push   %esi
  1021ba:	53                   	push   %ebx
  1021bb:	83 ec 28             	sub    $0x28,%esp
  1021be:	8b 5d 08             	mov    0x8(%ebp),%ebx
  1021c1:	85 db                	test   %ebx,%ebx
  1021c3:	75 23                	jne    1021e8 <sys_bitarray_alloc+0x33>
  1021c5:	68 f5 01 00 00       	push   $0x1f5
  1021ca:	68 24 13 11 00       	push   $0x111324
  1021cf:	68 b9 13 11 00       	push   $0x1113b9
  1021d4:	68 ee 10 11 00       	push   $0x1110ee
  1021d9:	e8 ff f3 ff ff       	call   1015dd <assert_print>
  1021de:	83 c4 10             	add    $0x10,%esp
  1021e1:	68 f5 01 00 00       	push   $0x1f5
  1021e6:	eb 26                	jmp    10220e <sys_bitarray_alloc+0x59>
  1021e8:	83 3b 00             	cmpl   $0x0,(%ebx)
  1021eb:	75 2d                	jne    10221a <sys_bitarray_alloc+0x65>
  1021ed:	68 f6 01 00 00       	push   $0x1f6
  1021f2:	68 24 13 11 00       	push   $0x111324
  1021f7:	68 d1 13 11 00       	push   $0x1113d1
  1021fc:	68 ee 10 11 00       	push   $0x1110ee
  102201:	e8 d7 f3 ff ff       	call   1015dd <assert_print>
  102206:	83 c4 10             	add    $0x10,%esp
  102209:	68 f6 01 00 00       	push   $0x1f6
  10220e:	68 24 13 11 00       	push   $0x111324
  102213:	e8 b6 f3 ff ff       	call   1015ce <assert_post_action>
  102218:	5b                   	pop    %ebx
  102219:	5e                   	pop    %esi
  10221a:	8d 73 0c             	lea    0xc(%ebx),%esi
  10221d:	9c                   	pushf
  10221e:	fa                   	cli
  10221f:	8f 45 cc             	pop    -0x34(%ebp)
  102222:	56                   	push   %esi
  102223:	e8 c7 8a 00 00       	call   10acef <z_spin_lock_valid>
  102228:	59                   	pop    %ecx
  102229:	84 c0                	test   %al,%al
  10222b:	75 33                	jne    102260 <sys_bitarray_alloc+0xab>
  10222d:	68 88 00 00 00       	push   $0x88
  102232:	68 61 13 11 00       	push   $0x111361
  102237:	68 8e 13 11 00       	push   $0x11138e
  10223c:	68 ee 10 11 00       	push   $0x1110ee
  102241:	e8 97 f3 ff ff       	call   1015dd <assert_print>
  102246:	83 c4 10             	add    $0x10,%esp
  102249:	56                   	push   %esi
  10224a:	68 a3 13 11 00       	push   $0x1113a3
  10224f:	e8 89 f3 ff ff       	call   1015dd <assert_print>
  102254:	58                   	pop    %eax
  102255:	5a                   	pop    %edx
  102256:	68 88 00 00 00       	push   $0x88
  10225b:	e9 ee 00 00 00       	jmp    10234e <sys_bitarray_alloc+0x199>
  102260:	56                   	push   %esi
  102261:	e8 e1 8a 00 00       	call   10ad47 <z_spin_lock_set_owner>
  102266:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  10226a:	58                   	pop    %eax
  10226b:	0f 84 9f 00 00 00    	je     102310 <sys_bitarray_alloc+0x15b>
  102271:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  102275:	0f 84 95 00 00 00    	je     102310 <sys_bitarray_alloc+0x15b>
  10227b:	8b 13                	mov    (%ebx),%edx
  10227d:	bf ea ff ff ff       	mov    $0xffffffea,%edi
  102282:	3b 55 0c             	cmp    0xc(%ebp),%edx
  102285:	0f 82 8a 00 00 00    	jb     102315 <sys_bitarray_alloc+0x160>
  10228b:	8b 7b 04             	mov    0x4(%ebx),%edi
  10228e:	31 c9                	xor    %ecx,%ecx
  102290:	89 c8                	mov    %ecx,%eax
  102292:	c1 e0 05             	shl    $0x5,%eax
  102295:	39 cf                	cmp    %ecx,%edi
  102297:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10229a:	74 1a                	je     1022b6 <sys_bitarray_alloc+0x101>
  10229c:	8b 43 08             	mov    0x8(%ebx),%eax
  10229f:	8b 04 88             	mov    (%eax,%ecx,4),%eax
  1022a2:	83 f8 ff             	cmp    $0xffffffff,%eax
  1022a5:	75 03                	jne    1022aa <sys_bitarray_alloc+0xf5>
  1022a7:	41                   	inc    %ecx
  1022a8:	eb e6                	jmp    102290 <sys_bitarray_alloc+0xdb>
  1022aa:	85 c0                	test   %eax,%eax
  1022ac:	74 08                	je     1022b6 <sys_bitarray_alloc+0x101>
  1022ae:	f7 d0                	not    %eax
  1022b0:	0f bc c0             	bsf    %eax,%eax
  1022b3:	01 45 d4             	add    %eax,-0x2c(%ebp)
  1022b6:	2b 55 0c             	sub    0xc(%ebp),%edx
  1022b9:	89 55 d0             	mov    %edx,-0x30(%ebp)
  1022bc:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  1022bf:	39 55 d0             	cmp    %edx,-0x30(%ebp)
  1022c2:	72 45                	jb     102309 <sys_bitarray_alloc+0x154>
  1022c4:	8d 45 d8             	lea    -0x28(%ebp),%eax
  1022c7:	8d 7d dc             	lea    -0x24(%ebp),%edi
  1022ca:	50                   	push   %eax
  1022cb:	89 d8                	mov    %ebx,%eax
  1022cd:	57                   	push   %edi
  1022ce:	6a 00                	push   $0x0
  1022d0:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1022d3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  1022d6:	e8 de fb ff ff       	call   101eb9 <match_region>
  1022db:	83 c4 0c             	add    $0xc,%esp
  1022de:	84 c0                	test   %al,%al
  1022e0:	74 1e                	je     102300 <sys_bitarray_alloc+0x14b>
  1022e2:	57                   	push   %edi
  1022e3:	89 d8                	mov    %ebx,%eax
  1022e5:	6a 01                	push   $0x1
  1022e7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  1022ea:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1022ed:	e8 b7 fc ff ff       	call   101fa9 <set_region>
  1022f2:	8b 45 10             	mov    0x10(%ebp),%eax
  1022f5:	5b                   	pop    %ebx
  1022f6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  1022f9:	5f                   	pop    %edi
  1022fa:	89 10                	mov    %edx,(%eax)
  1022fc:	31 ff                	xor    %edi,%edi
  1022fe:	eb 15                	jmp    102315 <sys_bitarray_alloc+0x160>
  102300:	8b 45 d8             	mov    -0x28(%ebp),%eax
  102303:	40                   	inc    %eax
  102304:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  102307:	eb b3                	jmp    1022bc <sys_bitarray_alloc+0x107>
  102309:	bf e4 ff ff ff       	mov    $0xffffffe4,%edi
  10230e:	eb 05                	jmp    102315 <sys_bitarray_alloc+0x160>
  102310:	bf ea ff ff ff       	mov    $0xffffffea,%edi
  102315:	56                   	push   %esi
  102316:	e8 f5 89 00 00       	call   10ad10 <z_spin_unlock_valid>
  10231b:	59                   	pop    %ecx
  10231c:	84 c0                	test   %al,%al
  10231e:	75 38                	jne    102358 <sys_bitarray_alloc+0x1a3>
  102320:	68 31 01 00 00       	push   $0x131
  102325:	68 61 13 11 00       	push   $0x111361
  10232a:	68 e8 13 11 00       	push   $0x1113e8
  10232f:	68 ee 10 11 00       	push   $0x1110ee
  102334:	e8 a4 f2 ff ff       	call   1015dd <assert_print>
  102339:	83 c4 10             	add    $0x10,%esp
  10233c:	56                   	push   %esi
  10233d:	68 ff 13 11 00       	push   $0x1113ff
  102342:	e8 96 f2 ff ff       	call   1015dd <assert_print>
  102347:	58                   	pop    %eax
  102348:	5a                   	pop    %edx
  102349:	68 31 01 00 00       	push   $0x131
  10234e:	68 61 13 11 00       	push   $0x111361
  102353:	e9 bb fe ff ff       	jmp    102213 <sys_bitarray_alloc+0x5e>
  102358:	0f ba 65 cc 09       	btl    $0x9,-0x34(%ebp)
  10235d:	73 01                	jae    102360 <sys_bitarray_alloc+0x1ab>
  10235f:	fb                   	sti
  102360:	8d 65 f4             	lea    -0xc(%ebp),%esp
  102363:	89 f8                	mov    %edi,%eax
  102365:	5b                   	pop    %ebx
  102366:	5e                   	pop    %esi
  102367:	5f                   	pop    %edi
  102368:	5d                   	pop    %ebp
  102369:	c3                   	ret

0010236a <sys_bitarray_free>:
  10236a:	55                   	push   %ebp
  10236b:	89 e5                	mov    %esp,%ebp
  10236d:	57                   	push   %edi
  10236e:	56                   	push   %esi
  10236f:	53                   	push   %ebx
  102370:	83 ec 20             	sub    $0x20,%esp
  102373:	8b 45 0c             	mov    0xc(%ebp),%eax
  102376:	8b 4d 10             	mov    0x10(%ebp),%ecx
  102379:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10237c:	8d 7c 08 ff          	lea    -0x1(%eax,%ecx,1),%edi
  102380:	85 db                	test   %ebx,%ebx
  102382:	75 23                	jne    1023a7 <sys_bitarray_free+0x3d>
  102384:	68 86 02 00 00       	push   $0x286
  102389:	68 24 13 11 00       	push   $0x111324
  10238e:	68 b9 13 11 00       	push   $0x1113b9
  102393:	68 ee 10 11 00       	push   $0x1110ee
  102398:	e8 40 f2 ff ff       	call   1015dd <assert_print>
  10239d:	83 c4 10             	add    $0x10,%esp
  1023a0:	68 86 02 00 00       	push   $0x286
  1023a5:	eb 26                	jmp    1023cd <sys_bitarray_free+0x63>
  1023a7:	83 3b 00             	cmpl   $0x0,(%ebx)
  1023aa:	75 2d                	jne    1023d9 <sys_bitarray_free+0x6f>
  1023ac:	68 87 02 00 00       	push   $0x287
  1023b1:	68 24 13 11 00       	push   $0x111324
  1023b6:	68 d1 13 11 00       	push   $0x1113d1
  1023bb:	68 ee 10 11 00       	push   $0x1110ee
  1023c0:	e8 18 f2 ff ff       	call   1015dd <assert_print>
  1023c5:	83 c4 10             	add    $0x10,%esp
  1023c8:	68 87 02 00 00       	push   $0x287
  1023cd:	68 24 13 11 00       	push   $0x111324
  1023d2:	e8 f7 f1 ff ff       	call   1015ce <assert_post_action>
  1023d7:	5b                   	pop    %ebx
  1023d8:	5e                   	pop    %esi
  1023d9:	8d 73 0c             	lea    0xc(%ebx),%esi
  1023dc:	9c                   	pushf
  1023dd:	fa                   	cli
  1023de:	8f 45 d8             	pop    -0x28(%ebp)
  1023e1:	56                   	push   %esi
  1023e2:	e8 08 89 00 00       	call   10acef <z_spin_lock_valid>
  1023e7:	59                   	pop    %ecx
  1023e8:	84 c0                	test   %al,%al
  1023ea:	75 33                	jne    10241f <sys_bitarray_free+0xb5>
  1023ec:	68 88 00 00 00       	push   $0x88
  1023f1:	68 61 13 11 00       	push   $0x111361
  1023f6:	68 8e 13 11 00       	push   $0x11138e
  1023fb:	68 ee 10 11 00       	push   $0x1110ee
  102400:	e8 d8 f1 ff ff       	call   1015dd <assert_print>
  102405:	83 c4 10             	add    $0x10,%esp
  102408:	56                   	push   %esi
  102409:	68 a3 13 11 00       	push   $0x1113a3
  10240e:	e8 ca f1 ff ff       	call   1015dd <assert_print>
  102413:	58                   	pop    %eax
  102414:	5a                   	pop    %edx
  102415:	68 88 00 00 00       	push   $0x88
  10241a:	e9 a3 00 00 00       	jmp    1024c2 <sys_bitarray_free+0x158>
  10241f:	56                   	push   %esi
  102420:	e8 22 89 00 00       	call   10ad47 <z_spin_lock_set_owner>
  102425:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  102429:	58                   	pop    %eax
  10242a:	ba ea ff ff ff       	mov    $0xffffffea,%edx
  10242f:	74 52                	je     102483 <sys_bitarray_free+0x119>
  102431:	8b 03                	mov    (%ebx),%eax
  102433:	3b 45 0c             	cmp    0xc(%ebp),%eax
  102436:	0f 92 c2             	setb   %dl
  102439:	39 45 10             	cmp    %eax,0x10(%ebp)
  10243c:	0f 93 c1             	setae  %cl
  10243f:	08 ca                	or     %cl,%dl
  102441:	75 3b                	jne    10247e <sys_bitarray_free+0x114>
  102443:	39 c7                	cmp    %eax,%edi
  102445:	73 37                	jae    10247e <sys_bitarray_free+0x114>
  102447:	6a 00                	push   $0x0
  102449:	8d 7d dc             	lea    -0x24(%ebp),%edi
  10244c:	57                   	push   %edi
  10244d:	89 d8                	mov    %ebx,%eax
  10244f:	6a 01                	push   $0x1
  102451:	8b 55 10             	mov    0x10(%ebp),%edx
  102454:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  102457:	e8 5d fa ff ff       	call   101eb9 <match_region>
  10245c:	83 c4 0c             	add    $0xc,%esp
  10245f:	ba f2 ff ff ff       	mov    $0xfffffff2,%edx
  102464:	84 c0                	test   %al,%al
  102466:	74 1b                	je     102483 <sys_bitarray_free+0x119>
  102468:	57                   	push   %edi
  102469:	89 d8                	mov    %ebx,%eax
  10246b:	6a 00                	push   $0x0
  10246d:	8b 55 10             	mov    0x10(%ebp),%edx
  102470:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  102473:	e8 31 fb ff ff       	call   101fa9 <set_region>
  102478:	5b                   	pop    %ebx
  102479:	5f                   	pop    %edi
  10247a:	31 d2                	xor    %edx,%edx
  10247c:	eb 05                	jmp    102483 <sys_bitarray_free+0x119>
  10247e:	ba ea ff ff ff       	mov    $0xffffffea,%edx
  102483:	89 55 d4             	mov    %edx,-0x2c(%ebp)
  102486:	56                   	push   %esi
  102487:	e8 84 88 00 00       	call   10ad10 <z_spin_unlock_valid>
  10248c:	59                   	pop    %ecx
  10248d:	84 c0                	test   %al,%al
  10248f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  102492:	75 38                	jne    1024cc <sys_bitarray_free+0x162>
  102494:	68 31 01 00 00       	push   $0x131
  102499:	68 61 13 11 00       	push   $0x111361
  10249e:	68 e8 13 11 00       	push   $0x1113e8
  1024a3:	68 ee 10 11 00       	push   $0x1110ee
  1024a8:	e8 30 f1 ff ff       	call   1015dd <assert_print>
  1024ad:	83 c4 10             	add    $0x10,%esp
  1024b0:	56                   	push   %esi
  1024b1:	68 ff 13 11 00       	push   $0x1113ff
  1024b6:	e8 22 f1 ff ff       	call   1015dd <assert_print>
  1024bb:	58                   	pop    %eax
  1024bc:	5a                   	pop    %edx
  1024bd:	68 31 01 00 00       	push   $0x131
  1024c2:	68 61 13 11 00       	push   $0x111361
  1024c7:	e9 06 ff ff ff       	jmp    1023d2 <sys_bitarray_free+0x68>
  1024cc:	0f ba 65 d8 09       	btl    $0x9,-0x28(%ebp)
  1024d1:	73 01                	jae    1024d4 <sys_bitarray_free+0x16a>
  1024d3:	fb                   	sti
  1024d4:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1024d7:	89 d0                	mov    %edx,%eax
  1024d9:	5b                   	pop    %ebx
  1024da:	5e                   	pop    %esi
  1024db:	5f                   	pop    %edi
  1024dc:	5d                   	pop    %ebp
  1024dd:	c3                   	ret

001024de <sys_bitarray_set_region>:
  1024de:	55                   	push   %ebp
  1024df:	89 e5                	mov    %esp,%ebp
  1024e1:	8b 45 08             	mov    0x8(%ebp),%eax
  1024e4:	8b 4d 10             	mov    0x10(%ebp),%ecx
  1024e7:	c7 45 08 01 00 00 00 	movl   $0x1,0x8(%ebp)
  1024ee:	8b 55 0c             	mov    0xc(%ebp),%edx
  1024f1:	5d                   	pop    %ebp
  1024f2:	e9 67 fb ff ff       	jmp    10205e <set_clear_region>

001024f7 <_ConfigAbsSyms>:
  1024f7:	c3                   	ret

001024f8 <z_log_minimal_printk>:
  1024f8:	55                   	push   %ebp
  1024f9:	89 e5                	mov    %esp,%ebp
  1024fb:	8d 45 0c             	lea    0xc(%ebp),%eax
  1024fe:	50                   	push   %eax
  1024ff:	ff 75 08             	push   0x8(%ebp)
  102502:	e8 42 ef ff ff       	call   101449 <vprintk>
  102507:	58                   	pop    %eax
  102508:	5a                   	pop    %edx
  102509:	c9                   	leave
  10250a:	c3                   	ret

0010250b <z_log_minimal_hexdump_print>:
  10250b:	55                   	push   %ebp
  10250c:	89 e5                	mov    %esp,%ebp
  10250e:	57                   	push   %edi
  10250f:	56                   	push   %esi
  102510:	53                   	push   %ebx
  102511:	8b 5d 10             	mov    0x10(%ebp),%ebx
  102514:	8b 75 0c             	mov    0xc(%ebp),%esi
  102517:	03 75 10             	add    0x10(%ebp),%esi
  10251a:	29 de                	sub    %ebx,%esi
  10251c:	85 db                	test   %ebx,%ebx
  10251e:	0f 84 aa 00 00 00    	je     1025ce <z_log_minimal_hexdump_print+0xc3>
  102524:	8b 45 08             	mov    0x8(%ebp),%eax
  102527:	8d 50 ff             	lea    -0x1(%eax),%edx
  10252a:	b8 3f 00 00 00       	mov    $0x3f,%eax
  10252f:	83 fa 03             	cmp    $0x3,%edx
  102532:	77 07                	ja     10253b <z_log_minimal_hexdump_print+0x30>
  102534:	0f be 82 2c 07 11 00 	movsbl 0x11072c(%edx),%eax
  10253b:	50                   	push   %eax
  10253c:	68 14 14 11 00       	push   $0x111414
  102541:	e8 22 f0 ff ff       	call   101568 <printk>
  102546:	59                   	pop    %ecx
  102547:	5f                   	pop    %edi
  102548:	31 ff                	xor    %edi,%edi
  10254a:	39 df                	cmp    %ebx,%edi
  10254c:	73 13                	jae    102561 <z_log_minimal_hexdump_print+0x56>
  10254e:	0f b6 14 3e          	movzbl (%esi,%edi,1),%edx
  102552:	52                   	push   %edx
  102553:	68 19 14 11 00       	push   $0x111419
  102558:	e8 0b f0 ff ff       	call   101568 <printk>
  10255d:	58                   	pop    %eax
  10255e:	5a                   	pop    %edx
  10255f:	eb 0b                	jmp    10256c <z_log_minimal_hexdump_print+0x61>
  102561:	68 1f 14 11 00       	push   $0x11141f
  102566:	e8 fd ef ff ff       	call   101568 <printk>
  10256b:	58                   	pop    %eax
  10256c:	47                   	inc    %edi
  10256d:	83 ff 08             	cmp    $0x8,%edi
  102570:	75 d8                	jne    10254a <z_log_minimal_hexdump_print+0x3f>
  102572:	68 23 14 11 00       	push   $0x111423
  102577:	31 ff                	xor    %edi,%edi
  102579:	e8 ea ef ff ff       	call   101568 <printk>
  10257e:	58                   	pop    %eax
  10257f:	39 df                	cmp    %ebx,%edi
  102581:	73 22                	jae    1025a5 <z_log_minimal_hexdump_print+0x9a>
  102583:	0f b6 0c 3e          	movzbl (%esi,%edi,1),%ecx
  102587:	89 ca                	mov    %ecx,%edx
  102589:	83 e9 20             	sub    $0x20,%ecx
  10258c:	83 f9 5e             	cmp    $0x5e,%ecx
  10258f:	76 02                	jbe    102593 <z_log_minimal_hexdump_print+0x88>
  102591:	b2 2e                	mov    $0x2e,%dl
  102593:	0f be d2             	movsbl %dl,%edx
  102596:	52                   	push   %edx
  102597:	68 25 14 11 00       	push   $0x111425
  10259c:	e8 c7 ef ff ff       	call   101568 <printk>
  1025a1:	59                   	pop    %ecx
  1025a2:	58                   	pop    %eax
  1025a3:	eb 0b                	jmp    1025b0 <z_log_minimal_hexdump_print+0xa5>
  1025a5:	68 21 14 11 00       	push   $0x111421
  1025aa:	e8 b9 ef ff ff       	call   101568 <printk>
  1025af:	5a                   	pop    %edx
  1025b0:	47                   	inc    %edi
  1025b1:	83 ff 08             	cmp    $0x8,%edi
  1025b4:	75 c9                	jne    10257f <z_log_minimal_hexdump_print+0x74>
  1025b6:	68 4b 23 11 00       	push   $0x11234b
  1025bb:	e8 a8 ef ff ff       	call   101568 <printk>
  1025c0:	58                   	pop    %eax
  1025c1:	83 fb 07             	cmp    $0x7,%ebx
  1025c4:	76 08                	jbe    1025ce <z_log_minimal_hexdump_print+0xc3>
  1025c6:	83 eb 08             	sub    $0x8,%ebx
  1025c9:	e9 46 ff ff ff       	jmp    102514 <z_log_minimal_hexdump_print+0x9>
  1025ce:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1025d1:	5b                   	pop    %ebx
  1025d2:	5e                   	pop    %esi
  1025d3:	5f                   	pop    %edi
  1025d4:	5d                   	pop    %ebp
  1025d5:	c3                   	ret

001025d6 <sys_trace_idle>:
  1025d6:	c3                   	ret

001025d7 <arch_cpu_idle>:
  1025d7:	55                   	push   %ebp
  1025d8:	89 e5                	mov    %esp,%ebp
  1025da:	e8 f7 ff ff ff       	call   1025d6 <sys_trace_idle>
  1025df:	fb                   	sti
  1025e0:	f4                   	hlt
  1025e1:	5d                   	pop    %ebp
  1025e2:	c3                   	ret

001025e3 <z_prep_c>:
  1025e3:	55                   	push   %ebp
  1025e4:	31 c9                	xor    %ecx,%ecx
  1025e6:	89 e5                	mov    %esp,%ebp
  1025e8:	53                   	push   %ebx
  1025e9:	89 0d a0 48 12 00    	mov    %ecx,0x1248a0
  1025ef:	8b 5d 08             	mov    0x8(%ebp),%ebx
  1025f2:	e8 43 11 00 00       	call   10373a <z_x86_mmu_init>
  1025f7:	6a 00                	push   $0x0
  1025f9:	e8 33 2c 00 00       	call   105231 <z_loapic_enable>
  1025fe:	83 3b 01             	cmpl   $0x1,(%ebx)
  102601:	58                   	pop    %eax
  102602:	75 09                	jne    10260d <z_prep_c+0x2a>
  102604:	ff 73 04             	push   0x4(%ebx)
  102607:	e8 f9 04 00 00       	call   102b05 <z_multiboot_init>
  10260c:	5a                   	pop    %edx
  10260d:	e8 98 16 00 00       	call   103caa <z_x86_early_serial_init>
  102612:	6a 0a                	push   $0xa
  102614:	e8 4d 16 00 00       	call   103c66 <arch_printk_char_out>
  102619:	c7 04 24 00 c0 13 00 	movl   $0x13c000,(%esp)
  102620:	e8 16 11 00 00       	call   10373b <z_x86_set_stack_guard>
  102625:	58                   	pop    %eax
  102626:	e8 6f 45 00 00       	call   106b9a <z_cstart>

0010262b <arch_system_halt>:
  10262b:	55                   	push   %ebp
  10262c:	89 e5                	mov    %esp,%ebp
  10262e:	8b 45 08             	mov    0x8(%ebp),%eax
  102631:	e7 f4                	out    %eax,$0xf4

00102633 <z_x86_check_stack_bounds>:
  102633:	55                   	push   %ebp
  102634:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  102639:	89 e5                	mov    %esp,%ebp
  10263b:	53                   	push   %ebx
  10263c:	85 c0                	test   %eax,%eax
  10263e:	8b 5d 08             	mov    0x8(%ebp),%ebx
  102641:	8b 4d 10             	mov    0x10(%ebp),%ecx
  102644:	74 09                	je     10264f <z_x86_check_stack_bounds+0x1c>
  102646:	83 3d a0 48 12 00 00 	cmpl   $0x0,0x1248a0
  10264d:	74 0c                	je     10265b <z_x86_check_stack_bounds+0x28>
  10264f:	ba 00 d0 13 00       	mov    $0x13d000,%edx
  102654:	b9 00 d8 13 00       	mov    $0x13d800,%ecx
  102659:	eb 1e                	jmp    102679 <z_x86_check_stack_bounds+0x46>
  10265b:	8b 50 64             	mov    0x64(%eax),%edx
  10265e:	80 e1 03             	and    $0x3,%cl
  102661:	89 d1                	mov    %edx,%ecx
  102663:	75 0e                	jne    102673 <z_x86_check_stack_bounds+0x40>
  102665:	f6 40 0c 04          	testb  $0x4,0xc(%eax)
  102669:	74 08                	je     102673 <z_x86_check_stack_bounds+0x40>
  10266b:	81 ea 00 10 00 00    	sub    $0x1000,%edx
  102671:	eb 06                	jmp    102679 <z_x86_check_stack_bounds+0x46>
  102673:	03 48 68             	add    0x68(%eax),%ecx
  102676:	83 e1 fc             	and    $0xfffffffc,%ecx
  102679:	b8 01 00 00 00       	mov    $0x1,%eax
  10267e:	39 da                	cmp    %ebx,%edx
  102680:	73 0a                	jae    10268c <z_x86_check_stack_bounds+0x59>
  102682:	03 5d 0c             	add    0xc(%ebp),%ebx
  102685:	31 c0                	xor    %eax,%eax
  102687:	39 d9                	cmp    %ebx,%ecx
  102689:	0f 92 c0             	setb   %al
  10268c:	5b                   	pop    %ebx
  10268d:	83 e0 01             	and    $0x1,%eax
  102690:	5d                   	pop    %ebp
  102691:	c3                   	ret

00102692 <z_x86_check_guard_page>:
  102692:	55                   	push   %ebp
  102693:	89 e5                	mov    %esp,%ebp
  102695:	56                   	push   %esi
  102696:	8b 35 a8 48 12 00    	mov    0x1248a8,%esi
  10269c:	53                   	push   %ebx
  10269d:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1026a0:	8b 56 70             	mov    0x70(%esi),%edx
  1026a3:	8d 82 00 f0 ff ff    	lea    -0x1000(%edx),%eax
  1026a9:	39 c1                	cmp    %eax,%ecx
  1026ab:	0f 93 c0             	setae  %al
  1026ae:	39 d1                	cmp    %edx,%ecx
  1026b0:	0f 92 c3             	setb   %bl
  1026b3:	20 d8                	and    %bl,%al
  1026b5:	75 15                	jne    1026cc <z_x86_check_guard_page+0x3a>
  1026b7:	03 56 74             	add    0x74(%esi),%edx
  1026ba:	8d 82 00 10 00 00    	lea    0x1000(%edx),%eax
  1026c0:	39 c1                	cmp    %eax,%ecx
  1026c2:	0f 92 c0             	setb   %al
  1026c5:	39 d1                	cmp    %edx,%ecx
  1026c7:	0f 93 c2             	setae  %dl
  1026ca:	21 d0                	and    %edx,%eax
  1026cc:	5b                   	pop    %ebx
  1026cd:	5e                   	pop    %esi
  1026ce:	5d                   	pop    %ebp
  1026cf:	c3                   	ret

001026d0 <z_x86_fatal_error>:
  1026d0:	55                   	push   %ebp
  1026d1:	89 e5                	mov    %esp,%ebp
  1026d3:	57                   	push   %edi
  1026d4:	56                   	push   %esi
  1026d5:	53                   	push   %ebx
  1026d6:	50                   	push   %eax
  1026d7:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  1026da:	85 db                	test   %ebx,%ebx
  1026dc:	0f 84 06 01 00 00    	je     1027e8 <z_x86_fatal_error+0x118>
  1026e2:	ff 73 14             	push   0x14(%ebx)
  1026e5:	ff 73 1c             	push   0x1c(%ebx)
  1026e8:	ff 73 08             	push   0x8(%ebx)
  1026eb:	ff 73 18             	push   0x18(%ebx)
  1026ee:	6a 45                	push   $0x45
  1026f0:	68 28 14 11 00       	push   $0x111428
  1026f5:	e8 fe fd ff ff       	call   1024f8 <z_log_minimal_printk>
  1026fa:	83 c4 18             	add    $0x18,%esp
  1026fd:	ff 33                	push   (%ebx)
  1026ff:	ff 73 04             	push   0x4(%ebx)
  102702:	ff 73 10             	push   0x10(%ebx)
  102705:	ff 73 0c             	push   0xc(%ebx)
  102708:	6a 45                	push   $0x45
  10270a:	68 60 14 11 00       	push   $0x111460
  10270f:	e8 e4 fd ff ff       	call   1024f8 <z_log_minimal_printk>
  102714:	8b 43 28             	mov    0x28(%ebx),%eax
  102717:	83 c4 18             	add    $0x18,%esp
  10271a:	a8 03                	test   $0x3,%al
  10271c:	74 0e                	je     10272c <z_x86_fatal_error+0x5c>
  10271e:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  102724:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
  10272a:	eb 03                	jmp    10272f <z_x86_fatal_error+0x5f>
  10272c:	0f 20 da             	mov    %cr3,%edx
  10272f:	52                   	push   %edx
  102730:	0f b7 c0             	movzwl %ax,%eax
  102733:	50                   	push   %eax
  102734:	ff 73 2c             	push   0x2c(%ebx)
  102737:	6a 45                	push   $0x45
  102739:	68 98 14 11 00       	push   $0x111498
  10273e:	e8 b5 fd ff ff       	call   1024f8 <z_log_minimal_printk>
  102743:	83 c4 14             	add    $0x14,%esp
  102746:	6a 45                	push   $0x45
  102748:	68 c4 14 11 00       	push   $0x1114c4
  10274d:	e8 a6 fd ff ff       	call   1024f8 <z_log_minimal_printk>
  102752:	5f                   	pop    %edi
  102753:	58                   	pop    %eax
  102754:	ff 73 24             	push   0x24(%ebx)
  102757:	6a 45                	push   $0x45
  102759:	68 d5 14 11 00       	push   $0x1114d5
  10275e:	e8 95 fd ff ff       	call   1024f8 <z_log_minimal_printk>
  102763:	8b 73 04             	mov    0x4(%ebx),%esi
  102766:	83 c4 0c             	add    $0xc,%esp
  102769:	8b 7b 28             	mov    0x28(%ebx),%edi
  10276c:	85 f6                	test   %esi,%esi
  10276e:	74 1b                	je     10278b <z_x86_fatal_error+0xbb>
  102770:	0f b7 ff             	movzwl %di,%edi
  102773:	c7 45 f0 08 00 00 00 	movl   $0x8,-0x10(%ebp)
  10277a:	f7 c6 03 00 00 00    	test   $0x3,%esi
  102780:	74 46                	je     1027c8 <z_x86_fatal_error+0xf8>
  102782:	6a 45                	push   $0x45
  102784:	68 e6 14 11 00       	push   $0x1114e6
  102789:	eb 07                	jmp    102792 <z_x86_fatal_error+0xc2>
  10278b:	6a 45                	push   $0x45
  10278d:	68 ff 14 11 00       	push   $0x1114ff
  102792:	e8 61 fd ff ff       	call   1024f8 <z_log_minimal_printk>
  102797:	59                   	pop    %ecx
  102798:	5e                   	pop    %esi
  102799:	eb 4d                	jmp    1027e8 <z_x86_fatal_error+0x118>
  10279b:	8b 46 04             	mov    0x4(%esi),%eax
  10279e:	85 c0                	test   %eax,%eax
  1027a0:	74 46                	je     1027e8 <z_x86_fatal_error+0x118>
  1027a2:	ff 76 08             	push   0x8(%esi)
  1027a5:	50                   	push   %eax
  1027a6:	6a 45                	push   $0x45
  1027a8:	68 2f 15 11 00       	push   $0x11152f
  1027ad:	e8 46 fd ff ff       	call   1024f8 <z_log_minimal_printk>
  1027b2:	83 c4 10             	add    $0x10,%esp
  1027b5:	ff 4d f0             	decl   -0x10(%ebp)
  1027b8:	8b 36                	mov    (%esi),%esi
  1027ba:	74 2c                	je     1027e8 <z_x86_fatal_error+0x118>
  1027bc:	f7 c6 03 00 00 00    	test   $0x3,%esi
  1027c2:	75 be                	jne    102782 <z_x86_fatal_error+0xb2>
  1027c4:	85 f6                	test   %esi,%esi
  1027c6:	74 20                	je     1027e8 <z_x86_fatal_error+0x118>
  1027c8:	57                   	push   %edi
  1027c9:	6a 0c                	push   $0xc
  1027cb:	56                   	push   %esi
  1027cc:	e8 62 fe ff ff       	call   102633 <z_x86_check_stack_bounds>
  1027d1:	83 c4 0c             	add    $0xc,%esp
  1027d4:	84 c0                	test   %al,%al
  1027d6:	74 c3                	je     10279b <z_x86_fatal_error+0xcb>
  1027d8:	56                   	push   %esi
  1027d9:	6a 45                	push   $0x45
  1027db:	68 12 15 11 00       	push   $0x111512
  1027e0:	e8 13 fd ff ff       	call   1024f8 <z_log_minimal_printk>
  1027e5:	83 c4 0c             	add    $0xc,%esp
  1027e8:	53                   	push   %ebx
  1027e9:	ff 75 08             	push   0x8(%ebp)
  1027ec:	e8 80 3f 00 00       	call   106771 <z_fatal_error>
  1027f1:	58                   	pop    %eax
  1027f2:	5a                   	pop    %edx

001027f3 <z_x86_unhandled_cpu_exception>:
  1027f3:	55                   	push   %ebp
  1027f4:	89 e5                	mov    %esp,%ebp
  1027f6:	53                   	push   %ebx
  1027f7:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  1027fa:	8b 55 08             	mov    0x8(%ebp),%edx
  1027fd:	83 fa 1e             	cmp    $0x1e,%edx
  102800:	8b 43 20             	mov    0x20(%ebx),%eax
  102803:	0f 87 d9 00 00 00    	ja     1028e2 <z_x86_unhandled_cpu_exception+0xef>
  102809:	ff 24 95 30 07 11 00 	jmp    *0x110730(,%edx,4)
  102810:	6a 45                	push   $0x45
  102812:	68 49 15 11 00       	push   $0x111549
  102817:	eb 07                	jmp    102820 <z_x86_unhandled_cpu_exception+0x2d>
  102819:	6a 45                	push   $0x45
  10281b:	68 5d 15 11 00       	push   $0x11155d
  102820:	e8 d3 fc ff ff       	call   1024f8 <z_log_minimal_printk>
  102825:	58                   	pop    %eax
  102826:	5a                   	pop    %edx
  102827:	e9 c6 00 00 00       	jmp    1028f2 <z_x86_unhandled_cpu_exception+0xff>
  10282c:	6a 45                	push   $0x45
  10282e:	68 68 15 11 00       	push   $0x111568
  102833:	eb eb                	jmp    102820 <z_x86_unhandled_cpu_exception+0x2d>
  102835:	6a 45                	push   $0x45
  102837:	68 84 15 11 00       	push   $0x111584
  10283c:	eb e2                	jmp    102820 <z_x86_unhandled_cpu_exception+0x2d>
  10283e:	6a 45                	push   $0x45
  102840:	68 94 15 11 00       	push   $0x111594
  102845:	eb d9                	jmp    102820 <z_x86_unhandled_cpu_exception+0x2d>
  102847:	6a 45                	push   $0x45
  102849:	68 a2 15 11 00       	push   $0x1115a2
  10284e:	eb d0                	jmp    102820 <z_x86_unhandled_cpu_exception+0x2d>
  102850:	6a 45                	push   $0x45
  102852:	68 bc 15 11 00       	push   $0x1115bc
  102857:	eb c7                	jmp    102820 <z_x86_unhandled_cpu_exception+0x2d>
  102859:	6a 45                	push   $0x45
  10285b:	68 d0 15 11 00       	push   $0x1115d0
  102860:	eb be                	jmp    102820 <z_x86_unhandled_cpu_exception+0x2d>
  102862:	50                   	push   %eax
  102863:	6a 45                	push   $0x45
  102865:	68 fe 15 11 00       	push   $0x1115fe
  10286a:	eb 7e                	jmp    1028ea <z_x86_unhandled_cpu_exception+0xf7>
  10286c:	6a 45                	push   $0x45
  10286e:	68 1d 16 11 00       	push   $0x11161d
  102873:	eb ab                	jmp    102820 <z_x86_unhandled_cpu_exception+0x2d>
  102875:	50                   	push   %eax
  102876:	6a 45                	push   $0x45
  102878:	68 3f 16 11 00       	push   $0x11163f
  10287d:	eb 6b                	jmp    1028ea <z_x86_unhandled_cpu_exception+0xf7>
  10287f:	50                   	push   %eax
  102880:	6a 45                	push   $0x45
  102882:	68 5d 16 11 00       	push   $0x11165d
  102887:	eb 61                	jmp    1028ea <z_x86_unhandled_cpu_exception+0xf7>
  102889:	6a 45                	push   $0x45
  10288b:	68 83 16 11 00       	push   $0x111683
  102890:	eb 8e                	jmp    102820 <z_x86_unhandled_cpu_exception+0x2d>
  102892:	50                   	push   %eax
  102893:	6a 45                	push   $0x45
  102895:	68 9c 16 11 00       	push   $0x11169c
  10289a:	eb 4e                	jmp    1028ea <z_x86_unhandled_cpu_exception+0xf7>
  10289c:	6a 45                	push   $0x45
  10289e:	68 c7 16 11 00       	push   $0x1116c7
  1028a3:	e9 78 ff ff ff       	jmp    102820 <z_x86_unhandled_cpu_exception+0x2d>
  1028a8:	50                   	push   %eax
  1028a9:	6a 45                	push   $0x45
  1028ab:	68 e9 16 11 00       	push   $0x1116e9
  1028b0:	eb 38                	jmp    1028ea <z_x86_unhandled_cpu_exception+0xf7>
  1028b2:	6a 45                	push   $0x45
  1028b4:	68 0b 17 11 00       	push   $0x11170b
  1028b9:	e9 62 ff ff ff       	jmp    102820 <z_x86_unhandled_cpu_exception+0x2d>
  1028be:	6a 45                	push   $0x45
  1028c0:	68 1e 17 11 00       	push   $0x11171e
  1028c5:	e9 56 ff ff ff       	jmp    102820 <z_x86_unhandled_cpu_exception+0x2d>
  1028ca:	6a 45                	push   $0x45
  1028cc:	68 41 17 11 00       	push   $0x111741
  1028d1:	e9 4a ff ff ff       	jmp    102820 <z_x86_unhandled_cpu_exception+0x2d>
  1028d6:	6a 45                	push   $0x45
  1028d8:	68 5f 17 11 00       	push   $0x11175f
  1028dd:	e9 3e ff ff ff       	jmp    102820 <z_x86_unhandled_cpu_exception+0x2d>
  1028e2:	50                   	push   %eax
  1028e3:	6a 45                	push   $0x45
  1028e5:	68 77 17 11 00       	push   $0x111777
  1028ea:	e8 09 fc ff ff       	call   1024f8 <z_log_minimal_printk>
  1028ef:	83 c4 0c             	add    $0xc,%esp
  1028f2:	53                   	push   %ebx
  1028f3:	6a 00                	push   $0x0
  1028f5:	e8 d6 fd ff ff       	call   1026d0 <z_x86_fatal_error>

001028fa <z_x86_page_fault_handler>:
  1028fa:	55                   	push   %ebp
  1028fb:	89 e5                	mov    %esp,%ebp
  1028fd:	57                   	push   %edi
  1028fe:	56                   	push   %esi
  1028ff:	53                   	push   %ebx
  102900:	8b 5d 08             	mov    0x8(%ebp),%ebx
  102903:	8b 43 24             	mov    0x24(%ebx),%eax
  102906:	3d 99 3f 10 00       	cmp    $0x103f99,%eax
  10290b:	72 16                	jb     102923 <z_x86_page_fault_handler+0x29>
  10290d:	3d 9d 3f 10 00       	cmp    $0x103f9d,%eax
  102912:	73 0f                	jae    102923 <z_x86_page_fault_handler+0x29>
  102914:	c7 43 24 ae 3f 10 00 	movl   $0x103fae,0x24(%ebx)
  10291b:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10291e:	5b                   	pop    %ebx
  10291f:	5e                   	pop    %esi
  102920:	5f                   	pop    %edi
  102921:	5d                   	pop    %ebp
  102922:	c3                   	ret
  102923:	0f 20 d7             	mov    %cr2,%edi
  102926:	8b 73 20             	mov    0x20(%ebx),%esi
  102929:	56                   	push   %esi
  10292a:	57                   	push   %edi
  10292b:	6a 45                	push   $0x45
  10292d:	68 b7 17 11 00       	push   $0x1117b7
  102932:	e8 c1 fb ff ff       	call   1024f8 <z_log_minimal_printk>
  102937:	83 c4 10             	add    $0x10,%esp
  10293a:	f7 c6 08 00 00 00    	test   $0x8,%esi
  102940:	74 09                	je     10294b <z_x86_page_fault_handler+0x51>
  102942:	6a 45                	push   $0x45
  102944:	68 e8 17 11 00       	push   $0x1117e8
  102949:	eb 76                	jmp    1029c1 <z_x86_page_fault_handler+0xc7>
  10294b:	f7 c6 01 00 00 00    	test   $0x1,%esi
  102951:	75 0e                	jne    102961 <z_x86_page_fault_handler+0x67>
  102953:	6a 45                	push   $0x45
  102955:	68 0e 18 11 00       	push   $0x11180e
  10295a:	e8 99 fb ff ff       	call   1024f8 <z_log_minimal_printk>
  10295f:	58                   	pop    %eax
  102960:	5a                   	pop    %edx
  102961:	b8 9f 17 11 00       	mov    $0x11179f,%eax
  102966:	f7 c6 10 00 00 00    	test   $0x10,%esi
  10296c:	75 12                	jne    102980 <z_x86_page_fault_handler+0x86>
  10296e:	b8 c7 12 11 00       	mov    $0x1112c7,%eax
  102973:	f7 c6 02 00 00 00    	test   $0x2,%esi
  102979:	75 05                	jne    102980 <z_x86_page_fault_handler+0x86>
  10297b:	b8 cc 3b 11 00       	mov    $0x113bcc,%eax
  102980:	ba a7 17 11 00       	mov    $0x1117a7,%edx
  102985:	f7 c6 04 00 00 00    	test   $0x4,%esi
  10298b:	75 05                	jne    102992 <z_x86_page_fault_handler+0x98>
  10298d:	ba ac 17 11 00       	mov    $0x1117ac,%edx
  102992:	50                   	push   %eax
  102993:	52                   	push   %edx
  102994:	6a 45                	push   $0x45
  102996:	68 3d 18 11 00       	push   $0x11183d
  10299b:	e8 58 fb ff ff       	call   1024f8 <z_log_minimal_printk>
  1029a0:	83 c4 10             	add    $0x10,%esp
  1029a3:	f7 c6 20 00 00 00    	test   $0x20,%esi
  1029a9:	74 09                	je     1029b4 <z_x86_page_fault_handler+0xba>
  1029ab:	6a 45                	push   $0x45
  1029ad:	68 70 18 11 00       	push   $0x111870
  1029b2:	eb 0d                	jmp    1029c1 <z_x86_page_fault_handler+0xc7>
  1029b4:	0f ba e6 0f          	bt     $0xf,%esi
  1029b8:	73 0e                	jae    1029c8 <z_x86_page_fault_handler+0xce>
  1029ba:	6a 45                	push   $0x45
  1029bc:	68 8f 18 11 00       	push   $0x11188f
  1029c1:	e8 32 fb ff ff       	call   1024f8 <z_log_minimal_printk>
  1029c6:	59                   	pop    %ecx
  1029c7:	5e                   	pop    %esi
  1029c8:	f6 43 28 03          	testb  $0x3,0x28(%ebx)
  1029cc:	74 0d                	je     1029db <z_x86_page_fault_handler+0xe1>
  1029ce:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1029d3:	8b b0 98 00 00 00    	mov    0x98(%eax),%esi
  1029d9:	eb 03                	jmp    1029de <z_x86_page_fault_handler+0xe4>
  1029db:	0f 20 de             	mov    %cr3,%esi
  1029de:	81 fe ff ff ff 01    	cmp    $0x1ffffff,%esi
  1029e4:	76 3a                	jbe    102a20 <z_x86_page_fault_handler+0x126>
  1029e6:	68 9c 00 00 00       	push   $0x9c
  1029eb:	68 b1 18 11 00       	push   $0x1118b1
  1029f0:	68 e8 18 11 00       	push   $0x1118e8
  1029f5:	68 ee 10 11 00       	push   $0x1110ee
  1029fa:	e8 de eb ff ff       	call   1015dd <assert_print>
  1029ff:	83 c4 10             	add    $0x10,%esp
  102a02:	56                   	push   %esi
  102a03:	68 0a 19 11 00       	push   $0x11190a
  102a08:	e8 d0 eb ff ff       	call   1015dd <assert_print>
  102a0d:	5f                   	pop    %edi
  102a0e:	58                   	pop    %eax
  102a0f:	68 9c 00 00 00       	push   $0x9c
  102a14:	68 b1 18 11 00       	push   $0x1118b1
  102a19:	e8 b0 eb ff ff       	call   1015ce <assert_post_action>
  102a1e:	58                   	pop    %eax
  102a1f:	5a                   	pop    %edx
  102a20:	57                   	push   %edi
  102a21:	56                   	push   %esi
  102a22:	e8 68 0a 00 00       	call   10348f <z_x86_dump_mmu_flags>
  102a27:	59                   	pop    %ecx
  102a28:	0f b7 43 28          	movzwl 0x28(%ebx),%eax
  102a2c:	5e                   	pop    %esi
  102a2d:	50                   	push   %eax
  102a2e:	6a 00                	push   $0x0
  102a30:	ff 33                	push   (%ebx)
  102a32:	e8 fc fb ff ff       	call   102633 <z_x86_check_stack_bounds>
  102a37:	83 c4 0c             	add    $0xc,%esp
  102a3a:	84 c0                	test   %al,%al
  102a3c:	74 05                	je     102a43 <z_x86_page_fault_handler+0x149>
  102a3e:	53                   	push   %ebx
  102a3f:	6a 02                	push   $0x2
  102a41:	eb 11                	jmp    102a54 <z_x86_page_fault_handler+0x15a>
  102a43:	0f 20 d0             	mov    %cr2,%eax
  102a46:	50                   	push   %eax
  102a47:	e8 46 fc ff ff       	call   102692 <z_x86_check_guard_page>
  102a4c:	5a                   	pop    %edx
  102a4d:	84 c0                	test   %al,%al
  102a4f:	75 ed                	jne    102a3e <z_x86_page_fault_handler+0x144>
  102a51:	53                   	push   %ebx
  102a52:	6a 00                	push   $0x0
  102a54:	e8 77 fc ff ff       	call   1026d0 <z_x86_fatal_error>

00102a59 <z_x86_do_kernel_oops>:
  102a59:	55                   	push   %ebp
  102a5a:	89 e5                	mov    %esp,%ebp
  102a5c:	8b 55 08             	mov    0x8(%ebp),%edx
  102a5f:	8b 02                	mov    (%edx),%eax
  102a61:	f6 42 28 03          	testb  $0x3,0x28(%edx)
  102a65:	8b 00                	mov    (%eax),%eax
  102a67:	74 0d                	je     102a76 <z_x86_do_kernel_oops+0x1d>
  102a69:	8d 48 fe             	lea    -0x2(%eax),%ecx
  102a6c:	83 f9 01             	cmp    $0x1,%ecx
  102a6f:	76 05                	jbe    102a76 <z_x86_do_kernel_oops+0x1d>
  102a71:	b8 03 00 00 00       	mov    $0x3,%eax
  102a76:	52                   	push   %edx
  102a77:	50                   	push   %eax
  102a78:	e8 53 fc ff ff       	call   1026d0 <z_x86_fatal_error>

00102a7d <__get_cpuid_max.constprop.0>:
  102a7d:	9c                   	pushf
  102a7e:	9c                   	pushf
  102a7f:	58                   	pop    %eax
  102a80:	89 c2                	mov    %eax,%edx
  102a82:	35 00 00 20 00       	xor    $0x200000,%eax
  102a87:	50                   	push   %eax
  102a88:	9d                   	popf
  102a89:	9c                   	pushf
  102a8a:	58                   	pop    %eax
  102a8b:	9d                   	popf
  102a8c:	31 d0                	xor    %edx,%eax
  102a8e:	25 00 00 20 00       	and    $0x200000,%eax
  102a93:	74 0b                	je     102aa0 <__get_cpuid_max.constprop.0+0x23>
  102a95:	55                   	push   %ebp
  102a96:	31 c0                	xor    %eax,%eax
  102a98:	89 e5                	mov    %esp,%ebp
  102a9a:	53                   	push   %ebx
  102a9b:	0f a2                	cpuid
  102a9d:	5b                   	pop    %ebx
  102a9e:	5d                   	pop    %ebp
  102a9f:	c3                   	ret
  102aa0:	c3                   	ret

00102aa1 <z_x86_cpuid_extended_features>:
  102aa1:	55                   	push   %ebp
  102aa2:	89 e5                	mov    %esp,%ebp
  102aa4:	53                   	push   %ebx
  102aa5:	e8 d3 ff ff ff       	call   102a7d <__get_cpuid_max.constprop.0>
  102aaa:	89 c2                	mov    %eax,%edx
  102aac:	31 c0                	xor    %eax,%eax
  102aae:	83 fa 06             	cmp    $0x6,%edx
  102ab1:	76 09                	jbe    102abc <z_x86_cpuid_extended_features+0x1b>
  102ab3:	b8 07 00 00 00       	mov    $0x7,%eax
  102ab8:	0f a2                	cpuid
  102aba:	89 d0                	mov    %edx,%eax
  102abc:	5b                   	pop    %ebx
  102abd:	5d                   	pop    %ebp
  102abe:	c3                   	ret

00102abf <spec_ctrl_init>:
  102abf:	55                   	push   %ebp
  102ac0:	89 e5                	mov    %esp,%ebp
  102ac2:	57                   	push   %edi
  102ac3:	56                   	push   %esi
  102ac4:	e8 d8 ff ff ff       	call   102aa1 <z_x86_cpuid_extended_features>
  102ac9:	85 c0                	test   %eax,%eax
  102acb:	78 0a                	js     102ad7 <spec_ctrl_init+0x18>
  102acd:	0f ba e0 1a          	bt     $0x1a,%eax
  102ad1:	73 2c                	jae    102aff <spec_ctrl_init+0x40>
  102ad3:	31 c0                	xor    %eax,%eax
  102ad5:	eb 10                	jmp    102ae7 <spec_ctrl_init+0x28>
  102ad7:	0f ba e0 1a          	bt     $0x1a,%eax
  102adb:	be 04 00 00 00       	mov    $0x4,%esi
  102ae0:	73 0a                	jae    102aec <spec_ctrl_init+0x2d>
  102ae2:	b8 04 00 00 00       	mov    $0x4,%eax
  102ae7:	83 c8 01             	or     $0x1,%eax
  102aea:	89 c6                	mov    %eax,%esi
  102aec:	b9 48 00 00 00       	mov    $0x48,%ecx
  102af1:	0f 32                	rdmsr
  102af3:	31 ff                	xor    %edi,%edi
  102af5:	09 c6                	or     %eax,%esi
  102af7:	09 d7                	or     %edx,%edi
  102af9:	89 f0                	mov    %esi,%eax
  102afb:	89 fa                	mov    %edi,%edx
  102afd:	0f 30                	wrmsr
  102aff:	5e                   	pop    %esi
  102b00:	31 c0                	xor    %eax,%eax
  102b02:	5f                   	pop    %edi
  102b03:	5d                   	pop    %ebp
  102b04:	c3                   	ret

00102b05 <z_multiboot_init>:
  102b05:	55                   	push   %ebp
  102b06:	89 e5                	mov    %esp,%ebp
  102b08:	57                   	push   %edi
  102b09:	56                   	push   %esi
  102b0a:	53                   	push   %ebx
  102b0b:	8d 45 ec             	lea    -0x14(%ebp),%eax
  102b0e:	83 ec 08             	sub    $0x8,%esp
  102b11:	6a 02                	push   $0x2
  102b13:	6a 74                	push   $0x74
  102b15:	ff 75 08             	push   0x8(%ebp)
  102b18:	50                   	push   %eax
  102b19:	e8 58 96 00 00       	call   10c176 <k_mem_map_phys_bare>
  102b1e:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102b21:	83 c4 10             	add    $0x10,%esp
  102b24:	85 d2                	test   %edx,%edx
  102b26:	0f 84 46 01 00 00    	je     102c72 <z_multiboot_init+0x16d>
  102b2c:	b8 40 46 12 00       	mov    $0x124640,%eax
  102b31:	b9 1d 00 00 00       	mov    $0x1d,%ecx
  102b36:	89 c7                	mov    %eax,%edi
  102b38:	89 d6                	mov    %edx,%esi
  102b3a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
  102b3c:	f6 02 40             	testb  $0x40,(%edx)
  102b3f:	0f 84 94 00 00 00    	je     102bd9 <z_multiboot_init+0xd4>
  102b45:	83 3d 94 cc 12 00 01 	cmpl   $0x1,0x12cc94
  102b4c:	0f 87 87 00 00 00    	ja     102bd9 <z_multiboot_init+0xd4>
  102b52:	6a 02                	push   $0x2
  102b54:	8d 45 f0             	lea    -0x10(%ebp),%eax
  102b57:	ff 72 2c             	push   0x2c(%edx)
  102b5a:	ff 72 30             	push   0x30(%edx)
  102b5d:	bf 00 b0 11 00       	mov    $0x11b000,%edi
  102b62:	31 f6                	xor    %esi,%esi
  102b64:	50                   	push   %eax
  102b65:	e8 0c 96 00 00       	call   10c176 <k_mem_map_phys_bare>
  102b6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102b6d:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102b70:	83 c4 10             	add    $0x10,%esp
  102b73:	8b 58 2c             	mov    0x2c(%eax),%ebx
  102b76:	01 cb                	add    %ecx,%ebx
  102b78:	39 d9                	cmp    %ebx,%ecx
  102b7a:	73 40                	jae    102bbc <z_multiboot_init+0xb7>
  102b7c:	83 fe 3f             	cmp    $0x3f,%esi
  102b7f:	7f 3b                	jg     102bbc <z_multiboot_init+0xb7>
  102b81:	8b 41 04             	mov    0x4(%ecx),%eax
  102b84:	8b 51 08             	mov    0x8(%ecx),%edx
  102b87:	89 57 04             	mov    %edx,0x4(%edi)
  102b8a:	89 07                	mov    %eax,(%edi)
  102b8c:	8b 41 0c             	mov    0xc(%ecx),%eax
  102b8f:	8b 51 10             	mov    0x10(%ecx),%edx
  102b92:	89 57 0c             	mov    %edx,0xc(%edi)
  102b95:	89 47 08             	mov    %eax,0x8(%edi)
  102b98:	8b 41 14             	mov    0x14(%ecx),%eax
  102b9b:	ba 05 00 00 00       	mov    $0x5,%edx
  102ba0:	48                   	dec    %eax
  102ba1:	83 f8 04             	cmp    $0x4,%eax
  102ba4:	77 07                	ja     102bad <z_multiboot_init+0xa8>
  102ba6:	0f b6 90 ac 07 11 00 	movzbl 0x1107ac(%eax),%edx
  102bad:	89 57 10             	mov    %edx,0x10(%edi)
  102bb0:	46                   	inc    %esi
  102bb1:	8b 01                	mov    (%ecx),%eax
  102bb3:	83 c7 14             	add    $0x14,%edi
  102bb6:	8d 4c 01 04          	lea    0x4(%ecx,%eax,1),%ecx
  102bba:	eb bc                	jmp    102b78 <z_multiboot_init+0x73>
  102bbc:	c7 05 94 cc 12 00 02 	movl   $0x2,0x12cc94
  102bc3:	00 00 00 
  102bc6:	83 fe 40             	cmp    $0x40,%esi
  102bc9:	74 0e                	je     102bd9 <z_multiboot_init+0xd4>
  102bcb:	6b c6 14             	imul   $0x14,%esi,%eax
  102bce:	31 ff                	xor    %edi,%edi
  102bd0:	46                   	inc    %esi
  102bd1:	89 b8 10 b0 11 00    	mov    %edi,0x11b010(%eax)
  102bd7:	eb ed                	jmp    102bc6 <z_multiboot_init+0xc1>
  102bd9:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102bdc:	f6 02 01             	testb  $0x1,(%edx)
  102bdf:	0f 84 8d 00 00 00    	je     102c72 <z_multiboot_init+0x16d>
  102be5:	a1 94 cc 12 00       	mov    0x12cc94,%eax
  102bea:	85 c0                	test   %eax,%eax
  102bec:	0f 85 80 00 00 00    	jne    102c72 <z_multiboot_init+0x16d>
  102bf2:	31 c9                	xor    %ecx,%ecx
  102bf4:	31 db                	xor    %ebx,%ebx
  102bf6:	89 0d 00 b0 11 00    	mov    %ecx,0x11b000
  102bfc:	89 0d 04 b0 11 00    	mov    %ecx,0x11b004
  102c02:	8b 4a 04             	mov    0x4(%edx),%ecx
  102c05:	c7 05 10 b0 11 00 01 	movl   $0x1,0x11b010
  102c0c:	00 00 00 
  102c0f:	0f a4 cb 0a          	shld   $0xa,%ecx,%ebx
  102c13:	89 1d 0c b0 11 00    	mov    %ebx,0x11b00c
  102c19:	31 db                	xor    %ebx,%ebx
  102c1b:	c1 e1 0a             	shl    $0xa,%ecx
  102c1e:	89 1d 18 b0 11 00    	mov    %ebx,0x11b018
  102c24:	89 0d 08 b0 11 00    	mov    %ecx,0x11b008
  102c2a:	c7 05 14 b0 11 00 00 	movl   $0x100000,0x11b014
  102c31:	00 10 00 
  102c34:	8b 4a 08             	mov    0x8(%edx),%ecx
  102c37:	31 db                	xor    %ebx,%ebx
  102c39:	0f a4 cb 0a          	shld   $0xa,%ecx,%ebx
  102c3d:	c1 e1 0a             	shl    $0xa,%ecx
  102c40:	89 1d 20 b0 11 00    	mov    %ebx,0x11b020
  102c46:	89 0d 1c b0 11 00    	mov    %ecx,0x11b01c
  102c4c:	c7 05 24 b0 11 00 01 	movl   $0x1,0x11b024
  102c53:	00 00 00 
  102c56:	31 d2                	xor    %edx,%edx
  102c58:	83 c0 14             	add    $0x14,%eax
  102c5b:	89 90 24 b0 11 00    	mov    %edx,0x11b024(%eax)
  102c61:	3d d8 04 00 00       	cmp    $0x4d8,%eax
  102c66:	75 ee                	jne    102c56 <z_multiboot_init+0x151>
  102c68:	c7 05 94 cc 12 00 01 	movl   $0x1,0x12cc94
  102c6f:	00 00 00 
  102c72:	8d 65 f4             	lea    -0xc(%ebp),%esp
  102c75:	5b                   	pop    %ebx
  102c76:	5e                   	pop    %esi
  102c77:	5f                   	pop    %edi
  102c78:	5d                   	pop    %ebp
  102c79:	c3                   	ret

00102c7a <mark_addr_page_reserved>:
  102c7a:	89 d1                	mov    %edx,%ecx
  102c7c:	89 c2                	mov    %eax,%edx
  102c7e:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  102c84:	8d 84 08 ff 0f 00 00 	lea    0xfff(%eax,%ecx,1),%eax
  102c8b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  102c90:	39 c2                	cmp    %eax,%edx
  102c92:	73 1d                	jae    102cb1 <mark_addr_page_reserved+0x37>
  102c94:	81 fa ff ff ff 01    	cmp    $0x1ffffff,%edx
  102c9a:	77 0d                	ja     102ca9 <mark_addr_page_reserved+0x2f>
  102c9c:	89 d1                	mov    %edx,%ecx
  102c9e:	c1 e9 0c             	shr    $0xc,%ecx
  102ca1:	83 0c 8d 80 4a 12 00 	orl    $0x2,0x124a80(,%ecx,4)
  102ca8:	02 
  102ca9:	81 c2 00 10 00 00    	add    $0x1000,%edx
  102caf:	eb df                	jmp    102c90 <mark_addr_page_reserved+0x16>
  102cb1:	c3                   	ret

00102cb2 <str_append>:
  102cb2:	55                   	push   %ebp
  102cb3:	89 e5                	mov    %esp,%ebp
  102cb5:	56                   	push   %esi
  102cb6:	53                   	push   %ebx
  102cb7:	89 c6                	mov    %eax,%esi
  102cb9:	51                   	push   %ecx
  102cba:	89 d3                	mov    %edx,%ebx
  102cbc:	68 2e 19 11 00       	push   $0x11192e
  102cc1:	ff 32                	push   (%edx)
  102cc3:	ff 30                	push   (%eax)
  102cc5:	e8 b7 c3 00 00       	call   10f081 <snprintf>
  102cca:	8b 13                	mov    (%ebx),%edx
  102ccc:	83 c4 10             	add    $0x10,%esp
  102ccf:	39 d0                	cmp    %edx,%eax
  102cd1:	72 06                	jb     102cd9 <str_append+0x27>
  102cd3:	31 c0                	xor    %eax,%eax
  102cd5:	89 03                	mov    %eax,(%ebx)
  102cd7:	eb 06                	jmp    102cdf <str_append+0x2d>
  102cd9:	29 c2                	sub    %eax,%edx
  102cdb:	89 13                	mov    %edx,(%ebx)
  102cdd:	01 06                	add    %eax,(%esi)
  102cdf:	8d 65 f8             	lea    -0x8(%ebp),%esp
  102ce2:	5b                   	pop    %ebx
  102ce3:	5e                   	pop    %esi
  102ce4:	5d                   	pop    %ebp
  102ce5:	c3                   	ret

00102ce6 <k_mem_phys_addr>:
  102ce6:	3d ff ff 7f 00       	cmp    $0x7fffff,%eax
  102ceb:	76 3e                	jbe    102d2b <k_mem_phys_addr+0x45>
  102ced:	55                   	push   %ebp
  102cee:	89 e5                	mov    %esp,%ebp
  102cf0:	52                   	push   %edx
  102cf1:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102cf4:	6a 69                	push   $0x69
  102cf6:	68 b1 18 11 00       	push   $0x1118b1
  102cfb:	68 31 19 11 00       	push   $0x111931
  102d00:	68 ee 10 11 00       	push   $0x1110ee
  102d05:	e8 d3 e8 ff ff       	call   1015dd <assert_print>
  102d0a:	83 c4 10             	add    $0x10,%esp
  102d0d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102d10:	50                   	push   %eax
  102d11:	68 4d 19 11 00       	push   $0x11194d
  102d16:	e8 c2 e8 ff ff       	call   1015dd <assert_print>
  102d1b:	59                   	pop    %ecx
  102d1c:	58                   	pop    %eax
  102d1d:	6a 69                	push   $0x69
  102d1f:	68 b1 18 11 00       	push   $0x1118b1
  102d24:	e8 a5 e8 ff ff       	call   1015ce <assert_post_action>
  102d29:	58                   	pop    %eax
  102d2a:	5a                   	pop    %edx
  102d2b:	c3                   	ret

00102d2c <k_mem_virt_addr>:
  102d2c:	3d ff ff ff 01       	cmp    $0x1ffffff,%eax
  102d31:	76 44                	jbe    102d77 <k_mem_virt_addr+0x4b>
  102d33:	55                   	push   %ebp
  102d34:	89 e5                	mov    %esp,%ebp
  102d36:	52                   	push   %edx
  102d37:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102d3a:	68 9c 00 00 00       	push   $0x9c
  102d3f:	68 b1 18 11 00       	push   $0x1118b1
  102d44:	68 e8 18 11 00       	push   $0x1118e8
  102d49:	68 ee 10 11 00       	push   $0x1110ee
  102d4e:	e8 8a e8 ff ff       	call   1015dd <assert_print>
  102d53:	83 c4 10             	add    $0x10,%esp
  102d56:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102d59:	50                   	push   %eax
  102d5a:	68 0a 19 11 00       	push   $0x11190a
  102d5f:	e8 79 e8 ff ff       	call   1015dd <assert_print>
  102d64:	59                   	pop    %ecx
  102d65:	58                   	pop    %eax
  102d66:	68 9c 00 00 00       	push   $0x9c
  102d6b:	68 b1 18 11 00       	push   $0x1118b1
  102d70:	e8 59 e8 ff ff       	call   1015ce <assert_post_action>
  102d75:	58                   	pop    %eax
  102d76:	5a                   	pop    %edx
  102d77:	c3                   	ret

00102d78 <copy_page_table>:
  102d78:	55                   	push   %ebp
  102d79:	89 e5                	mov    %esp,%ebp
  102d7b:	57                   	push   %edi
  102d7c:	56                   	push   %esi
  102d7d:	53                   	push   %ebx
  102d7e:	83 ec 10             	sub    $0x10,%esp
  102d81:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102d84:	89 55 f0             	mov    %edx,-0x10(%ebp)
  102d87:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  102d8a:	83 f9 02             	cmp    $0x2,%ecx
  102d8d:	74 10                	je     102d9f <copy_page_table+0x27>
  102d8f:	6b c1 14             	imul   $0x14,%ecx,%eax
  102d92:	31 db                	xor    %ebx,%ebx
  102d94:	8d b0 80 01 11 00    	lea    0x110180(%eax),%esi
  102d9a:	e9 b0 00 00 00       	jmp    102e4f <copy_page_table+0xd7>
  102d9f:	31 d2                	xor    %edx,%edx
  102da1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102da4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  102da7:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  102daa:	8b 5c d3 04          	mov    0x4(%ebx,%edx,8),%ebx
  102dae:	89 5d ec             	mov    %ebx,-0x14(%ebp)
  102db1:	89 c3                	mov    %eax,%ebx
  102db3:	83 e3 f9             	and    $0xfffffff9,%ebx
  102db6:	89 c1                	mov    %eax,%ecx
  102db8:	89 de                	mov    %ebx,%esi
  102dba:	8b 5d ec             	mov    -0x14(%ebp),%ebx
  102dbd:	81 e3 ff ff ff 7f    	and    $0x7fffffff,%ebx
  102dc3:	81 e1 00 02 00 00    	and    $0x200,%ecx
  102dc9:	89 df                	mov    %ebx,%edi
  102dcb:	83 c9 00             	or     $0x0,%ecx
  102dce:	74 03                	je     102dd3 <copy_page_table+0x5b>
  102dd0:	83 ce 02             	or     $0x2,%esi
  102dd3:	89 c1                	mov    %eax,%ecx
  102dd5:	81 e1 00 04 00 00    	and    $0x400,%ecx
  102ddb:	83 c9 00             	or     $0x0,%ecx
  102dde:	74 03                	je     102de3 <copy_page_table+0x6b>
  102de0:	83 ce 04             	or     $0x4,%esi
  102de3:	25 00 08 00 00       	and    $0x800,%eax
  102de8:	83 c8 00             	or     $0x0,%eax
  102deb:	74 06                	je     102df3 <copy_page_table+0x7b>
  102ded:	81 cf 00 00 00 80    	or     $0x80000000,%edi
  102df3:	89 f0                	mov    %esi,%eax
  102df5:	83 e0 04             	and    $0x4,%eax
  102df8:	83 c8 00             	or     $0x0,%eax
  102dfb:	75 1c                	jne    102e19 <copy_page_table+0xa1>
  102dfd:	89 f0                	mov    %esi,%eax
  102dff:	83 e0 01             	and    $0x1,%eax
  102e02:	83 c8 00             	or     $0x0,%eax
  102e05:	74 12                	je     102e19 <copy_page_table+0xa1>
  102e07:	89 f0                	mov    %esi,%eax
  102e09:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  102e0e:	3d 00 c0 11 00       	cmp    $0x11c000,%eax
  102e13:	74 04                	je     102e19 <copy_page_table+0xa1>
  102e15:	f7 d6                	not    %esi
  102e17:	f7 d7                	not    %edi
  102e19:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102e1c:	89 34 d0             	mov    %esi,(%eax,%edx,8)
  102e1f:	89 7c d0 04          	mov    %edi,0x4(%eax,%edx,8)
  102e23:	42                   	inc    %edx
  102e24:	81 fa 00 02 00 00    	cmp    $0x200,%edx
  102e2a:	0f 85 71 ff ff ff    	jne    102da1 <copy_page_table+0x29>
  102e30:	31 c0                	xor    %eax,%eax
  102e32:	e9 02 01 00 00       	jmp    102f39 <copy_page_table+0x1c1>
  102e37:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102e3a:	8b 7d f0             	mov    -0x10(%ebp),%edi
  102e3d:	8b 04 d8             	mov    (%eax,%ebx,8),%eax
  102e40:	8b 4c df 04          	mov    0x4(%edi,%ebx,8),%ecx
  102e44:	89 c2                	mov    %eax,%edx
  102e46:	83 e2 01             	and    $0x1,%edx
  102e49:	83 ca 00             	or     $0x0,%edx
  102e4c:	75 08                	jne    102e56 <copy_page_table+0xde>
  102e4e:	43                   	inc    %ebx
  102e4f:	3b 5e 08             	cmp    0x8(%esi),%ebx
  102e52:	72 e3                	jb     102e37 <copy_page_table+0xbf>
  102e54:	eb da                	jmp    102e30 <copy_page_table+0xb8>
  102e56:	89 c7                	mov    %eax,%edi
  102e58:	31 d2                	xor    %edx,%edx
  102e5a:	81 e7 80 00 00 00    	and    $0x80,%edi
  102e60:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
  102e64:	75 2e                	jne    102e94 <copy_page_table+0x11c>
  102e66:	09 fa                	or     %edi,%edx
  102e68:	74 67                	je     102ed1 <copy_page_table+0x159>
  102e6a:	89 c2                	mov    %eax,%edx
  102e6c:	83 e2 04             	and    $0x4,%edx
  102e6f:	83 ca 00             	or     $0x0,%edx
  102e72:	75 14                	jne    102e88 <copy_page_table+0x110>
  102e74:	89 c2                	mov    %eax,%edx
  102e76:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  102e7c:	81 fa 00 c0 11 00    	cmp    $0x11c000,%edx
  102e82:	74 04                	je     102e88 <copy_page_table+0x110>
  102e84:	f7 d0                	not    %eax
  102e86:	f7 d1                	not    %ecx
  102e88:	8b 7d e8             	mov    -0x18(%ebp),%edi
  102e8b:	89 04 df             	mov    %eax,(%edi,%ebx,8)
  102e8e:	89 4c df 04          	mov    %ecx,0x4(%edi,%ebx,8)
  102e92:	eb ba                	jmp    102e4e <copy_page_table+0xd6>
  102e94:	09 fa                	or     %edi,%edx
  102e96:	74 39                	je     102ed1 <copy_page_table+0x159>
  102e98:	68 ae 06 00 00       	push   $0x6ae
  102e9d:	68 74 19 11 00       	push   $0x111974
  102ea2:	68 9f 19 11 00       	push   $0x11199f
  102ea7:	68 ee 10 11 00       	push   $0x1110ee
  102eac:	e8 2c e7 ff ff       	call   1015dd <assert_print>
  102eb1:	83 c4 10             	add    $0x10,%esp
  102eb4:	68 bd 19 11 00       	push   $0x1119bd
  102eb9:	e8 1f e7 ff ff       	call   1015dd <assert_print>
  102ebe:	c7 04 24 ae 06 00 00 	movl   $0x6ae,(%esp)
  102ec5:	68 74 19 11 00       	push   $0x111974
  102eca:	e8 ff e6 ff ff       	call   1015ce <assert_post_action>
  102ecf:	5a                   	pop    %edx
  102ed0:	59                   	pop    %ecx
  102ed1:	a1 0c b5 11 00       	mov    0x11b50c,%eax
  102ed6:	3d 00 d0 12 00       	cmp    $0x12d000,%eax
  102edb:	74 57                	je     102f34 <copy_page_table+0x1bc>
  102edd:	2d 00 10 00 00       	sub    $0x1000,%eax
  102ee2:	b9 00 04 00 00       	mov    $0x400,%ecx
  102ee7:	89 45 ec             	mov    %eax,-0x14(%ebp)
  102eea:	a3 0c b5 11 00       	mov    %eax,0x11b50c
  102eef:	8b 7d ec             	mov    -0x14(%ebp),%edi
  102ef2:	31 c0                	xor    %eax,%eax
  102ef4:	f3 ab                	rep stos %eax,%es:(%edi)
  102ef6:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102ef9:	e8 e8 fd ff ff       	call   102ce6 <k_mem_phys_addr>
  102efe:	8b 7d e8             	mov    -0x18(%ebp),%edi
  102f01:	83 c8 07             	or     $0x7,%eax
  102f04:	89 04 df             	mov    %eax,(%edi,%ebx,8)
  102f07:	31 c0                	xor    %eax,%eax
  102f09:	89 44 df 04          	mov    %eax,0x4(%edi,%ebx,8)
  102f0d:	8b 7d f0             	mov    -0x10(%ebp),%edi
  102f10:	8b 06                	mov    (%esi),%eax
  102f12:	23 04 df             	and    (%edi,%ebx,8),%eax
  102f15:	e8 12 fe ff ff       	call   102d2c <k_mem_virt_addr>
  102f1a:	89 c2                	mov    %eax,%edx
  102f1c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102f1f:	8d 48 01             	lea    0x1(%eax),%ecx
  102f22:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102f25:	e8 4e fe ff ff       	call   102d78 <copy_page_table>
  102f2a:	85 c0                	test   %eax,%eax
  102f2c:	0f 84 1c ff ff ff    	je     102e4e <copy_page_table+0xd6>
  102f32:	eb 05                	jmp    102f39 <copy_page_table+0x1c1>
  102f34:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
  102f39:	8d 65 f4             	lea    -0xc(%ebp),%esp
  102f3c:	5b                   	pop    %ebx
  102f3d:	5e                   	pop    %esi
  102f3e:	5f                   	pop    %edi
  102f3f:	5d                   	pop    %ebp
  102f40:	c3                   	ret

00102f41 <pentry_get>:
  102f41:	55                   	push   %ebp
  102f42:	89 e5                	mov    %esp,%ebp
  102f44:	57                   	push   %edi
  102f45:	56                   	push   %esi
  102f46:	31 ff                	xor    %edi,%edi
  102f48:	53                   	push   %ebx
  102f49:	be 80 01 11 00       	mov    $0x110180,%esi
  102f4e:	83 ec 08             	sub    $0x8,%esp
  102f51:	89 cb                	mov    %ecx,%ebx
  102f53:	89 45 f0             	mov    %eax,-0x10(%ebp)
  102f56:	89 55 ec             	mov    %edx,-0x14(%ebp)
  102f59:	8b 4e 0c             	mov    0xc(%esi),%ecx
  102f5c:	8b 45 08             	mov    0x8(%ebp),%eax
  102f5f:	d3 e8                	shr    %cl,%eax
  102f61:	31 d2                	xor    %edx,%edx
  102f63:	f7 76 08             	divl   0x8(%esi)
  102f66:	8b 04 d3             	mov    (%ebx,%edx,8),%eax
  102f69:	8b 4c d3 04          	mov    0x4(%ebx,%edx,8),%ecx
  102f6d:	89 c2                	mov    %eax,%edx
  102f6f:	83 e2 01             	and    $0x1,%edx
  102f72:	83 ca 00             	or     $0x0,%edx
  102f75:	74 12                	je     102f89 <pentry_get+0x48>
  102f77:	83 ff 02             	cmp    $0x2,%edi
  102f7a:	74 0d                	je     102f89 <pentry_get+0x48>
  102f7c:	89 c2                	mov    %eax,%edx
  102f7e:	81 e2 80 00 00 00    	and    $0x80,%edx
  102f84:	83 ca 00             	or     $0x0,%edx
  102f87:	74 15                	je     102f9e <pentry_get+0x5d>
  102f89:	8b 5d ec             	mov    -0x14(%ebp),%ebx
  102f8c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  102f90:	89 03                	mov    %eax,(%ebx)
  102f92:	89 4b 04             	mov    %ecx,0x4(%ebx)
  102f95:	74 16                	je     102fad <pentry_get+0x6c>
  102f97:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102f9a:	89 38                	mov    %edi,(%eax)
  102f9c:	eb 0f                	jmp    102fad <pentry_get+0x6c>
  102f9e:	23 06                	and    (%esi),%eax
  102fa0:	47                   	inc    %edi
  102fa1:	e8 86 fd ff ff       	call   102d2c <k_mem_virt_addr>
  102fa6:	83 c6 14             	add    $0x14,%esi
  102fa9:	89 c3                	mov    %eax,%ebx
  102fab:	eb ac                	jmp    102f59 <pentry_get+0x18>
  102fad:	58                   	pop    %eax
  102fae:	5a                   	pop    %edx
  102faf:	5b                   	pop    %ebx
  102fb0:	5e                   	pop    %esi
  102fb1:	5f                   	pop    %edi
  102fb2:	5d                   	pop    %ebp
  102fb3:	c3                   	ret

00102fb4 <range_map_ptables>:
  102fb4:	55                   	push   %ebp
  102fb5:	89 e5                	mov    %esp,%ebp
  102fb7:	57                   	push   %edi
  102fb8:	56                   	push   %esi
  102fb9:	53                   	push   %ebx
  102fba:	83 ec 58             	sub    $0x58,%esp
  102fbd:	89 45 ac             	mov    %eax,-0x54(%ebp)
  102fc0:	8b 45 14             	mov    0x14(%ebp),%eax
  102fc3:	89 55 a8             	mov    %edx,-0x58(%ebp)
  102fc6:	89 45 a0             	mov    %eax,-0x60(%ebp)
  102fc9:	8b 45 18             	mov    0x18(%ebp),%eax
  102fcc:	89 45 9c             	mov    %eax,-0x64(%ebp)
  102fcf:	8b 45 08             	mov    0x8(%ebp),%eax
  102fd2:	09 c8                	or     %ecx,%eax
  102fd4:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  102fd7:	25 ff 0f 00 00       	and    $0xfff,%eax
  102fdc:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102fdf:	75 43                	jne    103024 <range_map_ptables+0x70>
  102fe1:	8b 45 0c             	mov    0xc(%ebp),%eax
  102fe4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  102fe9:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  102fec:	8b 45 10             	mov    0x10(%ebp),%eax
  102fef:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
  102ff4:	89 45 c0             	mov    %eax,-0x40(%ebp)
  102ff7:	0b 45 c4             	or     -0x3c(%ebp),%eax
  102ffa:	75 13                	jne    10300f <range_map_ptables+0x5b>
  102ffc:	8b 45 1c             	mov    0x1c(%ebp),%eax
  102fff:	31 c9                	xor    %ecx,%ecx
  103001:	83 e0 0c             	and    $0xc,%eax
  103004:	89 4d d8             	mov    %ecx,-0x28(%ebp)
  103007:	89 45 b8             	mov    %eax,-0x48(%ebp)
  10300a:	e9 97 00 00 00       	jmp    1030a6 <range_map_ptables+0xf2>
  10300f:	ff 75 10             	push   0x10(%ebp)
  103012:	ff 75 0c             	push   0xc(%ebp)
  103015:	6a 45                	push   $0x45
  103017:	68 d6 19 11 00       	push   $0x1119d6
  10301c:	e8 d7 f4 ff ff       	call   1024f8 <z_log_minimal_printk>
  103021:	83 c4 10             	add    $0x10,%esp
  103024:	c7 45 d8 ea ff ff ff 	movl   $0xffffffea,-0x28(%ebp)
  10302b:	e9 2c 02 00 00       	jmp    10325c <range_map_ptables+0x2a8>
  103030:	8b 45 a8             	mov    -0x58(%ebp),%eax
  103033:	8b 5d e8             	mov    -0x18(%ebp),%ebx
  103036:	01 c3                	add    %eax,%ebx
  103038:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  10303b:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10303e:	8b 45 c0             	mov    -0x40(%ebp),%eax
  103041:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
  103045:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  103048:	75 16                	jne    103060 <range_map_ptables+0xac>
  10304a:	8b 55 e8             	mov    -0x18(%ebp),%edx
  10304d:	8b 45 c8             	mov    -0x38(%ebp),%eax
  103050:	01 d0                	add    %edx,%eax
  103052:	31 d2                	xor    %edx,%edx
  103054:	0b 45 0c             	or     0xc(%ebp),%eax
  103057:	0b 55 10             	or     0x10(%ebp),%edx
  10305a:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10305d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  103060:	8b 45 1c             	mov    0x1c(%ebp),%eax
  103063:	8b 55 ac             	mov    -0x54(%ebp),%edx
  103066:	83 e0 02             	and    $0x2,%eax
  103069:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10306c:	89 d8                	mov    %ebx,%eax
  10306e:	c1 e8 1e             	shr    $0x1e,%eax
  103071:	8b 04 c2             	mov    (%edx,%eax,8),%eax
  103074:	89 c2                	mov    %eax,%edx
  103076:	81 e2 80 00 00 00    	and    $0x80,%edx
  10307c:	83 ca 00             	or     $0x0,%edx
  10307f:	74 32                	je     1030b3 <range_map_ptables+0xff>
  103081:	6a 45                	push   $0x45
  103083:	68 07 1a 11 00       	push   $0x111a07
  103088:	e8 6b f4 ff ff       	call   1024f8 <z_log_minimal_printk>
  10308d:	58                   	pop    %eax
  10308e:	5a                   	pop    %edx
  10308f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
  103093:	74 03                	je     103098 <range_map_ptables+0xe4>
  103095:	0f 01 3b             	invlpg (%ebx)
  103098:	c7 45 d8 f2 ff ff ff 	movl   $0xfffffff2,-0x28(%ebp)
  10309f:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
  1030a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1030a9:	3b 45 08             	cmp    0x8(%ebp),%eax
  1030ac:	72 82                	jb     103030 <range_map_ptables+0x7c>
  1030ae:	e9 a9 01 00 00       	jmp    10325c <range_map_ptables+0x2a8>
  1030b3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1030b8:	e8 6f fc ff ff       	call   102d2c <k_mem_virt_addr>
  1030bd:	85 c0                	test   %eax,%eax
  1030bf:	74 37                	je     1030f8 <range_map_ptables+0x144>
  1030c1:	89 da                	mov    %ebx,%edx
  1030c3:	c1 ea 15             	shr    $0x15,%edx
  1030c6:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  1030cc:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  1030cf:	89 c1                	mov    %eax,%ecx
  1030d1:	81 e1 80 00 00 00    	and    $0x80,%ecx
  1030d7:	89 ca                	mov    %ecx,%edx
  1030d9:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  1030dc:	83 ca 00             	or     $0x0,%edx
  1030df:	75 a0                	jne    103081 <range_map_ptables+0xcd>
  1030e1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1030e6:	e8 41 fc ff ff       	call   102d2c <k_mem_virt_addr>
  1030eb:	89 c2                	mov    %eax,%edx
  1030ed:	85 c0                	test   %eax,%eax
  1030ef:	75 1d                	jne    10310e <range_map_ptables+0x15a>
  1030f1:	b8 01 00 00 00       	mov    $0x1,%eax
  1030f6:	eb 02                	jmp    1030fa <range_map_ptables+0x146>
  1030f8:	31 c0                	xor    %eax,%eax
  1030fa:	53                   	push   %ebx
  1030fb:	40                   	inc    %eax
  1030fc:	50                   	push   %eax
  1030fd:	6a 45                	push   $0x45
  1030ff:	68 23 1a 11 00       	push   $0x111a23
  103104:	e8 ef f3 ff ff       	call   1024f8 <z_log_minimal_printk>
  103109:	83 c4 10             	add    $0x10,%esp
  10310c:	eb 81                	jmp    10308f <range_map_ptables+0xdb>
  10310e:	89 d8                	mov    %ebx,%eax
  103110:	c1 e8 09             	shr    $0x9,%eax
  103113:	25 f8 0f 00 00       	and    $0xff8,%eax
  103118:	01 d0                	add    %edx,%eax
  10311a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10311d:	8b 45 1c             	mov    0x1c(%ebp),%eax
  103120:	83 e0 04             	and    $0x4,%eax
  103123:	89 45 b4             	mov    %eax,-0x4c(%ebp)
  103126:	8b 45 1c             	mov    0x1c(%ebp),%eax
  103129:	83 e0 08             	and    $0x8,%eax
  10312c:	89 45 b0             	mov    %eax,-0x50(%ebp)
  10312f:	8a 45 1c             	mov    0x1c(%ebp),%al
  103132:	83 e0 01             	and    $0x1,%eax
  103135:	88 45 a7             	mov    %al,-0x59(%ebp)
  103138:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10313b:	8b 00                	mov    (%eax),%eax
  10313d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  103140:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103143:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103146:	8b 40 04             	mov    0x4(%eax),%eax
  103149:	83 e1 01             	and    $0x1,%ecx
  10314c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10314f:	83 c9 00             	or     $0x0,%ecx
  103152:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103155:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  103158:	75 19                	jne    103173 <range_map_ptables+0x1bf>
  10315a:	89 c1                	mov    %eax,%ecx
  10315c:	81 e1 80 00 00 00    	and    $0x80,%ecx
  103162:	83 c9 00             	or     $0x0,%ecx
  103165:	74 0c                	je     103173 <range_map_ptables+0x1bf>
  103167:	89 c1                	mov    %eax,%ecx
  103169:	f7 d1                	not    %ecx
  10316b:	89 c8                	mov    %ecx,%eax
  10316d:	89 d1                	mov    %edx,%ecx
  10316f:	f7 d1                	not    %ecx
  103171:	89 ca                	mov    %ecx,%edx
  103173:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
  103177:	74 43                	je     1031bc <range_map_ptables+0x208>
  103179:	89 c1                	mov    %eax,%ecx
  10317b:	83 e1 f9             	and    $0xfffffff9,%ecx
  10317e:	89 ce                	mov    %ecx,%esi
  103180:	89 d1                	mov    %edx,%ecx
  103182:	81 e1 ff ff ff 7f    	and    $0x7fffffff,%ecx
  103188:	89 cf                	mov    %ecx,%edi
  10318a:	89 c1                	mov    %eax,%ecx
  10318c:	81 e1 00 02 00 00    	and    $0x200,%ecx
  103192:	83 c9 00             	or     $0x0,%ecx
  103195:	74 03                	je     10319a <range_map_ptables+0x1e6>
  103197:	83 ce 02             	or     $0x2,%esi
  10319a:	89 c1                	mov    %eax,%ecx
  10319c:	81 e1 00 04 00 00    	and    $0x400,%ecx
  1031a2:	83 c9 00             	or     $0x0,%ecx
  1031a5:	74 03                	je     1031aa <range_map_ptables+0x1f6>
  1031a7:	83 ce 04             	or     $0x4,%esi
  1031aa:	25 00 08 00 00       	and    $0x800,%eax
  1031af:	83 c8 00             	or     $0x0,%eax
  1031b2:	74 37                	je     1031eb <range_map_ptables+0x237>
  1031b4:	81 cf 00 00 00 80    	or     $0x80000000,%edi
  1031ba:	eb 2f                	jmp    1031eb <range_map_ptables+0x237>
  1031bc:	31 ff                	xor    %edi,%edi
  1031be:	8b 75 bc             	mov    -0x44(%ebp),%esi
  1031c1:	83 7d b0 00          	cmpl   $0x0,-0x50(%ebp)
  1031c5:	75 50                	jne    103217 <range_map_ptables+0x263>
  1031c7:	8b 75 e0             	mov    -0x20(%ebp),%esi
  1031ca:	8b 4d a0             	mov    -0x60(%ebp),%ecx
  1031cd:	31 c6                	xor    %eax,%esi
  1031cf:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  1031d2:	21 f1                	and    %esi,%ecx
  1031d4:	31 d7                	xor    %edx,%edi
  1031d6:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  1031d9:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  1031dc:	21 f9                	and    %edi,%ecx
  1031de:	33 45 cc             	xor    -0x34(%ebp),%eax
  1031e1:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  1031e4:	89 c6                	mov    %eax,%esi
  1031e6:	33 55 d0             	xor    -0x30(%ebp),%edx
  1031e9:	89 d7                	mov    %edx,%edi
  1031eb:	80 7d a7 00          	cmpb   $0x0,-0x59(%ebp)
  1031ef:	74 26                	je     103217 <range_map_ptables+0x263>
  1031f1:	89 f0                	mov    %esi,%eax
  1031f3:	83 e0 04             	and    $0x4,%eax
  1031f6:	83 c8 00             	or     $0x0,%eax
  1031f9:	75 1c                	jne    103217 <range_map_ptables+0x263>
  1031fb:	89 f0                	mov    %esi,%eax
  1031fd:	83 e0 01             	and    $0x1,%eax
  103200:	83 c8 00             	or     $0x0,%eax
  103203:	74 12                	je     103217 <range_map_ptables+0x263>
  103205:	89 f0                	mov    %esi,%eax
  103207:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10320c:	3d 00 c0 11 00       	cmp    $0x11c000,%eax
  103211:	74 04                	je     103217 <range_map_ptables+0x263>
  103213:	f7 d6                	not    %esi
  103215:	f7 d7                	not    %edi
  103217:	9c                   	pushf
  103218:	fa                   	cli
  103219:	58                   	pop    %eax
  10321a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10321d:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  103220:	3b 4a 04             	cmp    0x4(%edx),%ecx
  103223:	75 15                	jne    10323a <range_map_ptables+0x286>
  103225:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103228:	3b 0a                	cmp    (%edx),%ecx
  10322a:	75 0e                	jne    10323a <range_map_ptables+0x286>
  10322c:	89 32                	mov    %esi,(%edx)
  10322e:	89 7a 04             	mov    %edi,0x4(%edx)
  103231:	0f ba e0 09          	bt     $0x9,%eax
  103235:	73 13                	jae    10324a <range_map_ptables+0x296>
  103237:	fb                   	sti
  103238:	eb 10                	jmp    10324a <range_map_ptables+0x296>
  10323a:	0f ba e0 09          	bt     $0x9,%eax
  10323e:	0f 83 f4 fe ff ff    	jae    103138 <range_map_ptables+0x184>
  103244:	fb                   	sti
  103245:	e9 ee fe ff ff       	jmp    103138 <range_map_ptables+0x184>
  10324a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
  10324e:	0f 84 4b fe ff ff    	je     10309f <range_map_ptables+0xeb>
  103254:	0f 01 3b             	invlpg (%ebx)
  103257:	e9 43 fe ff ff       	jmp    10309f <range_map_ptables+0xeb>
  10325c:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10325f:	8d 65 f4             	lea    -0xc(%ebp),%esp
  103262:	5b                   	pop    %ebx
  103263:	5e                   	pop    %esi
  103264:	5f                   	pop    %edi
  103265:	5d                   	pop    %ebp
  103266:	c3                   	ret

00103267 <region_map_update>:
  103267:	55                   	push   %ebp
  103268:	89 e5                	mov    %esp,%ebp
  10326a:	57                   	push   %edi
  10326b:	56                   	push   %esi
  10326c:	89 cf                	mov    %ecx,%edi
  10326e:	53                   	push   %ebx
  10326f:	89 c6                	mov    %eax,%esi
  103271:	83 ec 08             	sub    $0x8,%esp
  103274:	89 55 f0             	mov    %edx,-0x10(%ebp)
  103277:	80 7d 10 01          	cmpb   $0x1,0x10(%ebp)
  10327b:	19 db                	sbb    %ebx,%ebx
  10327d:	83 e3 fc             	and    $0xfffffffc,%ebx
  103280:	83 c3 05             	add    $0x5,%ebx
  103283:	0f 20 d8             	mov    %cr3,%eax
  103286:	e8 a1 fa ff ff       	call   102d2c <k_mem_virt_addr>
  10328b:	39 c6                	cmp    %eax,%esi
  10328d:	75 03                	jne    103292 <region_map_update+0x2b>
  10328f:	83 cb 02             	or     $0x2,%ebx
  103292:	9c                   	pushf
  103293:	fa                   	cli
  103294:	8f 45 ec             	pop    -0x14(%ebp)
  103297:	68 a0 cc 12 00       	push   $0x12cca0
  10329c:	e8 4e 7a 00 00       	call   10acef <z_spin_lock_valid>
  1032a1:	5a                   	pop    %edx
  1032a2:	84 c0                	test   %al,%al
  1032a4:	75 34                	jne    1032da <region_map_update+0x73>
  1032a6:	68 88 00 00 00       	push   $0x88
  1032ab:	68 61 13 11 00       	push   $0x111361
  1032b0:	68 8e 13 11 00       	push   $0x11138e
  1032b5:	68 ee 10 11 00       	push   $0x1110ee
  1032ba:	e8 1e e3 ff ff       	call   1015dd <assert_print>
  1032bf:	83 c4 10             	add    $0x10,%esp
  1032c2:	68 a0 cc 12 00       	push   $0x12cca0
  1032c7:	68 a3 13 11 00       	push   $0x1113a3
  1032cc:	e8 0c e3 ff ff       	call   1015dd <assert_print>
  1032d1:	5f                   	pop    %edi
  1032d2:	58                   	pop    %eax
  1032d3:	68 88 00 00 00       	push   $0x88
  1032d8:	eb 6d                	jmp    103347 <region_map_update+0xe0>
  1032da:	68 a0 cc 12 00       	push   $0x12cca0
  1032df:	e8 63 7a 00 00       	call   10ad47 <z_spin_lock_set_owner>
  1032e4:	89 1c 24             	mov    %ebx,(%esp)
  1032e7:	68 00 00 00 80       	push   $0x80000000
  1032ec:	6a 06                	push   $0x6
  1032ee:	31 c9                	xor    %ecx,%ecx
  1032f0:	ff 75 0c             	push   0xc(%ebp)
  1032f3:	ff 75 08             	push   0x8(%ebp)
  1032f6:	89 f0                	mov    %esi,%eax
  1032f8:	57                   	push   %edi
  1032f9:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1032fc:	e8 b3 fc ff ff       	call   102fb4 <range_map_ptables>
  103301:	83 c4 18             	add    $0x18,%esp
  103304:	89 c3                	mov    %eax,%ebx
  103306:	68 a0 cc 12 00       	push   $0x12cca0
  10330b:	e8 00 7a 00 00       	call   10ad10 <z_spin_unlock_valid>
  103310:	5e                   	pop    %esi
  103311:	84 c0                	test   %al,%al
  103313:	75 3e                	jne    103353 <region_map_update+0xec>
  103315:	68 31 01 00 00       	push   $0x131
  10331a:	68 61 13 11 00       	push   $0x111361
  10331f:	68 e8 13 11 00       	push   $0x1113e8
  103324:	68 ee 10 11 00       	push   $0x1110ee
  103329:	e8 af e2 ff ff       	call   1015dd <assert_print>
  10332e:	83 c4 10             	add    $0x10,%esp
  103331:	68 a0 cc 12 00       	push   $0x12cca0
  103336:	68 ff 13 11 00       	push   $0x1113ff
  10333b:	e8 9d e2 ff ff       	call   1015dd <assert_print>
  103340:	59                   	pop    %ecx
  103341:	5b                   	pop    %ebx
  103342:	68 31 01 00 00       	push   $0x131
  103347:	68 61 13 11 00       	push   $0x111361
  10334c:	e8 7d e2 ff ff       	call   1015ce <assert_post_action>
  103351:	58                   	pop    %eax
  103352:	5a                   	pop    %edx
  103353:	0f ba 65 ec 09       	btl    $0x9,-0x14(%ebp)
  103358:	73 01                	jae    10335b <region_map_update+0xf4>
  10335a:	fb                   	sti
  10335b:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10335e:	89 d8                	mov    %ebx,%eax
  103360:	5b                   	pop    %ebx
  103361:	5e                   	pop    %esi
  103362:	5f                   	pop    %edi
  103363:	5d                   	pop    %ebp
  103364:	c3                   	ret

00103365 <range_map_unlocked>:
  103365:	55                   	push   %ebp
  103366:	89 e5                	mov    %esp,%ebp
  103368:	57                   	push   %edi
  103369:	56                   	push   %esi
  10336a:	53                   	push   %ebx
  10336b:	89 cb                	mov    %ecx,%ebx
  10336d:	83 ec 0c             	sub    $0xc,%esp
  103370:	89 45 f0             	mov    %eax,-0x10(%ebp)
  103373:	89 55 ec             	mov    %edx,-0x14(%ebp)
  103376:	9c                   	pushf
  103377:	fa                   	cli
  103378:	8f 45 e8             	pop    -0x18(%ebp)
  10337b:	68 a0 cc 12 00       	push   $0x12cca0
  103380:	e8 6a 79 00 00       	call   10acef <z_spin_lock_valid>
  103385:	59                   	pop    %ecx
  103386:	84 c0                	test   %al,%al
  103388:	75 37                	jne    1033c1 <range_map_unlocked+0x5c>
  10338a:	68 88 00 00 00       	push   $0x88
  10338f:	68 61 13 11 00       	push   $0x111361
  103394:	68 8e 13 11 00       	push   $0x11138e
  103399:	68 ee 10 11 00       	push   $0x1110ee
  10339e:	e8 3a e2 ff ff       	call   1015dd <assert_print>
  1033a3:	83 c4 10             	add    $0x10,%esp
  1033a6:	68 a0 cc 12 00       	push   $0x12cca0
  1033ab:	68 a3 13 11 00       	push   $0x1113a3
  1033b0:	e8 28 e2 ff ff       	call   1015dd <assert_print>
  1033b5:	58                   	pop    %eax
  1033b6:	5a                   	pop    %edx
  1033b7:	68 88 00 00 00       	push   $0x88
  1033bc:	e9 b0 00 00 00       	jmp    103471 <range_map_unlocked+0x10c>
  1033c1:	68 a0 cc 12 00       	push   $0x12cca0
  1033c6:	e8 7c 79 00 00       	call   10ad47 <z_spin_lock_set_owner>
  1033cb:	5f                   	pop    %edi
  1033cc:	8b 35 98 cc 12 00    	mov    0x12cc98,%esi
  1033d2:	31 ff                	xor    %edi,%edi
  1033d4:	85 f6                	test   %esi,%esi
  1033d6:	74 2f                	je     103407 <range_map_unlocked+0xa2>
  1033d8:	8b 55 18             	mov    0x18(%ebp),%edx
  1033db:	8b 46 fc             	mov    -0x4(%esi),%eax
  1033de:	83 ca 01             	or     $0x1,%edx
  1033e1:	52                   	push   %edx
  1033e2:	ff 75 14             	push   0x14(%ebp)
  1033e5:	ff 75 10             	push   0x10(%ebp)
  1033e8:	ff 75 0c             	push   0xc(%ebp)
  1033eb:	ff 75 08             	push   0x8(%ebp)
  1033ee:	53                   	push   %ebx
  1033ef:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1033f2:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1033f5:	e8 ba fb ff ff       	call   102fb4 <range_map_ptables>
  1033fa:	83 c4 18             	add    $0x18,%esp
  1033fd:	85 c0                	test   %eax,%eax
  1033ff:	74 02                	je     103403 <range_map_unlocked+0x9e>
  103401:	89 c7                	mov    %eax,%edi
  103403:	8b 36                	mov    (%esi),%esi
  103405:	eb cd                	jmp    1033d4 <range_map_unlocked+0x6f>
  103407:	ff 75 18             	push   0x18(%ebp)
  10340a:	ff 75 14             	push   0x14(%ebp)
  10340d:	ff 75 10             	push   0x10(%ebp)
  103410:	ff 75 0c             	push   0xc(%ebp)
  103413:	ff 75 08             	push   0x8(%ebp)
  103416:	b8 00 30 12 00       	mov    $0x123000,%eax
  10341b:	53                   	push   %ebx
  10341c:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10341f:	8b 55 f0             	mov    -0x10(%ebp),%edx
  103422:	e8 8d fb ff ff       	call   102fb4 <range_map_ptables>
  103427:	83 c4 18             	add    $0x18,%esp
  10342a:	85 c0                	test   %eax,%eax
  10342c:	74 02                	je     103430 <range_map_unlocked+0xcb>
  10342e:	89 c7                	mov    %eax,%edi
  103430:	68 a0 cc 12 00       	push   $0x12cca0
  103435:	e8 d6 78 00 00       	call   10ad10 <z_spin_unlock_valid>
  10343a:	5e                   	pop    %esi
  10343b:	84 c0                	test   %al,%al
  10343d:	75 3e                	jne    10347d <range_map_unlocked+0x118>
  10343f:	68 31 01 00 00       	push   $0x131
  103444:	68 61 13 11 00       	push   $0x111361
  103449:	68 e8 13 11 00       	push   $0x1113e8
  10344e:	68 ee 10 11 00       	push   $0x1110ee
  103453:	e8 85 e1 ff ff       	call   1015dd <assert_print>
  103458:	83 c4 10             	add    $0x10,%esp
  10345b:	68 a0 cc 12 00       	push   $0x12cca0
  103460:	68 ff 13 11 00       	push   $0x1113ff
  103465:	e8 73 e1 ff ff       	call   1015dd <assert_print>
  10346a:	59                   	pop    %ecx
  10346b:	5b                   	pop    %ebx
  10346c:	68 31 01 00 00       	push   $0x131
  103471:	68 61 13 11 00       	push   $0x111361
  103476:	e8 53 e1 ff ff       	call   1015ce <assert_post_action>
  10347b:	58                   	pop    %eax
  10347c:	5a                   	pop    %edx
  10347d:	0f ba 65 e8 09       	btl    $0x9,-0x18(%ebp)
  103482:	73 01                	jae    103485 <range_map_unlocked+0x120>
  103484:	fb                   	sti
  103485:	8d 65 f4             	lea    -0xc(%ebp),%esp
  103488:	89 f8                	mov    %edi,%eax
  10348a:	5b                   	pop    %ebx
  10348b:	5e                   	pop    %esi
  10348c:	5f                   	pop    %edi
  10348d:	5d                   	pop    %ebp
  10348e:	c3                   	ret

0010348f <z_x86_dump_mmu_flags>:
  10348f:	55                   	push   %ebp
  103490:	31 d2                	xor    %edx,%edx
  103492:	89 e5                	mov    %esp,%ebp
  103494:	57                   	push   %edi
  103495:	56                   	push   %esi
  103496:	53                   	push   %ebx
  103497:	8d 45 c8             	lea    -0x38(%ebp),%eax
  10349a:	83 ec 3c             	sub    $0x3c,%esp
  10349d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
  1034a0:	8b 75 0c             	mov    0xc(%ebp),%esi
  1034a3:	89 55 d8             	mov    %edx,-0x28(%ebp)
  1034a6:	89 55 c8             	mov    %edx,-0x38(%ebp)
  1034a9:	56                   	push   %esi
  1034aa:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1034ad:	8d 55 d4             	lea    -0x2c(%ebp),%edx
  1034b0:	e8 8c fa ff ff       	call   102f41 <pentry_get>
  1034b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1034b8:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
  1034bb:	59                   	pop    %ecx
  1034bc:	89 45 b8             	mov    %eax,-0x48(%ebp)
  1034bf:	89 d8                	mov    %ebx,%eax
  1034c1:	83 e0 01             	and    $0x1,%eax
  1034c4:	83 c8 00             	or     $0x0,%eax
  1034c7:	8b 45 c8             	mov    -0x38(%ebp),%eax
  1034ca:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1034cd:	75 1d                	jne    1034ec <z_x86_dump_mmu_flags+0x5d>
  1034cf:	6b c0 14             	imul   $0x14,%eax,%eax
  1034d2:	ff b0 90 01 11 00    	push   0x110190(%eax)
  1034d8:	6a 45                	push   $0x45
  1034da:	68 5a 1a 11 00       	push   $0x111a5a
  1034df:	e8 14 f0 ff ff       	call   1024f8 <z_log_minimal_printk>
  1034e4:	83 c4 0c             	add    $0xc,%esp
  1034e7:	e9 33 01 00 00       	jmp    10361f <z_x86_dump_mmu_flags+0x190>
  1034ec:	31 c0                	xor    %eax,%eax
  1034ee:	8d 7d e0             	lea    -0x20(%ebp),%edi
  1034f1:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1034f4:	b9 05 00 00 00       	mov    $0x5,%ecx
  1034f9:	31 c0                	xor    %eax,%eax
  1034fb:	c7 45 d0 18 00 00 00 	movl   $0x18,-0x30(%ebp)
  103502:	f3 ab                	rep stos %eax,%es:(%edi)
  103504:	8d 45 dc             	lea    -0x24(%ebp),%eax
  103507:	89 45 cc             	mov    %eax,-0x34(%ebp)
  10350a:	6b 45 c4 14          	imul   $0x14,-0x3c(%ebp),%eax
  10350e:	8b 88 8c 01 11 00    	mov    0x11018c(%eax),%ecx
  103514:	89 d8                	mov    %ebx,%eax
  103516:	d3 ee                	shr    %cl,%esi
  103518:	83 e0 02             	and    $0x2,%eax
  10351b:	d3 e6                	shl    %cl,%esi
  10351d:	83 c8 00             	or     $0x0,%eax
  103520:	74 10                	je     103532 <z_x86_dump_mmu_flags+0xa3>
  103522:	b9 70 1a 11 00       	mov    $0x111a70,%ecx
  103527:	8d 55 d0             	lea    -0x30(%ebp),%edx
  10352a:	8d 45 cc             	lea    -0x34(%ebp),%eax
  10352d:	e8 80 f7 ff ff       	call   102cb2 <str_append>
  103532:	89 d8                	mov    %ebx,%eax
  103534:	83 e0 04             	and    $0x4,%eax
  103537:	83 c8 00             	or     $0x0,%eax
  10353a:	74 10                	je     10354c <z_x86_dump_mmu_flags+0xbd>
  10353c:	b9 74 1a 11 00       	mov    $0x111a74,%ecx
  103541:	8d 55 d0             	lea    -0x30(%ebp),%edx
  103544:	8d 45 cc             	lea    -0x34(%ebp),%eax
  103547:	e8 66 f7 ff ff       	call   102cb2 <str_append>
  10354c:	89 d8                	mov    %ebx,%eax
  10354e:	83 e0 08             	and    $0x8,%eax
  103551:	83 c8 00             	or     $0x0,%eax
  103554:	74 10                	je     103566 <z_x86_dump_mmu_flags+0xd7>
  103556:	b9 78 1a 11 00       	mov    $0x111a78,%ecx
  10355b:	8d 55 d0             	lea    -0x30(%ebp),%edx
  10355e:	8d 45 cc             	lea    -0x34(%ebp),%eax
  103561:	e8 4c f7 ff ff       	call   102cb2 <str_append>
  103566:	89 d8                	mov    %ebx,%eax
  103568:	83 e0 10             	and    $0x10,%eax
  10356b:	83 c8 00             	or     $0x0,%eax
  10356e:	74 10                	je     103580 <z_x86_dump_mmu_flags+0xf1>
  103570:	b9 7d 1a 11 00       	mov    $0x111a7d,%ecx
  103575:	8d 55 d0             	lea    -0x30(%ebp),%edx
  103578:	8d 45 cc             	lea    -0x34(%ebp),%eax
  10357b:	e8 32 f7 ff ff       	call   102cb2 <str_append>
  103580:	89 d8                	mov    %ebx,%eax
  103582:	83 e0 20             	and    $0x20,%eax
  103585:	83 c8 00             	or     $0x0,%eax
  103588:	74 10                	je     10359a <z_x86_dump_mmu_flags+0x10b>
  10358a:	b9 82 1a 11 00       	mov    $0x111a82,%ecx
  10358f:	8d 55 d0             	lea    -0x30(%ebp),%edx
  103592:	8d 45 cc             	lea    -0x34(%ebp),%eax
  103595:	e8 18 f7 ff ff       	call   102cb2 <str_append>
  10359a:	89 d8                	mov    %ebx,%eax
  10359c:	83 e0 40             	and    $0x40,%eax
  10359f:	83 c8 00             	or     $0x0,%eax
  1035a2:	74 10                	je     1035b4 <z_x86_dump_mmu_flags+0x125>
  1035a4:	b9 7f 1a 11 00       	mov    $0x111a7f,%ecx
  1035a9:	8d 55 d0             	lea    -0x30(%ebp),%edx
  1035ac:	8d 45 cc             	lea    -0x34(%ebp),%eax
  1035af:	e8 fe f6 ff ff       	call   102cb2 <str_append>
  1035b4:	89 d8                	mov    %ebx,%eax
  1035b6:	25 00 01 00 00       	and    $0x100,%eax
  1035bb:	83 c8 00             	or     $0x0,%eax
  1035be:	74 10                	je     1035d0 <z_x86_dump_mmu_flags+0x141>
  1035c0:	b9 85 1a 11 00       	mov    $0x111a85,%ecx
  1035c5:	8d 55 d0             	lea    -0x30(%ebp),%edx
  1035c8:	8d 45 cc             	lea    -0x34(%ebp),%eax
  1035cb:	e8 e2 f6 ff ff       	call   102cb2 <str_append>
  1035d0:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
  1035d4:	79 10                	jns    1035e6 <z_x86_dump_mmu_flags+0x157>
  1035d6:	b9 88 1a 11 00       	mov    $0x111a88,%ecx
  1035db:	8d 55 d0             	lea    -0x30(%ebp),%edx
  1035de:	8d 45 cc             	lea    -0x34(%ebp),%eax
  1035e1:	e8 cc f6 ff ff       	call   102cb2 <str_append>
  1035e6:	8d 45 dc             	lea    -0x24(%ebp),%eax
  1035e9:	50                   	push   %eax
  1035ea:	6b 45 c4 14          	imul   $0x14,-0x3c(%ebp),%eax
  1035ee:	8b 7d b8             	mov    -0x48(%ebp),%edi
  1035f1:	23 b8 84 01 11 00    	and    0x110184(%eax),%edi
  1035f7:	23 98 80 01 11 00    	and    0x110180(%eax),%ebx
  1035fd:	89 7d c0             	mov    %edi,-0x40(%ebp)
  103600:	89 5d bc             	mov    %ebx,-0x44(%ebp)
  103603:	ff 75 c0             	push   -0x40(%ebp)
  103606:	ff 75 bc             	push   -0x44(%ebp)
  103609:	56                   	push   %esi
  10360a:	ff b0 90 01 11 00    	push   0x110190(%eax)
  103610:	6a 45                	push   $0x45
  103612:	68 8c 1a 11 00       	push   $0x111a8c
  103617:	e8 dc ee ff ff       	call   1024f8 <z_log_minimal_printk>
  10361c:	83 c4 1c             	add    $0x1c,%esp
  10361f:	8d 65 f4             	lea    -0xc(%ebp),%esp
  103622:	5b                   	pop    %ebx
  103623:	5e                   	pop    %esi
  103624:	5f                   	pop    %edi
  103625:	5d                   	pop    %ebp
  103626:	c3                   	ret

00103627 <arch_mem_map>:
  103627:	55                   	push   %ebp
  103628:	89 e5                	mov    %esp,%ebp
  10362a:	53                   	push   %ebx
  10362b:	8b 5d 14             	mov    0x14(%ebp),%ebx
  10362e:	89 d8                	mov    %ebx,%eax
  103630:	83 e0 07             	and    $0x7,%eax
  103633:	83 f8 02             	cmp    $0x2,%eax
  103636:	77 1b                	ja     103653 <arch_mem_map+0x2c>
  103638:	31 d2                	xor    %edx,%edx
  10363a:	0f a4 c2 03          	shld   $0x3,%eax,%edx
  10363e:	c1 e0 03             	shl    $0x3,%eax
  103641:	83 c0 01             	add    $0x1,%eax
  103644:	83 d2 00             	adc    $0x0,%edx
  103647:	f6 c3 08             	test   $0x8,%bl
  10364a:	74 37                	je     103683 <arch_mem_map+0x5c>
  10364c:	0d 02 02 00 00       	or     $0x202,%eax
  103651:	eb 30                	jmp    103683 <arch_mem_map+0x5c>
  103653:	68 f5 04 00 00       	push   $0x4f5
  103658:	68 74 19 11 00       	push   $0x111974
  10365d:	68 20 2a 11 00       	push   $0x112a20
  103662:	68 ee 10 11 00       	push   $0x1110ee
  103667:	e8 71 df ff ff       	call   1015dd <assert_print>
  10366c:	83 c4 10             	add    $0x10,%esp
  10366f:	53                   	push   %ebx
  103670:	68 aa 1a 11 00       	push   $0x111aaa
  103675:	e8 63 df ff ff       	call   1015dd <assert_print>
  10367a:	59                   	pop    %ecx
  10367b:	5b                   	pop    %ebx
  10367c:	68 f5 04 00 00       	push   $0x4f5
  103681:	eb 56                	jmp    1036d9 <arch_mem_map+0xb2>
  103683:	f6 c3 20             	test   $0x20,%bl
  103686:	74 05                	je     10368d <arch_mem_map+0x66>
  103688:	0d 04 04 00 00       	or     $0x404,%eax
  10368d:	80 e3 10             	and    $0x10,%bl
  103690:	75 09                	jne    10369b <arch_mem_map+0x74>
  103692:	80 cc 08             	or     $0x8,%ah
  103695:	81 ca 00 00 00 80    	or     $0x80000000,%edx
  10369b:	6a 00                	push   $0x0
  10369d:	6a ff                	push   $0xffffffff
  10369f:	6a ff                	push   $0xffffffff
  1036a1:	52                   	push   %edx
  1036a2:	50                   	push   %eax
  1036a3:	8b 4d 10             	mov    0x10(%ebp),%ecx
  1036a6:	8b 55 0c             	mov    0xc(%ebp),%edx
  1036a9:	8b 45 08             	mov    0x8(%ebp),%eax
  1036ac:	e8 b4 fc ff ff       	call   103365 <range_map_unlocked>
  1036b1:	83 c4 14             	add    $0x14,%esp
  1036b4:	85 c0                	test   %eax,%eax
  1036b6:	74 2d                	je     1036e5 <arch_mem_map+0xbe>
  1036b8:	68 0f 05 00 00       	push   $0x50f
  1036bd:	68 74 19 11 00       	push   $0x111974
  1036c2:	68 ca 1a 11 00       	push   $0x111aca
  1036c7:	68 ee 10 11 00       	push   $0x1110ee
  1036cc:	e8 0c df ff ff       	call   1015dd <assert_print>
  1036d1:	83 c4 10             	add    $0x10,%esp
  1036d4:	68 0f 05 00 00       	push   $0x50f
  1036d9:	68 74 19 11 00       	push   $0x111974
  1036de:	e8 eb de ff ff       	call   1015ce <assert_post_action>
  1036e3:	58                   	pop    %eax
  1036e4:	5a                   	pop    %edx
  1036e5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1036e8:	c9                   	leave
  1036e9:	c3                   	ret

001036ea <arch_mem_unmap>:
  1036ea:	55                   	push   %ebp
  1036eb:	31 d2                	xor    %edx,%edx
  1036ed:	89 e5                	mov    %esp,%ebp
  1036ef:	6a 0a                	push   $0xa
  1036f1:	6a 00                	push   $0x0
  1036f3:	6a 00                	push   $0x0
  1036f5:	6a 00                	push   $0x0
  1036f7:	6a 00                	push   $0x0
  1036f9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1036fc:	8b 45 08             	mov    0x8(%ebp),%eax
  1036ff:	e8 61 fc ff ff       	call   103365 <range_map_unlocked>
  103704:	83 c4 14             	add    $0x14,%esp
  103707:	85 c0                	test   %eax,%eax
  103709:	74 2d                	je     103738 <arch_mem_unmap+0x4e>
  10370b:	68 1a 05 00 00       	push   $0x51a
  103710:	68 74 19 11 00       	push   $0x111974
  103715:	68 ca 1a 11 00       	push   $0x111aca
  10371a:	68 ee 10 11 00       	push   $0x1110ee
  10371f:	e8 b9 de ff ff       	call   1015dd <assert_print>
  103724:	83 c4 10             	add    $0x10,%esp
  103727:	68 1a 05 00 00       	push   $0x51a
  10372c:	68 74 19 11 00       	push   $0x111974
  103731:	e8 98 de ff ff       	call   1015ce <assert_post_action>
  103736:	58                   	pop    %eax
  103737:	5a                   	pop    %edx
  103738:	c9                   	leave
  103739:	c3                   	ret

0010373a <z_x86_mmu_init>:
  10373a:	c3                   	ret

0010373b <z_x86_set_stack_guard>:
  10373b:	55                   	push   %ebp
  10373c:	31 d2                	xor    %edx,%edx
  10373e:	89 e5                	mov    %esp,%ebp
  103740:	6a 02                	push   $0x2
  103742:	68 00 00 00 80       	push   $0x80000000
  103747:	b9 00 10 00 00       	mov    $0x1000,%ecx
  10374c:	6a 06                	push   $0x6
  10374e:	68 00 00 00 80       	push   $0x80000000
  103753:	68 01 08 00 00       	push   $0x801
  103758:	8b 45 08             	mov    0x8(%ebp),%eax
  10375b:	e8 05 fc ff ff       	call   103365 <range_map_unlocked>
  103760:	83 c4 14             	add    $0x14,%esp
  103763:	85 c0                	test   %eax,%eax
  103765:	74 2d                	je     103794 <z_x86_set_stack_guard+0x59>
  103767:	68 65 05 00 00       	push   $0x565
  10376c:	68 74 19 11 00       	push   $0x111974
  103771:	68 ca 1a 11 00       	push   $0x111aca
  103776:	68 ee 10 11 00       	push   $0x1110ee
  10377b:	e8 5d de ff ff       	call   1015dd <assert_print>
  103780:	83 c4 10             	add    $0x10,%esp
  103783:	68 65 05 00 00       	push   $0x565
  103788:	68 74 19 11 00       	push   $0x111974
  10378d:	e8 3c de ff ff       	call   1015ce <assert_post_action>
  103792:	58                   	pop    %eax
  103793:	5a                   	pop    %edx
  103794:	c9                   	leave
  103795:	c3                   	ret

00103796 <arch_buffer_validate>:
  103796:	55                   	push   %ebp
  103797:	89 e5                	mov    %esp,%ebp
  103799:	57                   	push   %edi
  10379a:	56                   	push   %esi
  10379b:	53                   	push   %ebx
  10379c:	83 ec 1c             	sub    $0x1c,%esp
  10379f:	c7 45 e0 00 30 12 00 	movl   $0x123000,-0x20(%ebp)
  1037a6:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1037ab:	f6 40 0c 04          	testb  $0x4,0xc(%eax)
  1037af:	74 0e                	je     1037bf <arch_buffer_validate+0x29>
  1037b1:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
  1037b7:	e8 70 f5 ff ff       	call   102d2c <k_mem_virt_addr>
  1037bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1037bf:	68 00 10 00 00       	push   $0x1000
  1037c4:	8d 45 f0             	lea    -0x10(%ebp),%eax
  1037c7:	ff 75 0c             	push   0xc(%ebp)
  1037ca:	ff 75 08             	push   0x8(%ebp)
  1037cd:	50                   	push   %eax
  1037ce:	8d 45 ec             	lea    -0x14(%ebp),%eax
  1037d1:	50                   	push   %eax
  1037d2:	e8 6d 89 00 00       	call   10c144 <k_mem_region_align>
  1037d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1037da:	83 c4 14             	add    $0x14,%esp
  1037dd:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1037e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1037e3:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1037e6:	31 c0                	xor    %eax,%eax
  1037e8:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1037eb:	8b 75 d8             	mov    -0x28(%ebp),%esi
  1037ee:	39 75 e8             	cmp    %esi,-0x18(%ebp)
  1037f1:	0f 83 93 00 00 00    	jae    10388a <arch_buffer_validate+0xf4>
  1037f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1037fa:	bb 80 01 11 00       	mov    $0x110180,%ebx
  1037ff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  103802:	31 f6                	xor    %esi,%esi
  103804:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  103807:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10380a:	01 c8                	add    %ecx,%eax
  10380c:	8b 4b 0c             	mov    0xc(%ebx),%ecx
  10380f:	d3 e8                	shr    %cl,%eax
  103811:	31 d2                	xor    %edx,%edx
  103813:	31 c9                	xor    %ecx,%ecx
  103815:	f7 73 08             	divl   0x8(%ebx)
  103818:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10381b:	8b 04 d0             	mov    (%eax,%edx,8),%eax
  10381e:	89 c2                	mov    %eax,%edx
  103820:	83 e2 01             	and    $0x1,%edx
  103823:	83 fe 02             	cmp    $0x2,%esi
  103826:	74 0f                	je     103837 <arch_buffer_validate+0xa1>
  103828:	89 c7                	mov    %eax,%edi
  10382a:	81 e7 80 00 00 00    	and    $0x80,%edi
  103830:	83 cf 00             	or     $0x0,%edi
  103833:	75 59                	jne    10388e <arch_buffer_validate+0xf8>
  103835:	eb 2b                	jmp    103862 <arch_buffer_validate+0xcc>
  103837:	09 ca                	or     %ecx,%edx
  103839:	75 0d                	jne    103848 <arch_buffer_validate+0xb2>
  10383b:	89 c2                	mov    %eax,%edx
  10383d:	81 e2 80 00 00 00    	and    $0x80,%edx
  103843:	83 ca 00             	or     $0x0,%edx
  103846:	75 4a                	jne    103892 <arch_buffer_validate+0xfc>
  103848:	89 c2                	mov    %eax,%edx
  10384a:	83 e2 04             	and    $0x4,%edx
  10384d:	83 ca 00             	or     $0x0,%edx
  103850:	74 40                	je     103892 <arch_buffer_validate+0xfc>
  103852:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  103856:	74 1b                	je     103873 <arch_buffer_validate+0xdd>
  103858:	83 e0 02             	and    $0x2,%eax
  10385b:	83 c8 00             	or     $0x0,%eax
  10385e:	75 13                	jne    103873 <arch_buffer_validate+0xdd>
  103860:	eb 30                	jmp    103892 <arch_buffer_validate+0xfc>
  103862:	09 ca                	or     %ecx,%edx
  103864:	74 2c                	je     103892 <arch_buffer_validate+0xfc>
  103866:	23 03                	and    (%ebx),%eax
  103868:	46                   	inc    %esi
  103869:	e8 be f4 ff ff       	call   102d2c <k_mem_virt_addr>
  10386e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  103871:	eb 06                	jmp    103879 <arch_buffer_validate+0xe3>
  103873:	46                   	inc    %esi
  103874:	83 fe 03             	cmp    $0x3,%esi
  103877:	74 05                	je     10387e <arch_buffer_validate+0xe8>
  103879:	83 c3 14             	add    $0x14,%ebx
  10387c:	eb 86                	jmp    103804 <arch_buffer_validate+0x6e>
  10387e:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
  103885:	e9 61 ff ff ff       	jmp    1037eb <arch_buffer_validate+0x55>
  10388a:	31 c0                	xor    %eax,%eax
  10388c:	eb 07                	jmp    103895 <arch_buffer_validate+0xff>
  10388e:	09 ca                	or     %ecx,%edx
  103890:	75 b6                	jne    103848 <arch_buffer_validate+0xb2>
  103892:	83 c8 ff             	or     $0xffffffff,%eax
  103895:	0f ae e8             	lfence
  103898:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10389b:	5b                   	pop    %ebx
  10389c:	5e                   	pop    %esi
  10389d:	5f                   	pop    %edi
  10389e:	5d                   	pop    %ebp
  10389f:	c3                   	ret

001038a0 <arch_mem_domain_init>:
  1038a0:	55                   	push   %ebp
  1038a1:	89 e5                	mov    %esp,%ebp
  1038a3:	57                   	push   %edi
  1038a4:	56                   	push   %esi
  1038a5:	53                   	push   %ebx
  1038a6:	8b 5d 08             	mov    0x8(%ebp),%ebx
  1038a9:	9c                   	pushf
  1038aa:	fa                   	cli
  1038ab:	5e                   	pop    %esi
  1038ac:	68 a0 cc 12 00       	push   $0x12cca0
  1038b1:	e8 39 74 00 00       	call   10acef <z_spin_lock_valid>
  1038b6:	59                   	pop    %ecx
  1038b7:	84 c0                	test   %al,%al
  1038b9:	75 37                	jne    1038f2 <arch_mem_domain_init+0x52>
  1038bb:	68 88 00 00 00       	push   $0x88
  1038c0:	68 61 13 11 00       	push   $0x111361
  1038c5:	68 8e 13 11 00       	push   $0x11138e
  1038ca:	68 ee 10 11 00       	push   $0x1110ee
  1038cf:	e8 09 dd ff ff       	call   1015dd <assert_print>
  1038d4:	83 c4 10             	add    $0x10,%esp
  1038d7:	68 a0 cc 12 00       	push   $0x12cca0
  1038dc:	68 a3 13 11 00       	push   $0x1113a3
  1038e1:	e8 f7 dc ff ff       	call   1015dd <assert_print>
  1038e6:	58                   	pop    %eax
  1038e7:	5a                   	pop    %edx
  1038e8:	68 88 00 00 00       	push   $0x88
  1038ed:	e9 e3 00 00 00       	jmp    1039d5 <arch_mem_domain_init+0x135>
  1038f2:	68 a0 cc 12 00       	push   $0x12cca0
  1038f7:	e8 4b 74 00 00       	call   10ad47 <z_spin_lock_set_owner>
  1038fc:	5f                   	pop    %edi
  1038fd:	a1 98 cc 12 00       	mov    0x12cc98,%eax
  103902:	85 c0                	test   %eax,%eax
  103904:	74 4b                	je     103951 <arch_mem_domain_init+0xb1>
  103906:	8d 50 dc             	lea    -0x24(%eax),%edx
  103909:	39 d3                	cmp    %edx,%ebx
  10390b:	75 40                	jne    10394d <arch_mem_domain_init+0xad>
  10390d:	68 13 07 00 00       	push   $0x713
  103912:	68 74 19 11 00       	push   $0x111974
  103917:	68 d3 1a 11 00       	push   $0x111ad3
  10391c:	68 ee 10 11 00       	push   $0x1110ee
  103921:	e8 b7 dc ff ff       	call   1015dd <assert_print>
  103926:	83 c4 10             	add    $0x10,%esp
  103929:	53                   	push   %ebx
  10392a:	68 c8 07 11 00       	push   $0x1107c8
  10392f:	68 f0 1a 11 00       	push   $0x111af0
  103934:	e8 a4 dc ff ff       	call   1015dd <assert_print>
  103939:	83 c4 0c             	add    $0xc,%esp
  10393c:	68 13 07 00 00       	push   $0x713
  103941:	68 74 19 11 00       	push   $0x111974
  103946:	e8 83 dc ff ff       	call   1015ce <assert_post_action>
  10394b:	59                   	pop    %ecx
  10394c:	5b                   	pop    %ebx
  10394d:	8b 00                	mov    (%eax),%eax
  10394f:	eb b1                	jmp    103902 <arch_mem_domain_init+0x62>
  103951:	b9 08 00 00 00       	mov    $0x8,%ecx
  103956:	89 df                	mov    %ebx,%edi
  103958:	f3 ab                	rep stos %eax,%es:(%edi)
  10395a:	ba 00 30 12 00       	mov    $0x123000,%edx
  10395f:	89 5b 20             	mov    %ebx,0x20(%ebx)
  103962:	89 d8                	mov    %ebx,%eax
  103964:	e8 0f f4 ff ff       	call   102d78 <copy_page_table>
  103969:	89 c7                	mov    %eax,%edi
  10396b:	85 c0                	test   %eax,%eax
  10396d:	75 25                	jne    103994 <arch_mem_domain_init+0xf4>
  10396f:	31 d2                	xor    %edx,%edx
  103971:	8d 43 24             	lea    0x24(%ebx),%eax
  103974:	89 53 24             	mov    %edx,0x24(%ebx)
  103977:	8b 15 9c cc 12 00    	mov    0x12cc9c,%edx
  10397d:	85 d2                	test   %edx,%edx
  10397f:	75 0c                	jne    10398d <arch_mem_domain_init+0xed>
  103981:	a3 9c cc 12 00       	mov    %eax,0x12cc9c
  103986:	a3 98 cc 12 00       	mov    %eax,0x12cc98
  10398b:	eb 07                	jmp    103994 <arch_mem_domain_init+0xf4>
  10398d:	89 02                	mov    %eax,(%edx)
  10398f:	a3 9c cc 12 00       	mov    %eax,0x12cc9c
  103994:	68 a0 cc 12 00       	push   $0x12cca0
  103999:	e8 72 73 00 00       	call   10ad10 <z_spin_unlock_valid>
  10399e:	59                   	pop    %ecx
  10399f:	84 c0                	test   %al,%al
  1039a1:	75 3c                	jne    1039df <arch_mem_domain_init+0x13f>
  1039a3:	68 31 01 00 00       	push   $0x131
  1039a8:	68 61 13 11 00       	push   $0x111361
  1039ad:	68 e8 13 11 00       	push   $0x1113e8
  1039b2:	68 ee 10 11 00       	push   $0x1110ee
  1039b7:	e8 21 dc ff ff       	call   1015dd <assert_print>
  1039bc:	83 c4 10             	add    $0x10,%esp
  1039bf:	68 a0 cc 12 00       	push   $0x12cca0
  1039c4:	68 ff 13 11 00       	push   $0x1113ff
  1039c9:	e8 0f dc ff ff       	call   1015dd <assert_print>
  1039ce:	58                   	pop    %eax
  1039cf:	5a                   	pop    %edx
  1039d0:	68 31 01 00 00       	push   $0x131
  1039d5:	68 61 13 11 00       	push   $0x111361
  1039da:	e9 67 ff ff ff       	jmp    103946 <arch_mem_domain_init+0xa6>
  1039df:	0f ba e6 09          	bt     $0x9,%esi
  1039e3:	73 01                	jae    1039e6 <arch_mem_domain_init+0x146>
  1039e5:	fb                   	sti
  1039e6:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1039e9:	89 f8                	mov    %edi,%eax
  1039eb:	5b                   	pop    %ebx
  1039ec:	5e                   	pop    %esi
  1039ed:	5f                   	pop    %edi
  1039ee:	5d                   	pop    %ebp
  1039ef:	c3                   	ret

001039f0 <arch_mem_domain_thread_remove>:
  1039f0:	55                   	push   %ebp
  1039f1:	31 c0                	xor    %eax,%eax
  1039f3:	89 e5                	mov    %esp,%ebp
  1039f5:	53                   	push   %ebx
  1039f6:	8b 55 08             	mov    0x8(%ebp),%edx
  1039f9:	f6 42 0c 04          	testb  $0x4,0xc(%edx)
  1039fd:	74 25                	je     103a24 <arch_mem_domain_thread_remove+0x34>
  1039ff:	f6 42 0d 08          	testb  $0x8,0xd(%edx)
  103a03:	74 1f                	je     103a24 <arch_mem_domain_thread_remove+0x34>
  103a05:	8b 82 80 00 00 00    	mov    0x80(%edx),%eax
  103a0b:	8b 4a 68             	mov    0x68(%edx),%ecx
  103a0e:	8b 5a 64             	mov    0x64(%edx),%ebx
  103a11:	8b 40 20             	mov    0x20(%eax),%eax
  103a14:	6a 01                	push   $0x1
  103a16:	6a 00                	push   $0x0
  103a18:	89 da                	mov    %ebx,%edx
  103a1a:	6a 00                	push   $0x0
  103a1c:	e8 46 f8 ff ff       	call   103267 <region_map_update>
  103a21:	83 c4 0c             	add    $0xc,%esp
  103a24:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  103a27:	c9                   	leave
  103a28:	c3                   	ret

00103a29 <arch_mem_domain_partition_add>:
  103a29:	55                   	push   %ebp
  103a2a:	89 e5                	mov    %esp,%ebp
  103a2c:	56                   	push   %esi
  103a2d:	53                   	push   %ebx
  103a2e:	8b 45 0c             	mov    0xc(%ebp),%eax
  103a31:	8b 55 08             	mov    0x8(%ebp),%edx
  103a34:	c1 e0 04             	shl    $0x4,%eax
  103a37:	01 d0                	add    %edx,%eax
  103a39:	8b 72 20             	mov    0x20(%edx),%esi
  103a3c:	8b 58 40             	mov    0x40(%eax),%ebx
  103a3f:	8b 48 44             	mov    0x44(%eax),%ecx
  103a42:	6a 00                	push   $0x0
  103a44:	8b 50 4c             	mov    0x4c(%eax),%edx
  103a47:	8b 40 48             	mov    0x48(%eax),%eax
  103a4a:	83 c8 01             	or     $0x1,%eax
  103a4d:	52                   	push   %edx
  103a4e:	50                   	push   %eax
  103a4f:	89 da                	mov    %ebx,%edx
  103a51:	89 f0                	mov    %esi,%eax
  103a53:	e8 0f f8 ff ff       	call   103267 <region_map_update>
  103a58:	83 c4 0c             	add    $0xc,%esp
  103a5b:	8d 65 f8             	lea    -0x8(%ebp),%esp
  103a5e:	5b                   	pop    %ebx
  103a5f:	5e                   	pop    %esi
  103a60:	5d                   	pop    %ebp
  103a61:	c3                   	ret

00103a62 <arch_mem_domain_thread_add>:
  103a62:	55                   	push   %ebp
  103a63:	89 e5                	mov    %esp,%ebp
  103a65:	57                   	push   %edi
  103a66:	56                   	push   %esi
  103a67:	53                   	push   %ebx
  103a68:	8b 5d 08             	mov    0x8(%ebp),%ebx
  103a6b:	f6 43 0c 04          	testb  $0x4,0xc(%ebx)
  103a6f:	8b bb 80 00 00 00    	mov    0x80(%ebx),%edi
  103a75:	8b 83 98 00 00 00    	mov    0x98(%ebx),%eax
  103a7b:	74 04                	je     103a81 <arch_mem_domain_thread_add+0x1f>
  103a7d:	85 c0                	test   %eax,%eax
  103a7f:	75 12                	jne    103a93 <arch_mem_domain_thread_add+0x31>
  103a81:	8b 47 20             	mov    0x20(%edi),%eax
  103a84:	e8 5d f2 ff ff       	call   102ce6 <k_mem_phys_addr>
  103a89:	89 83 98 00 00 00    	mov    %eax,0x98(%ebx)
  103a8f:	31 c0                	xor    %eax,%eax
  103a91:	eb 45                	jmp    103ad8 <arch_mem_domain_thread_add+0x76>
  103a93:	e8 94 f2 ff ff       	call   102d2c <k_mem_virt_addr>
  103a98:	8b 4b 68             	mov    0x68(%ebx),%ecx
  103a9b:	8b 53 64             	mov    0x64(%ebx),%edx
  103a9e:	89 c6                	mov    %eax,%esi
  103aa0:	8b 47 20             	mov    0x20(%edi),%eax
  103aa3:	6a 00                	push   $0x0
  103aa5:	68 00 00 00 80       	push   $0x80000000
  103aaa:	6a 07                	push   $0x7
  103aac:	e8 b6 f7 ff ff       	call   103267 <region_map_update>
  103ab1:	83 c4 0c             	add    $0xc,%esp
  103ab4:	8b 47 20             	mov    0x20(%edi),%eax
  103ab7:	e8 2a f2 ff ff       	call   102ce6 <k_mem_phys_addr>
  103abc:	8b 4b 68             	mov    0x68(%ebx),%ecx
  103abf:	89 83 98 00 00 00    	mov    %eax,0x98(%ebx)
  103ac5:	8b 53 64             	mov    0x64(%ebx),%edx
  103ac8:	6a 01                	push   $0x1
  103aca:	89 f0                	mov    %esi,%eax
  103acc:	6a 00                	push   $0x0
  103ace:	6a 00                	push   $0x0
  103ad0:	e8 92 f7 ff ff       	call   103267 <region_map_update>
  103ad5:	83 c4 0c             	add    $0xc,%esp
  103ad8:	8d 65 f4             	lea    -0xc(%ebp),%esp
  103adb:	5b                   	pop    %ebx
  103adc:	5e                   	pop    %esi
  103add:	5f                   	pop    %edi
  103ade:	5d                   	pop    %ebp
  103adf:	c3                   	ret

00103ae0 <arch_mem_domain_max_partitions_get>:
  103ae0:	b8 10 00 00 00       	mov    $0x10,%eax
  103ae5:	c3                   	ret

00103ae6 <z_x86_current_stack_perms>:
  103ae6:	55                   	push   %ebp
  103ae7:	89 e5                	mov    %esp,%ebp
  103ae9:	57                   	push   %edi
  103aea:	53                   	push   %ebx
  103aeb:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  103af0:	8b 48 68             	mov    0x68(%eax),%ecx
  103af3:	8b 50 64             	mov    0x64(%eax),%edx
  103af6:	2b 48 6c             	sub    0x6c(%eax),%ecx
  103af9:	89 d7                	mov    %edx,%edi
  103afb:	b0 aa                	mov    $0xaa,%al
  103afd:	f3 aa                	rep stos %al,%es:(%edi)
  103aff:	8b 1d a8 48 12 00    	mov    0x1248a8,%ebx
  103b05:	b8 00 30 12 00       	mov    $0x123000,%eax
  103b0a:	f6 43 0c 04          	testb  $0x4,0xc(%ebx)
  103b0e:	74 0b                	je     103b1b <z_x86_current_stack_perms+0x35>
  103b10:	8b 83 98 00 00 00    	mov    0x98(%ebx),%eax
  103b16:	e8 11 f2 ff ff       	call   102d2c <k_mem_virt_addr>
  103b1b:	8b 4b 68             	mov    0x68(%ebx),%ecx
  103b1e:	8b 53 64             	mov    0x64(%ebx),%edx
  103b21:	6a 00                	push   $0x0
  103b23:	68 00 00 00 80       	push   $0x80000000
  103b28:	6a 07                	push   $0x7
  103b2a:	e8 38 f7 ff ff       	call   103267 <region_map_update>
  103b2f:	83 c4 0c             	add    $0xc,%esp
  103b32:	8d 65 f8             	lea    -0x8(%ebp),%esp
  103b35:	5b                   	pop    %ebx
  103b36:	5f                   	pop    %edi
  103b37:	5d                   	pop    %ebp
  103b38:	c3                   	ret

00103b39 <arch_reserved_pages_update>:
  103b39:	55                   	push   %ebp
  103b3a:	ba 00 00 10 00       	mov    $0x100000,%edx
  103b3f:	89 e5                	mov    %esp,%ebp
  103b41:	31 c0                	xor    %eax,%eax
  103b43:	53                   	push   %ebx
  103b44:	e8 31 f1 ff ff       	call   102c7a <mark_addr_page_reserved>
  103b49:	bb 00 b0 11 00       	mov    $0x11b000,%ebx
  103b4e:	83 7b 10 01          	cmpl   $0x1,0x10(%ebx)
  103b52:	76 0a                	jbe    103b5e <arch_reserved_pages_update+0x25>
  103b54:	8b 53 08             	mov    0x8(%ebx),%edx
  103b57:	8b 03                	mov    (%ebx),%eax
  103b59:	e8 1c f1 ff ff       	call   102c7a <mark_addr_page_reserved>
  103b5e:	83 c3 14             	add    $0x14,%ebx
  103b61:	81 fb 00 b5 11 00    	cmp    $0x11b500,%ebx
  103b67:	75 e5                	jne    103b4e <arch_reserved_pages_update+0x15>
  103b69:	5b                   	pop    %ebx
  103b6a:	5d                   	pop    %ebp
  103b6b:	c3                   	ret

00103b6c <arch_page_phys_get>:
  103b6c:	55                   	push   %ebp
  103b6d:	31 c0                	xor    %eax,%eax
  103b6f:	89 e5                	mov    %esp,%ebp
  103b71:	56                   	push   %esi
  103b72:	53                   	push   %ebx
  103b73:	83 ec 0c             	sub    $0xc,%esp
  103b76:	89 45 f0             	mov    %eax,-0x10(%ebp)
  103b79:	8b 75 08             	mov    0x8(%ebp),%esi
  103b7c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  103b7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  103b82:	f7 c6 ff 0f 00 00    	test   $0xfff,%esi
  103b88:	74 40                	je     103bca <arch_page_phys_get+0x5e>
  103b8a:	68 11 08 00 00       	push   $0x811
  103b8f:	68 74 19 11 00       	push   $0x111974
  103b94:	68 0f 1b 11 00       	push   $0x111b0f
  103b99:	68 ee 10 11 00       	push   $0x1110ee
  103b9e:	e8 3a da ff ff       	call   1015dd <assert_print>
  103ba3:	83 c4 10             	add    $0x10,%esp
  103ba6:	68 b4 07 11 00       	push   $0x1107b4
  103bab:	56                   	push   %esi
  103bac:	68 33 1b 11 00       	push   $0x111b33
  103bb1:	e8 27 da ff ff       	call   1015dd <assert_print>
  103bb6:	83 c4 0c             	add    $0xc,%esp
  103bb9:	68 11 08 00 00       	push   $0x811
  103bbe:	68 74 19 11 00       	push   $0x111974
  103bc3:	e8 06 da ff ff       	call   1015ce <assert_post_action>
  103bc8:	5a                   	pop    %edx
  103bc9:	59                   	pop    %ecx
  103bca:	0f 20 d8             	mov    %cr3,%eax
  103bcd:	e8 5a f1 ff ff       	call   102d2c <k_mem_virt_addr>
  103bd2:	56                   	push   %esi
  103bd3:	89 c1                	mov    %eax,%ecx
  103bd5:	8d 55 f0             	lea    -0x10(%ebp),%edx
  103bd8:	8d 45 ec             	lea    -0x14(%ebp),%eax
  103bdb:	e8 61 f3 ff ff       	call   102f41 <pentry_get>
  103be0:	58                   	pop    %eax
  103be1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103be4:	ba f2 ff ff ff       	mov    $0xfffffff2,%edx
  103be9:	89 c1                	mov    %eax,%ecx
  103beb:	83 e1 01             	and    $0x1,%ecx
  103bee:	83 c9 00             	or     $0x0,%ecx
  103bf1:	74 11                	je     103c04 <arch_page_phys_get+0x98>
  103bf3:	85 db                	test   %ebx,%ebx
  103bf5:	75 04                	jne    103bfb <arch_page_phys_get+0x8f>
  103bf7:	31 d2                	xor    %edx,%edx
  103bf9:	eb 09                	jmp    103c04 <arch_page_phys_get+0x98>
  103bfb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  103c00:	89 03                	mov    %eax,(%ebx)
  103c02:	eb f3                	jmp    103bf7 <arch_page_phys_get+0x8b>
  103c04:	8d 65 f8             	lea    -0x8(%ebp),%esp
  103c07:	89 d0                	mov    %edx,%eax
  103c09:	5b                   	pop    %ebx
  103c0a:	5e                   	pop    %esi
  103c0b:	5d                   	pop    %ebp
  103c0c:	c3                   	ret

00103c0d <arch_user_mode_enter>:
  103c0d:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  103c13:	55                   	push   %ebp
  103c14:	89 e5                	mov    %esp,%ebp
  103c16:	8b 42 64             	mov    0x64(%edx),%eax
  103c19:	50                   	push   %eax
  103c1a:	03 42 68             	add    0x68(%edx),%eax
  103c1d:	2b 42 6c             	sub    0x6c(%edx),%eax
  103c20:	83 e0 fc             	and    $0xfffffffc,%eax
  103c23:	50                   	push   %eax
  103c24:	ff 75 14             	push   0x14(%ebp)
  103c27:	ff 75 10             	push   0x10(%ebp)
  103c2a:	ff 75 0c             	push   0xc(%ebp)
  103c2d:	ff 75 08             	push   0x8(%ebp)
  103c30:	e8 81 03 00 00       	call   103fb6 <z_x86_userspace_enter>

00103c35 <z_x86_userspace_prepare_thread>:
  103c35:	55                   	push   %ebp
  103c36:	89 e5                	mov    %esp,%ebp
  103c38:	8b 45 08             	mov    0x8(%ebp),%eax
  103c3b:	8b 48 70             	mov    0x70(%eax),%ecx
  103c3e:	8d 91 00 10 00 00    	lea    0x1000(%ecx),%edx
  103c44:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
  103c4a:	31 d2                	xor    %edx,%edx
  103c4c:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
  103c52:	ba 0d 3c 10 00       	mov    $0x103c0d,%edx
  103c57:	f6 40 0c 04          	testb  $0x4,0xc(%eax)
  103c5b:	75 05                	jne    103c62 <z_x86_userspace_prepare_thread+0x2d>
  103c5d:	ba 7b 15 10 00       	mov    $0x10157b,%edx
  103c62:	89 d0                	mov    %edx,%eax
  103c64:	5d                   	pop    %ebp
  103c65:	c3                   	ret

00103c66 <arch_printk_char_out>:
  103c66:	55                   	push   %ebp
  103c67:	80 3d 2c cd 12 00 00 	cmpb   $0x0,0x12cd2c
  103c6e:	89 e5                	mov    %esp,%ebp
  103c70:	75 08                	jne    103c7a <arch_printk_char_out+0x14>
  103c72:	ff 05 a4 cc 12 00    	incl   0x12cca4
  103c78:	eb 2b                	jmp    103ca5 <arch_printk_char_out+0x3f>
  103c7a:	83 7d 08 0a          	cmpl   $0xa,0x8(%ebp)
  103c7e:	75 12                	jne    103c92 <arch_printk_char_out+0x2c>
  103c80:	ba fd 03 00 00       	mov    $0x3fd,%edx
  103c85:	ec                   	in     (%dx),%al
  103c86:	a8 20                	test   $0x20,%al
  103c88:	74 fb                	je     103c85 <arch_printk_char_out+0x1f>
  103c8a:	b0 0d                	mov    $0xd,%al
  103c8c:	ba f8 03 00 00       	mov    $0x3f8,%edx
  103c91:	ee                   	out    %al,(%dx)
  103c92:	ba fd 03 00 00       	mov    $0x3fd,%edx
  103c97:	ec                   	in     (%dx),%al
  103c98:	a8 20                	test   $0x20,%al
  103c9a:	74 fb                	je     103c97 <arch_printk_char_out+0x31>
  103c9c:	ba f8 03 00 00       	mov    $0x3f8,%edx
  103ca1:	8a 45 08             	mov    0x8(%ebp),%al
  103ca4:	ee                   	out    %al,(%dx)
  103ca5:	8b 45 08             	mov    0x8(%ebp),%eax
  103ca8:	5d                   	pop    %ebp
  103ca9:	c3                   	ret

00103caa <z_x86_early_serial_init>:
  103caa:	55                   	push   %ebp
  103cab:	89 e5                	mov    %esp,%ebp
  103cad:	56                   	push   %esi
  103cae:	53                   	push   %ebx
  103caf:	be f9 03 00 00       	mov    $0x3f9,%esi
  103cb4:	31 db                	xor    %ebx,%ebx
  103cb6:	89 f2                	mov    %esi,%edx
  103cb8:	88 d8                	mov    %bl,%al
  103cba:	ee                   	out    %al,(%dx)
  103cbb:	b9 fb 03 00 00       	mov    $0x3fb,%ecx
  103cc0:	b0 80                	mov    $0x80,%al
  103cc2:	89 ca                	mov    %ecx,%edx
  103cc4:	ee                   	out    %al,(%dx)
  103cc5:	b0 01                	mov    $0x1,%al
  103cc7:	ba f8 03 00 00       	mov    $0x3f8,%edx
  103ccc:	ee                   	out    %al,(%dx)
  103ccd:	88 d8                	mov    %bl,%al
  103ccf:	89 f2                	mov    %esi,%edx
  103cd1:	ee                   	out    %al,(%dx)
  103cd2:	b0 03                	mov    $0x3,%al
  103cd4:	89 ca                	mov    %ecx,%edx
  103cd6:	ee                   	out    %al,(%dx)
  103cd7:	ba fc 03 00 00       	mov    $0x3fc,%edx
  103cdc:	ee                   	out    %al,(%dx)
  103cdd:	b0 07                	mov    $0x7,%al
  103cdf:	ba fa 03 00 00       	mov    $0x3fa,%edx
  103ce4:	ee                   	out    %al,(%dx)
  103ce5:	a1 a4 cc 12 00       	mov    0x12cca4,%eax
  103cea:	c6 05 2c cd 12 00 01 	movb   $0x1,0x12cd2c
  103cf1:	85 c0                	test   %eax,%eax
  103cf3:	74 0d                	je     103d02 <z_x86_early_serial_init+0x58>
  103cf5:	50                   	push   %eax
  103cf6:	68 58 1b 11 00       	push   $0x111b58
  103cfb:	e8 68 d8 ff ff       	call   101568 <printk>
  103d00:	58                   	pop    %eax
  103d01:	5a                   	pop    %edx
  103d02:	8d 65 f8             	lea    -0x8(%ebp),%esp
  103d05:	5b                   	pop    %ebx
  103d06:	5e                   	pop    %esi
  103d07:	5d                   	pop    %ebp
  103d08:	c3                   	ret

00103d09 <arch_tls_stack_setup>:
  103d09:	55                   	push   %ebp
  103d0a:	b9 00 00 00 00       	mov    $0x0,%ecx
  103d0f:	89 e5                	mov    %esp,%ebp
  103d11:	57                   	push   %edi
  103d12:	56                   	push   %esi
  103d13:	be 24 01 11 00       	mov    $0x110124,%esi
  103d18:	53                   	push   %ebx
  103d19:	bb 04 00 00 00       	mov    $0x4,%ebx
  103d1e:	8b 55 0c             	mov    0xc(%ebp),%edx
  103d21:	8d 42 fc             	lea    -0x4(%edx),%eax
  103d24:	89 42 fc             	mov    %eax,-0x4(%edx)
  103d27:	8b 55 08             	mov    0x8(%ebp),%edx
  103d2a:	89 82 90 00 00 00    	mov    %eax,0x90(%edx)
  103d30:	8d 14 0b             	lea    (%ebx,%ecx,1),%edx
  103d33:	29 d0                	sub    %edx,%eax
  103d35:	89 c7                	mov    %eax,%edi
  103d37:	31 c0                	xor    %eax,%eax
  103d39:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
  103d3b:	89 d9                	mov    %ebx,%ecx
  103d3d:	f3 aa                	rep stos %al,%es:(%edi)
  103d3f:	5b                   	pop    %ebx
  103d40:	8d 42 04             	lea    0x4(%edx),%eax
  103d43:	5e                   	pop    %esi
  103d44:	5f                   	pop    %edi
  103d45:	5d                   	pop    %ebp
  103d46:	c3                   	ret

00103d47 <_exception_enter>:
  103d47:	fc                   	cld
  103d48:	e8 51 01 00 00       	call   103e9e <z_x86_trampoline_to_kernel>
  103d4d:	87 0c 24             	xchg   %ecx,(%esp)
  103d50:	50                   	push   %eax
  103d51:	52                   	push   %edx
  103d52:	57                   	push   %edi
  103d53:	56                   	push   %esi
  103d54:	53                   	push   %ebx
  103d55:	55                   	push   %ebp
  103d56:	f6 44 24 24 03       	testb  $0x3,0x24(%esp)
  103d5b:	74 06                	je     103d63 <_exception_enter+0x1c>
  103d5d:	ff 74 24 2c          	push   0x2c(%esp)
  103d61:	eb 05                	jmp    103d68 <_exception_enter+0x21>
  103d63:	8d 44 24 2c          	lea    0x2c(%esp),%eax
  103d67:	50                   	push   %eax
  103d68:	f7 44 24 2c 00 02 00 	testl  $0x200,0x2c(%esp)
  103d6f:	00 
  103d70:	74 01                	je     103d73 <allDone>
  103d72:	fb                   	sti

00103d73 <allDone>:
  103d73:	54                   	push   %esp
  103d74:	ff d1                	call   *%ecx
  103d76:	83 c4 04             	add    $0x4,%esp
  103d79:	5d                   	pop    %ebp
  103d7a:	5d                   	pop    %ebp
  103d7b:	5b                   	pop    %ebx
  103d7c:	5e                   	pop    %esi
  103d7d:	5f                   	pop    %edi
  103d7e:	5a                   	pop    %edx
  103d7f:	58                   	pop    %eax
  103d80:	59                   	pop    %ecx
  103d81:	83 c4 04             	add    $0x4,%esp
  103d84:	e9 5b 01 00 00       	jmp    103ee4 <z_x86_trampoline_to_user>

00103d89 <_kernel_oops_handler>:
  103d89:	6a 00                	push   $0x0
  103d8b:	68 59 2a 10 00       	push   $0x102a59
  103d90:	e9 b2 ff ff ff       	jmp    103d47 <_exception_enter>

00103d95 <_interrupt_enter>:
  103d95:	fc                   	cld
  103d96:	e8 03 01 00 00       	call   103e9e <z_x86_trampoline_to_kernel>
  103d9b:	87 44 24 04          	xchg   %eax,0x4(%esp)
  103d9f:	87 14 24             	xchg   %edx,(%esp)
  103da2:	51                   	push   %ecx
  103da3:	57                   	push   %edi
  103da4:	b9 a0 48 12 00       	mov    $0x1248a0,%ecx
  103da9:	ff 01                	incl   (%ecx)
  103dab:	83 39 01             	cmpl   $0x1,(%ecx)
  103dae:	75 06                	jne    103db6 <alreadyOnIntStack>
  103db0:	89 e7                	mov    %esp,%edi
  103db2:	8b 61 04             	mov    0x4(%ecx),%esp
  103db5:	57                   	push   %edi

00103db6 <alreadyOnIntStack>:
  103db6:	50                   	push   %eax
  103db7:	fb                   	sti
  103db8:	ff d2                	call   *%edx
  103dba:	83 c4 04             	add    $0x4,%esp
  103dbd:	fa                   	cli
  103dbe:	31 c0                	xor    %eax,%eax
  103dc0:	8b 15 bc cc 12 00    	mov    0x12ccbc,%edx
  103dc6:	89 82 b0 00 00 00    	mov    %eax,0xb0(%edx)
  103dcc:	b9 a0 48 12 00       	mov    $0x1248a0,%ecx
  103dd1:	ff 09                	decl   (%ecx)
  103dd3:	75 1c                	jne    103df1 <nestedInterrupt>
  103dd5:	8b 51 08             	mov    0x8(%ecx),%edx
  103dd8:	39 51 14             	cmp    %edx,0x14(%ecx)
  103ddb:	74 13                	je     103df0 <noReschedule>
  103ddd:	5c                   	pop    %esp
  103dde:	9c                   	pushf
  103ddf:	e8 2c 00 00 00       	call   103e10 <arch_swap>
  103de4:	83 c4 04             	add    $0x4,%esp
  103de7:	5f                   	pop    %edi
  103de8:	59                   	pop    %ecx
  103de9:	5a                   	pop    %edx
  103dea:	58                   	pop    %eax
  103deb:	e9 f4 00 00 00       	jmp    103ee4 <z_x86_trampoline_to_user>

00103df0 <noReschedule>:
  103df0:	5c                   	pop    %esp

00103df1 <nestedInterrupt>:
  103df1:	5f                   	pop    %edi
  103df2:	59                   	pop    %ecx
  103df3:	5a                   	pop    %edx
  103df4:	58                   	pop    %eax
  103df5:	e9 ea 00 00 00       	jmp    103ee4 <z_x86_trampoline_to_user>

00103dfa <z_SpuriousIntNoErrCodeHandler>:
  103dfa:	6a 00                	push   $0x0

00103dfc <z_SpuriousIntHandler>:
  103dfc:	fc                   	cld
  103dfd:	50                   	push   %eax
  103dfe:	51                   	push   %ecx
  103dff:	52                   	push   %edx
  103e00:	57                   	push   %edi
  103e01:	56                   	push   %esi
  103e02:	53                   	push   %ebx
  103e03:	55                   	push   %ebp
  103e04:	8d 4c 24 2c          	lea    0x2c(%esp),%ecx
  103e08:	51                   	push   %ecx
  103e09:	54                   	push   %esp
  103e0a:	fb                   	sti
  103e0b:	e8 90 03 00 00       	call   1041a0 <z_x86_spurious_irq>

00103e10 <arch_swap>:
  103e10:	57                   	push   %edi
  103e11:	bf a0 48 12 00       	mov    $0x1248a0,%edi
  103e16:	56                   	push   %esi
  103e17:	53                   	push   %ebx
  103e18:	55                   	push   %ebp
  103e19:	ff 35 20 09 11 00    	push   0x110920
  103e1f:	8b 57 08             	mov    0x8(%edi),%edx
  103e22:	89 62 2c             	mov    %esp,0x2c(%edx)
  103e25:	8b 47 14             	mov    0x14(%edi),%eax
  103e28:	89 47 08             	mov    %eax,0x8(%edi)
  103e2b:	50                   	push   %eax
  103e2c:	e8 bb 01 00 00       	call   103fec <z_x86_tls_update_gdt>
  103e31:	66 b8 3b 00          	mov    $0x3b,%ax
  103e35:	8e e8                	mov    %eax,%gs
  103e37:	58                   	pop    %eax
  103e38:	8b 60 2c             	mov    0x2c(%eax),%esp
  103e3b:	58                   	pop    %eax
  103e3c:	5d                   	pop    %ebp
  103e3d:	5b                   	pop    %ebx
  103e3e:	5e                   	pop    %esi
  103e3f:	5f                   	pop    %edi
  103e40:	ff 74 24 04          	push   0x4(%esp)
  103e44:	9d                   	popf
  103e45:	c3                   	ret

00103e46 <z_x86_thread_entry_wrapper>:
  103e46:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  103e4d:	ff e7                	jmp    *%edi

00103e4f <arch_new_thread>:
  103e4f:	55                   	push   %ebp
  103e50:	89 e5                	mov    %esp,%ebp
  103e52:	56                   	push   %esi
  103e53:	53                   	push   %ebx
  103e54:	8b 75 08             	mov    0x8(%ebp),%esi
  103e57:	8b 5d 10             	mov    0x10(%ebp),%ebx
  103e5a:	56                   	push   %esi
  103e5b:	e8 d5 fd ff ff       	call   103c35 <z_x86_userspace_prepare_thread>
  103e60:	5a                   	pop    %edx
  103e61:	8b 55 14             	mov    0x14(%ebp),%edx
  103e64:	89 53 f0             	mov    %edx,-0x10(%ebx)
  103e67:	8b 55 18             	mov    0x18(%ebp),%edx
  103e6a:	89 53 f4             	mov    %edx,-0xc(%ebx)
  103e6d:	8b 55 1c             	mov    0x1c(%ebp),%edx
  103e70:	89 53 f8             	mov    %edx,-0x8(%ebx)
  103e73:	8b 55 20             	mov    0x20(%ebp),%edx
  103e76:	89 53 fc             	mov    %edx,-0x4(%ebx)
  103e79:	c7 43 ec 00 02 00 00 	movl   $0x200,-0x14(%ebx)
  103e80:	89 43 e4             	mov    %eax,-0x1c(%ebx)
  103e83:	c7 43 e8 46 3e 10 00 	movl   $0x103e46,-0x18(%ebx)
  103e8a:	83 eb 2c             	sub    $0x2c,%ebx
  103e8d:	c6 86 94 00 00 00 00 	movb   $0x0,0x94(%esi)
  103e94:	89 5e 2c             	mov    %ebx,0x2c(%esi)
  103e97:	8d 65 f8             	lea    -0x8(%ebp),%esp
  103e9a:	5b                   	pop    %ebx
  103e9b:	5e                   	pop    %esi
  103e9c:	5d                   	pop    %ebp
  103e9d:	c3                   	ret

00103e9e <z_x86_trampoline_to_kernel>:
  103e9e:	f6 44 24 10 03       	testb  $0x3,0x10(%esp)
  103ea3:	74 3e                	je     103ee3 <z_x86_trampoline_to_kernel+0x45>
  103ea5:	56                   	push   %esi
  103ea6:	57                   	push   %edi
  103ea7:	be 00 30 12 00       	mov    $0x123000,%esi
  103eac:	0f 22 de             	mov    %esi,%cr3
  103eaf:	89 e7                	mov    %esp,%edi
  103eb1:	be a0 48 12 00       	mov    $0x1248a0,%esi
  103eb6:	8b 76 08             	mov    0x8(%esi),%esi
  103eb9:	8b a6 9c 00 00 00    	mov    0x9c(%esi),%esp
  103ebf:	ff 77 24             	push   0x24(%edi)
  103ec2:	ff 77 20             	push   0x20(%edi)
  103ec5:	ff 77 1c             	push   0x1c(%edi)
  103ec8:	ff 77 18             	push   0x18(%edi)
  103ecb:	ff 77 14             	push   0x14(%edi)
  103ece:	ff 77 10             	push   0x10(%edi)
  103ed1:	ff 77 0c             	push   0xc(%edi)
  103ed4:	ff 77 08             	push   0x8(%edi)
  103ed7:	8b 77 04             	mov    0x4(%edi),%esi
  103eda:	c7 47 04 00 00 00 00 	movl   $0x0,0x4(%edi)
  103ee1:	87 3f                	xchg   %edi,(%edi)
  103ee3:	c3                   	ret

00103ee4 <z_x86_trampoline_to_user>:
  103ee4:	f6 44 24 04 03       	testb  $0x3,0x4(%esp)
  103ee9:	0f 84 35 00 00 00    	je     103f24 <z_x86_trampoline_to_user_always+0x35>

00103eef <z_x86_trampoline_to_user_always>:
  103eef:	57                   	push   %edi
  103ef0:	89 e7                	mov    %esp,%edi
  103ef2:	fa                   	cli
  103ef3:	bc 00 d0 11 00       	mov    $0x11d000,%esp
  103ef8:	ff 77 14             	push   0x14(%edi)
  103efb:	ff 77 10             	push   0x10(%edi)
  103efe:	ff 77 0c             	push   0xc(%edi)
  103f01:	ff 77 08             	push   0x8(%edi)
  103f04:	ff 77 04             	push   0x4(%edi)
  103f07:	87 3f                	xchg   %edi,(%edi)
  103f09:	50                   	push   %eax
  103f0a:	b8 a0 48 12 00       	mov    $0x1248a0,%eax
  103f0f:	8b 40 08             	mov    0x8(%eax),%eax
  103f12:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
  103f18:	0f 22 d8             	mov    %eax,%cr3
  103f1b:	58                   	pop    %eax
  103f1c:	c7 44 24 fc 00 00 00 	movl   $0x0,-0x4(%esp)
  103f23:	00 
  103f24:	cf                   	iret

00103f25 <z_x86_syscall_entry_stub>:
  103f25:	56                   	push   %esi
  103f26:	57                   	push   %edi
  103f27:	be 00 30 12 00       	mov    $0x123000,%esi
  103f2c:	0f 22 de             	mov    %esi,%cr3
  103f2f:	89 e7                	mov    %esp,%edi
  103f31:	be a0 48 12 00       	mov    $0x1248a0,%esi
  103f36:	8b 76 08             	mov    0x8(%esi),%esi
  103f39:	8b a6 9c 00 00 00    	mov    0x9c(%esi),%esp
  103f3f:	ff 77 18             	push   0x18(%edi)
  103f42:	ff 77 14             	push   0x14(%edi)
  103f45:	ff 77 10             	push   0x10(%edi)
  103f48:	ff 77 0c             	push   0xc(%edi)
  103f4b:	ff 77 08             	push   0x8(%edi)
  103f4e:	8b 77 04             	mov    0x4(%edi),%esi
  103f51:	c7 47 04 00 00 00 00 	movl   $0x0,0x4(%edi)
  103f58:	87 3f                	xchg   %edi,(%edi)
  103f5a:	fb                   	sti
  103f5b:	fc                   	cld
  103f5c:	81 fe 95 00 00 00    	cmp    $0x95,%esi
  103f62:	73 22                	jae    103f86 <_bad_syscall>

00103f64 <_id_ok>:
  103f64:	0f ae e8             	lfence
  103f67:	54                   	push   %esp
  103f68:	55                   	push   %ebp
  103f69:	57                   	push   %edi
  103f6a:	53                   	push   %ebx
  103f6b:	51                   	push   %ecx
  103f6c:	52                   	push   %edx
  103f6d:	50                   	push   %eax
  103f6e:	31 ff                	xor    %edi,%edi
  103f70:	8b 9c b7 60 04 11 00 	mov    0x110460(%edi,%esi,4),%ebx
  103f77:	ff d3                	call   *%ebx
  103f79:	5a                   	pop    %edx
  103f7a:	5a                   	pop    %edx
  103f7b:	59                   	pop    %ecx
  103f7c:	5b                   	pop    %ebx
  103f7d:	5f                   	pop    %edi
  103f7e:	83 c4 08             	add    $0x8,%esp
  103f81:	e9 69 ff ff ff       	jmp    103eef <z_x86_trampoline_to_user_always>

00103f86 <_bad_syscall>:
  103f86:	89 f0                	mov    %esi,%eax
  103f88:	be 94 00 00 00       	mov    $0x94,%esi
  103f8d:	eb d5                	jmp    103f64 <_id_ok>

00103f8f <arch_user_string_nlen>:
  103f8f:	55                   	push   %ebp
  103f90:	89 e5                	mov    %esp,%ebp
  103f92:	6a ff                	push   $0xffffffff
  103f94:	31 c0                	xor    %eax,%eax
  103f96:	8b 55 08             	mov    0x8(%ebp),%edx

00103f99 <z_x86_user_string_nlen_fault_start>:
  103f99:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)

00103f9d <z_x86_user_string_nlen_fault_end>:
  103f9d:	74 08                	je     103fa7 <strlen_done>
  103f9f:	3b 45 0c             	cmp    0xc(%ebp),%eax
  103fa2:	74 03                	je     103fa7 <strlen_done>
  103fa4:	40                   	inc    %eax
  103fa5:	eb f2                	jmp    103f99 <z_x86_user_string_nlen_fault_start>

00103fa7 <strlen_done>:
  103fa7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

00103fae <z_x86_user_string_nlen_fixup>:
  103fae:	8b 4d 10             	mov    0x10(%ebp),%ecx
  103fb1:	5a                   	pop    %edx
  103fb2:	89 11                	mov    %edx,(%ecx)
  103fb4:	5d                   	pop    %ebp
  103fb5:	c3                   	ret

00103fb6 <z_x86_userspace_enter>:
  103fb6:	5e                   	pop    %esi
  103fb7:	58                   	pop    %eax
  103fb8:	5a                   	pop    %edx
  103fb9:	59                   	pop    %ecx
  103fba:	5e                   	pop    %esi
  103fbb:	5b                   	pop    %ebx
  103fbc:	5f                   	pop    %edi
  103fbd:	89 fc                	mov    %edi,%esp
  103fbf:	51                   	push   %ecx
  103fc0:	50                   	push   %eax
  103fc1:	52                   	push   %edx
  103fc2:	e8 1f fb ff ff       	call   103ae6 <z_x86_current_stack_perms>
  103fc7:	5a                   	pop    %edx
  103fc8:	58                   	pop    %eax
  103fc9:	59                   	pop    %ecx
  103fca:	89 dc                	mov    %ebx,%esp
  103fcc:	66 bb 33 00          	mov    $0x33,%bx
  103fd0:	8e db                	mov    %ebx,%ds
  103fd2:	8e c3                	mov    %ebx,%es
  103fd4:	56                   	push   %esi
  103fd5:	51                   	push   %ecx
  103fd6:	52                   	push   %edx
  103fd7:	50                   	push   %eax
  103fd8:	6a 00                	push   $0x0
  103fda:	89 e7                	mov    %esp,%edi
  103fdc:	6a 33                	push   $0x33
  103fde:	57                   	push   %edi
  103fdf:	9c                   	pushf
  103fe0:	6a 2b                	push   $0x2b
  103fe2:	68 7b 15 10 00       	push   $0x10157b
  103fe7:	e9 03 ff ff ff       	jmp    103eef <z_x86_trampoline_to_user_always>

00103fec <z_x86_tls_update_gdt>:
  103fec:	55                   	push   %ebp
  103fed:	a1 ea c0 11 00       	mov    0x11c0ea,%eax
  103ff2:	89 e5                	mov    %esp,%ebp
  103ff4:	8b 55 08             	mov    0x8(%ebp),%edx
  103ff7:	8b 8a 90 00 00 00    	mov    0x90(%edx),%ecx
  103ffd:	66 89 48 3a          	mov    %cx,0x3a(%eax)
  104001:	0f b7 8a 92 00 00 00 	movzwl 0x92(%edx),%ecx
  104008:	88 48 3c             	mov    %cl,0x3c(%eax)
  10400b:	0f b6 92 93 00 00 00 	movzbl 0x93(%edx),%edx
  104012:	88 50 3f             	mov    %dl,0x3f(%eax)
  104015:	5d                   	pop    %ebp
  104016:	c3                   	ret

00104017 <z_x86_early_tls_update_gdt>:
  104017:	55                   	push   %ebp
  104018:	8b 15 ea c0 11 00    	mov    0x11c0ea,%edx
  10401e:	89 e5                	mov    %esp,%ebp
  104020:	8b 4d 08             	mov    0x8(%ebp),%ecx
  104023:	8d 41 fc             	lea    -0x4(%ecx),%eax
  104026:	89 41 fc             	mov    %eax,-0x4(%ecx)
  104029:	89 c1                	mov    %eax,%ecx
  10402b:	c1 e9 10             	shr    $0x10,%ecx
  10402e:	66 89 42 3a          	mov    %ax,0x3a(%edx)
  104032:	c1 e8 18             	shr    $0x18,%eax
  104035:	88 4a 3c             	mov    %cl,0x3c(%edx)
  104038:	88 42 3f             	mov    %al,0x3f(%edx)
  10403b:	b8 3b 00 00 00       	mov    $0x3b,%eax
  104040:	89 c0                	mov    %eax,%eax
  104042:	8e e8                	mov    %eax,%gs
  104044:	5d                   	pop    %ebp
  104045:	c3                   	ret

00104046 <df_handler_bottom>:
  104046:	55                   	push   %ebp
  104047:	c7 05 38 c0 11 00 38 	movl   $0x140038,0x11c038
  10404e:	00 14 00 
  104051:	89 e5                	mov    %esp,%ebp
  104053:	6a 45                	push   $0x45
  104055:	68 89 1b 11 00       	push   $0x111b89
  10405a:	c7 05 20 c0 11 00 97 	movl   $0x104097,0x11c020
  104061:	40 10 00 
  104064:	e8 8f e4 ff ff       	call   1024f8 <z_log_minimal_printk>
  104069:	58                   	pop    %eax
  10406a:	5a                   	pop    %edx
  10406b:	8b 15 00 00 14 00    	mov    0x140000,%edx
  104071:	a1 28 00 14 00       	mov    0x140028,%eax
  104076:	0f b7 c0             	movzwl %ax,%eax
  104079:	50                   	push   %eax
  10407a:	6a 00                	push   $0x0
  10407c:	52                   	push   %edx
  10407d:	e8 b1 e5 ff ff       	call   102633 <z_x86_check_stack_bounds>
  104082:	83 c4 0c             	add    $0xc,%esp
  104085:	f6 d8                	neg    %al
  104087:	19 c0                	sbb    %eax,%eax
  104089:	68 00 00 14 00       	push   $0x140000
  10408e:	83 e0 02             	and    $0x2,%eax
  104091:	50                   	push   %eax
  104092:	e8 39 e6 ff ff       	call   1026d0 <z_x86_fatal_error>

00104097 <df_handler_top>:
  104097:	a1 b8 c0 11 00       	mov    0x11c0b8,%eax
  10409c:	31 c9                	xor    %ecx,%ecx
  10409e:	a3 00 00 14 00       	mov    %eax,0x140000
  1040a3:	a1 bc c0 11 00       	mov    0x11c0bc,%eax
  1040a8:	a3 04 00 14 00       	mov    %eax,0x140004
  1040ad:	a1 b4 c0 11 00       	mov    0x11c0b4,%eax
  1040b2:	a3 08 00 14 00       	mov    %eax,0x140008
  1040b7:	a1 c0 c0 11 00       	mov    0x11c0c0,%eax
  1040bc:	a3 0c 00 14 00       	mov    %eax,0x14000c
  1040c1:	a1 c4 c0 11 00       	mov    0x11c0c4,%eax
  1040c6:	a3 10 00 14 00       	mov    %eax,0x140010
  1040cb:	a1 b0 c0 11 00       	mov    0x11c0b0,%eax
  1040d0:	a3 14 00 14 00       	mov    %eax,0x140014
  1040d5:	a1 a8 c0 11 00       	mov    0x11c0a8,%eax
  1040da:	a3 18 00 14 00       	mov    %eax,0x140018
  1040df:	a1 ac c0 11 00       	mov    0x11c0ac,%eax
  1040e4:	a3 1c 00 14 00       	mov    %eax,0x14001c
  1040e9:	a1 a0 c0 11 00       	mov    0x11c0a0,%eax
  1040ee:	89 0d 20 00 14 00    	mov    %ecx,0x140020
  1040f4:	a3 24 00 14 00       	mov    %eax,0x140024
  1040f9:	0f b7 05 cc c0 11 00 	movzwl 0x11c0cc,%eax
  104100:	a3 28 00 14 00       	mov    %eax,0x140028
  104105:	a1 a4 c0 11 00       	mov    0x11c0a4,%eax
  10410a:	a3 2c 00 14 00       	mov    %eax,0x14002c
  10410f:	b8 00 30 12 00       	mov    $0x123000,%eax
  104114:	c7 05 b8 c0 11 00 00 	movl   $0x13d800,0x11c0b8
  10411b:	d8 13 00 
  10411e:	66 c7 05 cc c0 11 00 	movw   $0x8,0x11c0cc
  104125:	08 00 
  104127:	66 c7 05 d4 c0 11 00 	movw   $0x10,0x11c0d4
  10412e:	10 00 
  104130:	66 c7 05 c8 c0 11 00 	movw   $0x10,0x11c0c8
  104137:	10 00 
  104139:	66 c7 05 d0 c0 11 00 	movw   $0x10,0x11c0d0
  104140:	10 00 
  104142:	c7 05 a0 c0 11 00 46 	movl   $0x104046,0x11c0a0
  104149:	40 10 00 
  10414c:	3d ff ff 7f 00       	cmp    $0x7fffff,%eax
  104151:	76 3b                	jbe    10418e <df_handler_top+0xf7>
  104153:	55                   	push   %ebp
  104154:	89 e5                	mov    %esp,%ebp
  104156:	6a 69                	push   $0x69
  104158:	68 b1 18 11 00       	push   $0x1118b1
  10415d:	68 31 19 11 00       	push   $0x111931
  104162:	68 ee 10 11 00       	push   $0x1110ee
  104167:	e8 71 d4 ff ff       	call   1015dd <assert_print>
  10416c:	83 c4 10             	add    $0x10,%esp
  10416f:	68 00 30 12 00       	push   $0x123000
  104174:	68 4d 19 11 00       	push   $0x11194d
  104179:	e8 5f d4 ff ff       	call   1015dd <assert_print>
  10417e:	5a                   	pop    %edx
  10417f:	59                   	pop    %ecx
  104180:	6a 69                	push   $0x69
  104182:	68 b1 18 11 00       	push   $0x1118b1
  104187:	e8 42 d4 ff ff       	call   1015ce <assert_post_action>
  10418c:	58                   	pop    %eax
  10418d:	5a                   	pop    %edx
  10418e:	31 c0                	xor    %eax,%eax
  104190:	c7 05 9c c0 11 00 00 	movl   $0x123000,0x11c09c
  104197:	30 12 00 
  10419a:	a3 a4 c0 11 00       	mov    %eax,0x11c0a4
  10419f:	cf                   	iret

001041a0 <z_x86_spurious_irq>:
  1041a0:	55                   	push   %ebp
  1041a1:	89 e5                	mov    %esp,%ebp
  1041a3:	e8 10 12 00 00       	call   1053b8 <z_irq_controller_isr_vector_get>
  1041a8:	85 c0                	test   %eax,%eax
  1041aa:	78 10                	js     1041bc <z_x86_spurious_irq+0x1c>
  1041ac:	50                   	push   %eax
  1041ad:	6a 45                	push   $0x45
  1041af:	68 9b 1b 11 00       	push   $0x111b9b
  1041b4:	e8 3f e3 ff ff       	call   1024f8 <z_log_minimal_printk>
  1041b9:	83 c4 0c             	add    $0xc,%esp
  1041bc:	ff 75 08             	push   0x8(%ebp)
  1041bf:	6a 01                	push   $0x1
  1041c1:	e8 0a e5 ff ff       	call   1026d0 <z_x86_fatal_error>

001041c6 <arch_syscall_oops>:
  1041c6:	55                   	push   %ebp
  1041c7:	31 c0                	xor    %eax,%eax
  1041c9:	89 e5                	mov    %esp,%ebp
  1041cb:	57                   	push   %edi
  1041cc:	83 ec 30             	sub    $0x30,%esp
  1041cf:	b9 09 00 00 00       	mov    $0x9,%ecx
  1041d4:	8b 55 08             	mov    0x8(%ebp),%edx
  1041d7:	8d 7d cc             	lea    -0x34(%ebp),%edi
  1041da:	f3 ab                	rep stos %eax,%es:(%edi)
  1041dc:	8b 02                	mov    (%edx),%eax
  1041de:	8b 4a 08             	mov    0x8(%edx),%ecx
  1041e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1041e4:	8b 42 04             	mov    0x4(%edx),%eax
  1041e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1041ea:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1041ed:	83 f8 2b             	cmp    $0x2b,%eax
  1041f0:	75 06                	jne    1041f8 <arch_syscall_oops+0x32>
  1041f2:	8b 42 0c             	mov    0xc(%edx),%eax
  1041f5:	89 45 cc             	mov    %eax,-0x34(%ebp)
  1041f8:	8d 45 cc             	lea    -0x34(%ebp),%eax
  1041fb:	50                   	push   %eax
  1041fc:	6a 03                	push   $0x3
  1041fe:	e8 cd e4 ff ff       	call   1026d0 <z_x86_fatal_error>

00104203 <handle_exc_0>:
  104203:	55                   	push   %ebp
  104204:	89 e5                	mov    %esp,%ebp
  104206:	ff 75 08             	push   0x8(%ebp)
  104209:	6a 00                	push   $0x0
  10420b:	e8 e3 e5 ff ff       	call   1027f3 <z_x86_unhandled_cpu_exception>

00104210 <handle_exc_2>:
  104210:	55                   	push   %ebp
  104211:	89 e5                	mov    %esp,%ebp
  104213:	ff 75 08             	push   0x8(%ebp)
  104216:	6a 02                	push   $0x2
  104218:	e8 d6 e5 ff ff       	call   1027f3 <z_x86_unhandled_cpu_exception>

0010421d <handle_exc_4>:
  10421d:	55                   	push   %ebp
  10421e:	89 e5                	mov    %esp,%ebp
  104220:	ff 75 08             	push   0x8(%ebp)
  104223:	6a 04                	push   $0x4
  104225:	e8 c9 e5 ff ff       	call   1027f3 <z_x86_unhandled_cpu_exception>

0010422a <handle_exc_5>:
  10422a:	55                   	push   %ebp
  10422b:	89 e5                	mov    %esp,%ebp
  10422d:	ff 75 08             	push   0x8(%ebp)
  104230:	6a 05                	push   $0x5
  104232:	e8 bc e5 ff ff       	call   1027f3 <z_x86_unhandled_cpu_exception>

00104237 <handle_exc_6>:
  104237:	55                   	push   %ebp
  104238:	89 e5                	mov    %esp,%ebp
  10423a:	ff 75 08             	push   0x8(%ebp)
  10423d:	6a 06                	push   $0x6
  10423f:	e8 af e5 ff ff       	call   1027f3 <z_x86_unhandled_cpu_exception>

00104244 <handle_exc_7>:
  104244:	55                   	push   %ebp
  104245:	89 e5                	mov    %esp,%ebp
  104247:	ff 75 08             	push   0x8(%ebp)
  10424a:	6a 07                	push   $0x7
  10424c:	e8 a2 e5 ff ff       	call   1027f3 <z_x86_unhandled_cpu_exception>

00104251 <handle_exc_10>:
  104251:	55                   	push   %ebp
  104252:	89 e5                	mov    %esp,%ebp
  104254:	ff 75 08             	push   0x8(%ebp)
  104257:	6a 0a                	push   $0xa
  104259:	e8 95 e5 ff ff       	call   1027f3 <z_x86_unhandled_cpu_exception>

0010425e <handle_exc_11>:
  10425e:	55                   	push   %ebp
  10425f:	89 e5                	mov    %esp,%ebp
  104261:	ff 75 08             	push   0x8(%ebp)
  104264:	6a 0b                	push   $0xb
  104266:	e8 88 e5 ff ff       	call   1027f3 <z_x86_unhandled_cpu_exception>

0010426b <handle_exc_12>:
  10426b:	55                   	push   %ebp
  10426c:	89 e5                	mov    %esp,%ebp
  10426e:	ff 75 08             	push   0x8(%ebp)
  104271:	6a 0c                	push   $0xc
  104273:	e8 7b e5 ff ff       	call   1027f3 <z_x86_unhandled_cpu_exception>

00104278 <handle_exc_13>:
  104278:	55                   	push   %ebp
  104279:	89 e5                	mov    %esp,%ebp
  10427b:	ff 75 08             	push   0x8(%ebp)
  10427e:	6a 0d                	push   $0xd
  104280:	e8 6e e5 ff ff       	call   1027f3 <z_x86_unhandled_cpu_exception>

00104285 <handle_exc_16>:
  104285:	55                   	push   %ebp
  104286:	89 e5                	mov    %esp,%ebp
  104288:	ff 75 08             	push   0x8(%ebp)
  10428b:	6a 10                	push   $0x10
  10428d:	e8 61 e5 ff ff       	call   1027f3 <z_x86_unhandled_cpu_exception>

00104292 <handle_exc_17>:
  104292:	55                   	push   %ebp
  104293:	89 e5                	mov    %esp,%ebp
  104295:	ff 75 08             	push   0x8(%ebp)
  104298:	6a 11                	push   $0x11
  10429a:	e8 54 e5 ff ff       	call   1027f3 <z_x86_unhandled_cpu_exception>

0010429f <handle_exc_18>:
  10429f:	55                   	push   %ebp
  1042a0:	89 e5                	mov    %esp,%ebp
  1042a2:	ff 75 08             	push   0x8(%ebp)
  1042a5:	6a 12                	push   $0x12
  1042a7:	e8 47 e5 ff ff       	call   1027f3 <z_x86_unhandled_cpu_exception>

001042ac <picolibc_locks_prepare>:
  1042ac:	55                   	push   %ebp
  1042ad:	89 e5                	mov    %esp,%ebp
  1042af:	68 08 d0 11 00       	push   $0x11d008
  1042b4:	e8 5c 96 00 00       	call   10d915 <k_object_access_all_grant>
  1042b9:	58                   	pop    %eax
  1042ba:	31 c0                	xor    %eax,%eax
  1042bc:	c9                   	leave
  1042bd:	c3                   	ret

001042be <z_impl_zephyr_fputc>:
  1042be:	55                   	push   %ebp
  1042bf:	89 e5                	mov    %esp,%ebp
  1042c1:	ff 75 08             	push   0x8(%ebp)
  1042c4:	ff 15 20 a0 11 00    	call   *0x11a020
  1042ca:	58                   	pop    %eax
  1042cb:	31 c0                	xor    %eax,%eax
  1042cd:	c9                   	leave
  1042ce:	c3                   	ret

001042cf <picolibc_put>:
  1042cf:	55                   	push   %ebp
  1042d0:	89 e5                	mov    %esp,%ebp
  1042d2:	56                   	push   %esi
  1042d3:	8b 55 0c             	mov    0xc(%ebp),%edx
  1042d6:	8c c8                	mov    %cs,%eax
  1042d8:	83 f8 2b             	cmp    $0x2b,%eax
  1042db:	0f be 45 08          	movsbl 0x8(%ebp),%eax
  1042df:	75 09                	jne    1042ea <picolibc_put+0x1b>
  1042e1:	be 83 00 00 00       	mov    $0x83,%esi
  1042e6:	cd 80                	int    $0x80
  1042e8:	eb 09                	jmp    1042f3 <picolibc_put+0x24>
  1042ea:	52                   	push   %edx
  1042eb:	50                   	push   %eax
  1042ec:	e8 cd ff ff ff       	call   1042be <z_impl_zephyr_fputc>
  1042f1:	58                   	pop    %eax
  1042f2:	5a                   	pop    %edx
  1042f3:	31 c0                	xor    %eax,%eax
  1042f5:	8b 75 fc             	mov    -0x4(%ebp),%esi
  1042f8:	c9                   	leave
  1042f9:	c3                   	ret

001042fa <z_mrsh_zephyr_fputc>:
  1042fa:	55                   	push   %ebp
  1042fb:	89 e5                	mov    %esp,%ebp
  1042fd:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  104302:	8b 55 20             	mov    0x20(%ebp),%edx
  104305:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10430b:	ff 75 0c             	push   0xc(%ebp)
  10430e:	ff 75 08             	push   0x8(%ebp)
  104311:	e8 a8 ff ff ff       	call   1042be <z_impl_zephyr_fputc>
  104316:	5a                   	pop    %edx
  104317:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  10431d:	59                   	pop    %ecx
  10431e:	31 c9                	xor    %ecx,%ecx
  104320:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  104326:	c9                   	leave
  104327:	c3                   	ret

00104328 <__stdout_hook_install>:
  104328:	55                   	push   %ebp
  104329:	89 e5                	mov    %esp,%ebp
  10432b:	80 0d 12 a0 11 00 02 	orb    $0x2,0x11a012
  104332:	8b 45 08             	mov    0x8(%ebp),%eax
  104335:	5d                   	pop    %ebp
  104336:	a3 20 a0 11 00       	mov    %eax,0x11a020
  10433b:	c3                   	ret

0010433c <malloc_prepare>:
  10433c:	55                   	push   %ebp
  10433d:	89 e5                	mov    %esp,%ebp
  10433f:	68 00 40 00 00       	push   $0x4000
  104344:	68 00 50 11 00       	push   $0x115000
  104349:	68 28 a0 11 00       	push   $0x11a028
  10434e:	e8 dd ce ff ff       	call   101230 <sys_heap_init>
  104353:	83 c4 0c             	add    $0xc,%esp
  104356:	31 c0                	xor    %eax,%eax
  104358:	c9                   	leave
  104359:	c3                   	ret

0010435a <z_mrsh_sys_rand_get>:
  10435a:	55                   	push   %ebp
  10435b:	89 e5                	mov    %esp,%ebp
  10435d:	56                   	push   %esi
  10435e:	53                   	push   %ebx
  10435f:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  104364:	8b 5d 08             	mov    0x8(%ebp),%ebx
  104367:	8b 55 20             	mov    0x20(%ebp),%edx
  10436a:	8b 75 0c             	mov    0xc(%ebp),%esi
  10436d:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  104373:	89 d8                	mov    %ebx,%eax
  104375:	01 f0                	add    %esi,%eax
  104377:	73 2b                	jae    1043a4 <z_mrsh_sys_rand_get+0x4a>
  104379:	68 c7 12 11 00       	push   $0x1112c7
  10437e:	56                   	push   %esi
  10437f:	53                   	push   %ebx
  104380:	68 e0 07 11 00       	push   $0x1107e0
  104385:	6a 45                	push   $0x45
  104387:	68 7c 12 11 00       	push   $0x11127c
  10438c:	e8 67 e1 ff ff       	call   1024f8 <z_log_minimal_printk>
  104391:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  104396:	83 c4 18             	add    $0x18,%esp
  104399:	ff b0 88 00 00 00    	push   0x88(%eax)
  10439f:	e8 22 fe ff ff       	call   1041c6 <arch_syscall_oops>
  1043a4:	85 f6                	test   %esi,%esi
  1043a6:	74 0b                	je     1043b3 <z_mrsh_sys_rand_get+0x59>
  1043a8:	89 d8                	mov    %ebx,%eax
  1043aa:	8d 56 ff             	lea    -0x1(%esi),%edx
  1043ad:	f7 d0                	not    %eax
  1043af:	39 c2                	cmp    %eax,%edx
  1043b1:	73 c6                	jae    104379 <z_mrsh_sys_rand_get+0x1f>
  1043b3:	6a 01                	push   $0x1
  1043b5:	56                   	push   %esi
  1043b6:	53                   	push   %ebx
  1043b7:	e8 da f3 ff ff       	call   103796 <arch_buffer_validate>
  1043bc:	83 c4 0c             	add    $0xc,%esp
  1043bf:	85 c0                	test   %eax,%eax
  1043c1:	75 b6                	jne    104379 <z_mrsh_sys_rand_get+0x1f>
  1043c3:	56                   	push   %esi
  1043c4:	53                   	push   %ebx
  1043c5:	e8 18 00 00 00       	call   1043e2 <z_impl_sys_rand_get>
  1043ca:	58                   	pop    %eax
  1043cb:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1043d0:	31 c9                	xor    %ecx,%ecx
  1043d2:	5a                   	pop    %edx
  1043d3:	89 88 88 00 00 00    	mov    %ecx,0x88(%eax)
  1043d9:	8d 65 f8             	lea    -0x8(%ebp),%esp
  1043dc:	31 c0                	xor    %eax,%eax
  1043de:	5b                   	pop    %ebx
  1043df:	5e                   	pop    %esi
  1043e0:	5d                   	pop    %ebp
  1043e1:	c3                   	ret

001043e2 <z_impl_sys_rand_get>:
  1043e2:	55                   	push   %ebp
  1043e3:	89 e5                	mov    %esp,%ebp
  1043e5:	57                   	push   %edi
  1043e6:	56                   	push   %esi
  1043e7:	53                   	push   %ebx
  1043e8:	83 ec 0c             	sub    $0xc,%esp
  1043eb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  1043ee:	85 db                	test   %ebx,%ebx
  1043f0:	0f 84 15 01 00 00    	je     10450b <z_impl_sys_rand_get+0x129>
  1043f6:	9c                   	pushf
  1043f7:	fa                   	cli
  1043f8:	5e                   	pop    %esi
  1043f9:	68 a8 cc 12 00       	push   $0x12cca8
  1043fe:	e8 ec 68 00 00       	call   10acef <z_spin_lock_valid>
  104403:	5f                   	pop    %edi
  104404:	84 c0                	test   %al,%al
  104406:	75 37                	jne    10443f <z_impl_sys_rand_get+0x5d>
  104408:	68 88 00 00 00       	push   $0x88
  10440d:	68 61 13 11 00       	push   $0x111361
  104412:	68 8e 13 11 00       	push   $0x11138e
  104417:	68 ee 10 11 00       	push   $0x1110ee
  10441c:	e8 bc d1 ff ff       	call   1015dd <assert_print>
  104421:	83 c4 10             	add    $0x10,%esp
  104424:	68 a8 cc 12 00       	push   $0x12cca8
  104429:	68 a3 13 11 00       	push   $0x1113a3
  10442e:	e8 aa d1 ff ff       	call   1015dd <assert_print>
  104433:	59                   	pop    %ecx
  104434:	5b                   	pop    %ebx
  104435:	68 88 00 00 00       	push   $0x88
  10443a:	e9 96 00 00 00       	jmp    1044d5 <z_impl_sys_rand_get+0xf3>
  10443f:	68 a8 cc 12 00       	push   $0x12cca8
  104444:	e8 fe 68 00 00       	call   10ad47 <z_spin_lock_set_owner>
  104449:	5f                   	pop    %edi
  10444a:	e8 ed 20 00 00       	call   10653c <sys_clock_cycle_get_32>
  10444f:	31 d2                	xor    %edx,%edx
  104451:	03 05 00 b5 11 00    	add    0x11b500,%eax
  104457:	13 15 04 b5 11 00    	adc    0x11b504,%edx
  10445d:	89 45 e8             	mov    %eax,-0x18(%ebp)
  104460:	89 55 ec             	mov    %edx,-0x14(%ebp)
  104463:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104466:	69 55 e8 e6 2e bb 27 	imul   $0x27bb2ee6,-0x18(%ebp),%edx
  10446d:	69 4d ec fd b0 b0 87 	imul   $0x87b0b0fd,-0x14(%ebp),%ecx
  104474:	bf fd b0 b0 87       	mov    $0x87b0b0fd,%edi
  104479:	01 d1                	add    %edx,%ecx
  10447b:	f7 e7                	mul    %edi
  10447d:	01 ca                	add    %ecx,%edx
  10447f:	05 2d f3 04 b5       	add    $0xb504f32d,%eax
  104484:	83 d2 00             	adc    $0x0,%edx
  104487:	a3 00 b5 11 00       	mov    %eax,0x11b500
  10448c:	89 15 04 b5 11 00    	mov    %edx,0x11b504
  104492:	89 d7                	mov    %edx,%edi
  104494:	68 a8 cc 12 00       	push   $0x12cca8
  104499:	e8 72 68 00 00       	call   10ad10 <z_spin_unlock_valid>
  10449e:	5a                   	pop    %edx
  10449f:	84 c0                	test   %al,%al
  1044a1:	75 3e                	jne    1044e1 <z_impl_sys_rand_get+0xff>
  1044a3:	68 31 01 00 00       	push   $0x131
  1044a8:	68 61 13 11 00       	push   $0x111361
  1044ad:	68 e8 13 11 00       	push   $0x1113e8
  1044b2:	68 ee 10 11 00       	push   $0x1110ee
  1044b7:	e8 21 d1 ff ff       	call   1015dd <assert_print>
  1044bc:	83 c4 10             	add    $0x10,%esp
  1044bf:	68 a8 cc 12 00       	push   $0x12cca8
  1044c4:	68 ff 13 11 00       	push   $0x1113ff
  1044c9:	e8 0f d1 ff ff       	call   1015dd <assert_print>
  1044ce:	59                   	pop    %ecx
  1044cf:	5b                   	pop    %ebx
  1044d0:	68 31 01 00 00       	push   $0x131
  1044d5:	68 61 13 11 00       	push   $0x111361
  1044da:	e8 ef d0 ff ff       	call   1015ce <assert_post_action>
  1044df:	58                   	pop    %eax
  1044e0:	5a                   	pop    %edx
  1044e1:	0f ba e6 09          	bt     $0x9,%esi
  1044e5:	73 01                	jae    1044e8 <z_impl_sys_rand_get+0x106>
  1044e7:	fb                   	sti
  1044e8:	89 7d f0             	mov    %edi,-0x10(%ebp)
  1044eb:	89 d8                	mov    %ebx,%eax
  1044ed:	83 fb 04             	cmp    $0x4,%ebx
  1044f0:	76 05                	jbe    1044f7 <z_impl_sys_rand_get+0x115>
  1044f2:	b8 04 00 00 00       	mov    $0x4,%eax
  1044f7:	8b 7d 08             	mov    0x8(%ebp),%edi
  1044fa:	8d 75 f0             	lea    -0x10(%ebp),%esi
  1044fd:	89 c1                	mov    %eax,%ecx
  1044ff:	29 c3                	sub    %eax,%ebx
  104501:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
  104503:	89 7d 08             	mov    %edi,0x8(%ebp)
  104506:	e9 e3 fe ff ff       	jmp    1043ee <z_impl_sys_rand_get+0xc>
  10450b:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10450e:	5b                   	pop    %ebx
  10450f:	5e                   	pop    %esi
  104510:	5f                   	pop    %edi
  104511:	5d                   	pop    %ebp
  104512:	c3                   	ret

00104513 <__ztest_set_test_result>:
  104513:	8c ca                	mov    %cs,%edx
  104515:	83 fa 2b             	cmp    $0x2b,%edx
  104518:	75 0e                	jne    104528 <__ztest_set_test_result+0x15>
  10451a:	55                   	push   %ebp
  10451b:	89 e5                	mov    %esp,%ebp
  10451d:	56                   	push   %esi
  10451e:	be 93 00 00 00       	mov    $0x93,%esi
  104523:	cd 80                	int    $0x80
  104525:	5e                   	pop    %esi
  104526:	5d                   	pop    %ebp
  104527:	c3                   	ret
  104528:	a3 18 90 11 00       	mov    %eax,0x119018
  10452d:	c3                   	ret

0010452e <__ztest_set_test_phase>:
  10452e:	8c ca                	mov    %cs,%edx
  104530:	83 fa 2b             	cmp    $0x2b,%edx
  104533:	75 0e                	jne    104543 <__ztest_set_test_phase+0x15>
  104535:	55                   	push   %ebp
  104536:	89 e5                	mov    %esp,%ebp
  104538:	56                   	push   %esi
  104539:	be 92 00 00 00       	mov    $0x92,%esi
  10453e:	cd 80                	int    $0x80
  104540:	5e                   	pop    %esi
  104541:	5d                   	pop    %ebp
  104542:	c3                   	ret
  104543:	a3 08 90 11 00       	mov    %eax,0x119008
  104548:	c3                   	ret

00104549 <run_test_rules>:
  104549:	55                   	push   %ebp
  10454a:	89 e5                	mov    %esp,%ebp
  10454c:	57                   	push   %edi
  10454d:	56                   	push   %esi
  10454e:	bf 0c 01 11 00       	mov    $0x11010c,%edi
  104553:	53                   	push   %ebx
  104554:	89 ce                	mov    %ecx,%esi
  104556:	53                   	push   %ebx
  104557:	89 d3                	mov    %edx,%ebx
  104559:	88 45 f3             	mov    %al,-0xd(%ebp)
  10455c:	81 ff 0c 01 11 00    	cmp    $0x11010c,%edi
  104562:	73 3c                	jae    1045a0 <run_test_rules+0x57>
  104564:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
  104568:	74 2a                	je     104594 <run_test_rules+0x4b>
  10456a:	8b 17                	mov    (%edi),%edx
  10456c:	85 d2                	test   %edx,%edx
  10456e:	74 2b                	je     10459b <run_test_rules+0x52>
  104570:	56                   	push   %esi
  104571:	83 c7 08             	add    $0x8,%edi
  104574:	53                   	push   %ebx
  104575:	ff d2                	call   *%edx
  104577:	59                   	pop    %ecx
  104578:	81 ff 0c 01 11 00    	cmp    $0x11010c,%edi
  10457e:	58                   	pop    %eax
  10457f:	72 e9                	jb     10456a <run_test_rules+0x21>
  104581:	eb 1d                	jmp    1045a0 <run_test_rules+0x57>
  104583:	56                   	push   %esi
  104584:	83 c7 08             	add    $0x8,%edi
  104587:	53                   	push   %ebx
  104588:	ff d2                	call   *%edx
  10458a:	58                   	pop    %eax
  10458b:	81 ff 0c 01 11 00    	cmp    $0x11010c,%edi
  104591:	5a                   	pop    %edx
  104592:	73 0c                	jae    1045a0 <run_test_rules+0x57>
  104594:	8b 57 04             	mov    0x4(%edi),%edx
  104597:	85 d2                	test   %edx,%edx
  104599:	75 e8                	jne    104583 <run_test_rules+0x3a>
  10459b:	83 c7 08             	add    $0x8,%edi
  10459e:	eb bc                	jmp    10455c <run_test_rules+0x13>
  1045a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1045a3:	5b                   	pop    %ebx
  1045a4:	5e                   	pop    %esi
  1045a5:	5f                   	pop    %edi
  1045a6:	5d                   	pop    %ebp
  1045a7:	c3                   	ret

001045a8 <ztest_find_test_suite>:
  1045a8:	55                   	push   %ebp
  1045a9:	89 e5                	mov    %esp,%ebp
  1045ab:	56                   	push   %esi
  1045ac:	53                   	push   %ebx
  1045ad:	89 c6                	mov    %eax,%esi
  1045af:	bb c8 00 11 00       	mov    $0x1100c8,%ebx
  1045b4:	81 fb e4 00 11 00    	cmp    $0x1100e4,%ebx
  1045ba:	73 13                	jae    1045cf <ztest_find_test_suite+0x27>
  1045bc:	ff 33                	push   (%ebx)
  1045be:	56                   	push   %esi
  1045bf:	e8 cc bc ff ff       	call   100290 <strcmp>
  1045c4:	5a                   	pop    %edx
  1045c5:	85 c0                	test   %eax,%eax
  1045c7:	59                   	pop    %ecx
  1045c8:	74 07                	je     1045d1 <ztest_find_test_suite+0x29>
  1045ca:	83 c3 1c             	add    $0x1c,%ebx
  1045cd:	eb e5                	jmp    1045b4 <ztest_find_test_suite+0xc>
  1045cf:	31 db                	xor    %ebx,%ebx
  1045d1:	8d 65 f8             	lea    -0x8(%ebp),%esp
  1045d4:	89 d8                	mov    %ebx,%eax
  1045d6:	5b                   	pop    %ebx
  1045d7:	5e                   	pop    %esi
  1045d8:	5d                   	pop    %ebp
  1045d9:	c3                   	ret

001045da <k_thread_abort>:
  1045da:	55                   	push   %ebp
  1045db:	89 e5                	mov    %esp,%ebp
  1045dd:	56                   	push   %esi
  1045de:	8c ca                	mov    %cs,%edx
  1045e0:	83 fa 2b             	cmp    $0x2b,%edx
  1045e3:	75 09                	jne    1045ee <k_thread_abort+0x14>
  1045e5:	be 44 00 00 00       	mov    $0x44,%esi
  1045ea:	cd 80                	int    $0x80
  1045ec:	eb 07                	jmp    1045f5 <k_thread_abort+0x1b>
  1045ee:	50                   	push   %eax
  1045ef:	e8 60 62 00 00       	call   10a854 <z_impl_k_thread_abort>
  1045f4:	58                   	pop    %eax
  1045f5:	8b 75 fc             	mov    -0x4(%ebp),%esi
  1045f8:	c9                   	leave
  1045f9:	c3                   	ret

001045fa <test_finalize>:
  1045fa:	55                   	push   %ebp
  1045fb:	b8 c0 46 12 00       	mov    $0x1246c0,%eax
  104600:	89 e5                	mov    %esp,%ebp
  104602:	e8 d3 ff ff ff       	call   1045da <k_thread_abort>
  104607:	e8 2f 39 00 00       	call   107f3b <k_is_in_isr>
  10460c:	84 c0                	test   %al,%al
  10460e:	75 11                	jne    104621 <test_finalize+0x27>
  104610:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
  104616:	8b 80 fc ff ff ff    	mov    -0x4(%eax),%eax
  10461c:	e8 b9 ff ff ff       	call   1045da <k_thread_abort>
  104621:	5d                   	pop    %ebp
  104622:	c3                   	ret

00104623 <test_cb>:
  104623:	55                   	push   %ebp
  104624:	89 e5                	mov    %esp,%ebp
  104626:	57                   	push   %edi
  104627:	56                   	push   %esi
  104628:	53                   	push   %ebx
  104629:	51                   	push   %ecx
  10462a:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  10462d:	8b 7d 08             	mov    0x8(%ebp),%edi
  104630:	8b 75 10             	mov    0x10(%ebp),%esi
  104633:	8b 43 0c             	mov    0xc(%ebx),%eax
  104636:	89 45 f0             	mov    %eax,-0x10(%ebp)
  104639:	8c c8                	mov    %cs,%eax
  10463b:	83 f8 2b             	cmp    $0x2b,%eax
  10463e:	74 33                	je     104673 <test_cb+0x50>
  104640:	31 c0                	xor    %eax,%eax
  104642:	89 f1                	mov    %esi,%ecx
  104644:	e8 ca fe ff ff       	call   104513 <__ztest_set_test_result>
  104649:	b8 01 00 00 00       	mov    $0x1,%eax
  10464e:	89 da                	mov    %ebx,%edx
  104650:	e8 f4 fe ff ff       	call   104549 <run_test_rules>
  104655:	8b 47 08             	mov    0x8(%edi),%eax
  104658:	85 c0                	test   %eax,%eax
  10465a:	74 04                	je     104660 <test_cb+0x3d>
  10465c:	56                   	push   %esi
  10465d:	ff d0                	call   *%eax
  10465f:	5a                   	pop    %edx
  104660:	f6 45 f0 04          	testb  $0x4,-0x10(%ebp)
  104664:	74 0d                	je     104673 <test_cb+0x50>
  104666:	56                   	push   %esi
  104667:	53                   	push   %ebx
  104668:	57                   	push   %edi
  104669:	68 23 46 10 00       	push   $0x104623
  10466e:	e8 83 3b 00 00       	call   1081f6 <k_thread_user_mode_enter>
  104673:	b8 02 00 00 00       	mov    $0x2,%eax
  104678:	e8 b1 fe ff ff       	call   10452e <__ztest_set_test_phase>
  10467d:	56                   	push   %esi
  10467e:	ff 53 08             	call   *0x8(%ebx)
  104681:	58                   	pop    %eax
  104682:	8d 65 f4             	lea    -0xc(%ebp),%esp
  104685:	b8 01 00 00 00       	mov    $0x1,%eax
  10468a:	5b                   	pop    %ebx
  10468b:	5e                   	pop    %esi
  10468c:	5f                   	pop    %edi
  10468d:	5d                   	pop    %ebp
  10468e:	e9 80 fe ff ff       	jmp    104513 <__ztest_set_test_result>

00104693 <k_object_access_grant.constprop.0>:
  104693:	55                   	push   %ebp
  104694:	89 e5                	mov    %esp,%ebp
  104696:	56                   	push   %esi
  104697:	8c ca                	mov    %cs,%edx
  104699:	83 fa 2b             	cmp    $0x2b,%edx
  10469c:	75 0e                	jne    1046ac <k_object_access_grant.constprop.0+0x19>
  10469e:	be 21 00 00 00       	mov    $0x21,%esi
  1046a3:	ba c0 46 12 00       	mov    $0x1246c0,%edx
  1046a8:	cd 80                	int    $0x80
  1046aa:	eb 0d                	jmp    1046b9 <k_object_access_grant.constprop.0+0x26>
  1046ac:	68 c0 46 12 00       	push   $0x1246c0
  1046b1:	50                   	push   %eax
  1046b2:	e8 36 92 00 00       	call   10d8ed <z_impl_k_object_access_grant>
  1046b7:	58                   	pop    %eax
  1046b8:	5a                   	pop    %edx
  1046b9:	8b 75 fc             	mov    -0x4(%ebp),%esi
  1046bc:	c9                   	leave
  1046bd:	c3                   	ret

001046be <z_mrsh_z_test_1cpu_start>:
  1046be:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1046c3:	31 d2                	xor    %edx,%edx
  1046c5:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  1046cb:	31 c0                	xor    %eax,%eax
  1046cd:	c3                   	ret

001046ce <z_mrsh_z_test_1cpu_stop>:
  1046ce:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1046d3:	31 d2                	xor    %edx,%edx
  1046d5:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  1046db:	31 c0                	xor    %eax,%eax
  1046dd:	c3                   	ret

001046de <ztest_test_fail>:
  1046de:	a1 08 90 11 00       	mov    0x119008,%eax
  1046e3:	85 c0                	test   %eax,%eax
  1046e5:	74 1b                	je     104702 <ztest_test_fail+0x24>
  1046e7:	55                   	push   %ebp
  1046e8:	8d 50 ff             	lea    -0x1(%eax),%edx
  1046eb:	89 e5                	mov    %esp,%ebp
  1046ed:	83 fa 01             	cmp    $0x1,%edx
  1046f0:	77 1a                	ja     10470c <ztest_test_fail+0x2e>
  1046f2:	b8 02 00 00 00       	mov    $0x2,%eax
  1046f7:	e8 17 fe ff ff       	call   104513 <__ztest_set_test_result>
  1046fc:	c9                   	leave
  1046fd:	e9 f8 fe ff ff       	jmp    1045fa <test_finalize>
  104702:	b8 05 00 00 00       	mov    $0x5,%eax
  104707:	e9 07 fe ff ff       	jmp    104513 <__ztest_set_test_result>
  10470c:	ba af 1b 11 00       	mov    $0x111baf,%edx
  104711:	83 f8 05             	cmp    $0x5,%eax
  104714:	77 07                	ja     10471d <ztest_test_fail+0x3f>
  104716:	8b 14 85 f4 07 11 00 	mov    0x1107f4(,%eax,4),%edx
  10471d:	52                   	push   %edx
  10471e:	68 b9 1b 11 00       	push   $0x111bb9
  104723:	e8 40 ce ff ff       	call   101568 <printk>
  104728:	58                   	pop    %eax
  104729:	5a                   	pop    %edx
  10472a:	c7 05 1c 90 11 00 02 	movl   $0x2,0x11901c
  104731:	00 00 00 
  104734:	c9                   	leave
  104735:	c3                   	ret

00104736 <ztest_simple_1cpu_before>:
  104736:	8c c8                	mov    %cs,%eax
  104738:	83 f8 2b             	cmp    $0x2b,%eax
  10473b:	75 0e                	jne    10474b <ztest_simple_1cpu_before+0x15>
  10473d:	55                   	push   %ebp
  10473e:	89 e5                	mov    %esp,%ebp
  104740:	56                   	push   %esi
  104741:	be 90 00 00 00       	mov    $0x90,%esi
  104746:	cd 80                	int    $0x80
  104748:	5e                   	pop    %esi
  104749:	5d                   	pop    %ebp
  10474a:	c3                   	ret
  10474b:	c3                   	ret

0010474c <ztest_simple_1cpu_after>:
  10474c:	8c c8                	mov    %cs,%eax
  10474e:	83 f8 2b             	cmp    $0x2b,%eax
  104751:	75 0e                	jne    104761 <ztest_simple_1cpu_after+0x15>
  104753:	55                   	push   %ebp
  104754:	89 e5                	mov    %esp,%ebp
  104756:	56                   	push   %esi
  104757:	be 91 00 00 00       	mov    $0x91,%esi
  10475c:	cd 80                	int    $0x80
  10475e:	5e                   	pop    %esi
  10475f:	5d                   	pop    %ebp
  104760:	c3                   	ret
  104761:	c3                   	ret

00104762 <z_ztest_get_next_test>:
  104762:	55                   	push   %ebp
  104763:	89 e5                	mov    %esp,%ebp
  104765:	53                   	push   %ebx
  104766:	bb e4 00 11 00       	mov    $0x1100e4,%ebx
  10476b:	8b 45 0c             	mov    0xc(%ebp),%eax
  10476e:	85 c0                	test   %eax,%eax
  104770:	74 18                	je     10478a <z_ztest_get_next_test+0x28>
  104772:	8d 58 14             	lea    0x14(%eax),%ebx
  104775:	eb 13                	jmp    10478a <z_ztest_get_next_test+0x28>
  104777:	ff 33                	push   (%ebx)
  104779:	ff 75 08             	push   0x8(%ebp)
  10477c:	e8 0f bb ff ff       	call   100290 <strcmp>
  104781:	5a                   	pop    %edx
  104782:	85 c0                	test   %eax,%eax
  104784:	59                   	pop    %ecx
  104785:	74 0d                	je     104794 <z_ztest_get_next_test+0x32>
  104787:	83 c3 14             	add    $0x14,%ebx
  10478a:	81 fb 0c 01 11 00    	cmp    $0x11010c,%ebx
  104790:	72 e5                	jb     104777 <z_ztest_get_next_test+0x15>
  104792:	31 db                	xor    %ebx,%ebx
  104794:	89 d8                	mov    %ebx,%eax
  104796:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  104799:	c9                   	leave
  10479a:	c3                   	ret

0010479b <z_ztest_run_test_suite_ptr.constprop.0>:
  10479b:	55                   	push   %ebp
  10479c:	89 e5                	mov    %esp,%ebp
  10479e:	57                   	push   %edi
  10479f:	56                   	push   %esi
  1047a0:	53                   	push   %ebx
  1047a1:	83 ec 34             	sub    $0x34,%esp
  1047a4:	89 55 c0             	mov    %edx,-0x40(%ebp)
  1047a7:	85 c0                	test   %eax,%eax
  1047a9:	75 16                	jne    1047c1 <z_ztest_run_test_suite_ptr.constprop.0+0x26>
  1047ab:	c7 05 1c 90 11 00 02 	movl   $0x2,0x11901c
  1047b2:	00 00 00 
  1047b5:	c7 45 cc ff ff ff ff 	movl   $0xffffffff,-0x34(%ebp)
  1047bc:	e9 df 03 00 00       	jmp    104ba0 <z_ztest_run_test_suite_ptr.constprop.0+0x405>
  1047c1:	68 c0 46 12 00       	push   $0x1246c0
  1047c6:	89 c7                	mov    %eax,%edi
  1047c8:	e8 48 91 00 00       	call   10d915 <k_object_access_all_grant>
  1047cd:	5b                   	pop    %ebx
  1047ce:	ff 37                	push   (%edi)
  1047d0:	68 ec 1b 11 00       	push   $0x111bec
  1047d5:	e8 8e cd ff ff       	call   101568 <printk>
  1047da:	5e                   	pop    %esi
  1047db:	58                   	pop    %eax
  1047dc:	68 02 1c 11 00       	push   $0x111c02
  1047e1:	e8 82 cd ff ff       	call   101568 <printk>
  1047e6:	58                   	pop    %eax
  1047e7:	31 c0                	xor    %eax,%eax
  1047e9:	c6 05 2d cd 12 00 00 	movb   $0x0,0x12cd2d
  1047f0:	e8 1e fd ff ff       	call   104513 <__ztest_set_test_result>
  1047f5:	31 c0                	xor    %eax,%eax
  1047f7:	e8 32 fd ff ff       	call   10452e <__ztest_set_test_phase>
  1047fc:	31 c0                	xor    %eax,%eax
  1047fe:	89 45 d0             	mov    %eax,-0x30(%ebp)
  104801:	83 3d 18 90 11 00 05 	cmpl   $0x5,0x119018
  104808:	74 0c                	je     104816 <z_ztest_run_test_suite_ptr.constprop.0+0x7b>
  10480a:	8b 47 04             	mov    0x4(%edi),%eax
  10480d:	85 c0                	test   %eax,%eax
  10480f:	74 05                	je     104816 <z_ztest_run_test_suite_ptr.constprop.0+0x7b>
  104811:	ff d0                	call   *%eax
  104813:	89 45 d0             	mov    %eax,-0x30(%ebp)
  104816:	31 c9                	xor    %ecx,%ecx
  104818:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  10481b:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  10481e:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  104821:	8b 4d c0             	mov    -0x40(%ebp),%ecx
  104824:	39 4d c8             	cmp    %ecx,-0x38(%ebp)
  104827:	0f 8d 3f 03 00 00    	jge    104b6c <z_ztest_run_test_suite_ptr.constprop.0+0x3d1>
  10482d:	8b 1f                	mov    (%edi),%ebx
  10482f:	ff 75 d4             	push   -0x2c(%ebp)
  104832:	53                   	push   %ebx
  104833:	e8 2a ff ff ff       	call   104762 <z_ztest_get_next_test>
  104838:	5e                   	pop    %esi
  104839:	85 c0                	test   %eax,%eax
  10483b:	5a                   	pop    %edx
  10483c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10483f:	0f 84 06 03 00 00    	je     104b4b <z_ztest_run_test_suite_ptr.constprop.0+0x3b0>
  104845:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  104848:	ff 70 04             	push   0x4(%eax)
  10484b:	53                   	push   %ebx
  10484c:	ff 15 14 90 11 00    	call   *0x119014
  104852:	5e                   	pop    %esi
  104853:	84 c0                	test   %al,%al
  104855:	5a                   	pop    %edx
  104856:	0f 84 e0 02 00 00    	je     104b3c <z_ztest_run_test_suite_ptr.constprop.0+0x3a1>
  10485c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10485f:	8b 40 10             	mov    0x10(%eax),%eax
  104862:	ff 00                	incl   (%eax)
  104864:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  104867:	ff 70 04             	push   0x4(%eax)
  10486a:	68 47 1c 11 00       	push   $0x111c47
  10486f:	e8 f4 cc ff ff       	call   101568 <printk>
  104874:	59                   	pop    %ecx
  104875:	b8 01 00 00 00       	mov    $0x1,%eax
  10487a:	5b                   	pop    %ebx
  10487b:	e8 ae fc ff ff       	call   10452e <__ztest_set_test_phase>
  104880:	e8 b7 1c 00 00       	call   10653c <sys_clock_cycle_get_32>
  104885:	a3 b0 cc 12 00       	mov    %eax,0x12ccb0
  10488a:	8c c8                	mov    %cs,%eax
  10488c:	83 f8 2b             	cmp    $0x2b,%eax
  10488f:	75 50                	jne    1048e1 <z_ztest_run_test_suite_ptr.constprop.0+0x146>
  104891:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  104894:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
  10489b:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10489e:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1048a1:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1048a4:	8d 45 dc             	lea    -0x24(%ebp),%eax
  1048a7:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1048aa:	c7 45 e8 08 00 00 00 	movl   $0x8,-0x18(%ebp)
  1048b1:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
  1048b8:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
  1048bf:	be 45 00 00 00       	mov    $0x45,%esi
  1048c4:	b8 c0 46 12 00       	mov    $0x1246c0,%eax
  1048c9:	ba 00 50 15 00       	mov    $0x155000,%edx
  1048ce:	b9 00 10 00 00       	mov    $0x1000,%ecx
  1048d3:	bb 23 46 10 00       	mov    $0x104623,%ebx
  1048d8:	55                   	push   %ebp
  1048d9:	8b 6d d8             	mov    -0x28(%ebp),%ebp
  1048dc:	cd 80                	int    $0x80
  1048de:	5d                   	pop    %ebp
  1048df:	eb 2b                	jmp    10490c <z_ztest_run_test_suite_ptr.constprop.0+0x171>
  1048e1:	6a ff                	push   $0xffffffff
  1048e3:	6a ff                	push   $0xffffffff
  1048e5:	6a 08                	push   $0x8
  1048e7:	6a ff                	push   $0xffffffff
  1048e9:	ff 75 d0             	push   -0x30(%ebp)
  1048ec:	ff 75 d4             	push   -0x2c(%ebp)
  1048ef:	57                   	push   %edi
  1048f0:	68 23 46 10 00       	push   $0x104623
  1048f5:	68 00 10 00 00       	push   $0x1000
  1048fa:	68 00 50 15 00       	push   $0x155000
  1048ff:	68 c0 46 12 00       	push   $0x1246c0
  104904:	e8 32 3f 00 00       	call   10883b <z_impl_k_thread_create>
  104909:	83 c4 2c             	add    $0x2c,%esp
  10490c:	89 f8                	mov    %edi,%eax
  10490e:	e8 80 fd ff ff       	call   104693 <k_object_access_grant.constprop.0>
  104913:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  104916:	e8 78 fd ff ff       	call   104693 <k_object_access_grant.constprop.0>
  10491b:	8b 47 18             	mov    0x18(%edi),%eax
  10491e:	e8 70 fd ff ff       	call   104693 <k_object_access_grant.constprop.0>
  104923:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  104926:	8b 50 04             	mov    0x4(%eax),%edx
  104929:	85 d2                	test   %edx,%edx
  10492b:	74 22                	je     10494f <z_ztest_run_test_suite_ptr.constprop.0+0x1b4>
  10492d:	8c c8                	mov    %cs,%eax
  10492f:	83 f8 2b             	cmp    $0x2b,%eax
  104932:	75 0e                	jne    104942 <z_ztest_run_test_suite_ptr.constprop.0+0x1a7>
  104934:	be 4b 00 00 00       	mov    $0x4b,%esi
  104939:	b8 c0 46 12 00       	mov    $0x1246c0,%eax
  10493e:	cd 80                	int    $0x80
  104940:	eb 0d                	jmp    10494f <z_ztest_run_test_suite_ptr.constprop.0+0x1b4>
  104942:	52                   	push   %edx
  104943:	68 c0 46 12 00       	push   $0x1246c0
  104948:	e8 a2 36 00 00       	call   107fef <z_impl_k_thread_name_set>
  10494d:	58                   	pop    %eax
  10494e:	5a                   	pop    %edx
  10494f:	a1 18 90 11 00       	mov    0x119018,%eax
  104954:	83 e8 04             	sub    $0x4,%eax
  104957:	83 f8 01             	cmp    $0x1,%eax
  10495a:	76 4b                	jbe    1049a7 <z_ztest_run_test_suite_ptr.constprop.0+0x20c>
  10495c:	8c c8                	mov    %cs,%eax
  10495e:	83 f8 2b             	cmp    $0x2b,%eax
  104961:	75 0e                	jne    104971 <z_ztest_run_test_suite_ptr.constprop.0+0x1d6>
  104963:	be 52 00 00 00       	mov    $0x52,%esi
  104968:	b8 c0 46 12 00       	mov    $0x1246c0,%eax
  10496d:	cd 80                	int    $0x80
  10496f:	eb 0b                	jmp    10497c <z_ztest_run_test_suite_ptr.constprop.0+0x1e1>
  104971:	68 c0 46 12 00       	push   $0x1246c0
  104976:	e8 f3 37 00 00       	call   10816e <z_impl_k_thread_start>
  10497b:	5e                   	pop    %esi
  10497c:	8c c8                	mov    %cs,%eax
  10497e:	83 f8 2b             	cmp    $0x2b,%eax
  104981:	75 13                	jne    104996 <z_ztest_run_test_suite_ptr.constprop.0+0x1fb>
  104983:	83 ca ff             	or     $0xffffffff,%edx
  104986:	be 49 00 00 00       	mov    $0x49,%esi
  10498b:	b8 c0 46 12 00       	mov    $0x1246c0,%eax
  104990:	89 d1                	mov    %edx,%ecx
  104992:	cd 80                	int    $0x80
  104994:	eb 11                	jmp    1049a7 <z_ztest_run_test_suite_ptr.constprop.0+0x20c>
  104996:	6a ff                	push   $0xffffffff
  104998:	6a ff                	push   $0xffffffff
  10499a:	68 c0 46 12 00       	push   $0x1246c0
  10499f:	e8 f6 5e 00 00       	call   10a89a <z_impl_k_thread_join>
  1049a4:	83 c4 0c             	add    $0xc,%esp
  1049a7:	b8 03 00 00 00       	mov    $0x3,%eax
  1049ac:	e8 7d fb ff ff       	call   10452e <__ztest_set_test_phase>
  1049b1:	8b 47 0c             	mov    0xc(%edi),%eax
  1049b4:	85 c0                	test   %eax,%eax
  1049b6:	74 06                	je     1049be <z_ztest_run_test_suite_ptr.constprop.0+0x223>
  1049b8:	ff 75 d0             	push   -0x30(%ebp)
  1049bb:	ff d0                	call   *%eax
  1049bd:	5b                   	pop    %ebx
  1049be:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  1049c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  1049c4:	31 c0                	xor    %eax,%eax
  1049c6:	be e8 03 00 00       	mov    $0x3e8,%esi
  1049cb:	e8 79 fb ff ff       	call   104549 <run_test_rules>
  1049d0:	e8 67 1b 00 00       	call   10653c <sys_clock_cycle_get_32>
  1049d5:	2b 05 b0 cc 12 00    	sub    0x12ccb0,%eax
  1049db:	f7 e6                	mul    %esi
  1049dd:	89 d1                	mov    %edx,%ecx
  1049df:	89 c2                	mov    %eax,%edx
  1049e1:	8c c8                	mov    %cs,%eax
  1049e3:	83 f8 2b             	cmp    $0x2b,%eax
  1049e6:	75 09                	jne    1049f1 <z_ztest_run_test_suite_ptr.constprop.0+0x256>
  1049e8:	be 67 00 00 00       	mov    $0x67,%esi
  1049ed:	cd 80                	int    $0x80
  1049ef:	eb 05                	jmp    1049f6 <z_ztest_run_test_suite_ptr.constprop.0+0x25b>
  1049f1:	a1 58 b5 11 00       	mov    0x11b558,%eax
  1049f6:	8d 58 ff             	lea    -0x1(%eax),%ebx
  1049f9:	89 de                	mov    %ebx,%esi
  1049fb:	c1 fe 1f             	sar    $0x1f,%esi
  1049fe:	01 d3                	add    %edx,%ebx
  104a00:	11 ce                	adc    %ecx,%esi
  104a02:	89 d9                	mov    %ebx,%ecx
  104a04:	89 f3                	mov    %esi,%ebx
  104a06:	8c c8                	mov    %cs,%eax
  104a08:	83 f8 2b             	cmp    $0x2b,%eax
  104a0b:	75 09                	jne    104a16 <z_ztest_run_test_suite_ptr.constprop.0+0x27b>
  104a0d:	be 67 00 00 00       	mov    $0x67,%esi
  104a12:	cd 80                	int    $0x80
  104a14:	eb 05                	jmp    104a1b <z_ztest_run_test_suite_ptr.constprop.0+0x280>
  104a16:	a1 58 b5 11 00       	mov    0x11b558,%eax
  104a1b:	99                   	cltd
  104a1c:	52                   	push   %edx
  104a1d:	50                   	push   %eax
  104a1e:	53                   	push   %ebx
  104a1f:	51                   	push   %ecx
  104a20:	e8 52 b7 ff ff       	call   100177 <__udivdi3>
  104a25:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  104a28:	83 c4 10             	add    $0x10,%esp
  104a2b:	a3 ac cc 12 00       	mov    %eax,0x12ccac
  104a30:	8b 51 10             	mov    0x10(%ecx),%edx
  104a33:	39 42 10             	cmp    %eax,0x10(%edx)
  104a36:	73 03                	jae    104a3b <z_ztest_run_test_suite_ptr.constprop.0+0x2a0>
  104a38:	89 42 10             	mov    %eax,0x10(%edx)
  104a3b:	b8 05 00 00 00       	mov    $0x5,%eax
  104a40:	e8 e9 fa ff ff       	call   10452e <__ztest_set_test_phase>
  104a45:	a1 18 90 11 00       	mov    0x119018,%eax
  104a4a:	83 f8 02             	cmp    $0x2,%eax
  104a4d:	74 0e                	je     104a5d <z_ztest_run_test_suite_ptr.constprop.0+0x2c2>
  104a4f:	83 f8 05             	cmp    $0x5,%eax
  104a52:	74 09                	je     104a5d <z_ztest_run_test_suite_ptr.constprop.0+0x2c2>
  104a54:	80 3d 2e cd 12 00 00 	cmpb   $0x0,0x12cd2e
  104a5b:	74 0e                	je     104a6b <z_ztest_run_test_suite_ptr.constprop.0+0x2d0>
  104a5d:	c6 05 2e cd 12 00 00 	movb   $0x0,0x12cd2e
  104a64:	bb 01 00 00 00       	mov    $0x1,%ebx
  104a69:	eb 0d                	jmp    104a78 <z_ztest_run_test_suite_ptr.constprop.0+0x2dd>
  104a6b:	31 db                	xor    %ebx,%ebx
  104a6d:	83 e8 03             	sub    $0x3,%eax
  104a70:	83 f8 01             	cmp    $0x1,%eax
  104a73:	0f 96 c3             	setbe  %bl
  104a76:	01 db                	add    %ebx,%ebx
  104a78:	b8 c0 46 12 00       	mov    $0x1246c0,%eax
  104a7d:	be c8 00 11 00       	mov    $0x1100c8,%esi
  104a82:	e8 53 fb ff ff       	call   1045da <k_thread_abort>
  104a87:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  104a8a:	8b 40 04             	mov    0x4(%eax),%eax
  104a8d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  104a90:	81 fe c8 00 11 00    	cmp    $0x1100c8,%esi
  104a96:	73 3e                	jae    104ad6 <z_ztest_run_test_suite_ptr.constprop.0+0x33b>
  104a98:	ff 75 c4             	push   -0x3c(%ebp)
  104a9b:	ff 76 04             	push   0x4(%esi)
  104a9e:	e8 ed b7 ff ff       	call   100290 <strcmp>
  104aa3:	5a                   	pop    %edx
  104aa4:	85 c0                	test   %eax,%eax
  104aa6:	59                   	pop    %ecx
  104aa7:	75 1c                	jne    104ac5 <z_ztest_run_test_suite_ptr.constprop.0+0x32a>
  104aa9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  104aac:	ff 30                	push   (%eax)
  104aae:	ff 36                	push   (%esi)
  104ab0:	e8 db b7 ff ff       	call   100290 <strcmp>
  104ab5:	5a                   	pop    %edx
  104ab6:	85 c0                	test   %eax,%eax
  104ab8:	59                   	pop    %ecx
  104ab9:	75 0a                	jne    104ac5 <z_ztest_run_test_suite_ptr.constprop.0+0x32a>
  104abb:	8b 46 08             	mov    0x8(%esi),%eax
  104abe:	85 c0                	test   %eax,%eax
  104ac0:	75 08                	jne    104aca <z_ztest_run_test_suite_ptr.constprop.0+0x32f>
  104ac2:	4b                   	dec    %ebx
  104ac3:	eb 0b                	jmp    104ad0 <z_ztest_run_test_suite_ptr.constprop.0+0x335>
  104ac5:	83 c6 0c             	add    $0xc,%esi
  104ac8:	eb c6                	jmp    104a90 <z_ztest_run_test_suite_ptr.constprop.0+0x2f5>
  104aca:	48                   	dec    %eax
  104acb:	75 09                	jne    104ad6 <z_ztest_run_test_suite_ptr.constprop.0+0x33b>
  104acd:	83 fb 02             	cmp    $0x2,%ebx
  104ad0:	0f 95 c3             	setne  %bl
  104ad3:	0f b6 db             	movzbl %bl,%ebx
  104ad6:	a1 ac cc 12 00       	mov    0x12ccac,%eax
  104adb:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
  104ae0:	31 d2                	xor    %edx,%edx
  104ae2:	f7 f1                	div    %ecx
  104ae4:	52                   	push   %edx
  104ae5:	50                   	push   %eax
  104ae6:	ff 75 c4             	push   -0x3c(%ebp)
  104ae9:	ff 34 9d 0c 08 11 00 	push   0x11080c(,%ebx,4)
  104af0:	68 53 1c 11 00       	push   $0x111c53
  104af5:	e8 6e ca ff ff       	call   101568 <printk>
  104afa:	83 c4 14             	add    $0x14,%esp
  104afd:	68 02 1c 11 00       	push   $0x111c02
  104b02:	e8 61 ca ff ff       	call   101568 <printk>
  104b07:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  104b0a:	59                   	pop    %ecx
  104b0b:	83 fb 02             	cmp    $0x2,%ebx
  104b0e:	8b 40 10             	mov    0x10(%eax),%eax
  104b11:	75 15                	jne    104b28 <z_ztest_run_test_suite_ptr.constprop.0+0x38d>
  104b13:	80 3d 2d cd 12 00 00 	cmpb   $0x0,0x12cd2d
  104b1a:	74 15                	je     104b31 <z_ztest_run_test_suite_ptr.constprop.0+0x396>
  104b1c:	c7 05 1c 90 11 00 01 	movl   $0x1,0x11901c
  104b23:	00 00 00 
  104b26:	eb 09                	jmp    104b31 <z_ztest_run_test_suite_ptr.constprop.0+0x396>
  104b28:	85 db                	test   %ebx,%ebx
  104b2a:	75 0a                	jne    104b36 <z_ztest_run_test_suite_ptr.constprop.0+0x39b>
  104b2c:	ff 40 0c             	incl   0xc(%eax)
  104b2f:	eb 0b                	jmp    104b3c <z_ztest_run_test_suite_ptr.constprop.0+0x3a1>
  104b31:	ff 40 04             	incl   0x4(%eax)
  104b34:	eb 06                	jmp    104b3c <z_ztest_run_test_suite_ptr.constprop.0+0x3a1>
  104b36:	ff 40 08             	incl   0x8(%eax)
  104b39:	ff 45 cc             	incl   -0x34(%ebp)
  104b3c:	83 3d 1c 90 11 00 02 	cmpl   $0x2,0x11901c
  104b43:	0f 85 e4 fc ff ff    	jne    10482d <z_ztest_run_test_suite_ptr.constprop.0+0x92>
  104b49:	eb 19                	jmp    104b64 <z_ztest_run_test_suite_ptr.constprop.0+0x3c9>
  104b4b:	83 3d 1c 90 11 00 00 	cmpl   $0x0,0x11901c
  104b52:	75 10                	jne    104b64 <z_ztest_run_test_suite_ptr.constprop.0+0x3c9>
  104b54:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
  104b58:	74 0a                	je     104b64 <z_ztest_run_test_suite_ptr.constprop.0+0x3c9>
  104b5a:	c7 05 1c 90 11 00 01 	movl   $0x1,0x11901c
  104b61:	00 00 00 
  104b64:	ff 45 c8             	incl   -0x38(%ebp)
  104b67:	e9 b5 fc ff ff       	jmp    104821 <z_ztest_run_test_suite_ptr.constprop.0+0x86>
  104b6c:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
  104b70:	8b 07                	mov    (%edi),%eax
  104b72:	75 08                	jne    104b7c <z_ztest_run_test_suite_ptr.constprop.0+0x3e1>
  104b74:	50                   	push   %eax
  104b75:	68 70 1c 11 00       	push   $0x111c70
  104b7a:	eb 06                	jmp    104b82 <z_ztest_run_test_suite_ptr.constprop.0+0x3e7>
  104b7c:	50                   	push   %eax
  104b7d:	68 88 1c 11 00       	push   $0x111c88
  104b82:	e8 e1 c9 ff ff       	call   101568 <printk>
  104b87:	5a                   	pop    %edx
  104b88:	b8 04 00 00 00       	mov    $0x4,%eax
  104b8d:	59                   	pop    %ecx
  104b8e:	e8 9b f9 ff ff       	call   10452e <__ztest_set_test_phase>
  104b93:	8b 47 10             	mov    0x10(%edi),%eax
  104b96:	85 c0                	test   %eax,%eax
  104b98:	74 06                	je     104ba0 <z_ztest_run_test_suite_ptr.constprop.0+0x405>
  104b9a:	ff 75 d0             	push   -0x30(%ebp)
  104b9d:	ff d0                	call   *%eax
  104b9f:	58                   	pop    %eax
  104ba0:	8b 45 cc             	mov    -0x34(%ebp),%eax
  104ba3:	8d 65 f4             	lea    -0xc(%ebp),%esp
  104ba6:	5b                   	pop    %ebx
  104ba7:	5e                   	pop    %esi
  104ba8:	5f                   	pop    %edi
  104ba9:	5d                   	pop    %ebp
  104baa:	c3                   	ret

00104bab <z_impl_ztest_run_test_suites>:
  104bab:	55                   	push   %ebp
  104bac:	31 c0                	xor    %eax,%eax
  104bae:	89 e5                	mov    %esp,%ebp
  104bb0:	57                   	push   %edi
  104bb1:	56                   	push   %esi
  104bb2:	53                   	push   %ebx
  104bb3:	bb c8 00 11 00       	mov    $0x1100c8,%ebx
  104bb8:	83 ec 08             	sub    $0x8,%esp
  104bbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
  104bbe:	83 3d 1c 90 11 00 02 	cmpl   $0x2,0x11901c
  104bc5:	0f 84 99 00 00 00    	je     104c64 <z_impl_ztest_run_test_suites+0xb9>
  104bcb:	81 fb e4 00 11 00    	cmp    $0x1100e4,%ebx
  104bd1:	0f 83 8d 00 00 00    	jae    104c64 <z_impl_ztest_run_test_suites+0xb9>
  104bd7:	31 c0                	xor    %eax,%eax
  104bd9:	50                   	push   %eax
  104bda:	ff 33                	push   (%ebx)
  104bdc:	e8 81 fb ff ff       	call   104762 <z_ztest_get_next_test>
  104be1:	5a                   	pop    %edx
  104be2:	85 c0                	test   %eax,%eax
  104be4:	59                   	pop    %ecx
  104be5:	74 29                	je     104c10 <z_impl_ztest_run_test_suites+0x65>
  104be7:	8b 50 10             	mov    0x10(%eax),%edx
  104bea:	31 f6                	xor    %esi,%esi
  104bec:	31 ff                	xor    %edi,%edi
  104bee:	31 c9                	xor    %ecx,%ecx
  104bf0:	89 32                	mov    %esi,(%edx)
  104bf2:	31 f6                	xor    %esi,%esi
  104bf4:	8b 50 10             	mov    0x10(%eax),%edx
  104bf7:	89 7a 04             	mov    %edi,0x4(%edx)
  104bfa:	31 ff                	xor    %edi,%edi
  104bfc:	8b 50 10             	mov    0x10(%eax),%edx
  104bff:	89 4a 08             	mov    %ecx,0x8(%edx)
  104c02:	8b 50 10             	mov    0x10(%eax),%edx
  104c05:	89 72 0c             	mov    %esi,0xc(%edx)
  104c08:	8b 50 10             	mov    0x10(%eax),%edx
  104c0b:	89 7a 10             	mov    %edi,0x10(%edx)
  104c0e:	eb c9                	jmp    104bd9 <z_impl_ztest_run_test_suites+0x2e>
  104c10:	31 c0                	xor    %eax,%eax
  104c12:	8b 73 18             	mov    0x18(%ebx),%esi
  104c15:	31 ff                	xor    %edi,%edi
  104c17:	89 45 ec             	mov    %eax,-0x14(%ebp)
  104c1a:	39 7d 10             	cmp    %edi,0x10(%ebp)
  104c1d:	7e 2e                	jle    104c4d <z_impl_ztest_run_test_suites+0xa2>
  104c1f:	53                   	push   %ebx
  104c20:	ff 75 08             	push   0x8(%ebp)
  104c23:	ff 15 10 90 11 00    	call   *0x119010
  104c29:	5a                   	pop    %edx
  104c2a:	84 c0                	test   %al,%al
  104c2c:	59                   	pop    %ecx
  104c2d:	74 18                	je     104c47 <z_impl_ztest_run_test_suites+0x9c>
  104c2f:	8b 55 14             	mov    0x14(%ebp),%edx
  104c32:	89 d8                	mov    %ebx,%eax
  104c34:	e8 62 fb ff ff       	call   10479b <z_ztest_run_test_suite_ptr.constprop.0>
  104c39:	ff 45 ec             	incl   -0x14(%ebp)
  104c3c:	ff 06                	incl   (%esi)
  104c3e:	83 f8 01             	cmp    $0x1,%eax
  104c41:	83 5e 08 ff          	sbbl   $0xffffffff,0x8(%esi)
  104c45:	eb 03                	jmp    104c4a <z_impl_ztest_run_test_suites+0x9f>
  104c47:	ff 46 04             	incl   0x4(%esi)
  104c4a:	47                   	inc    %edi
  104c4b:	eb cd                	jmp    104c1a <z_impl_ztest_run_test_suites+0x6f>
  104c4d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  104c50:	01 4d f0             	add    %ecx,-0x10(%ebp)
  104c53:	83 3d 1c 90 11 00 02 	cmpl   $0x2,0x11901c
  104c5a:	74 08                	je     104c64 <z_impl_ztest_run_test_suites+0xb9>
  104c5c:	83 c3 1c             	add    $0x1c,%ebx
  104c5f:	e9 67 ff ff ff       	jmp    104bcb <z_impl_ztest_run_test_suites+0x20>
  104c64:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104c67:	8d 65 f4             	lea    -0xc(%ebp),%esp
  104c6a:	5b                   	pop    %ebx
  104c6b:	5e                   	pop    %esi
  104c6c:	5f                   	pop    %edi
  104c6d:	5d                   	pop    %ebp
  104c6e:	c3                   	ret

00104c6f <z_mrsh___ztest_set_test_result>:
  104c6f:	55                   	push   %ebp
  104c70:	31 d2                	xor    %edx,%edx
  104c72:	89 e5                	mov    %esp,%ebp
  104c74:	8b 45 08             	mov    0x8(%ebp),%eax
  104c77:	a3 18 90 11 00       	mov    %eax,0x119018
  104c7c:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  104c81:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  104c87:	31 c0                	xor    %eax,%eax
  104c89:	5d                   	pop    %ebp
  104c8a:	c3                   	ret

00104c8b <z_mrsh___ztest_set_test_phase>:
  104c8b:	55                   	push   %ebp
  104c8c:	31 d2                	xor    %edx,%edx
  104c8e:	89 e5                	mov    %esp,%ebp
  104c90:	8b 45 08             	mov    0x8(%ebp),%eax
  104c93:	a3 08 90 11 00       	mov    %eax,0x119008
  104c98:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  104c9d:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  104ca3:	31 c0                	xor    %eax,%eax
  104ca5:	5d                   	pop    %ebp
  104ca6:	c3                   	ret

00104ca7 <ztest_verify_all_test_suites_ran>:
  104ca7:	55                   	push   %ebp
  104ca8:	89 e5                	mov    %esp,%ebp
  104caa:	57                   	push   %edi
  104cab:	56                   	push   %esi
  104cac:	be 01 00 00 00       	mov    $0x1,%esi
  104cb1:	53                   	push   %ebx
  104cb2:	bb c8 00 11 00       	mov    $0x1100c8,%ebx
  104cb7:	81 fb e4 00 11 00    	cmp    $0x1100e4,%ebx
  104cbd:	73 1d                	jae    104cdc <ztest_verify_all_test_suites_ran+0x35>
  104cbf:	8b 43 18             	mov    0x18(%ebx),%eax
  104cc2:	83 38 00             	cmpl   $0x0,(%eax)
  104cc5:	75 10                	jne    104cd7 <ztest_verify_all_test_suites_ran+0x30>
  104cc7:	ff 33                	push   (%ebx)
  104cc9:	31 f6                	xor    %esi,%esi
  104ccb:	68 9e 1c 11 00       	push   $0x111c9e
  104cd0:	e8 93 c8 ff ff       	call   101568 <printk>
  104cd5:	58                   	pop    %eax
  104cd6:	5a                   	pop    %edx
  104cd7:	83 c3 1c             	add    $0x1c,%ebx
  104cda:	eb db                	jmp    104cb7 <ztest_verify_all_test_suites_ran+0x10>
  104cdc:	bb e4 00 11 00       	mov    $0x1100e4,%ebx
  104ce1:	81 fb 0c 01 11 00    	cmp    $0x11010c,%ebx
  104ce7:	73 25                	jae    104d0e <ztest_verify_all_test_suites_ran+0x67>
  104ce9:	8b 3b                	mov    (%ebx),%edi
  104ceb:	89 f8                	mov    %edi,%eax
  104ced:	e8 b6 f8 ff ff       	call   1045a8 <ztest_find_test_suite>
  104cf2:	85 c0                	test   %eax,%eax
  104cf4:	75 13                	jne    104d09 <ztest_verify_all_test_suites_ran+0x62>
  104cf6:	57                   	push   %edi
  104cf7:	31 f6                	xor    %esi,%esi
  104cf9:	ff 73 04             	push   0x4(%ebx)
  104cfc:	68 c3 1c 11 00       	push   $0x111cc3
  104d01:	e8 62 c8 ff ff       	call   101568 <printk>
  104d06:	83 c4 0c             	add    $0xc,%esp
  104d09:	83 c3 14             	add    $0x14,%ebx
  104d0c:	eb d3                	jmp    104ce1 <ztest_verify_all_test_suites_ran+0x3a>
  104d0e:	89 f0                	mov    %esi,%eax
  104d10:	84 c0                	test   %al,%al
  104d12:	75 0a                	jne    104d1e <ztest_verify_all_test_suites_ran+0x77>
  104d14:	c7 05 1c 90 11 00 01 	movl   $0x1,0x11901c
  104d1b:	00 00 00 
  104d1e:	bb e4 00 11 00       	mov    $0x1100e4,%ebx
  104d23:	81 fb 0c 01 11 00    	cmp    $0x11010c,%ebx
  104d29:	73 31                	jae    104d5c <ztest_verify_all_test_suites_ran+0xb5>
  104d2b:	8b 53 10             	mov    0x10(%ebx),%edx
  104d2e:	8b 42 0c             	mov    0xc(%edx),%eax
  104d31:	03 42 08             	add    0x8(%edx),%eax
  104d34:	03 42 04             	add    0x4(%edx),%eax
  104d37:	3b 02                	cmp    (%edx),%eax
  104d39:	74 1c                	je     104d57 <ztest_verify_all_test_suites_ran+0xb0>
  104d3b:	ff 73 04             	push   0x4(%ebx)
  104d3e:	ff 33                	push   (%ebx)
  104d40:	68 05 1d 11 00       	push   $0x111d05
  104d45:	e8 1e c8 ff ff       	call   101568 <printk>
  104d4a:	83 c4 0c             	add    $0xc,%esp
  104d4d:	c7 05 1c 90 11 00 01 	movl   $0x1,0x11901c
  104d54:	00 00 00 
  104d57:	83 c3 14             	add    $0x14,%ebx
  104d5a:	eb c7                	jmp    104d23 <ztest_verify_all_test_suites_ran+0x7c>
  104d5c:	8d 65 f4             	lea    -0xc(%ebp),%esp
  104d5f:	5b                   	pop    %ebx
  104d60:	5e                   	pop    %esi
  104d61:	5f                   	pop    %edi
  104d62:	5d                   	pop    %ebp
  104d63:	c3                   	ret

00104d64 <ztest_run_all>:
  104d64:	55                   	push   %ebp
  104d65:	89 e5                	mov    %esp,%ebp
  104d67:	0f b6 45 0c          	movzbl 0xc(%ebp),%eax
  104d6b:	89 45 0c             	mov    %eax,0xc(%ebp)
  104d6e:	5d                   	pop    %ebp
  104d6f:	ff 25 0c 90 11 00    	jmp    *0x11900c

00104d75 <test_main>:
  104d75:	55                   	push   %ebp
  104d76:	89 e5                	mov    %esp,%ebp
  104d78:	6a 01                	push   $0x1
  104d7a:	6a 01                	push   $0x1
  104d7c:	6a 00                	push   $0x0
  104d7e:	6a 00                	push   $0x0
  104d80:	e8 df ff ff ff       	call   104d64 <ztest_run_all>
  104d85:	83 c4 10             	add    $0x10,%esp
  104d88:	c9                   	leave
  104d89:	e9 19 ff ff ff       	jmp    104ca7 <ztest_verify_all_test_suites_ran>

00104d8e <main>:
  104d8e:	55                   	push   %ebp
  104d8f:	89 e5                	mov    %esp,%ebp
  104d91:	57                   	push   %edi
  104d92:	56                   	push   %esi
  104d93:	53                   	push   %ebx
  104d94:	83 ec 20             	sub    $0x20,%esp
  104d97:	68 20 b5 11 00       	push   $0x11b520
  104d9c:	68 80 ca 12 00       	push   $0x12ca80
  104da1:	e8 92 7d 00 00       	call   10cb38 <k_mem_domain_add_partition>
  104da6:	58                   	pop    %eax
  104da7:	5a                   	pop    %edx
  104da8:	68 10 b5 11 00       	push   $0x11b510
  104dad:	68 80 ca 12 00       	push   $0x12ca80
  104db2:	e8 81 7d 00 00       	call   10cb38 <k_mem_domain_add_partition>
  104db7:	59                   	pop    %ecx
  104db8:	5b                   	pop    %ebx
  104db9:	e8 b7 ff ff ff       	call   104d75 <test_main>
  104dbe:	68 1a 1d 11 00       	push   $0x111d1a
  104dc3:	e8 a0 c7 ff ff       	call   101568 <printk>
  104dc8:	5e                   	pop    %esi
  104dc9:	c7 45 f0 c8 00 11 00 	movl   $0x1100c8,-0x10(%ebp)
  104dd0:	81 7d f0 e4 00 11 00 	cmpl   $0x1100e4,-0x10(%ebp)
  104dd7:	0f 83 88 01 00 00    	jae    104f65 <main+0x1d7>
  104ddd:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104de0:	31 f6                	xor    %esi,%esi
  104de2:	31 db                	xor    %ebx,%ebx
  104de4:	89 75 ec             	mov    %esi,-0x14(%ebp)
  104de7:	8b 00                	mov    (%eax),%eax
  104de9:	89 5d d8             	mov    %ebx,-0x28(%ebp)
  104dec:	89 45 dc             	mov    %eax,-0x24(%ebp)
  104def:	31 c0                	xor    %eax,%eax
  104df1:	31 ff                	xor    %edi,%edi
  104df3:	31 f6                	xor    %esi,%esi
  104df5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  104df8:	89 45 e8             	mov    %eax,-0x18(%ebp)
  104dfb:	57                   	push   %edi
  104dfc:	ff 75 dc             	push   -0x24(%ebp)
  104dff:	e8 5e f9 ff ff       	call   104762 <z_ztest_get_next_test>
  104e04:	5a                   	pop    %edx
  104e05:	89 c7                	mov    %eax,%edi
  104e07:	59                   	pop    %ecx
  104e08:	85 c0                	test   %eax,%eax
  104e0a:	74 25                	je     104e31 <main+0xa3>
  104e0c:	8b 47 10             	mov    0x10(%edi),%eax
  104e0f:	ff 45 ec             	incl   -0x14(%ebp)
  104e12:	8b 48 10             	mov    0x10(%eax),%ecx
  104e15:	8b 10                	mov    (%eax),%edx
  104e17:	01 4d d8             	add    %ecx,-0x28(%ebp)
  104e1a:	39 50 04             	cmp    %edx,0x4(%eax)
  104e1d:	75 03                	jne    104e22 <main+0x94>
  104e1f:	46                   	inc    %esi
  104e20:	eb d9                	jmp    104dfb <main+0x6d>
  104e22:	3b 50 0c             	cmp    0xc(%eax),%edx
  104e25:	75 05                	jne    104e2c <main+0x9e>
  104e27:	ff 45 e8             	incl   -0x18(%ebp)
  104e2a:	eb cf                	jmp    104dfb <main+0x6d>
  104e2c:	ff 45 e4             	incl   -0x1c(%ebp)
  104e2f:	eb ca                	jmp    104dfb <main+0x6d>
  104e31:	39 75 ec             	cmp    %esi,-0x14(%ebp)
  104e34:	74 49                	je     104e7f <main+0xf1>
  104e36:	31 c0                	xor    %eax,%eax
  104e38:	8b 5d ec             	mov    -0x14(%ebp),%ebx
  104e3b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
  104e3f:	0f 9f c0             	setg   %al
  104e42:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  104e45:	29 f3                	sub    %esi,%ebx
  104e47:	69 45 e8 a0 86 01 00 	imul   $0x186a0,-0x18(%ebp),%eax
  104e4e:	99                   	cltd
  104e4f:	f7 fb                	idiv   %ebx
  104e51:	99                   	cltd
  104e52:	bb e8 03 00 00       	mov    $0x3e8,%ebx
  104e57:	89 c1                	mov    %eax,%ecx
  104e59:	f7 fb                	idiv   %ebx
  104e5b:	69 d8 18 fc ff ff    	imul   $0xfffffc18,%eax,%ebx
  104e61:	01 cb                	add    %ecx,%ebx
  104e63:	89 45 e0             	mov    %eax,-0x20(%ebp)
  104e66:	89 d8                	mov    %ebx,%eax
  104e68:	b9 0a 00 00 00       	mov    $0xa,%ecx
  104e6d:	99                   	cltd
  104e6e:	f7 f9                	idiv   %ecx
  104e70:	89 c1                	mov    %eax,%ecx
  104e72:	6b c0 f6             	imul   $0xfffffff6,%eax,%eax
  104e75:	01 d8                	add    %ebx,%eax
  104e77:	83 f8 04             	cmp    $0x4,%eax
  104e7a:	7e 11                	jle    104e8d <main+0xff>
  104e7c:	41                   	inc    %ecx
  104e7d:	eb 0e                	jmp    104e8d <main+0xff>
  104e7f:	31 c0                	xor    %eax,%eax
  104e81:	c7 45 d4 02 00 00 00 	movl   $0x2,-0x2c(%ebp)
  104e88:	31 c9                	xor    %ecx,%ecx
  104e8a:	89 45 e0             	mov    %eax,-0x20(%ebp)
  104e8d:	8b 45 d8             	mov    -0x28(%ebp),%eax
  104e90:	bb e8 03 00 00       	mov    $0x3e8,%ebx
  104e95:	31 d2                	xor    %edx,%edx
  104e97:	f7 f3                	div    %ebx
  104e99:	52                   	push   %edx
  104e9a:	50                   	push   %eax
  104e9b:	ff 75 ec             	push   -0x14(%ebp)
  104e9e:	56                   	push   %esi
  104e9f:	ff 75 e4             	push   -0x1c(%ebp)
  104ea2:	ff 75 e8             	push   -0x18(%ebp)
  104ea5:	ff 75 dc             	push   -0x24(%ebp)
  104ea8:	51                   	push   %ecx
  104ea9:	ff 75 e0             	push   -0x20(%ebp)
  104eac:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  104eaf:	ff 34 85 0c 08 11 00 	push   0x11080c(,%eax,4)
  104eb6:	68 43 1d 11 00       	push   $0x111d43
  104ebb:	e8 a8 c6 ff ff       	call   101568 <printk>
  104ec0:	83 c4 2c             	add    $0x2c,%esp
  104ec3:	57                   	push   %edi
  104ec4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104ec7:	ff 30                	push   (%eax)
  104ec9:	e8 94 f8 ff ff       	call   104762 <z_ztest_get_next_test>
  104ece:	5e                   	pop    %esi
  104ecf:	85 c0                	test   %eax,%eax
  104ed1:	5f                   	pop    %edi
  104ed2:	89 c7                	mov    %eax,%edi
  104ed4:	74 7b                	je     104f51 <main+0x1c3>
  104ed6:	8b 5f 10             	mov    0x10(%edi),%ebx
  104ed9:	be e8 03 00 00       	mov    $0x3e8,%esi
  104ede:	31 d2                	xor    %edx,%edx
  104ee0:	8b 43 10             	mov    0x10(%ebx),%eax
  104ee3:	8b 0b                	mov    (%ebx),%ecx
  104ee5:	f7 f6                	div    %esi
  104ee7:	8b 77 04             	mov    0x4(%edi),%esi
  104eea:	39 4b 04             	cmp    %ecx,0x4(%ebx)
  104eed:	89 75 ec             	mov    %esi,-0x14(%ebp)
  104ef0:	89 55 e8             	mov    %edx,-0x18(%ebp)
  104ef3:	8b 37                	mov    (%edi),%esi
  104ef5:	74 30                	je     104f27 <main+0x199>
  104ef7:	8b 53 0c             	mov    0xc(%ebx),%edx
  104efa:	39 d1                	cmp    %edx,%ecx
  104efc:	74 30                	je     104f2e <main+0x1a0>
  104efe:	bb 01 00 00 00       	mov    $0x1,%ebx
  104f03:	85 d2                	test   %edx,%edx
  104f05:	74 29                	je     104f30 <main+0x1a2>
  104f07:	ff 75 e8             	push   -0x18(%ebp)
  104f0a:	50                   	push   %eax
  104f0b:	51                   	push   %ecx
  104f0c:	29 d1                	sub    %edx,%ecx
  104f0e:	51                   	push   %ecx
  104f0f:	ff 75 ec             	push   -0x14(%ebp)
  104f12:	56                   	push   %esi
  104f13:	68 a7 1d 11 00       	push   $0x111da7
  104f18:	68 ad 1d 11 00       	push   $0x111dad
  104f1d:	e8 46 c6 ff ff       	call   101568 <printk>
  104f22:	83 c4 20             	add    $0x20,%esp
  104f25:	eb 9c                	jmp    104ec3 <main+0x135>
  104f27:	bb 02 00 00 00       	mov    $0x2,%ebx
  104f2c:	eb 02                	jmp    104f30 <main+0x1a2>
  104f2e:	31 db                	xor    %ebx,%ebx
  104f30:	ff 75 e8             	push   -0x18(%ebp)
  104f33:	50                   	push   %eax
  104f34:	ff 75 ec             	push   -0x14(%ebp)
  104f37:	56                   	push   %esi
  104f38:	ff 34 9d 0c 08 11 00 	push   0x11080c(,%ebx,4)
  104f3f:	68 f8 1d 11 00       	push   $0x111df8
  104f44:	e8 1f c6 ff ff       	call   101568 <printk>
  104f49:	83 c4 18             	add    $0x18,%esp
  104f4c:	e9 72 ff ff ff       	jmp    104ec3 <main+0x135>
  104f51:	68 4b 23 11 00       	push   $0x11234b
  104f56:	e8 0d c6 ff ff       	call   101568 <printk>
  104f5b:	5b                   	pop    %ebx
  104f5c:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
  104f60:	e9 6b fe ff ff       	jmp    104dd0 <main+0x42>
  104f65:	68 24 1e 11 00       	push   $0x111e24
  104f6a:	e8 f9 c5 ff ff       	call   101568 <printk>
  104f6f:	83 3d 1c 90 11 00 00 	cmpl   $0x0,0x11901c
  104f76:	59                   	pop    %ecx
  104f77:	74 13                	je     104f8c <main+0x1fe>
  104f79:	68 02 1c 11 00       	push   $0x111c02
  104f7e:	e8 e5 c5 ff ff       	call   101568 <printk>
  104f83:	c7 04 24 4a 1e 11 00 	movl   $0x111e4a,(%esp)
  104f8a:	eb 11                	jmp    104f9d <main+0x20f>
  104f8c:	68 02 1c 11 00       	push   $0x111c02
  104f91:	e8 d2 c5 ff ff       	call   101568 <printk>
  104f96:	c7 04 24 67 1e 11 00 	movl   $0x111e67,(%esp)
  104f9d:	68 51 1e 11 00       	push   $0x111e51
  104fa2:	e8 c1 c5 ff ff       	call   101568 <printk>
  104fa7:	58                   	pop    %eax
  104fa8:	31 c0                	xor    %eax,%eax
  104faa:	5a                   	pop    %edx
  104fab:	8d 65 f4             	lea    -0xc(%ebp),%esp
  104fae:	5b                   	pop    %ebx
  104faf:	5e                   	pop    %esi
  104fb0:	5f                   	pop    %edi
  104fb1:	5d                   	pop    %ebp
  104fb2:	c3                   	ret

00104fb3 <z_impl_ztest_set_fault_valid>:
  104fb3:	55                   	push   %ebp
  104fb4:	89 e5                	mov    %esp,%ebp
  104fb6:	80 7d 08 00          	cmpb   $0x0,0x8(%ebp)
  104fba:	74 25                	je     104fe1 <z_impl_ztest_set_fault_valid+0x2e>
  104fbc:	e8 7a 2f 00 00       	call   107f3b <k_is_in_isr>
  104fc1:	84 c0                	test   %al,%al
  104fc3:	74 09                	je     104fce <z_impl_ztest_set_fault_valid+0x1b>
  104fc5:	c6 05 24 90 11 00 01 	movb   $0x1,0x119024
  104fcc:	eb 21                	jmp    104fef <z_impl_ztest_set_fault_valid+0x3c>
  104fce:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
  104fd4:	8b 80 fc ff ff ff    	mov    -0x4(%eax),%eax
  104fda:	a3 20 90 11 00       	mov    %eax,0x119020
  104fdf:	eb 0e                	jmp    104fef <z_impl_ztest_set_fault_valid+0x3c>
  104fe1:	31 c0                	xor    %eax,%eax
  104fe3:	a3 20 90 11 00       	mov    %eax,0x119020
  104fe8:	c6 05 24 90 11 00 00 	movb   $0x0,0x119024
  104fef:	5d                   	pop    %ebp
  104ff0:	c3                   	ret

00104ff1 <z_mrsh_ztest_set_fault_valid>:
  104ff1:	55                   	push   %ebp
  104ff2:	89 e5                	mov    %esp,%ebp
  104ff4:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  104ff9:	8b 55 20             	mov    0x20(%ebp),%edx
  104ffc:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  105002:	0f b6 45 08          	movzbl 0x8(%ebp),%eax
  105006:	50                   	push   %eax
  105007:	e8 a7 ff ff ff       	call   104fb3 <z_impl_ztest_set_fault_valid>
  10500c:	58                   	pop    %eax
  10500d:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  105012:	31 d2                	xor    %edx,%edx
  105014:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10501a:	31 c0                	xor    %eax,%eax
  10501c:	c9                   	leave
  10501d:	c3                   	ret

0010501e <ztest_post_fatal_error_hook>:
  10501e:	c3                   	ret

0010501f <k_sys_fatal_error_handler>:
  10501f:	55                   	push   %ebp
  105020:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
  105026:	89 e5                	mov    %esp,%ebp
  105028:	56                   	push   %esi
  105029:	53                   	push   %ebx
  10502a:	8b 15 20 90 11 00    	mov    0x119020,%edx
  105030:	8b 5d 08             	mov    0x8(%ebp),%ebx
  105033:	3b 90 fc ff ff ff    	cmp    -0x4(%eax),%edx
  105039:	8b 75 0c             	mov    0xc(%ebp),%esi
  10503c:	74 09                	je     105047 <k_sys_fatal_error_handler+0x28>
  10503e:	a0 24 90 11 00       	mov    0x119024,%al
  105043:	84 c0                	test   %al,%al
  105045:	74 3b                	je     105082 <k_sys_fatal_error_handler+0x63>
  105047:	6a 01                	push   $0x1
  105049:	53                   	push   %ebx
  10504a:	68 a7 1e 11 00       	push   $0x111ea7
  10504f:	e8 14 c5 ff ff       	call   101568 <printk>
  105054:	83 c4 0c             	add    $0xc,%esp
  105057:	68 cc 1e 11 00       	push   $0x111ecc
  10505c:	e8 07 c5 ff ff       	call   101568 <printk>
  105061:	31 d2                	xor    %edx,%edx
  105063:	58                   	pop    %eax
  105064:	89 15 20 90 11 00    	mov    %edx,0x119020
  10506a:	c6 05 24 90 11 00 00 	movb   $0x0,0x119024
  105071:	89 75 0c             	mov    %esi,0xc(%ebp)
  105074:	89 5d 08             	mov    %ebx,0x8(%ebp)
  105077:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10507a:	5b                   	pop    %ebx
  10507b:	5e                   	pop    %esi
  10507c:	5d                   	pop    %ebp
  10507d:	e9 9c ff ff ff       	jmp    10501e <ztest_post_fatal_error_hook>
  105082:	6a 00                	push   $0x0
  105084:	53                   	push   %ebx
  105085:	68 a7 1e 11 00       	push   $0x111ea7
  10508a:	e8 d9 c4 ff ff       	call   101568 <printk>
  10508f:	83 c4 0c             	add    $0xc,%esp
  105092:	68 f8 1e 11 00       	push   $0x111ef8
  105097:	e8 cc c4 ff ff       	call   101568 <printk>
  10509c:	89 1c 24             	mov    %ebx,(%esp)
  10509f:	e8 c2 16 00 00       	call   106766 <k_fatal_halt>

001050a4 <z_ztest_should_suite_run>:
  1050a4:	55                   	push   %ebp
  1050a5:	89 e5                	mov    %esp,%ebp
  1050a7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1050aa:	8b 40 14             	mov    0x14(%eax),%eax
  1050ad:	85 c0                	test   %eax,%eax
  1050af:	74 03                	je     1050b4 <z_ztest_should_suite_run+0x10>
  1050b1:	5d                   	pop    %ebp
  1050b2:	ff e0                	jmp    *%eax
  1050b4:	b0 01                	mov    $0x1,%al
  1050b6:	5d                   	pop    %ebp
  1050b7:	c3                   	ret

001050b8 <z_ztest_should_test_run>:
  1050b8:	b0 01                	mov    $0x1,%al
  1050ba:	c3                   	ret

001050bb <z_ztest_run_all>:
  1050bb:	55                   	push   %ebp
  1050bc:	89 e5                	mov    %esp,%ebp
  1050be:	57                   	push   %edi
  1050bf:	56                   	push   %esi
  1050c0:	53                   	push   %ebx
  1050c1:	8b 7d 08             	mov    0x8(%ebp),%edi
  1050c4:	8b 75 0c             	mov    0xc(%ebp),%esi
  1050c7:	8b 4d 10             	mov    0x10(%ebp),%ecx
  1050ca:	8b 5d 14             	mov    0x14(%ebp),%ebx
  1050cd:	8c ca                	mov    %cs,%edx
  1050cf:	83 fa 2b             	cmp    $0x2b,%edx
  1050d2:	75 14                	jne    1050e8 <z_ztest_run_all+0x2d>
  1050d4:	89 f0                	mov    %esi,%eax
  1050d6:	31 d2                	xor    %edx,%edx
  1050d8:	88 c2                	mov    %al,%dl
  1050da:	be 87 00 00 00       	mov    $0x87,%esi
  1050df:	89 f8                	mov    %edi,%eax
  1050e1:	cd 80                	int    $0x80
  1050e3:	5b                   	pop    %ebx
  1050e4:	5e                   	pop    %esi
  1050e5:	5f                   	pop    %edi
  1050e6:	5d                   	pop    %ebp
  1050e7:	c3                   	ret
  1050e8:	89 f0                	mov    %esi,%eax
  1050ea:	89 5d 14             	mov    %ebx,0x14(%ebp)
  1050ed:	0f b6 f0             	movzbl %al,%esi
  1050f0:	89 4d 10             	mov    %ecx,0x10(%ebp)
  1050f3:	89 75 0c             	mov    %esi,0xc(%ebp)
  1050f6:	89 7d 08             	mov    %edi,0x8(%ebp)
  1050f9:	5b                   	pop    %ebx
  1050fa:	5e                   	pop    %esi
  1050fb:	5f                   	pop    %edi
  1050fc:	5d                   	pop    %ebp
  1050fd:	e9 a9 fa ff ff       	jmp    104bab <z_impl_ztest_run_test_suites>

00105102 <ztest_relative_filename>:
  105102:	55                   	push   %ebp
  105103:	89 e5                	mov    %esp,%ebp
  105105:	8b 45 08             	mov    0x8(%ebp),%eax
  105108:	5d                   	pop    %ebp
  105109:	c3                   	ret

0010510a <__IoApicGet>:
  10510a:	9c                   	pushf
  10510b:	fa                   	cli
  10510c:	5a                   	pop    %edx
  10510d:	8b 0d b8 cc 12 00    	mov    0x12ccb8,%ecx
  105113:	0f b6 c0             	movzbl %al,%eax
  105116:	0f ba e2 09          	bt     $0x9,%edx
  10511a:	89 01                	mov    %eax,(%ecx)
  10511c:	a1 b8 cc 12 00       	mov    0x12ccb8,%eax
  105121:	8b 40 10             	mov    0x10(%eax),%eax
  105124:	73 01                	jae    105127 <__IoApicGet+0x1d>
  105126:	fb                   	sti
  105127:	c3                   	ret

00105128 <__IoApicSet>:
  105128:	55                   	push   %ebp
  105129:	89 e5                	mov    %esp,%ebp
  10512b:	53                   	push   %ebx
  10512c:	9c                   	pushf
  10512d:	fa                   	cli
  10512e:	59                   	pop    %ecx
  10512f:	8b 1d b8 cc 12 00    	mov    0x12ccb8,%ebx
  105135:	0f b6 c0             	movzbl %al,%eax
  105138:	0f ba e1 09          	bt     $0x9,%ecx
  10513c:	89 03                	mov    %eax,(%ebx)
  10513e:	a1 b8 cc 12 00       	mov    0x12ccb8,%eax
  105143:	89 50 10             	mov    %edx,0x10(%eax)
  105146:	73 01                	jae    105149 <__IoApicSet+0x21>
  105148:	fb                   	sti
  105149:	5b                   	pop    %ebx
  10514a:	5d                   	pop    %ebp
  10514b:	c3                   	ret

0010514c <IoApicRedUpdateLo>:
  10514c:	55                   	push   %ebp
  10514d:	89 e5                	mov    %esp,%ebp
  10514f:	57                   	push   %edi
  105150:	56                   	push   %esi
  105151:	8d 74 00 10          	lea    0x10(%eax,%eax,1),%esi
  105155:	89 f0                	mov    %esi,%eax
  105157:	53                   	push   %ebx
  105158:	89 cf                	mov    %ecx,%edi
  10515a:	89 d3                	mov    %edx,%ebx
  10515c:	e8 a9 ff ff ff       	call   10510a <__IoApicGet>
  105161:	31 c3                	xor    %eax,%ebx
  105163:	89 da                	mov    %ebx,%edx
  105165:	5b                   	pop    %ebx
  105166:	21 fa                	and    %edi,%edx
  105168:	31 c2                	xor    %eax,%edx
  10516a:	89 f0                	mov    %esi,%eax
  10516c:	5e                   	pop    %esi
  10516d:	5f                   	pop    %edi
  10516e:	5d                   	pop    %ebp
  10516f:	e9 b4 ff ff ff       	jmp    105128 <__IoApicSet>

00105174 <ioapic_init>:
  105174:	55                   	push   %ebp
  105175:	89 e5                	mov    %esp,%ebp
  105177:	56                   	push   %esi
  105178:	53                   	push   %ebx
  105179:	be 11 00 00 00       	mov    $0x11,%esi
  10517e:	6a 0a                	push   $0xa
  105180:	68 00 10 00 00       	push   $0x1000
  105185:	68 00 00 c0 fe       	push   $0xfec00000
  10518a:	68 b8 cc 12 00       	push   $0x12ccb8
  10518f:	e8 e2 6f 00 00       	call   10c176 <k_mem_map_phys_bare>
  105194:	83 c4 10             	add    $0x10,%esp
  105197:	b8 01 00 00 00       	mov    $0x1,%eax
  10519c:	e8 69 ff ff ff       	call   10510a <__IoApicGet>
  1051a1:	c1 e8 10             	shr    $0x10,%eax
  1051a4:	0f b6 c0             	movzbl %al,%eax
  1051a7:	8d 50 01             	lea    0x1(%eax),%edx
  1051aa:	01 c0                	add    %eax,%eax
  1051ac:	89 15 b4 cc 12 00    	mov    %edx,0x12ccb4
  1051b2:	8d 58 13             	lea    0x13(%eax),%ebx
  1051b5:	89 f0                	mov    %esi,%eax
  1051b7:	ba 00 00 00 ff       	mov    $0xff000000,%edx
  1051bc:	e8 67 ff ff ff       	call   105128 <__IoApicSet>
  1051c1:	8d 46 ff             	lea    -0x1(%esi),%eax
  1051c4:	ba 00 08 01 00       	mov    $0x10800,%edx
  1051c9:	83 c6 02             	add    $0x2,%esi
  1051cc:	e8 57 ff ff ff       	call   105128 <__IoApicSet>
  1051d1:	39 f3                	cmp    %esi,%ebx
  1051d3:	75 e0                	jne    1051b5 <ioapic_init+0x41>
  1051d5:	8d 65 f8             	lea    -0x8(%ebp),%esp
  1051d8:	31 c0                	xor    %eax,%eax
  1051da:	5b                   	pop    %ebx
  1051db:	5e                   	pop    %esi
  1051dc:	5d                   	pop    %ebp
  1051dd:	c3                   	ret

001051de <z_ioapic_num_rtes>:
  1051de:	a1 b4 cc 12 00       	mov    0x12ccb4,%eax
  1051e3:	c3                   	ret

001051e4 <z_ioapic_irq_enable>:
  1051e4:	55                   	push   %ebp
  1051e5:	b9 00 00 01 00       	mov    $0x10000,%ecx
  1051ea:	89 e5                	mov    %esp,%ebp
  1051ec:	31 d2                	xor    %edx,%edx
  1051ee:	8b 45 08             	mov    0x8(%ebp),%eax
  1051f1:	5d                   	pop    %ebp
  1051f2:	e9 55 ff ff ff       	jmp    10514c <IoApicRedUpdateLo>

001051f7 <z_ioapic_irq_set>:
  1051f7:	55                   	push   %ebp
  1051f8:	ba 00 00 00 ff       	mov    $0xff000000,%edx
  1051fd:	89 e5                	mov    %esp,%ebp
  1051ff:	57                   	push   %edi
  105200:	56                   	push   %esi
  105201:	53                   	push   %ebx
  105202:	8b 5d 08             	mov    0x8(%ebp),%ebx
  105205:	8b 75 0c             	mov    0xc(%ebp),%esi
  105208:	01 db                	add    %ebx,%ebx
  10520a:	8b 7d 10             	mov    0x10(%ebp),%edi
  10520d:	8d 43 11             	lea    0x11(%ebx),%eax
  105210:	e8 13 ff ff ff       	call   105128 <__IoApicSet>
  105215:	89 f0                	mov    %esi,%eax
  105217:	0f b6 d0             	movzbl %al,%edx
  10521a:	8d 43 10             	lea    0x10(%ebx),%eax
  10521d:	5b                   	pop    %ebx
  10521e:	09 fa                	or     %edi,%edx
  105220:	5e                   	pop    %esi
  105221:	5f                   	pop    %edi
  105222:	81 ca 00 08 01 00    	or     $0x10800,%edx
  105228:	5d                   	pop    %ebp
  105229:	e9 fa fe ff ff       	jmp    105128 <__IoApicSet>

0010522e <loapic_init>:
  10522e:	31 c0                	xor    %eax,%eax
  105230:	c3                   	ret

00105231 <z_loapic_enable>:
  105231:	55                   	push   %ebp
  105232:	89 e5                	mov    %esp,%ebp
  105234:	53                   	push   %ebx
  105235:	8b 5d 08             	mov    0x8(%ebp),%ebx
  105238:	6a 0a                	push   $0xa
  10523a:	68 00 10 00 00       	push   $0x1000
  10523f:	68 00 00 e0 fe       	push   $0xfee00000
  105244:	68 bc cc 12 00       	push   $0x12ccbc
  105249:	e8 28 6f 00 00       	call   10c176 <k_mem_map_phys_bare>
  10524e:	8d 4b 18             	lea    0x18(%ebx),%ecx
  105251:	b8 01 00 00 00       	mov    $0x1,%eax
  105256:	83 c4 10             	add    $0x10,%esp
  105259:	8b 1d bc cc 12 00    	mov    0x12ccbc,%ebx
  10525f:	d3 e0                	shl    %cl,%eax
  105261:	89 83 d0 00 00 00    	mov    %eax,0xd0(%ebx)
  105267:	a1 bc cc 12 00       	mov    0x12ccbc,%eax
  10526c:	05 f0 00 00 00       	add    $0xf0,%eax
  105271:	8b 00                	mov    (%eax),%eax
  105273:	8b 1d bc cc 12 00    	mov    0x12ccbc,%ebx
  105279:	80 cc 01             	or     $0x1,%ah
  10527c:	89 83 f0 00 00 00    	mov    %eax,0xf0(%ebx)
  105282:	a1 bc cc 12 00       	mov    0x12ccbc,%eax
  105287:	8b 50 30             	mov    0x30(%eax),%edx
  10528a:	a1 bc cc 12 00       	mov    0x12ccbc,%eax
  10528f:	83 c9 ff             	or     $0xffffffff,%ecx
  105292:	c1 ea 10             	shr    $0x10,%edx
  105295:	89 88 e0 00 00 00    	mov    %ecx,0xe0(%eax)
  10529b:	a1 bc cc 12 00       	mov    0x12ccbc,%eax
  1052a0:	8d 88 80 00 00 00    	lea    0x80(%eax),%ecx
  1052a6:	31 c0                	xor    %eax,%eax
  1052a8:	89 01                	mov    %eax,(%ecx)
  1052aa:	8b 1d bc cc 12 00    	mov    0x12ccbc,%ebx
  1052b0:	89 83 e0 03 00 00    	mov    %eax,0x3e0(%ebx)
  1052b6:	8b 1d bc cc 12 00    	mov    0x12ccbc,%ebx
  1052bc:	89 83 80 03 00 00    	mov    %eax,0x380(%ebx)
  1052c2:	a1 bc cc 12 00       	mov    0x12ccbc,%eax
  1052c7:	05 50 03 00 00       	add    $0x350,%eax
  1052cc:	8b 00                	mov    (%eax),%eax
  1052ce:	25 ff 58 fe ff       	and    $0xfffe58ff,%eax
  1052d3:	8b 1d bc cc 12 00    	mov    0x12ccbc,%ebx
  1052d9:	80 cc 07             	or     $0x7,%ah
  1052dc:	89 83 50 03 00 00    	mov    %eax,0x350(%ebx)
  1052e2:	a1 bc cc 12 00       	mov    0x12ccbc,%eax
  1052e7:	05 60 03 00 00       	add    $0x360,%eax
  1052ec:	8b 00                	mov    (%eax),%eax
  1052ee:	25 ff 58 fe ff       	and    $0xfffe58ff,%eax
  1052f3:	8b 1d bc cc 12 00    	mov    0x12ccbc,%ebx
  1052f9:	80 cc 04             	or     $0x4,%ah
  1052fc:	89 83 60 03 00 00    	mov    %eax,0x360(%ebx)
  105302:	a1 bc cc 12 00       	mov    0x12ccbc,%eax
  105307:	8d 88 20 03 00 00    	lea    0x320(%eax),%ecx
  10530d:	b8 00 00 01 00       	mov    $0x10000,%eax
  105312:	89 01                	mov    %eax,(%ecx)
  105314:	8b 1d bc cc 12 00    	mov    0x12ccbc,%ebx
  10531a:	89 83 70 03 00 00    	mov    %eax,0x370(%ebx)
  105320:	f6 c2 fc             	test   $0xfc,%dl
  105323:	74 1d                	je     105342 <z_loapic_enable+0x111>
  105325:	8b 1d bc cc 12 00    	mov    0x12ccbc,%ebx
  10532b:	89 83 40 03 00 00    	mov    %eax,0x340(%ebx)
  105331:	80 fa 04             	cmp    $0x4,%dl
  105334:	76 0c                	jbe    105342 <z_loapic_enable+0x111>
  105336:	8b 15 bc cc 12 00    	mov    0x12ccbc,%edx
  10533c:	89 82 30 03 00 00    	mov    %eax,0x330(%edx)
  105342:	a1 bc cc 12 00       	mov    0x12ccbc,%eax
  105347:	31 d2                	xor    %edx,%edx
  105349:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
  10534f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  105352:	c9                   	leave
  105353:	c3                   	ret

00105354 <z_loapic_irq_base>:
  105354:	e9 85 fe ff ff       	jmp    1051de <z_ioapic_num_rtes>

00105359 <z_loapic_int_vec_set>:
  105359:	55                   	push   %ebp
  10535a:	89 e5                	mov    %esp,%ebp
  10535c:	9c                   	pushf
  10535d:	fa                   	cli
  10535e:	59                   	pop    %ecx
  10535f:	8b 45 08             	mov    0x8(%ebp),%eax
  105362:	8b 15 bc cc 12 00    	mov    0x12ccbc,%edx
  105368:	83 c0 32             	add    $0x32,%eax
  10536b:	c1 e0 04             	shl    $0x4,%eax
  10536e:	01 c2                	add    %eax,%edx
  105370:	8b 12                	mov    (%edx),%edx
  105372:	30 d2                	xor    %dl,%dl
  105374:	03 05 bc cc 12 00    	add    0x12ccbc,%eax
  10537a:	0b 55 0c             	or     0xc(%ebp),%edx
  10537d:	89 10                	mov    %edx,(%eax)
  10537f:	0f ba e1 09          	bt     $0x9,%ecx
  105383:	73 01                	jae    105386 <z_loapic_int_vec_set+0x2d>
  105385:	fb                   	sti
  105386:	5d                   	pop    %ebp
  105387:	c3                   	ret

00105388 <z_loapic_irq_enable>:
  105388:	55                   	push   %ebp
  105389:	89 e5                	mov    %esp,%ebp
  10538b:	9c                   	pushf
  10538c:	fa                   	cli
  10538d:	59                   	pop    %ecx
  10538e:	8b 45 08             	mov    0x8(%ebp),%eax
  105391:	8b 15 bc cc 12 00    	mov    0x12ccbc,%edx
  105397:	83 c0 32             	add    $0x32,%eax
  10539a:	c1 e0 04             	shl    $0x4,%eax
  10539d:	01 c2                	add    %eax,%edx
  10539f:	8b 12                	mov    (%edx),%edx
  1053a1:	03 05 bc cc 12 00    	add    0x12ccbc,%eax
  1053a7:	81 e2 ff ff fe ff    	and    $0xfffeffff,%edx
  1053ad:	89 10                	mov    %edx,(%eax)
  1053af:	0f ba e1 09          	bt     $0x9,%ecx
  1053b3:	73 01                	jae    1053b6 <z_loapic_irq_enable+0x2e>
  1053b5:	fb                   	sti
  1053b6:	5d                   	pop    %ebp
  1053b7:	c3                   	ret

001053b8 <z_irq_controller_isr_vector_get>:
  1053b8:	b8 07 00 00 00       	mov    $0x7,%eax
  1053bd:	89 c1                	mov    %eax,%ecx
  1053bf:	8b 15 bc cc 12 00    	mov    0x12ccbc,%edx
  1053c5:	c1 e1 04             	shl    $0x4,%ecx
  1053c8:	8d 94 11 00 01 00 00 	lea    0x100(%ecx,%edx,1),%edx
  1053cf:	8b 12                	mov    (%edx),%edx
  1053d1:	85 d2                	test   %edx,%edx
  1053d3:	74 09                	je     1053de <z_irq_controller_isr_vector_get+0x26>
  1053d5:	c1 e0 05             	shl    $0x5,%eax
  1053d8:	0f bd d2             	bsr    %edx,%edx
  1053db:	01 d0                	add    %edx,%eax
  1053dd:	c3                   	ret
  1053de:	48                   	dec    %eax
  1053df:	75 dc                	jne    1053bd <z_irq_controller_isr_vector_get+0x5>
  1053e1:	83 c8 ff             	or     $0xffffffff,%eax
  1053e4:	c3                   	ret

001053e5 <z_irq_controller_irq_config>:
  1053e5:	55                   	push   %ebp
  1053e6:	89 e5                	mov    %esp,%ebp
  1053e8:	57                   	push   %edi
  1053e9:	56                   	push   %esi
  1053ea:	53                   	push   %ebx
  1053eb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  1053ee:	8b 75 08             	mov    0x8(%ebp),%esi
  1053f1:	8b 7d 10             	mov    0x10(%ebp),%edi
  1053f4:	e8 5b ff ff ff       	call   105354 <z_loapic_irq_base>
  1053f9:	83 c0 05             	add    $0x5,%eax
  1053fc:	39 d8                	cmp    %ebx,%eax
  1053fe:	73 36                	jae    105436 <z_irq_controller_irq_config+0x51>
  105400:	6a 31                	push   $0x31
  105402:	68 41 1f 11 00       	push   $0x111f41
  105407:	68 84 1f 11 00       	push   $0x111f84
  10540c:	68 ee 10 11 00       	push   $0x1110ee
  105411:	e8 c7 c1 ff ff       	call   1015dd <assert_print>
  105416:	83 c4 10             	add    $0x10,%esp
  105419:	68 ab 1f 11 00       	push   $0x111fab
  10541e:	e8 ba c1 ff ff       	call   1015dd <assert_print>
  105423:	c7 04 24 31 00 00 00 	movl   $0x31,(%esp)
  10542a:	68 41 1f 11 00       	push   $0x111f41
  10542f:	e8 9a c1 ff ff       	call   1015ce <assert_post_action>
  105434:	58                   	pop    %eax
  105435:	5a                   	pop    %edx
  105436:	e8 19 ff ff ff       	call   105354 <z_loapic_irq_base>
  10543b:	39 c3                	cmp    %eax,%ebx
  10543d:	73 15                	jae    105454 <z_irq_controller_irq_config+0x6f>
  10543f:	89 7d 10             	mov    %edi,0x10(%ebp)
  105442:	89 75 0c             	mov    %esi,0xc(%ebp)
  105445:	89 5d 08             	mov    %ebx,0x8(%ebp)
  105448:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10544b:	5b                   	pop    %ebx
  10544c:	5e                   	pop    %esi
  10544d:	5f                   	pop    %edi
  10544e:	5d                   	pop    %ebp
  10544f:	e9 a3 fd ff ff       	jmp    1051f7 <z_ioapic_irq_set>
  105454:	e8 fb fe ff ff       	call   105354 <z_loapic_irq_base>
  105459:	89 75 0c             	mov    %esi,0xc(%ebp)
  10545c:	29 c3                	sub    %eax,%ebx
  10545e:	89 5d 08             	mov    %ebx,0x8(%ebp)
  105461:	8d 65 f4             	lea    -0xc(%ebp),%esp
  105464:	5b                   	pop    %ebx
  105465:	5e                   	pop    %esi
  105466:	5f                   	pop    %edi
  105467:	5d                   	pop    %ebp
  105468:	e9 ec fe ff ff       	jmp    105359 <z_loapic_int_vec_set>

0010546d <arch_irq_enable>:
  10546d:	55                   	push   %ebp
  10546e:	89 e5                	mov    %esp,%ebp
  105470:	53                   	push   %ebx
  105471:	8b 5d 08             	mov    0x8(%ebp),%ebx
  105474:	e8 db fe ff ff       	call   105354 <z_loapic_irq_base>
  105479:	39 c3                	cmp    %eax,%ebx
  10547b:	73 0a                	jae    105487 <arch_irq_enable+0x1a>
  10547d:	89 5d 08             	mov    %ebx,0x8(%ebp)
  105480:	5b                   	pop    %ebx
  105481:	5d                   	pop    %ebp
  105482:	e9 5d fd ff ff       	jmp    1051e4 <z_ioapic_irq_enable>
  105487:	e8 c8 fe ff ff       	call   105354 <z_loapic_irq_base>
  10548c:	29 c3                	sub    %eax,%ebx
  10548e:	89 5d 08             	mov    %ebx,0x8(%ebp)
  105491:	5b                   	pop    %ebx
  105492:	5d                   	pop    %ebp
  105493:	e9 f0 fe ff ff       	jmp    105388 <z_loapic_irq_enable>

00105498 <uart_console_init>:
  105498:	55                   	push   %ebp
  105499:	89 e5                	mov    %esp,%ebp
  10549b:	68 9c 00 11 00       	push   $0x11009c
  1054a0:	e8 fb 10 00 00       	call   1065a0 <z_impl_device_is_ready>
  1054a5:	5a                   	pop    %edx
  1054a6:	88 c2                	mov    %al,%dl
  1054a8:	84 d2                	test   %dl,%dl
  1054aa:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  1054af:	74 19                	je     1054ca <uart_console_init+0x32>
  1054b1:	68 cc 54 10 00       	push   $0x1054cc
  1054b6:	e8 6d ee ff ff       	call   104328 <__stdout_hook_install>
  1054bb:	c7 04 24 cc 54 10 00 	movl   $0x1054cc,(%esp)
  1054c2:	e8 1d bf ff ff       	call   1013e4 <__printk_hook_install>
  1054c7:	58                   	pop    %eax
  1054c8:	31 c0                	xor    %eax,%eax
  1054ca:	c9                   	leave
  1054cb:	c3                   	ret

001054cc <console_out>:
  1054cc:	55                   	push   %ebp
  1054cd:	89 e5                	mov    %esp,%ebp
  1054cf:	53                   	push   %ebx
  1054d0:	8b 1d a4 00 11 00    	mov    0x1100a4,%ebx
  1054d6:	83 7d 08 0a          	cmpl   $0xa,0x8(%ebp)
  1054da:	75 0c                	jne    1054e8 <console_out+0x1c>
  1054dc:	6a 0d                	push   $0xd
  1054de:	68 9c 00 11 00       	push   $0x11009c
  1054e3:	ff 53 04             	call   *0x4(%ebx)
  1054e6:	59                   	pop    %ecx
  1054e7:	58                   	pop    %eax
  1054e8:	0f b6 45 08          	movzbl 0x8(%ebp),%eax
  1054ec:	50                   	push   %eax
  1054ed:	68 9c 00 11 00       	push   $0x11009c
  1054f2:	ff 53 04             	call   *0x4(%ebx)
  1054f5:	58                   	pop    %eax
  1054f6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1054f9:	8b 45 08             	mov    0x8(%ebp),%eax
  1054fc:	5a                   	pop    %edx
  1054fd:	c9                   	leave
  1054fe:	c3                   	ret

001054ff <get_port>:
  1054ff:	8b 50 04             	mov    0x4(%eax),%edx
  105502:	80 7a 15 00          	cmpb   $0x0,0x15(%edx)
  105506:	74 03                	je     10550b <get_port+0xc>
  105508:	8b 02                	mov    (%edx),%eax
  10550a:	c3                   	ret
  10550b:	8b 40 10             	mov    0x10(%eax),%eax
  10550e:	8b 00                	mov    (%eax),%eax
  105510:	c3                   	ret

00105511 <uart_ns16550_config_get>:
  105511:	55                   	push   %ebp
  105512:	89 e5                	mov    %esp,%ebp
  105514:	8b 55 08             	mov    0x8(%ebp),%edx
  105517:	8b 45 0c             	mov    0xc(%ebp),%eax
  10551a:	8b 52 10             	mov    0x10(%edx),%edx
  10551d:	8b 4a 04             	mov    0x4(%edx),%ecx
  105520:	89 08                	mov    %ecx,(%eax)
  105522:	8a 4a 08             	mov    0x8(%edx),%cl
  105525:	88 48 04             	mov    %cl,0x4(%eax)
  105528:	8a 4a 09             	mov    0x9(%edx),%cl
  10552b:	88 48 05             	mov    %cl,0x5(%eax)
  10552e:	8a 4a 0a             	mov    0xa(%edx),%cl
  105531:	88 48 06             	mov    %cl,0x6(%eax)
  105534:	8a 52 0b             	mov    0xb(%edx),%dl
  105537:	88 50 07             	mov    %dl,0x7(%eax)
  10553a:	31 c0                	xor    %eax,%eax
  10553c:	5d                   	pop    %ebp
  10553d:	c3                   	ret

0010553e <ns16550_outbyte.isra.0>:
  10553e:	55                   	push   %ebp
  10553f:	89 e5                	mov    %esp,%ebp
  105541:	53                   	push   %ebx
  105542:	88 c3                	mov    %al,%bl
  105544:	88 c8                	mov    %cl,%al
  105546:	84 db                	test   %bl,%bl
  105548:	74 03                	je     10554d <ns16550_outbyte.isra.0+0xf>
  10554a:	ee                   	out    %al,(%dx)
  10554b:	eb 02                	jmp    10554f <ns16550_outbyte.isra.0+0x11>
  10554d:	88 0a                	mov    %cl,(%edx)
  10554f:	5b                   	pop    %ebx
  105550:	5d                   	pop    %ebp
  105551:	c3                   	ret

00105552 <uart_ns16550_poll_in>:
  105552:	55                   	push   %ebp
  105553:	89 e5                	mov    %esp,%ebp
  105555:	57                   	push   %edi
  105556:	56                   	push   %esi
  105557:	53                   	push   %ebx
  105558:	83 ec 08             	sub    $0x8,%esp
  10555b:	8b 75 08             	mov    0x8(%ebp),%esi
  10555e:	8b 46 10             	mov    0x10(%esi),%eax
  105561:	8b 7e 04             	mov    0x4(%esi),%edi
  105564:	8d 58 0c             	lea    0xc(%eax),%ebx
  105567:	9c                   	pushf
  105568:	fa                   	cli
  105569:	8f 45 f0             	pop    -0x10(%ebp)
  10556c:	53                   	push   %ebx
  10556d:	e8 7d 57 00 00       	call   10acef <z_spin_lock_valid>
  105572:	5a                   	pop    %edx
  105573:	84 c0                	test   %al,%al
  105575:	75 33                	jne    1055aa <uart_ns16550_poll_in+0x58>
  105577:	68 88 00 00 00       	push   $0x88
  10557c:	68 61 13 11 00       	push   $0x111361
  105581:	68 8e 13 11 00       	push   $0x11138e
  105586:	68 ee 10 11 00       	push   $0x1110ee
  10558b:	e8 4d c0 ff ff       	call   1015dd <assert_print>
  105590:	83 c4 10             	add    $0x10,%esp
  105593:	53                   	push   %ebx
  105594:	68 a3 13 11 00       	push   $0x1113a3
  105599:	e8 3f c0 ff ff       	call   1015dd <assert_print>
  10559e:	58                   	pop    %eax
  10559f:	5a                   	pop    %edx
  1055a0:	68 88 00 00 00       	push   $0x88
  1055a5:	e9 86 00 00 00       	jmp    105630 <uart_ns16550_poll_in+0xde>
  1055aa:	53                   	push   %ebx
  1055ab:	e8 97 57 00 00       	call   10ad47 <z_spin_lock_set_owner>
  1055b0:	58                   	pop    %eax
  1055b1:	89 f0                	mov    %esi,%eax
  1055b3:	e8 47 ff ff ff       	call   1054ff <get_port>
  1055b8:	8b 56 04             	mov    0x4(%esi),%edx
  1055bb:	0f b6 52 14          	movzbl 0x14(%edx),%edx
  1055bf:	8d 14 92             	lea    (%edx,%edx,4),%edx
  1055c2:	01 c2                	add    %eax,%edx
  1055c4:	80 7f 15 00          	cmpb   $0x0,0x15(%edi)
  1055c8:	74 03                	je     1055cd <uart_ns16550_poll_in+0x7b>
  1055ca:	ec                   	in     (%dx),%al
  1055cb:	eb 02                	jmp    1055cf <uart_ns16550_poll_in+0x7d>
  1055cd:	8a 02                	mov    (%edx),%al
  1055cf:	83 ca ff             	or     $0xffffffff,%edx
  1055d2:	a8 01                	test   $0x1,%al
  1055d4:	74 1b                	je     1055f1 <uart_ns16550_poll_in+0x9f>
  1055d6:	89 f0                	mov    %esi,%eax
  1055d8:	e8 22 ff ff ff       	call   1054ff <get_port>
  1055dd:	80 7f 15 00          	cmpb   $0x0,0x15(%edi)
  1055e1:	89 c2                	mov    %eax,%edx
  1055e3:	74 03                	je     1055e8 <uart_ns16550_poll_in+0x96>
  1055e5:	ec                   	in     (%dx),%al
  1055e6:	eb 02                	jmp    1055ea <uart_ns16550_poll_in+0x98>
  1055e8:	8a 00                	mov    (%eax),%al
  1055ea:	8b 55 0c             	mov    0xc(%ebp),%edx
  1055ed:	88 02                	mov    %al,(%edx)
  1055ef:	31 d2                	xor    %edx,%edx
  1055f1:	89 55 ec             	mov    %edx,-0x14(%ebp)
  1055f4:	53                   	push   %ebx
  1055f5:	e8 16 57 00 00       	call   10ad10 <z_spin_unlock_valid>
  1055fa:	5e                   	pop    %esi
  1055fb:	84 c0                	test   %al,%al
  1055fd:	8b 55 ec             	mov    -0x14(%ebp),%edx
  105600:	75 3a                	jne    10563c <uart_ns16550_poll_in+0xea>
  105602:	68 31 01 00 00       	push   $0x131
  105607:	68 61 13 11 00       	push   $0x111361
  10560c:	68 e8 13 11 00       	push   $0x1113e8
  105611:	68 ee 10 11 00       	push   $0x1110ee
  105616:	e8 c2 bf ff ff       	call   1015dd <assert_print>
  10561b:	83 c4 10             	add    $0x10,%esp
  10561e:	53                   	push   %ebx
  10561f:	68 ff 13 11 00       	push   $0x1113ff
  105624:	e8 b4 bf ff ff       	call   1015dd <assert_print>
  105629:	59                   	pop    %ecx
  10562a:	5b                   	pop    %ebx
  10562b:	68 31 01 00 00       	push   $0x131
  105630:	68 61 13 11 00       	push   $0x111361
  105635:	e8 94 bf ff ff       	call   1015ce <assert_post_action>
  10563a:	58                   	pop    %eax
  10563b:	5a                   	pop    %edx
  10563c:	0f ba 65 f0 09       	btl    $0x9,-0x10(%ebp)
  105641:	73 01                	jae    105644 <uart_ns16550_poll_in+0xf2>
  105643:	fb                   	sti
  105644:	8d 65 f4             	lea    -0xc(%ebp),%esp
  105647:	89 d0                	mov    %edx,%eax
  105649:	5b                   	pop    %ebx
  10564a:	5e                   	pop    %esi
  10564b:	5f                   	pop    %edi
  10564c:	5d                   	pop    %ebp
  10564d:	c3                   	ret

0010564e <uart_ns16550_poll_out>:
  10564e:	55                   	push   %ebp
  10564f:	89 e5                	mov    %esp,%ebp
  105651:	57                   	push   %edi
  105652:	56                   	push   %esi
  105653:	53                   	push   %ebx
  105654:	83 ec 08             	sub    $0x8,%esp
  105657:	8b 75 08             	mov    0x8(%ebp),%esi
  10565a:	8b 45 0c             	mov    0xc(%ebp),%eax
  10565d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  105660:	8b 46 10             	mov    0x10(%esi),%eax
  105663:	8b 7e 04             	mov    0x4(%esi),%edi
  105666:	8d 58 0c             	lea    0xc(%eax),%ebx
  105669:	9c                   	pushf
  10566a:	fa                   	cli
  10566b:	8f 45 ec             	pop    -0x14(%ebp)
  10566e:	53                   	push   %ebx
  10566f:	e8 7b 56 00 00       	call   10acef <z_spin_lock_valid>
  105674:	5a                   	pop    %edx
  105675:	84 c0                	test   %al,%al
  105677:	75 30                	jne    1056a9 <uart_ns16550_poll_out+0x5b>
  105679:	68 88 00 00 00       	push   $0x88
  10567e:	68 61 13 11 00       	push   $0x111361
  105683:	68 8e 13 11 00       	push   $0x11138e
  105688:	68 ee 10 11 00       	push   $0x1110ee
  10568d:	e8 4b bf ff ff       	call   1015dd <assert_print>
  105692:	83 c4 10             	add    $0x10,%esp
  105695:	53                   	push   %ebx
  105696:	68 a3 13 11 00       	push   $0x1113a3
  10569b:	e8 3d bf ff ff       	call   1015dd <assert_print>
  1056a0:	58                   	pop    %eax
  1056a1:	5a                   	pop    %edx
  1056a2:	68 88 00 00 00       	push   $0x88
  1056a7:	eb 77                	jmp    105720 <uart_ns16550_poll_out+0xd2>
  1056a9:	53                   	push   %ebx
  1056aa:	e8 98 56 00 00       	call   10ad47 <z_spin_lock_set_owner>
  1056af:	58                   	pop    %eax
  1056b0:	89 f0                	mov    %esi,%eax
  1056b2:	e8 48 fe ff ff       	call   1054ff <get_port>
  1056b7:	8b 56 04             	mov    0x4(%esi),%edx
  1056ba:	0f b6 52 14          	movzbl 0x14(%edx),%edx
  1056be:	8d 14 92             	lea    (%edx,%edx,4),%edx
  1056c1:	01 c2                	add    %eax,%edx
  1056c3:	80 7f 15 00          	cmpb   $0x0,0x15(%edi)
  1056c7:	74 03                	je     1056cc <uart_ns16550_poll_out+0x7e>
  1056c9:	ec                   	in     (%dx),%al
  1056ca:	eb 02                	jmp    1056ce <uart_ns16550_poll_out+0x80>
  1056cc:	8a 02                	mov    (%edx),%al
  1056ce:	a8 20                	test   $0x20,%al
  1056d0:	74 de                	je     1056b0 <uart_ns16550_poll_out+0x62>
  1056d2:	89 f0                	mov    %esi,%eax
  1056d4:	e8 26 fe ff ff       	call   1054ff <get_port>
  1056d9:	0f b6 4d f0          	movzbl -0x10(%ebp),%ecx
  1056dd:	89 c2                	mov    %eax,%edx
  1056df:	8a 47 15             	mov    0x15(%edi),%al
  1056e2:	e8 57 fe ff ff       	call   10553e <ns16550_outbyte.isra.0>
  1056e7:	53                   	push   %ebx
  1056e8:	e8 23 56 00 00       	call   10ad10 <z_spin_unlock_valid>
  1056ed:	5e                   	pop    %esi
  1056ee:	84 c0                	test   %al,%al
  1056f0:	75 3a                	jne    10572c <uart_ns16550_poll_out+0xde>
  1056f2:	68 31 01 00 00       	push   $0x131
  1056f7:	68 61 13 11 00       	push   $0x111361
  1056fc:	68 e8 13 11 00       	push   $0x1113e8
  105701:	68 ee 10 11 00       	push   $0x1110ee
  105706:	e8 d2 be ff ff       	call   1015dd <assert_print>
  10570b:	83 c4 10             	add    $0x10,%esp
  10570e:	53                   	push   %ebx
  10570f:	68 ff 13 11 00       	push   $0x1113ff
  105714:	e8 c4 be ff ff       	call   1015dd <assert_print>
  105719:	59                   	pop    %ecx
  10571a:	5b                   	pop    %ebx
  10571b:	68 31 01 00 00       	push   $0x131
  105720:	68 61 13 11 00       	push   $0x111361
  105725:	e8 a4 be ff ff       	call   1015ce <assert_post_action>
  10572a:	58                   	pop    %eax
  10572b:	5a                   	pop    %edx
  10572c:	0f ba 65 ec 09       	btl    $0x9,-0x14(%ebp)
  105731:	73 01                	jae    105734 <uart_ns16550_poll_out+0xe6>
  105733:	fb                   	sti
  105734:	8d 65 f4             	lea    -0xc(%ebp),%esp
  105737:	5b                   	pop    %ebx
  105738:	5e                   	pop    %esi
  105739:	5f                   	pop    %edi
  10573a:	5d                   	pop    %ebp
  10573b:	c3                   	ret

0010573c <uart_ns16550_err_check>:
  10573c:	55                   	push   %ebp
  10573d:	89 e5                	mov    %esp,%ebp
  10573f:	57                   	push   %edi
  105740:	56                   	push   %esi
  105741:	53                   	push   %ebx
  105742:	51                   	push   %ecx
  105743:	8b 75 08             	mov    0x8(%ebp),%esi
  105746:	8b 46 10             	mov    0x10(%esi),%eax
  105749:	8b 7e 04             	mov    0x4(%esi),%edi
  10574c:	8d 58 0c             	lea    0xc(%eax),%ebx
  10574f:	9c                   	pushf
  105750:	fa                   	cli
  105751:	8f 45 f0             	pop    -0x10(%ebp)
  105754:	53                   	push   %ebx
  105755:	e8 95 55 00 00       	call   10acef <z_spin_lock_valid>
  10575a:	5a                   	pop    %edx
  10575b:	84 c0                	test   %al,%al
  10575d:	75 30                	jne    10578f <uart_ns16550_err_check+0x53>
  10575f:	68 88 00 00 00       	push   $0x88
  105764:	68 61 13 11 00       	push   $0x111361
  105769:	68 8e 13 11 00       	push   $0x11138e
  10576e:	68 ee 10 11 00       	push   $0x1110ee
  105773:	e8 65 be ff ff       	call   1015dd <assert_print>
  105778:	83 c4 10             	add    $0x10,%esp
  10577b:	53                   	push   %ebx
  10577c:	68 a3 13 11 00       	push   $0x1113a3
  105781:	e8 57 be ff ff       	call   1015dd <assert_print>
  105786:	58                   	pop    %eax
  105787:	5a                   	pop    %edx
  105788:	68 88 00 00 00       	push   $0x88
  10578d:	eb 63                	jmp    1057f2 <uart_ns16550_err_check+0xb6>
  10578f:	53                   	push   %ebx
  105790:	e8 b2 55 00 00       	call   10ad47 <z_spin_lock_set_owner>
  105795:	58                   	pop    %eax
  105796:	89 f0                	mov    %esi,%eax
  105798:	e8 62 fd ff ff       	call   1054ff <get_port>
  10579d:	8b 56 04             	mov    0x4(%esi),%edx
  1057a0:	0f b6 52 14          	movzbl 0x14(%edx),%edx
  1057a4:	8d 14 92             	lea    (%edx,%edx,4),%edx
  1057a7:	01 c2                	add    %eax,%edx
  1057a9:	80 7f 15 00          	cmpb   $0x0,0x15(%edi)
  1057ad:	74 03                	je     1057b2 <uart_ns16550_err_check+0x76>
  1057af:	ec                   	in     (%dx),%al
  1057b0:	eb 02                	jmp    1057b4 <uart_ns16550_err_check+0x78>
  1057b2:	8a 02                	mov    (%edx),%al
  1057b4:	89 c6                	mov    %eax,%esi
  1057b6:	53                   	push   %ebx
  1057b7:	e8 54 55 00 00       	call   10ad10 <z_spin_unlock_valid>
  1057bc:	83 e6 1e             	and    $0x1e,%esi
  1057bf:	5f                   	pop    %edi
  1057c0:	84 c0                	test   %al,%al
  1057c2:	75 3a                	jne    1057fe <uart_ns16550_err_check+0xc2>
  1057c4:	68 31 01 00 00       	push   $0x131
  1057c9:	68 61 13 11 00       	push   $0x111361
  1057ce:	68 e8 13 11 00       	push   $0x1113e8
  1057d3:	68 ee 10 11 00       	push   $0x1110ee
  1057d8:	e8 00 be ff ff       	call   1015dd <assert_print>
  1057dd:	83 c4 10             	add    $0x10,%esp
  1057e0:	53                   	push   %ebx
  1057e1:	68 ff 13 11 00       	push   $0x1113ff
  1057e6:	e8 f2 bd ff ff       	call   1015dd <assert_print>
  1057eb:	59                   	pop    %ecx
  1057ec:	5b                   	pop    %ebx
  1057ed:	68 31 01 00 00       	push   $0x131
  1057f2:	68 61 13 11 00       	push   $0x111361
  1057f7:	e8 d2 bd ff ff       	call   1015ce <assert_post_action>
  1057fc:	58                   	pop    %eax
  1057fd:	5a                   	pop    %edx
  1057fe:	0f ba 65 f0 09       	btl    $0x9,-0x10(%ebp)
  105803:	73 01                	jae    105806 <uart_ns16550_err_check+0xca>
  105805:	fb                   	sti
  105806:	8d 65 f4             	lea    -0xc(%ebp),%esp
  105809:	89 f0                	mov    %esi,%eax
  10580b:	d1 f8                	sar    $1,%eax
  10580d:	5b                   	pop    %ebx
  10580e:	5e                   	pop    %esi
  10580f:	5f                   	pop    %edi
  105810:	5d                   	pop    %ebp
  105811:	c3                   	ret

00105812 <uart_ns16550_configure>:
  105812:	55                   	push   %ebp
  105813:	31 c9                	xor    %ecx,%ecx
  105815:	89 e5                	mov    %esp,%ebp
  105817:	57                   	push   %edi
  105818:	56                   	push   %esi
  105819:	53                   	push   %ebx
  10581a:	83 ec 24             	sub    $0x24,%esp
  10581d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  105820:	8b 5d 08             	mov    0x8(%ebp),%ebx
  105823:	8b 43 10             	mov    0x10(%ebx),%eax
  105826:	8b 73 04             	mov    0x4(%ebx),%esi
  105829:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10582c:	83 c0 0c             	add    $0xc,%eax
  10582f:	89 45 ec             	mov    %eax,-0x14(%ebp)
  105832:	9c                   	pushf
  105833:	fa                   	cli
  105834:	8f 45 d0             	pop    -0x30(%ebp)
  105837:	ff 75 ec             	push   -0x14(%ebp)
  10583a:	e8 b0 54 00 00       	call   10acef <z_spin_lock_valid>
  10583f:	5f                   	pop    %edi
  105840:	84 c0                	test   %al,%al
  105842:	75 35                	jne    105879 <uart_ns16550_configure+0x67>
  105844:	68 88 00 00 00       	push   $0x88
  105849:	68 61 13 11 00       	push   $0x111361
  10584e:	68 8e 13 11 00       	push   $0x11138e
  105853:	68 ee 10 11 00       	push   $0x1110ee
  105858:	e8 80 bd ff ff       	call   1015dd <assert_print>
  10585d:	83 c4 10             	add    $0x10,%esp
  105860:	ff 75 ec             	push   -0x14(%ebp)
  105863:	68 a3 13 11 00       	push   $0x1113a3
  105868:	e8 70 bd ff ff       	call   1015dd <assert_print>
  10586d:	58                   	pop    %eax
  10586e:	5a                   	pop    %edx
  10586f:	68 88 00 00 00       	push   $0x88
  105874:	e9 80 02 00 00       	jmp    105af9 <uart_ns16550_configure+0x2e7>
  105879:	ff 75 ec             	push   -0x14(%ebp)
  10587c:	e8 c6 54 00 00       	call   10ad47 <z_spin_lock_set_owner>
  105881:	58                   	pop    %eax
  105882:	8b 46 08             	mov    0x8(%esi),%eax
  105885:	85 c0                	test   %eax,%eax
  105887:	74 05                	je     10588e <uart_ns16550_configure+0x7c>
  105889:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10588c:	eb 37                	jmp    1058c5 <uart_ns16550_configure+0xb3>
  10588e:	8b 46 0c             	mov    0xc(%esi),%eax
  105891:	50                   	push   %eax
  105892:	e8 09 0d 00 00       	call   1065a0 <z_impl_device_is_ready>
  105897:	5f                   	pop    %edi
  105898:	84 c0                	test   %al,%al
  10589a:	75 0a                	jne    1058a6 <uart_ns16550_configure+0x94>
  10589c:	bf ea ff ff ff       	mov    $0xffffffea,%edi
  1058a1:	e9 16 02 00 00       	jmp    105abc <uart_ns16550_configure+0x2aa>
  1058a6:	8b 56 0c             	mov    0xc(%esi),%edx
  1058a9:	8b 4e 10             	mov    0x10(%esi),%ecx
  1058ac:	8b 42 08             	mov    0x8(%edx),%eax
  1058af:	8b 40 0c             	mov    0xc(%eax),%eax
  1058b2:	85 c0                	test   %eax,%eax
  1058b4:	74 e6                	je     10589c <uart_ns16550_configure+0x8a>
  1058b6:	8d 7d f0             	lea    -0x10(%ebp),%edi
  1058b9:	57                   	push   %edi
  1058ba:	51                   	push   %ecx
  1058bb:	52                   	push   %edx
  1058bc:	ff d0                	call   *%eax
  1058be:	83 c4 0c             	add    $0xc,%esp
  1058c1:	85 c0                	test   %eax,%eax
  1058c3:	75 d7                	jne    10589c <uart_ns16550_configure+0x8a>
  1058c5:	8b 7d 0c             	mov    0xc(%ebp),%edi
  1058c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1058cb:	8b 3f                	mov    (%edi),%edi
  1058cd:	89 7d e8             	mov    %edi,-0x18(%ebp)
  1058d0:	85 ff                	test   %edi,%edi
  1058d2:	0f 84 c4 00 00 00    	je     10599c <uart_ns16550_configure+0x18a>
  1058d8:	85 c0                	test   %eax,%eax
  1058da:	0f 84 bc 00 00 00    	je     10599c <uart_ns16550_configure+0x18a>
  1058e0:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1058e3:	31 d2                	xor    %edx,%edx
  1058e5:	8b 7b 10             	mov    0x10(%ebx),%edi
  1058e8:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
  1058eb:	89 7d d8             	mov    %edi,-0x28(%ebp)
  1058ee:	f7 f1                	div    %ecx
  1058f0:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1058f3:	8b 7b 04             	mov    0x4(%ebx),%edi
  1058f6:	c1 e8 04             	shr    $0x4,%eax
  1058f9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1058fc:	89 d8                	mov    %ebx,%eax
  1058fe:	e8 fc fb ff ff       	call   1054ff <get_port>
  105903:	0f b6 57 14          	movzbl 0x14(%edi),%edx
  105907:	8d 14 52             	lea    (%edx,%edx,2),%edx
  10590a:	01 c2                	add    %eax,%edx
  10590c:	80 7f 15 00          	cmpb   $0x0,0x15(%edi)
  105910:	74 03                	je     105915 <uart_ns16550_configure+0x103>
  105912:	ec                   	in     (%dx),%al
  105913:	eb 02                	jmp    105917 <uart_ns16550_configure+0x105>
  105915:	8a 02                	mov    (%edx),%al
  105917:	88 45 e3             	mov    %al,-0x1d(%ebp)
  10591a:	89 d8                	mov    %ebx,%eax
  10591c:	e8 de fb ff ff       	call   1054ff <get_port>
  105921:	8b 53 04             	mov    0x4(%ebx),%edx
  105924:	0f b6 52 14          	movzbl 0x14(%edx),%edx
  105928:	8a 4d e3             	mov    -0x1d(%ebp),%cl
  10592b:	83 c9 80             	or     $0xffffff80,%ecx
  10592e:	8d 14 52             	lea    (%edx,%edx,2),%edx
  105931:	01 c2                	add    %eax,%edx
  105933:	8a 47 15             	mov    0x15(%edi),%al
  105936:	0f b6 c9             	movzbl %cl,%ecx
  105939:	e8 00 fc ff ff       	call   10553e <ns16550_outbyte.isra.0>
  10593e:	89 d8                	mov    %ebx,%eax
  105940:	e8 ba fb ff ff       	call   1054ff <get_port>
  105945:	0f b6 4d d4          	movzbl -0x2c(%ebp),%ecx
  105949:	89 c2                	mov    %eax,%edx
  10594b:	8a 47 15             	mov    0x15(%edi),%al
  10594e:	e8 eb fb ff ff       	call   10553e <ns16550_outbyte.isra.0>
  105953:	89 d8                	mov    %ebx,%eax
  105955:	e8 a5 fb ff ff       	call   1054ff <get_port>
  10595a:	8b 53 04             	mov    0x4(%ebx),%edx
  10595d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  105960:	0f b6 52 14          	movzbl 0x14(%edx),%edx
  105964:	c1 e9 0c             	shr    $0xc,%ecx
  105967:	01 c2                	add    %eax,%edx
  105969:	0f b6 c9             	movzbl %cl,%ecx
  10596c:	8a 47 15             	mov    0x15(%edi),%al
  10596f:	e8 ca fb ff ff       	call   10553e <ns16550_outbyte.isra.0>
  105974:	89 d8                	mov    %ebx,%eax
  105976:	e8 84 fb ff ff       	call   1054ff <get_port>
  10597b:	8b 53 04             	mov    0x4(%ebx),%edx
  10597e:	0f b6 52 14          	movzbl 0x14(%edx),%edx
  105982:	0f b6 4d e3          	movzbl -0x1d(%ebp),%ecx
  105986:	8d 14 52             	lea    (%edx,%edx,2),%edx
  105989:	01 c2                	add    %eax,%edx
  10598b:	8a 47 15             	mov    0x15(%edi),%al
  10598e:	e8 ab fb ff ff       	call   10553e <ns16550_outbyte.isra.0>
  105993:	8b 45 d8             	mov    -0x28(%ebp),%eax
  105996:	8b 7d e8             	mov    -0x18(%ebp),%edi
  105999:	89 78 04             	mov    %edi,0x4(%eax)
  10599c:	8b 45 0c             	mov    0xc(%ebp),%eax
  10599f:	bf 7a ff ff ff       	mov    $0xffffff7a,%edi
  1059a4:	8a 40 06             	mov    0x6(%eax),%al
  1059a7:	88 45 e8             	mov    %al,-0x18(%ebp)
  1059aa:	3c 03                	cmp    $0x3,%al
  1059ac:	0f 87 0a 01 00 00    	ja     105abc <uart_ns16550_configure+0x2aa>
  1059b2:	8b 45 0c             	mov    0xc(%ebp),%eax
  1059b5:	8a 40 05             	mov    0x5(%eax),%al
  1059b8:	3c 01                	cmp    $0x1,%al
  1059ba:	74 0b                	je     1059c7 <uart_ns16550_configure+0x1b5>
  1059bc:	b1 04                	mov    $0x4,%cl
  1059be:	3c 03                	cmp    $0x3,%al
  1059c0:	74 07                	je     1059c9 <uart_ns16550_configure+0x1b7>
  1059c2:	e9 f5 00 00 00       	jmp    105abc <uart_ns16550_configure+0x2aa>
  1059c7:	31 c9                	xor    %ecx,%ecx
  1059c9:	8b 45 0c             	mov    0xc(%ebp),%eax
  1059cc:	8a 50 04             	mov    0x4(%eax),%dl
  1059cf:	84 d2                	test   %dl,%dl
  1059d1:	74 10                	je     1059e3 <uart_ns16550_configure+0x1d1>
  1059d3:	bf 7a ff ff ff       	mov    $0xffffff7a,%edi
  1059d8:	80 fa 02             	cmp    $0x2,%dl
  1059db:	0f 85 db 00 00 00    	jne    105abc <uart_ns16550_configure+0x2aa>
  1059e1:	b2 10                	mov    $0x10,%dl
  1059e3:	8b 45 0c             	mov    0xc(%ebp),%eax
  1059e6:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  1059e9:	88 55 e3             	mov    %dl,-0x1d(%ebp)
  1059ec:	8b 50 04             	mov    0x4(%eax),%edx
  1059ef:	8b 00                	mov    (%eax),%eax
  1059f1:	89 47 04             	mov    %eax,0x4(%edi)
  1059f4:	89 57 08             	mov    %edx,0x8(%edi)
  1059f7:	89 d8                	mov    %ebx,%eax
  1059f9:	e8 01 fb ff ff       	call   1054ff <get_port>
  1059fe:	0b 4d e8             	or     -0x18(%ebp),%ecx
  105a01:	8a 55 e3             	mov    -0x1d(%ebp),%dl
  105a04:	09 d1                	or     %edx,%ecx
  105a06:	8b 53 04             	mov    0x4(%ebx),%edx
  105a09:	0f b6 c9             	movzbl %cl,%ecx
  105a0c:	0f b6 52 14          	movzbl 0x14(%edx),%edx
  105a10:	8d 14 52             	lea    (%edx,%edx,2),%edx
  105a13:	01 c2                	add    %eax,%edx
  105a15:	8a 46 15             	mov    0x15(%esi),%al
  105a18:	e8 21 fb ff ff       	call   10553e <ns16550_outbyte.isra.0>
  105a1d:	89 d8                	mov    %ebx,%eax
  105a1f:	e8 db fa ff ff       	call   1054ff <get_port>
  105a24:	8b 53 04             	mov    0x4(%ebx),%edx
  105a27:	0f b6 52 14          	movzbl 0x14(%edx),%edx
  105a2b:	b9 0b 00 00 00       	mov    $0xb,%ecx
  105a30:	8d 14 90             	lea    (%eax,%edx,4),%edx
  105a33:	8a 46 15             	mov    0x15(%esi),%al
  105a36:	e8 03 fb ff ff       	call   10553e <ns16550_outbyte.isra.0>
  105a3b:	89 d8                	mov    %ebx,%eax
  105a3d:	e8 bd fa ff ff       	call   1054ff <get_port>
  105a42:	8b 53 04             	mov    0x4(%ebx),%edx
  105a45:	0f b6 52 14          	movzbl 0x14(%edx),%edx
  105a49:	01 d2                	add    %edx,%edx
  105a4b:	b9 87 00 00 00       	mov    $0x87,%ecx
  105a50:	01 c2                	add    %eax,%edx
  105a52:	8a 46 15             	mov    0x15(%esi),%al
  105a55:	e8 e4 fa ff ff       	call   10553e <ns16550_outbyte.isra.0>
  105a5a:	89 d8                	mov    %ebx,%eax
  105a5c:	e8 9e fa ff ff       	call   1054ff <get_port>
  105a61:	8b 53 04             	mov    0x4(%ebx),%edx
  105a64:	0f b6 52 14          	movzbl 0x14(%edx),%edx
  105a68:	01 d2                	add    %edx,%edx
  105a6a:	01 c2                	add    %eax,%edx
  105a6c:	80 7e 15 00          	cmpb   $0x0,0x15(%esi)
  105a70:	74 03                	je     105a75 <uart_ns16550_configure+0x263>
  105a72:	ec                   	in     (%dx),%al
  105a73:	eb 02                	jmp    105a77 <uart_ns16550_configure+0x265>
  105a75:	8a 02                	mov    (%edx),%al
  105a77:	83 e0 c0             	and    $0xffffffc0,%eax
  105a7a:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  105a7d:	3c c0                	cmp    $0xc0,%al
  105a7f:	0f 94 c0             	sete   %al
  105a82:	48                   	dec    %eax
  105a83:	83 e0 f1             	and    $0xfffffff1,%eax
  105a86:	83 c0 10             	add    $0x10,%eax
  105a89:	88 47 10             	mov    %al,0x10(%edi)
  105a8c:	89 d8                	mov    %ebx,%eax
  105a8e:	e8 6c fa ff ff       	call   1054ff <get_port>
  105a93:	80 7e 15 00          	cmpb   $0x0,0x15(%esi)
  105a97:	89 c2                	mov    %eax,%edx
  105a99:	74 03                	je     105a9e <uart_ns16550_configure+0x28c>
  105a9b:	ec                   	in     (%dx),%al
  105a9c:	eb 02                	jmp    105aa0 <uart_ns16550_configure+0x28e>
  105a9e:	8a 02                	mov    (%edx),%al
  105aa0:	89 d8                	mov    %ebx,%eax
  105aa2:	31 c9                	xor    %ecx,%ecx
  105aa4:	e8 56 fa ff ff       	call   1054ff <get_port>
  105aa9:	8b 53 04             	mov    0x4(%ebx),%edx
  105aac:	0f b6 52 14          	movzbl 0x14(%edx),%edx
  105ab0:	01 c2                	add    %eax,%edx
  105ab2:	8a 46 15             	mov    0x15(%esi),%al
  105ab5:	e8 84 fa ff ff       	call   10553e <ns16550_outbyte.isra.0>
  105aba:	31 ff                	xor    %edi,%edi
  105abc:	ff 75 ec             	push   -0x14(%ebp)
  105abf:	e8 4c 52 00 00       	call   10ad10 <z_spin_unlock_valid>
  105ac4:	5e                   	pop    %esi
  105ac5:	84 c0                	test   %al,%al
  105ac7:	75 3c                	jne    105b05 <uart_ns16550_configure+0x2f3>
  105ac9:	68 31 01 00 00       	push   $0x131
  105ace:	68 61 13 11 00       	push   $0x111361
  105ad3:	68 e8 13 11 00       	push   $0x1113e8
  105ad8:	68 ee 10 11 00       	push   $0x1110ee
  105add:	e8 fb ba ff ff       	call   1015dd <assert_print>
  105ae2:	83 c4 10             	add    $0x10,%esp
  105ae5:	ff 75 ec             	push   -0x14(%ebp)
  105ae8:	68 ff 13 11 00       	push   $0x1113ff
  105aed:	e8 eb ba ff ff       	call   1015dd <assert_print>
  105af2:	59                   	pop    %ecx
  105af3:	5b                   	pop    %ebx
  105af4:	68 31 01 00 00       	push   $0x131
  105af9:	68 61 13 11 00       	push   $0x111361
  105afe:	e8 cb ba ff ff       	call   1015ce <assert_post_action>
  105b03:	58                   	pop    %eax
  105b04:	5a                   	pop    %edx
  105b05:	0f ba 65 d0 09       	btl    $0x9,-0x30(%ebp)
  105b0a:	73 01                	jae    105b0d <uart_ns16550_configure+0x2fb>
  105b0c:	fb                   	sti
  105b0d:	8d 65 f4             	lea    -0xc(%ebp),%esp
  105b10:	89 f8                	mov    %edi,%eax
  105b12:	5b                   	pop    %ebx
  105b13:	5e                   	pop    %esi
  105b14:	5f                   	pop    %edi
  105b15:	5d                   	pop    %ebp
  105b16:	c3                   	ret

00105b17 <uart_ns16550_init>:
  105b17:	55                   	push   %ebp
  105b18:	89 e5                	mov    %esp,%ebp
  105b1a:	56                   	push   %esi
  105b1b:	53                   	push   %ebx
  105b1c:	8b 75 08             	mov    0x8(%ebp),%esi
  105b1f:	8b 46 04             	mov    0x4(%esi),%eax
  105b22:	8b 5e 10             	mov    0x10(%esi),%ebx
  105b25:	80 78 15 00          	cmpb   $0x0,0x15(%eax)
  105b29:	75 10                	jne    105b3b <uart_ns16550_init+0x24>
  105b2b:	6a 0a                	push   $0xa
  105b2d:	ff 70 04             	push   0x4(%eax)
  105b30:	ff 30                	push   (%eax)
  105b32:	53                   	push   %ebx
  105b33:	e8 3e 66 00 00       	call   10c176 <k_mem_map_phys_bare>
  105b38:	83 c4 10             	add    $0x10,%esp
  105b3b:	83 c3 04             	add    $0x4,%ebx
  105b3e:	53                   	push   %ebx
  105b3f:	56                   	push   %esi
  105b40:	e8 cd fc ff ff       	call   105812 <uart_ns16550_configure>
  105b45:	5a                   	pop    %edx
  105b46:	59                   	pop    %ecx
  105b47:	8d 65 f8             	lea    -0x8(%ebp),%esp
  105b4a:	5b                   	pop    %ebx
  105b4b:	5e                   	pop    %esi
  105b4c:	5d                   	pop    %ebp
  105b4d:	c3                   	ret

00105b4e <k_object_validation_check.constprop.0>:
  105b4e:	55                   	push   %ebp
  105b4f:	89 e5                	mov    %esp,%ebp
  105b51:	57                   	push   %edi
  105b52:	56                   	push   %esi
  105b53:	89 d7                	mov    %edx,%edi
  105b55:	51                   	push   %ecx
  105b56:	89 c6                	mov    %eax,%esi
  105b58:	6a 00                	push   $0x0
  105b5a:	6a 15                	push   $0x15
  105b5c:	50                   	push   %eax
  105b5d:	e8 c9 7d 00 00       	call   10d92b <k_object_validate>
  105b62:	83 c4 0c             	add    $0xc,%esp
  105b65:	85 c0                	test   %eax,%eax
  105b67:	74 13                	je     105b7c <k_object_validation_check.constprop.0+0x2e>
  105b69:	6a 15                	push   $0x15
  105b6b:	56                   	push   %esi
  105b6c:	57                   	push   %edi
  105b6d:	50                   	push   %eax
  105b6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  105b71:	e8 38 7c 00 00       	call   10d7ae <k_object_dump_error>
  105b76:	83 c4 10             	add    $0x10,%esp
  105b79:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105b7c:	8d 65 f8             	lea    -0x8(%ebp),%esp
  105b7f:	5e                   	pop    %esi
  105b80:	5f                   	pop    %edi
  105b81:	5d                   	pop    %ebp
  105b82:	c3                   	ret

00105b83 <z_mrsh_uart_err_check>:
  105b83:	55                   	push   %ebp
  105b84:	89 e5                	mov    %esp,%ebp
  105b86:	53                   	push   %ebx
  105b87:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  105b8c:	8b 55 20             	mov    0x20(%ebp),%edx
  105b8f:	8b 5d 08             	mov    0x8(%ebp),%ebx
  105b92:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  105b98:	53                   	push   %ebx
  105b99:	e8 97 78 00 00       	call   10d435 <k_object_find>
  105b9e:	5a                   	pop    %edx
  105b9f:	89 da                	mov    %ebx,%edx
  105ba1:	e8 a8 ff ff ff       	call   105b4e <k_object_validation_check.constprop.0>
  105ba6:	85 c0                	test   %eax,%eax
  105ba8:	75 26                	jne    105bd0 <z_mrsh_uart_err_check+0x4d>
  105baa:	8b 43 08             	mov    0x8(%ebx),%eax
  105bad:	8b 50 08             	mov    0x8(%eax),%edx
  105bb0:	85 d2                	test   %edx,%edx
  105bb2:	75 40                	jne    105bf4 <z_mrsh_uart_err_check+0x71>
  105bb4:	50                   	push   %eax
  105bb5:	68 09 20 11 00       	push   $0x112009
  105bba:	68 f0 08 11 00       	push   $0x1108f0
  105bbf:	6a 45                	push   $0x45
  105bc1:	68 13 20 11 00       	push   $0x112013
  105bc6:	e8 2d c9 ff ff       	call   1024f8 <z_log_minimal_printk>
  105bcb:	83 c4 14             	add    $0x14,%esp
  105bce:	eb 14                	jmp    105be4 <z_mrsh_uart_err_check+0x61>
  105bd0:	68 f0 08 11 00       	push   $0x1108f0
  105bd5:	6a 45                	push   $0x45
  105bd7:	68 dd 1f 11 00       	push   $0x111fdd
  105bdc:	e8 17 c9 ff ff       	call   1024f8 <z_log_minimal_printk>
  105be1:	83 c4 0c             	add    $0xc,%esp
  105be4:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  105be9:	ff b0 88 00 00 00    	push   0x88(%eax)
  105bef:	e8 d2 e5 ff ff       	call   1041c6 <arch_syscall_oops>
  105bf4:	53                   	push   %ebx
  105bf5:	ff d2                	call   *%edx
  105bf7:	5a                   	pop    %edx
  105bf8:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  105bfe:	31 c9                	xor    %ecx,%ecx
  105c00:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  105c06:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  105c09:	c9                   	leave
  105c0a:	c3                   	ret

00105c0b <z_mrsh_uart_poll_in>:
  105c0b:	55                   	push   %ebp
  105c0c:	89 e5                	mov    %esp,%ebp
  105c0e:	56                   	push   %esi
  105c0f:	53                   	push   %ebx
  105c10:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  105c15:	8b 55 20             	mov    0x20(%ebp),%edx
  105c18:	8b 5d 08             	mov    0x8(%ebp),%ebx
  105c1b:	8b 75 0c             	mov    0xc(%ebp),%esi
  105c1e:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  105c24:	53                   	push   %ebx
  105c25:	e8 0b 78 00 00       	call   10d435 <k_object_find>
  105c2a:	5a                   	pop    %edx
  105c2b:	89 da                	mov    %ebx,%edx
  105c2d:	e8 1c ff ff ff       	call   105b4e <k_object_validation_check.constprop.0>
  105c32:	85 c0                	test   %eax,%eax
  105c34:	75 0a                	jne    105c40 <z_mrsh_uart_poll_in+0x35>
  105c36:	8b 43 08             	mov    0x8(%ebx),%eax
  105c39:	83 38 00             	cmpl   $0x0,(%eax)
  105c3c:	75 18                	jne    105c56 <z_mrsh_uart_poll_in+0x4b>
  105c3e:	eb 1d                	jmp    105c5d <z_mrsh_uart_poll_in+0x52>
  105c40:	68 dc 08 11 00       	push   $0x1108dc
  105c45:	6a 45                	push   $0x45
  105c47:	68 dd 1f 11 00       	push   $0x111fdd
  105c4c:	e8 a7 c8 ff ff       	call   1024f8 <z_log_minimal_printk>
  105c51:	83 c4 0c             	add    $0xc,%esp
  105c54:	eb 66                	jmp    105cbc <z_mrsh_uart_poll_in+0xb1>
  105c56:	83 fe ff             	cmp    $0xffffffff,%esi
  105c59:	75 1e                	jne    105c79 <z_mrsh_uart_poll_in+0x6e>
  105c5b:	eb 43                	jmp    105ca0 <z_mrsh_uart_poll_in+0x95>
  105c5d:	50                   	push   %eax
  105c5e:	68 61 20 11 00       	push   $0x112061
  105c63:	68 dc 08 11 00       	push   $0x1108dc
  105c68:	6a 45                	push   $0x45
  105c6a:	68 13 20 11 00       	push   $0x112013
  105c6f:	e8 84 c8 ff ff       	call   1024f8 <z_log_minimal_printk>
  105c74:	83 c4 14             	add    $0x14,%esp
  105c77:	eb 43                	jmp    105cbc <z_mrsh_uart_poll_in+0xb1>
  105c79:	6a 01                	push   $0x1
  105c7b:	6a 01                	push   $0x1
  105c7d:	56                   	push   %esi
  105c7e:	e8 13 db ff ff       	call   103796 <arch_buffer_validate>
  105c83:	83 c4 0c             	add    $0xc,%esp
  105c86:	85 c0                	test   %eax,%eax
  105c88:	75 16                	jne    105ca0 <z_mrsh_uart_poll_in+0x95>
  105c8a:	8b 43 08             	mov    0x8(%ebx),%eax
  105c8d:	8b 10                	mov    (%eax),%edx
  105c8f:	b8 a8 ff ff ff       	mov    $0xffffffa8,%eax
  105c94:	85 d2                	test   %edx,%edx
  105c96:	74 34                	je     105ccc <z_mrsh_uart_poll_in+0xc1>
  105c98:	56                   	push   %esi
  105c99:	53                   	push   %ebx
  105c9a:	ff d2                	call   *%edx
  105c9c:	5b                   	pop    %ebx
  105c9d:	5e                   	pop    %esi
  105c9e:	eb 2c                	jmp    105ccc <z_mrsh_uart_poll_in+0xc1>
  105ca0:	68 c7 12 11 00       	push   $0x1112c7
  105ca5:	6a 01                	push   $0x1
  105ca7:	56                   	push   %esi
  105ca8:	68 dc 08 11 00       	push   $0x1108dc
  105cad:	6a 45                	push   $0x45
  105caf:	68 7c 12 11 00       	push   $0x11127c
  105cb4:	e8 3f c8 ff ff       	call   1024f8 <z_log_minimal_printk>
  105cb9:	83 c4 18             	add    $0x18,%esp
  105cbc:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  105cc1:	ff b0 88 00 00 00    	push   0x88(%eax)
  105cc7:	e8 fa e4 ff ff       	call   1041c6 <arch_syscall_oops>
  105ccc:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  105cd2:	31 c9                	xor    %ecx,%ecx
  105cd4:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  105cda:	8d 65 f8             	lea    -0x8(%ebp),%esp
  105cdd:	5b                   	pop    %ebx
  105cde:	5e                   	pop    %esi
  105cdf:	5d                   	pop    %ebp
  105ce0:	c3                   	ret

00105ce1 <z_mrsh_uart_poll_in_u16>:
  105ce1:	55                   	push   %ebp
  105ce2:	89 e5                	mov    %esp,%ebp
  105ce4:	56                   	push   %esi
  105ce5:	53                   	push   %ebx
  105ce6:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  105ceb:	8b 55 20             	mov    0x20(%ebp),%edx
  105cee:	8b 75 08             	mov    0x8(%ebp),%esi
  105cf1:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  105cf4:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  105cfa:	56                   	push   %esi
  105cfb:	e8 35 77 00 00       	call   10d435 <k_object_find>
  105d00:	89 f2                	mov    %esi,%edx
  105d02:	59                   	pop    %ecx
  105d03:	e8 46 fe ff ff       	call   105b4e <k_object_validation_check.constprop.0>
  105d08:	85 c0                	test   %eax,%eax
  105d0a:	75 0a                	jne    105d16 <z_mrsh_uart_poll_in_u16+0x35>
  105d0c:	8b 46 08             	mov    0x8(%esi),%eax
  105d0f:	83 38 00             	cmpl   $0x0,(%eax)
  105d12:	75 18                	jne    105d2c <z_mrsh_uart_poll_in_u16+0x4b>
  105d14:	eb 1d                	jmp    105d33 <z_mrsh_uart_poll_in_u16+0x52>
  105d16:	68 c4 08 11 00       	push   $0x1108c4
  105d1b:	6a 45                	push   $0x45
  105d1d:	68 dd 1f 11 00       	push   $0x111fdd
  105d22:	e8 d1 c7 ff ff       	call   1024f8 <z_log_minimal_printk>
  105d27:	83 c4 0c             	add    $0xc,%esp
  105d2a:	eb 50                	jmp    105d7c <z_mrsh_uart_poll_in_u16+0x9b>
  105d2c:	83 fb fd             	cmp    $0xfffffffd,%ebx
  105d2f:	76 1e                	jbe    105d4f <z_mrsh_uart_poll_in_u16+0x6e>
  105d31:	eb 2d                	jmp    105d60 <z_mrsh_uart_poll_in_u16+0x7f>
  105d33:	50                   	push   %eax
  105d34:	68 61 20 11 00       	push   $0x112061
  105d39:	68 c4 08 11 00       	push   $0x1108c4
  105d3e:	6a 45                	push   $0x45
  105d40:	68 13 20 11 00       	push   $0x112013
  105d45:	e8 ae c7 ff ff       	call   1024f8 <z_log_minimal_printk>
  105d4a:	83 c4 14             	add    $0x14,%esp
  105d4d:	eb 2d                	jmp    105d7c <z_mrsh_uart_poll_in_u16+0x9b>
  105d4f:	6a 01                	push   $0x1
  105d51:	6a 02                	push   $0x2
  105d53:	53                   	push   %ebx
  105d54:	e8 3d da ff ff       	call   103796 <arch_buffer_validate>
  105d59:	83 c4 0c             	add    $0xc,%esp
  105d5c:	85 c0                	test   %eax,%eax
  105d5e:	74 2c                	je     105d8c <z_mrsh_uart_poll_in_u16+0xab>
  105d60:	68 c7 12 11 00       	push   $0x1112c7
  105d65:	6a 02                	push   $0x2
  105d67:	53                   	push   %ebx
  105d68:	68 c4 08 11 00       	push   $0x1108c4
  105d6d:	6a 45                	push   $0x45
  105d6f:	68 7c 12 11 00       	push   $0x11127c
  105d74:	e8 7f c7 ff ff       	call   1024f8 <z_log_minimal_printk>
  105d79:	83 c4 18             	add    $0x18,%esp
  105d7c:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  105d81:	ff b0 88 00 00 00    	push   0x88(%eax)
  105d87:	e8 3a e4 ff ff       	call   1041c6 <arch_syscall_oops>
  105d8c:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  105d91:	31 d2                	xor    %edx,%edx
  105d93:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  105d99:	8d 65 f8             	lea    -0x8(%ebp),%esp
  105d9c:	b8 7a ff ff ff       	mov    $0xffffff7a,%eax
  105da1:	5b                   	pop    %ebx
  105da2:	5e                   	pop    %esi
  105da3:	5d                   	pop    %ebp
  105da4:	c3                   	ret

00105da5 <z_mrsh_uart_poll_out>:
  105da5:	55                   	push   %ebp
  105da6:	89 e5                	mov    %esp,%ebp
  105da8:	56                   	push   %esi
  105da9:	53                   	push   %ebx
  105daa:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  105daf:	8b 55 20             	mov    0x20(%ebp),%edx
  105db2:	8b 5d 08             	mov    0x8(%ebp),%ebx
  105db5:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  105dbb:	0f b6 75 0c          	movzbl 0xc(%ebp),%esi
  105dbf:	53                   	push   %ebx
  105dc0:	e8 70 76 00 00       	call   10d435 <k_object_find>
  105dc5:	5a                   	pop    %edx
  105dc6:	89 da                	mov    %ebx,%edx
  105dc8:	e8 81 fd ff ff       	call   105b4e <k_object_validation_check.constprop.0>
  105dcd:	85 c0                	test   %eax,%eax
  105dcf:	75 26                	jne    105df7 <z_mrsh_uart_poll_out+0x52>
  105dd1:	8b 43 08             	mov    0x8(%ebx),%eax
  105dd4:	8b 50 04             	mov    0x4(%eax),%edx
  105dd7:	85 d2                	test   %edx,%edx
  105dd9:	75 40                	jne    105e1b <z_mrsh_uart_poll_out+0x76>
  105ddb:	50                   	push   %eax
  105ddc:	68 69 20 11 00       	push   $0x112069
  105de1:	68 ac 08 11 00       	push   $0x1108ac
  105de6:	6a 45                	push   $0x45
  105de8:	68 13 20 11 00       	push   $0x112013
  105ded:	e8 06 c7 ff ff       	call   1024f8 <z_log_minimal_printk>
  105df2:	83 c4 14             	add    $0x14,%esp
  105df5:	eb 14                	jmp    105e0b <z_mrsh_uart_poll_out+0x66>
  105df7:	68 ac 08 11 00       	push   $0x1108ac
  105dfc:	6a 45                	push   $0x45
  105dfe:	68 dd 1f 11 00       	push   $0x111fdd
  105e03:	e8 f0 c6 ff ff       	call   1024f8 <z_log_minimal_printk>
  105e08:	83 c4 0c             	add    $0xc,%esp
  105e0b:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  105e10:	ff b0 88 00 00 00    	push   0x88(%eax)
  105e16:	e8 ab e3 ff ff       	call   1041c6 <arch_syscall_oops>
  105e1b:	56                   	push   %esi
  105e1c:	53                   	push   %ebx
  105e1d:	ff d2                	call   *%edx
  105e1f:	58                   	pop    %eax
  105e20:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  105e25:	31 c9                	xor    %ecx,%ecx
  105e27:	5a                   	pop    %edx
  105e28:	89 88 88 00 00 00    	mov    %ecx,0x88(%eax)
  105e2e:	8d 65 f8             	lea    -0x8(%ebp),%esp
  105e31:	31 c0                	xor    %eax,%eax
  105e33:	5b                   	pop    %ebx
  105e34:	5e                   	pop    %esi
  105e35:	5d                   	pop    %ebp
  105e36:	c3                   	ret

00105e37 <z_mrsh_uart_poll_out_u16>:
  105e37:	55                   	push   %ebp
  105e38:	89 e5                	mov    %esp,%ebp
  105e3a:	53                   	push   %ebx
  105e3b:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  105e40:	8b 55 20             	mov    0x20(%ebp),%edx
  105e43:	8b 5d 08             	mov    0x8(%ebp),%ebx
  105e46:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  105e4c:	53                   	push   %ebx
  105e4d:	e8 e3 75 00 00       	call   10d435 <k_object_find>
  105e52:	89 da                	mov    %ebx,%edx
  105e54:	59                   	pop    %ecx
  105e55:	e8 f4 fc ff ff       	call   105b4e <k_object_validation_check.constprop.0>
  105e5a:	85 c0                	test   %eax,%eax
  105e5c:	75 25                	jne    105e83 <z_mrsh_uart_poll_out_u16+0x4c>
  105e5e:	8b 43 08             	mov    0x8(%ebx),%eax
  105e61:	83 78 04 00          	cmpl   $0x0,0x4(%eax)
  105e65:	75 40                	jne    105ea7 <z_mrsh_uart_poll_out_u16+0x70>
  105e67:	50                   	push   %eax
  105e68:	68 69 20 11 00       	push   $0x112069
  105e6d:	68 90 08 11 00       	push   $0x110890
  105e72:	6a 45                	push   $0x45
  105e74:	68 13 20 11 00       	push   $0x112013
  105e79:	e8 7a c6 ff ff       	call   1024f8 <z_log_minimal_printk>
  105e7e:	83 c4 14             	add    $0x14,%esp
  105e81:	eb 14                	jmp    105e97 <z_mrsh_uart_poll_out_u16+0x60>
  105e83:	68 90 08 11 00       	push   $0x110890
  105e88:	6a 45                	push   $0x45
  105e8a:	68 dd 1f 11 00       	push   $0x111fdd
  105e8f:	e8 64 c6 ff ff       	call   1024f8 <z_log_minimal_printk>
  105e94:	83 c4 0c             	add    $0xc,%esp
  105e97:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  105e9c:	ff b0 88 00 00 00    	push   0x88(%eax)
  105ea2:	e8 1f e3 ff ff       	call   1041c6 <arch_syscall_oops>
  105ea7:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  105eac:	31 d2                	xor    %edx,%edx
  105eae:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  105eb4:	31 c0                	xor    %eax,%eax
  105eb6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  105eb9:	c9                   	leave
  105eba:	c3                   	ret

00105ebb <z_mrsh_uart_config_get>:
  105ebb:	55                   	push   %ebp
  105ebc:	89 e5                	mov    %esp,%ebp
  105ebe:	56                   	push   %esi
  105ebf:	53                   	push   %ebx
  105ec0:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  105ec5:	8b 55 20             	mov    0x20(%ebp),%edx
  105ec8:	8b 5d 08             	mov    0x8(%ebp),%ebx
  105ecb:	8b 75 0c             	mov    0xc(%ebp),%esi
  105ece:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  105ed4:	53                   	push   %ebx
  105ed5:	e8 5b 75 00 00       	call   10d435 <k_object_find>
  105eda:	5a                   	pop    %edx
  105edb:	89 da                	mov    %ebx,%edx
  105edd:	e8 6c fc ff ff       	call   105b4e <k_object_validation_check.constprop.0>
  105ee2:	85 c0                	test   %eax,%eax
  105ee4:	75 0b                	jne    105ef1 <z_mrsh_uart_config_get+0x36>
  105ee6:	8b 43 08             	mov    0x8(%ebx),%eax
  105ee9:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  105eed:	75 18                	jne    105f07 <z_mrsh_uart_config_get+0x4c>
  105eef:	eb 1d                	jmp    105f0e <z_mrsh_uart_config_get+0x53>
  105ef1:	68 78 08 11 00       	push   $0x110878
  105ef6:	6a 45                	push   $0x45
  105ef8:	68 dd 1f 11 00       	push   $0x111fdd
  105efd:	e8 f6 c5 ff ff       	call   1024f8 <z_log_minimal_printk>
  105f02:	83 c4 0c             	add    $0xc,%esp
  105f05:	eb 67                	jmp    105f6e <z_mrsh_uart_config_get+0xb3>
  105f07:	83 fe f7             	cmp    $0xfffffff7,%esi
  105f0a:	76 1e                	jbe    105f2a <z_mrsh_uart_config_get+0x6f>
  105f0c:	eb 44                	jmp    105f52 <z_mrsh_uart_config_get+0x97>
  105f0e:	50                   	push   %eax
  105f0f:	68 72 20 11 00       	push   $0x112072
  105f14:	68 78 08 11 00       	push   $0x110878
  105f19:	6a 45                	push   $0x45
  105f1b:	68 13 20 11 00       	push   $0x112013
  105f20:	e8 d3 c5 ff ff       	call   1024f8 <z_log_minimal_printk>
  105f25:	83 c4 14             	add    $0x14,%esp
  105f28:	eb 44                	jmp    105f6e <z_mrsh_uart_config_get+0xb3>
  105f2a:	6a 01                	push   $0x1
  105f2c:	6a 08                	push   $0x8
  105f2e:	56                   	push   %esi
  105f2f:	e8 62 d8 ff ff       	call   103796 <arch_buffer_validate>
  105f34:	83 c4 0c             	add    $0xc,%esp
  105f37:	85 c0                	test   %eax,%eax
  105f39:	75 17                	jne    105f52 <z_mrsh_uart_config_get+0x97>
  105f3b:	8b 43 08             	mov    0x8(%ebx),%eax
  105f3e:	8b 50 10             	mov    0x10(%eax),%edx
  105f41:	b8 a8 ff ff ff       	mov    $0xffffffa8,%eax
  105f46:	85 d2                	test   %edx,%edx
  105f48:	74 34                	je     105f7e <z_mrsh_uart_config_get+0xc3>
  105f4a:	56                   	push   %esi
  105f4b:	53                   	push   %ebx
  105f4c:	ff d2                	call   *%edx
  105f4e:	5b                   	pop    %ebx
  105f4f:	5e                   	pop    %esi
  105f50:	eb 2c                	jmp    105f7e <z_mrsh_uart_config_get+0xc3>
  105f52:	68 c7 12 11 00       	push   $0x1112c7
  105f57:	6a 08                	push   $0x8
  105f59:	56                   	push   %esi
  105f5a:	68 78 08 11 00       	push   $0x110878
  105f5f:	6a 45                	push   $0x45
  105f61:	68 7c 12 11 00       	push   $0x11127c
  105f66:	e8 8d c5 ff ff       	call   1024f8 <z_log_minimal_printk>
  105f6b:	83 c4 18             	add    $0x18,%esp
  105f6e:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  105f73:	ff b0 88 00 00 00    	push   0x88(%eax)
  105f79:	e8 48 e2 ff ff       	call   1041c6 <arch_syscall_oops>
  105f7e:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  105f84:	31 c9                	xor    %ecx,%ecx
  105f86:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  105f8c:	8d 65 f8             	lea    -0x8(%ebp),%esp
  105f8f:	5b                   	pop    %ebx
  105f90:	5e                   	pop    %esi
  105f91:	5d                   	pop    %ebp
  105f92:	c3                   	ret

00105f93 <z_mrsh_uart_configure>:
  105f93:	55                   	push   %ebp
  105f94:	89 e5                	mov    %esp,%ebp
  105f96:	56                   	push   %esi
  105f97:	53                   	push   %ebx
  105f98:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  105f9d:	8b 55 20             	mov    0x20(%ebp),%edx
  105fa0:	8b 5d 08             	mov    0x8(%ebp),%ebx
  105fa3:	8b 75 0c             	mov    0xc(%ebp),%esi
  105fa6:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  105fac:	53                   	push   %ebx
  105fad:	e8 83 74 00 00       	call   10d435 <k_object_find>
  105fb2:	5a                   	pop    %edx
  105fb3:	89 da                	mov    %ebx,%edx
  105fb5:	e8 94 fb ff ff       	call   105b4e <k_object_validation_check.constprop.0>
  105fba:	85 c0                	test   %eax,%eax
  105fbc:	75 0b                	jne    105fc9 <z_mrsh_uart_configure+0x36>
  105fbe:	8b 43 08             	mov    0x8(%ebx),%eax
  105fc1:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  105fc5:	75 18                	jne    105fdf <z_mrsh_uart_configure+0x4c>
  105fc7:	eb 1d                	jmp    105fe6 <z_mrsh_uart_configure+0x53>
  105fc9:	68 60 08 11 00       	push   $0x110860
  105fce:	6a 45                	push   $0x45
  105fd0:	68 dd 1f 11 00       	push   $0x111fdd
  105fd5:	e8 1e c5 ff ff       	call   1024f8 <z_log_minimal_printk>
  105fda:	83 c4 0c             	add    $0xc,%esp
  105fdd:	eb 67                	jmp    106046 <z_mrsh_uart_configure+0xb3>
  105fdf:	83 fe f7             	cmp    $0xfffffff7,%esi
  105fe2:	76 1e                	jbe    106002 <z_mrsh_uart_configure+0x6f>
  105fe4:	eb 44                	jmp    10602a <z_mrsh_uart_configure+0x97>
  105fe6:	50                   	push   %eax
  105fe7:	68 72 20 11 00       	push   $0x112072
  105fec:	68 60 08 11 00       	push   $0x110860
  105ff1:	6a 45                	push   $0x45
  105ff3:	68 13 20 11 00       	push   $0x112013
  105ff8:	e8 fb c4 ff ff       	call   1024f8 <z_log_minimal_printk>
  105ffd:	83 c4 14             	add    $0x14,%esp
  106000:	eb 44                	jmp    106046 <z_mrsh_uart_configure+0xb3>
  106002:	6a 00                	push   $0x0
  106004:	6a 08                	push   $0x8
  106006:	56                   	push   %esi
  106007:	e8 8a d7 ff ff       	call   103796 <arch_buffer_validate>
  10600c:	83 c4 0c             	add    $0xc,%esp
  10600f:	85 c0                	test   %eax,%eax
  106011:	75 17                	jne    10602a <z_mrsh_uart_configure+0x97>
  106013:	8b 43 08             	mov    0x8(%ebx),%eax
  106016:	8b 50 0c             	mov    0xc(%eax),%edx
  106019:	b8 a8 ff ff ff       	mov    $0xffffffa8,%eax
  10601e:	85 d2                	test   %edx,%edx
  106020:	74 34                	je     106056 <z_mrsh_uart_configure+0xc3>
  106022:	56                   	push   %esi
  106023:	53                   	push   %ebx
  106024:	ff d2                	call   *%edx
  106026:	5b                   	pop    %ebx
  106027:	5e                   	pop    %esi
  106028:	eb 2c                	jmp    106056 <z_mrsh_uart_configure+0xc3>
  10602a:	68 cc 3b 11 00       	push   $0x113bcc
  10602f:	6a 08                	push   $0x8
  106031:	56                   	push   %esi
  106032:	68 60 08 11 00       	push   $0x110860
  106037:	6a 45                	push   $0x45
  106039:	68 7c 12 11 00       	push   $0x11127c
  10603e:	e8 b5 c4 ff ff       	call   1024f8 <z_log_minimal_printk>
  106043:	83 c4 18             	add    $0x18,%esp
  106046:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10604b:	ff b0 88 00 00 00    	push   0x88(%eax)
  106051:	e8 70 e1 ff ff       	call   1041c6 <arch_syscall_oops>
  106056:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  10605c:	31 c9                	xor    %ecx,%ecx
  10605e:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  106064:	8d 65 f8             	lea    -0x8(%ebp),%esp
  106067:	5b                   	pop    %ebx
  106068:	5e                   	pop    %esi
  106069:	5d                   	pop    %ebp
  10606a:	c3                   	ret

0010606b <hpet_counter_get>:
  10606b:	a1 cc cc 12 00       	mov    0x12cccc,%eax
  106070:	8b 88 f4 00 00 00    	mov    0xf4(%eax),%ecx
  106076:	a1 cc cc 12 00       	mov    0x12cccc,%eax
  10607b:	05 f0 00 00 00       	add    $0xf0,%eax
  106080:	8b 00                	mov    (%eax),%eax
  106082:	8b 15 cc cc 12 00    	mov    0x12cccc,%edx
  106088:	81 c2 f4 00 00 00    	add    $0xf4,%edx
  10608e:	8b 12                	mov    (%edx),%edx
  106090:	39 ca                	cmp    %ecx,%edx
  106092:	75 d7                	jne    10606b <hpet_counter_get>
  106094:	c3                   	ret

00106095 <hpet_isr>:
  106095:	55                   	push   %ebp
  106096:	89 e5                	mov    %esp,%ebp
  106098:	57                   	push   %edi
  106099:	56                   	push   %esi
  10609a:	53                   	push   %ebx
  10609b:	83 ec 18             	sub    $0x18,%esp
  10609e:	9c                   	pushf
  10609f:	fa                   	cli
  1060a0:	58                   	pop    %eax
  1060a1:	68 c8 cc 12 00       	push   $0x12ccc8
  1060a6:	89 c6                	mov    %eax,%esi
  1060a8:	e8 42 4c 00 00       	call   10acef <z_spin_lock_valid>
  1060ad:	5f                   	pop    %edi
  1060ae:	84 c0                	test   %al,%al
  1060b0:	75 37                	jne    1060e9 <hpet_isr+0x54>
  1060b2:	68 88 00 00 00       	push   $0x88
  1060b7:	68 61 13 11 00       	push   $0x111361
  1060bc:	68 8e 13 11 00       	push   $0x11138e
  1060c1:	68 ee 10 11 00       	push   $0x1110ee
  1060c6:	e8 12 b5 ff ff       	call   1015dd <assert_print>
  1060cb:	83 c4 10             	add    $0x10,%esp
  1060ce:	68 c8 cc 12 00       	push   $0x12ccc8
  1060d3:	68 a3 13 11 00       	push   $0x1113a3
  1060d8:	e8 00 b5 ff ff       	call   1015dd <assert_print>
  1060dd:	59                   	pop    %ecx
  1060de:	5b                   	pop    %ebx
  1060df:	68 88 00 00 00       	push   $0x88
  1060e4:	e9 c4 00 00 00       	jmp    1061ad <hpet_isr+0x118>
  1060e9:	68 c8 cc 12 00       	push   $0x12ccc8
  1060ee:	e8 54 4c 00 00       	call   10ad47 <z_spin_lock_set_owner>
  1060f3:	5f                   	pop    %edi
  1060f4:	e8 72 ff ff ff       	call   10606b <hpet_counter_get>
  1060f9:	8b 0d e8 cb 12 00    	mov    0x12cbe8,%ecx
  1060ff:	8b 1d ec cb 12 00    	mov    0x12cbec,%ebx
  106105:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  106108:	89 5d e0             	mov    %ebx,-0x20(%ebp)
  10610b:	31 db                	xor    %ebx,%ebx
  10610d:	2b 45 dc             	sub    -0x24(%ebp),%eax
  106110:	8b 0d c0 cc 12 00    	mov    0x12ccc0,%ecx
  106116:	89 5d f0             	mov    %ebx,-0x10(%ebp)
  106119:	1b 55 e0             	sbb    -0x20(%ebp),%edx
  10611c:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10611f:	53                   	push   %ebx
  106120:	51                   	push   %ecx
  106121:	52                   	push   %edx
  106122:	50                   	push   %eax
  106123:	e8 4f a0 ff ff       	call   100177 <__udivdi3>
  106128:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10612b:	89 c3                	mov    %eax,%ebx
  10612d:	31 c0                	xor    %eax,%eax
  10612f:	8b 7d f0             	mov    -0x10(%ebp),%edi
  106132:	89 45 e8             	mov    %eax,-0x18(%ebp)
  106135:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106138:	0f af fb             	imul   %ebx,%edi
  10613b:	f7 e3                	mul    %ebx
  10613d:	83 c4 10             	add    $0x10,%esp
  106140:	01 fa                	add    %edi,%edx
  106142:	03 45 dc             	add    -0x24(%ebp),%eax
  106145:	13 55 e0             	adc    -0x20(%ebp),%edx
  106148:	a3 e8 cb 12 00       	mov    %eax,0x12cbe8
  10614d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  106150:	89 15 ec cb 12 00    	mov    %edx,0x12cbec
  106156:	01 05 e0 cb 12 00    	add    %eax,0x12cbe0
  10615c:	8b 55 e8             	mov    -0x18(%ebp),%edx
  10615f:	11 15 e4 cb 12 00    	adc    %edx,0x12cbe4
  106165:	31 c0                	xor    %eax,%eax
  106167:	a3 c4 cc 12 00       	mov    %eax,0x12ccc4
  10616c:	68 c8 cc 12 00       	push   $0x12ccc8
  106171:	e8 9a 4b 00 00       	call   10ad10 <z_spin_unlock_valid>
  106176:	5a                   	pop    %edx
  106177:	84 c0                	test   %al,%al
  106179:	75 3e                	jne    1061b9 <hpet_isr+0x124>
  10617b:	68 31 01 00 00       	push   $0x131
  106180:	68 61 13 11 00       	push   $0x111361
  106185:	68 e8 13 11 00       	push   $0x1113e8
  10618a:	68 ee 10 11 00       	push   $0x1110ee
  10618f:	e8 49 b4 ff ff       	call   1015dd <assert_print>
  106194:	83 c4 10             	add    $0x10,%esp
  106197:	68 c8 cc 12 00       	push   $0x12ccc8
  10619c:	68 ff 13 11 00       	push   $0x1113ff
  1061a1:	e8 37 b4 ff ff       	call   1015dd <assert_print>
  1061a6:	59                   	pop    %ecx
  1061a7:	5b                   	pop    %ebx
  1061a8:	68 31 01 00 00       	push   $0x131
  1061ad:	68 61 13 11 00       	push   $0x111361
  1061b2:	e8 17 b4 ff ff       	call   1015ce <assert_post_action>
  1061b7:	58                   	pop    %eax
  1061b8:	5a                   	pop    %edx
  1061b9:	0f ba e6 09          	bt     $0x9,%esi
  1061bd:	73 01                	jae    1061c0 <hpet_isr+0x12b>
  1061bf:	fb                   	sti
  1061c0:	89 5d 08             	mov    %ebx,0x8(%ebp)
  1061c3:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1061c6:	5b                   	pop    %ebx
  1061c7:	5e                   	pop    %esi
  1061c8:	5f                   	pop    %edi
  1061c9:	5d                   	pop    %ebp
  1061ca:	e9 0f 51 00 00       	jmp    10b2de <sys_clock_announce>

001061cf <hpet_timer_comparator_set_safe>:
  1061cf:	55                   	push   %ebp
  1061d0:	89 e5                	mov    %esp,%ebp
  1061d2:	57                   	push   %edi
  1061d3:	56                   	push   %esi
  1061d4:	89 d7                	mov    %edx,%edi
  1061d6:	89 c6                	mov    %eax,%esi
  1061d8:	53                   	push   %ebx
  1061d9:	a1 cc cc 12 00       	mov    0x12cccc,%eax
  1061de:	89 b0 08 01 00 00    	mov    %esi,0x108(%eax)
  1061e4:	a1 cc cc 12 00       	mov    0x12cccc,%eax
  1061e9:	89 90 0c 01 00 00    	mov    %edx,0x10c(%eax)
  1061ef:	e8 77 fe ff ff       	call   10606b <hpet_counter_get>
  1061f4:	29 c6                	sub    %eax,%esi
  1061f6:	19 d7                	sbb    %edx,%edi
  1061f8:	31 c9                	xor    %ecx,%ecx
  1061fa:	39 f1                	cmp    %esi,%ecx
  1061fc:	19 f9                	sbb    %edi,%ecx
  1061fe:	7c 36                	jl     106236 <hpet_timer_comparator_set_safe+0x67>
  106200:	bb 01 00 00 00       	mov    $0x1,%ebx
  106205:	89 de                	mov    %ebx,%esi
  106207:	31 ff                	xor    %edi,%edi
  106209:	01 c6                	add    %eax,%esi
  10620b:	a1 cc cc 12 00       	mov    0x12cccc,%eax
  106210:	11 d7                	adc    %edx,%edi
  106212:	01 db                	add    %ebx,%ebx
  106214:	89 b0 08 01 00 00    	mov    %esi,0x108(%eax)
  10621a:	a1 cc cc 12 00       	mov    0x12cccc,%eax
  10621f:	89 b8 0c 01 00 00    	mov    %edi,0x10c(%eax)
  106225:	e8 41 fe ff ff       	call   10606b <hpet_counter_get>
  10622a:	29 c6                	sub    %eax,%esi
  10622c:	19 d7                	sbb    %edx,%edi
  10622e:	31 c9                	xor    %ecx,%ecx
  106230:	39 f1                	cmp    %esi,%ecx
  106232:	19 f9                	sbb    %edi,%ecx
  106234:	7d cf                	jge    106205 <hpet_timer_comparator_set_safe+0x36>
  106236:	5b                   	pop    %ebx
  106237:	5e                   	pop    %esi
  106238:	5f                   	pop    %edi
  106239:	5d                   	pop    %ebp
  10623a:	c3                   	ret

0010623b <sys_clock_driver_init>:
  10623b:	55                   	push   %ebp
  10623c:	89 e5                	mov    %esp,%ebp
  10623e:	57                   	push   %edi
  10623f:	56                   	push   %esi
  106240:	6a 0a                	push   $0xa
  106242:	68 00 04 00 00       	push   $0x400
  106247:	68 00 00 d0 fe       	push   $0xfed00000
  10624c:	68 cc cc 12 00       	push   $0x12cccc
  106251:	e8 20 5f 00 00       	call   10c176 <k_mem_map_phys_bare>
  106256:	83 c4 10             	add    $0x10,%esp
  106259:	6a 00                	push   $0x0
  10625b:	6a 02                	push   $0x2
  10625d:	0f b6 05 52 4a 11 00 	movzbl 0x114a52,%eax
  106264:	50                   	push   %eax
  106265:	e8 7b f1 ff ff       	call   1053e5 <z_irq_controller_irq_config>
  10626a:	a1 cc cc 12 00       	mov    0x12cccc,%eax
  10626f:	83 c4 0c             	add    $0xc,%esp
  106272:	05 00 01 00 00       	add    $0x100,%eax
  106277:	8b 00                	mov    (%eax),%eax
  106279:	25 f7 80 ff ff       	and    $0xffff80f7,%eax
  10627e:	8b 3d cc cc 12 00    	mov    0x12cccc,%edi
  106284:	0d 04 04 00 00       	or     $0x404,%eax
  106289:	89 87 00 01 00 00    	mov    %eax,0x100(%edi)
  10628f:	6a 02                	push   $0x2
  106291:	e8 d7 f1 ff ff       	call   10546d <arch_irq_enable>
  106296:	a1 cc cc 12 00       	mov    0x12cccc,%eax
  10629b:	83 c0 04             	add    $0x4,%eax
  10629e:	8b 00                	mov    (%eax),%eax
  1062a0:	31 d2                	xor    %edx,%edx
  1062a2:	89 14 24             	mov    %edx,(%esp)
  1062a5:	50                   	push   %eax
  1062a6:	68 7e 8d 03 00       	push   $0x38d7e
  1062ab:	68 00 80 c6 a4       	push   $0xa4c68000
  1062b0:	e8 c2 9e ff ff       	call   100177 <__udivdi3>
  1062b5:	b9 64 00 00 00       	mov    $0x64,%ecx
  1062ba:	31 d2                	xor    %edx,%edx
  1062bc:	a3 58 b5 11 00       	mov    %eax,0x11b558
  1062c1:	83 c4 10             	add    $0x10,%esp
  1062c4:	f7 f1                	div    %ecx
  1062c6:	a3 c0 cc 12 00       	mov    %eax,0x12ccc0
  1062cb:	a1 cc cc 12 00       	mov    0x12cccc,%eax
  1062d0:	83 c0 10             	add    $0x10,%eax
  1062d3:	8b 00                	mov    (%eax),%eax
  1062d5:	8b 3d cc cc 12 00    	mov    0x12cccc,%edi
  1062db:	83 c8 03             	or     $0x3,%eax
  1062de:	89 47 10             	mov    %eax,0x10(%edi)
  1062e1:	e8 85 fd ff ff       	call   10606b <hpet_counter_get>
  1062e6:	31 ff                	xor    %edi,%edi
  1062e8:	8b 35 c0 cc 12 00    	mov    0x12ccc0,%esi
  1062ee:	57                   	push   %edi
  1062ef:	56                   	push   %esi
  1062f0:	52                   	push   %edx
  1062f1:	50                   	push   %eax
  1062f2:	e8 80 9e ff ff       	call   100177 <__udivdi3>
  1062f7:	89 f9                	mov    %edi,%ecx
  1062f9:	89 15 e4 cb 12 00    	mov    %edx,0x12cbe4
  1062ff:	0f af c8             	imul   %eax,%ecx
  106302:	0f af d6             	imul   %esi,%edx
  106305:	a3 e0 cb 12 00       	mov    %eax,0x12cbe0
  10630a:	01 d1                	add    %edx,%ecx
  10630c:	f7 e6                	mul    %esi
  10630e:	83 c4 10             	add    $0x10,%esp
  106311:	01 ca                	add    %ecx,%edx
  106313:	a3 e8 cb 12 00       	mov    %eax,0x12cbe8
  106318:	01 f0                	add    %esi,%eax
  10631a:	89 15 ec cb 12 00    	mov    %edx,0x12cbec
  106320:	11 fa                	adc    %edi,%edx
  106322:	e8 a8 fe ff ff       	call   1061cf <hpet_timer_comparator_set_safe>
  106327:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10632a:	5e                   	pop    %esi
  10632b:	31 c0                	xor    %eax,%eax
  10632d:	5f                   	pop    %edi
  10632e:	5d                   	pop    %ebp
  10632f:	c3                   	ret

00106330 <sys_clock_set_timeout>:
  106330:	55                   	push   %ebp
  106331:	89 e5                	mov    %esp,%ebp
  106333:	56                   	push   %esi
  106334:	53                   	push   %ebx
  106335:	8b 45 08             	mov    0x8(%ebp),%eax
  106338:	8b 55 0c             	mov    0xc(%ebp),%edx
  10633b:	83 f8 ff             	cmp    $0xffffffff,%eax
  10633e:	75 24                	jne    106364 <sys_clock_set_timeout+0x34>
  106340:	84 d2                	test   %dl,%dl
  106342:	74 1b                	je     10635f <sys_clock_set_timeout+0x2f>
  106344:	a1 cc cc 12 00       	mov    0x12cccc,%eax
  106349:	83 c0 10             	add    $0x10,%eax
  10634c:	8b 00                	mov    (%eax),%eax
  10634e:	8b 35 cc cc 12 00    	mov    0x12cccc,%esi
  106354:	83 e0 fe             	and    $0xfffffffe,%eax
  106357:	89 46 10             	mov    %eax,0x10(%esi)
  10635a:	e9 f7 00 00 00       	jmp    106456 <sys_clock_set_timeout+0x126>
  10635f:	83 f8 ff             	cmp    $0xffffffff,%eax
  106362:	74 08                	je     10636c <sys_clock_set_timeout+0x3c>
  106364:	31 db                	xor    %ebx,%ebx
  106366:	85 c0                	test   %eax,%eax
  106368:	7f 07                	jg     106371 <sys_clock_set_timeout+0x41>
  10636a:	eb 13                	jmp    10637f <sys_clock_set_timeout+0x4f>
  10636c:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
  106371:	89 c3                	mov    %eax,%ebx
  106373:	3d ff ff ff 3f       	cmp    $0x3fffffff,%eax
  106378:	7e 05                	jle    10637f <sys_clock_set_timeout+0x4f>
  10637a:	bb ff ff ff 3f       	mov    $0x3fffffff,%ebx
  10637f:	9c                   	pushf
  106380:	fa                   	cli
  106381:	5e                   	pop    %esi
  106382:	68 c8 cc 12 00       	push   $0x12ccc8
  106387:	e8 63 49 00 00       	call   10acef <z_spin_lock_valid>
  10638c:	5a                   	pop    %edx
  10638d:	84 c0                	test   %al,%al
  10638f:	75 34                	jne    1063c5 <sys_clock_set_timeout+0x95>
  106391:	68 88 00 00 00       	push   $0x88
  106396:	68 61 13 11 00       	push   $0x111361
  10639b:	68 8e 13 11 00       	push   $0x11138e
  1063a0:	68 ee 10 11 00       	push   $0x1110ee
  1063a5:	e8 33 b2 ff ff       	call   1015dd <assert_print>
  1063aa:	83 c4 10             	add    $0x10,%esp
  1063ad:	68 c8 cc 12 00       	push   $0x12ccc8
  1063b2:	68 a3 13 11 00       	push   $0x1113a3
  1063b7:	e8 21 b2 ff ff       	call   1015dd <assert_print>
  1063bc:	59                   	pop    %ecx
  1063bd:	5b                   	pop    %ebx
  1063be:	68 88 00 00 00       	push   $0x88
  1063c3:	eb 7e                	jmp    106443 <sys_clock_set_timeout+0x113>
  1063c5:	68 c8 cc 12 00       	push   $0x12ccc8
  1063ca:	e8 78 49 00 00       	call   10ad47 <z_spin_lock_set_owner>
  1063cf:	58                   	pop    %eax
  1063d0:	a1 c4 cc 12 00       	mov    0x12ccc4,%eax
  1063d5:	31 d2                	xor    %edx,%edx
  1063d7:	03 05 e0 cb 12 00    	add    0x12cbe0,%eax
  1063dd:	13 15 e4 cb 12 00    	adc    0x12cbe4,%edx
  1063e3:	89 d9                	mov    %ebx,%ecx
  1063e5:	c1 fb 1f             	sar    $0x1f,%ebx
  1063e8:	01 c8                	add    %ecx,%eax
  1063ea:	11 da                	adc    %ebx,%edx
  1063ec:	8b 0d c0 cc 12 00    	mov    0x12ccc0,%ecx
  1063f2:	0f af ca             	imul   %edx,%ecx
  1063f5:	f7 25 c0 cc 12 00    	mull   0x12ccc0
  1063fb:	01 ca                	add    %ecx,%edx
  1063fd:	e8 cd fd ff ff       	call   1061cf <hpet_timer_comparator_set_safe>
  106402:	68 c8 cc 12 00       	push   $0x12ccc8
  106407:	e8 04 49 00 00       	call   10ad10 <z_spin_unlock_valid>
  10640c:	5a                   	pop    %edx
  10640d:	84 c0                	test   %al,%al
  10640f:	75 3e                	jne    10644f <sys_clock_set_timeout+0x11f>
  106411:	68 31 01 00 00       	push   $0x131
  106416:	68 61 13 11 00       	push   $0x111361
  10641b:	68 e8 13 11 00       	push   $0x1113e8
  106420:	68 ee 10 11 00       	push   $0x1110ee
  106425:	e8 b3 b1 ff ff       	call   1015dd <assert_print>
  10642a:	83 c4 10             	add    $0x10,%esp
  10642d:	68 c8 cc 12 00       	push   $0x12ccc8
  106432:	68 ff 13 11 00       	push   $0x1113ff
  106437:	e8 a1 b1 ff ff       	call   1015dd <assert_print>
  10643c:	59                   	pop    %ecx
  10643d:	5b                   	pop    %ebx
  10643e:	68 31 01 00 00       	push   $0x131
  106443:	68 61 13 11 00       	push   $0x111361
  106448:	e8 81 b1 ff ff       	call   1015ce <assert_post_action>
  10644d:	58                   	pop    %eax
  10644e:	5a                   	pop    %edx
  10644f:	0f ba e6 09          	bt     $0x9,%esi
  106453:	73 01                	jae    106456 <sys_clock_set_timeout+0x126>
  106455:	fb                   	sti
  106456:	8d 65 f8             	lea    -0x8(%ebp),%esp
  106459:	5b                   	pop    %ebx
  10645a:	5e                   	pop    %esi
  10645b:	5d                   	pop    %ebp
  10645c:	c3                   	ret

0010645d <sys_clock_elapsed>:
  10645d:	55                   	push   %ebp
  10645e:	89 e5                	mov    %esp,%ebp
  106460:	56                   	push   %esi
  106461:	53                   	push   %ebx
  106462:	9c                   	pushf
  106463:	fa                   	cli
  106464:	5e                   	pop    %esi
  106465:	68 c8 cc 12 00       	push   $0x12ccc8
  10646a:	e8 80 48 00 00       	call   10acef <z_spin_lock_valid>
  10646f:	5a                   	pop    %edx
  106470:	84 c0                	test   %al,%al
  106472:	75 34                	jne    1064a8 <sys_clock_elapsed+0x4b>
  106474:	68 88 00 00 00       	push   $0x88
  106479:	68 61 13 11 00       	push   $0x111361
  10647e:	68 8e 13 11 00       	push   $0x11138e
  106483:	68 ee 10 11 00       	push   $0x1110ee
  106488:	e8 50 b1 ff ff       	call   1015dd <assert_print>
  10648d:	83 c4 10             	add    $0x10,%esp
  106490:	68 c8 cc 12 00       	push   $0x12ccc8
  106495:	68 a3 13 11 00       	push   $0x1113a3
  10649a:	e8 3e b1 ff ff       	call   1015dd <assert_print>
  10649f:	59                   	pop    %ecx
  1064a0:	5b                   	pop    %ebx
  1064a1:	68 88 00 00 00       	push   $0x88
  1064a6:	eb 78                	jmp    106520 <sys_clock_elapsed+0xc3>
  1064a8:	68 c8 cc 12 00       	push   $0x12ccc8
  1064ad:	e8 95 48 00 00       	call   10ad47 <z_spin_lock_set_owner>
  1064b2:	58                   	pop    %eax
  1064b3:	e8 b3 fb ff ff       	call   10606b <hpet_counter_get>
  1064b8:	2b 05 e8 cb 12 00    	sub    0x12cbe8,%eax
  1064be:	8b 0d c0 cc 12 00    	mov    0x12ccc0,%ecx
  1064c4:	1b 15 ec cb 12 00    	sbb    0x12cbec,%edx
  1064ca:	31 db                	xor    %ebx,%ebx
  1064cc:	53                   	push   %ebx
  1064cd:	51                   	push   %ecx
  1064ce:	52                   	push   %edx
  1064cf:	50                   	push   %eax
  1064d0:	e8 a2 9c ff ff       	call   100177 <__udivdi3>
  1064d5:	83 c4 10             	add    $0x10,%esp
  1064d8:	a3 c4 cc 12 00       	mov    %eax,0x12ccc4
  1064dd:	89 c3                	mov    %eax,%ebx
  1064df:	68 c8 cc 12 00       	push   $0x12ccc8
  1064e4:	e8 27 48 00 00       	call   10ad10 <z_spin_unlock_valid>
  1064e9:	5a                   	pop    %edx
  1064ea:	84 c0                	test   %al,%al
  1064ec:	75 3e                	jne    10652c <sys_clock_elapsed+0xcf>
  1064ee:	68 31 01 00 00       	push   $0x131
  1064f3:	68 61 13 11 00       	push   $0x111361
  1064f8:	68 e8 13 11 00       	push   $0x1113e8
  1064fd:	68 ee 10 11 00       	push   $0x1110ee
  106502:	e8 d6 b0 ff ff       	call   1015dd <assert_print>
  106507:	83 c4 10             	add    $0x10,%esp
  10650a:	68 c8 cc 12 00       	push   $0x12ccc8
  10650f:	68 ff 13 11 00       	push   $0x1113ff
  106514:	e8 c4 b0 ff ff       	call   1015dd <assert_print>
  106519:	59                   	pop    %ecx
  10651a:	5b                   	pop    %ebx
  10651b:	68 31 01 00 00       	push   $0x131
  106520:	68 61 13 11 00       	push   $0x111361
  106525:	e8 a4 b0 ff ff       	call   1015ce <assert_post_action>
  10652a:	58                   	pop    %eax
  10652b:	5a                   	pop    %edx
  10652c:	0f ba e6 09          	bt     $0x9,%esi
  106530:	73 01                	jae    106533 <sys_clock_elapsed+0xd6>
  106532:	fb                   	sti
  106533:	8d 65 f8             	lea    -0x8(%ebp),%esp
  106536:	89 d8                	mov    %ebx,%eax
  106538:	5b                   	pop    %ebx
  106539:	5e                   	pop    %esi
  10653a:	5d                   	pop    %ebp
  10653b:	c3                   	ret

0010653c <sys_clock_cycle_get_32>:
  10653c:	55                   	push   %ebp
  10653d:	89 e5                	mov    %esp,%ebp
  10653f:	e8 27 fb ff ff       	call   10606b <hpet_counter_get>
  106544:	5d                   	pop    %ebp
  106545:	c3                   	ret

00106546 <z_device_state_init>:
  106546:	55                   	push   %ebp
  106547:	89 e5                	mov    %esp,%ebp
  106549:	53                   	push   %ebx
  10654a:	bb 60 00 11 00       	mov    $0x110060,%ebx
  10654f:	81 fb b0 00 11 00    	cmp    $0x1100b0,%ebx
  106555:	76 36                	jbe    10658d <z_device_state_init+0x47>
  106557:	6a 18                	push   $0x18
  106559:	68 7d 20 11 00       	push   $0x11207d
  10655e:	68 a0 20 11 00       	push   $0x1120a0
  106563:	68 ee 10 11 00       	push   $0x1110ee
  106568:	e8 70 b0 ff ff       	call   1015dd <assert_print>
  10656d:	83 c4 10             	add    $0x10,%esp
  106570:	68 b8 20 11 00       	push   $0x1120b8
  106575:	e8 63 b0 ff ff       	call   1015dd <assert_print>
  10657a:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
  106581:	68 7d 20 11 00       	push   $0x11207d
  106586:	e8 43 b0 ff ff       	call   1015ce <assert_post_action>
  10658b:	58                   	pop    %eax
  10658c:	5a                   	pop    %edx
  10658d:	73 0c                	jae    10659b <z_device_state_init+0x55>
  10658f:	53                   	push   %ebx
  106590:	83 c3 14             	add    $0x14,%ebx
  106593:	e8 0a 74 00 00       	call   10d9a2 <k_object_init>
  106598:	59                   	pop    %ecx
  106599:	eb b4                	jmp    10654f <z_device_state_init+0x9>
  10659b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10659e:	c9                   	leave
  10659f:	c3                   	ret

001065a0 <z_impl_device_is_ready>:
  1065a0:	55                   	push   %ebp
  1065a1:	31 c0                	xor    %eax,%eax
  1065a3:	89 e5                	mov    %esp,%ebp
  1065a5:	8b 55 08             	mov    0x8(%ebp),%edx
  1065a8:	85 d2                	test   %edx,%edx
  1065aa:	74 16                	je     1065c2 <z_impl_device_is_ready+0x22>
  1065ac:	8b 52 0c             	mov    0xc(%edx),%edx
  1065af:	31 c0                	xor    %eax,%eax
  1065b1:	f6 42 01 01          	testb  $0x1,0x1(%edx)
  1065b5:	74 08                	je     1065bf <z_impl_device_is_ready+0x1f>
  1065b7:	31 c0                	xor    %eax,%eax
  1065b9:	80 3a 00             	cmpb   $0x0,(%edx)
  1065bc:	0f 94 c0             	sete   %al
  1065bf:	83 e0 01             	and    $0x1,%eax
  1065c2:	5d                   	pop    %ebp
  1065c3:	c3                   	ret

001065c4 <z_impl_device_get_binding>:
  1065c4:	55                   	push   %ebp
  1065c5:	89 e5                	mov    %esp,%ebp
  1065c7:	56                   	push   %esi
  1065c8:	53                   	push   %ebx
  1065c9:	8b 75 08             	mov    0x8(%ebp),%esi
  1065cc:	85 f6                	test   %esi,%esi
  1065ce:	0f 84 bb 00 00 00    	je     10668f <z_impl_device_get_binding+0xcb>
  1065d4:	80 3e 00             	cmpb   $0x0,(%esi)
  1065d7:	bb 60 00 11 00       	mov    $0x110060,%ebx
  1065dc:	0f 84 ad 00 00 00    	je     10668f <z_impl_device_get_binding+0xcb>
  1065e2:	81 fb b0 00 11 00    	cmp    $0x1100b0,%ebx
  1065e8:	76 2c                	jbe    106616 <z_impl_device_get_binding+0x52>
  1065ea:	6a 2b                	push   $0x2b
  1065ec:	68 7d 20 11 00       	push   $0x11207d
  1065f1:	68 a0 20 11 00       	push   $0x1120a0
  1065f6:	68 ee 10 11 00       	push   $0x1110ee
  1065fb:	e8 dd af ff ff       	call   1015dd <assert_print>
  106600:	83 c4 10             	add    $0x10,%esp
  106603:	68 b8 20 11 00       	push   $0x1120b8
  106608:	e8 d0 af ff ff       	call   1015dd <assert_print>
  10660d:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
  106614:	eb 4d                	jmp    106663 <z_impl_device_get_binding+0x9f>
  106616:	73 14                	jae    10662c <z_impl_device_get_binding+0x68>
  106618:	53                   	push   %ebx
  106619:	e8 82 ff ff ff       	call   1065a0 <z_impl_device_is_ready>
  10661e:	5a                   	pop    %edx
  10661f:	84 c0                	test   %al,%al
  106621:	74 04                	je     106627 <z_impl_device_get_binding+0x63>
  106623:	39 33                	cmp    %esi,(%ebx)
  106625:	74 6a                	je     106691 <z_impl_device_get_binding+0xcd>
  106627:	83 c3 14             	add    $0x14,%ebx
  10662a:	eb b6                	jmp    1065e2 <z_impl_device_get_binding+0x1e>
  10662c:	bb 60 00 11 00       	mov    $0x110060,%ebx
  106631:	81 fb b0 00 11 00    	cmp    $0x1100b0,%ebx
  106637:	76 36                	jbe    10666f <z_impl_device_get_binding+0xab>
  106639:	6a 31                	push   $0x31
  10663b:	68 7d 20 11 00       	push   $0x11207d
  106640:	68 a0 20 11 00       	push   $0x1120a0
  106645:	68 ee 10 11 00       	push   $0x1110ee
  10664a:	e8 8e af ff ff       	call   1015dd <assert_print>
  10664f:	83 c4 10             	add    $0x10,%esp
  106652:	68 b8 20 11 00       	push   $0x1120b8
  106657:	e8 81 af ff ff       	call   1015dd <assert_print>
  10665c:	c7 04 24 31 00 00 00 	movl   $0x31,(%esp)
  106663:	68 7d 20 11 00       	push   $0x11207d
  106668:	e8 61 af ff ff       	call   1015ce <assert_post_action>
  10666d:	58                   	pop    %eax
  10666e:	5a                   	pop    %edx
  10666f:	73 1e                	jae    10668f <z_impl_device_get_binding+0xcb>
  106671:	53                   	push   %ebx
  106672:	e8 29 ff ff ff       	call   1065a0 <z_impl_device_is_ready>
  106677:	59                   	pop    %ecx
  106678:	84 c0                	test   %al,%al
  10667a:	74 0e                	je     10668a <z_impl_device_get_binding+0xc6>
  10667c:	ff 33                	push   (%ebx)
  10667e:	56                   	push   %esi
  10667f:	e8 0c 9c ff ff       	call   100290 <strcmp>
  106684:	59                   	pop    %ecx
  106685:	85 c0                	test   %eax,%eax
  106687:	5a                   	pop    %edx
  106688:	74 07                	je     106691 <z_impl_device_get_binding+0xcd>
  10668a:	83 c3 14             	add    $0x14,%ebx
  10668d:	eb a2                	jmp    106631 <z_impl_device_get_binding+0x6d>
  10668f:	31 db                	xor    %ebx,%ebx
  106691:	8d 65 f8             	lea    -0x8(%ebp),%esp
  106694:	89 d8                	mov    %ebx,%eax
  106696:	5b                   	pop    %ebx
  106697:	5e                   	pop    %esi
  106698:	5d                   	pop    %ebp
  106699:	c3                   	ret

0010669a <z_mrsh_device_get_binding>:
  10669a:	55                   	push   %ebp
  10669b:	89 e5                	mov    %esp,%ebp
  10669d:	53                   	push   %ebx
  10669e:	83 ec 30             	sub    $0x30,%esp
  1066a1:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1066a6:	8b 55 20             	mov    0x20(%ebp),%edx
  1066a9:	8d 5d cc             	lea    -0x34(%ebp),%ebx
  1066ac:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  1066b2:	6a 30                	push   $0x30
  1066b4:	ff 75 08             	push   0x8(%ebp)
  1066b7:	53                   	push   %ebx
  1066b8:	e8 41 73 00 00       	call   10d9fe <k_usermode_string_copy>
  1066bd:	89 c2                	mov    %eax,%edx
  1066bf:	83 c4 0c             	add    $0xc,%esp
  1066c2:	31 c0                	xor    %eax,%eax
  1066c4:	85 d2                	test   %edx,%edx
  1066c6:	75 07                	jne    1066cf <z_mrsh_device_get_binding+0x35>
  1066c8:	53                   	push   %ebx
  1066c9:	e8 f6 fe ff ff       	call   1065c4 <z_impl_device_get_binding>
  1066ce:	5b                   	pop    %ebx
  1066cf:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  1066d5:	31 c9                	xor    %ecx,%ecx
  1066d7:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  1066dd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1066e0:	c9                   	leave
  1066e1:	c3                   	ret

001066e2 <z_mrsh_device_is_ready>:
  1066e2:	55                   	push   %ebp
  1066e3:	89 e5                	mov    %esp,%ebp
  1066e5:	56                   	push   %esi
  1066e6:	53                   	push   %ebx
  1066e7:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1066ec:	8b 55 20             	mov    0x20(%ebp),%edx
  1066ef:	8b 75 08             	mov    0x8(%ebp),%esi
  1066f2:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  1066f8:	56                   	push   %esi
  1066f9:	e8 37 6d 00 00       	call   10d435 <k_object_find>
  1066fe:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  106705:	6a 00                	push   $0x0
  106707:	89 c3                	mov    %eax,%ebx
  106709:	50                   	push   %eax
  10670a:	e8 1c 72 00 00       	call   10d92b <k_object_validate>
  10670f:	83 c4 0c             	add    $0xc,%esp
  106712:	85 c0                	test   %eax,%eax
  106714:	74 31                	je     106747 <z_mrsh_device_is_ready+0x65>
  106716:	6a 00                	push   $0x0
  106718:	53                   	push   %ebx
  106719:	56                   	push   %esi
  10671a:	50                   	push   %eax
  10671b:	e8 8e 70 00 00       	call   10d7ae <k_object_dump_error>
  106720:	83 c4 10             	add    $0x10,%esp
  106723:	68 08 09 11 00       	push   $0x110908
  106728:	6a 45                	push   $0x45
  10672a:	68 dd 1f 11 00       	push   $0x111fdd
  10672f:	e8 c4 bd ff ff       	call   1024f8 <z_log_minimal_printk>
  106734:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  106739:	83 c4 0c             	add    $0xc,%esp
  10673c:	ff b0 88 00 00 00    	push   0x88(%eax)
  106742:	e8 7f da ff ff       	call   1041c6 <arch_syscall_oops>
  106747:	56                   	push   %esi
  106748:	e8 53 fe ff ff       	call   1065a0 <z_impl_device_is_ready>
  10674d:	5a                   	pop    %edx
  10674e:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  106754:	31 c9                	xor    %ecx,%ecx
  106756:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  10675c:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10675f:	0f b6 c0             	movzbl %al,%eax
  106762:	5b                   	pop    %ebx
  106763:	5e                   	pop    %esi
  106764:	5d                   	pop    %ebp
  106765:	c3                   	ret

00106766 <k_fatal_halt>:
  106766:	55                   	push   %ebp
  106767:	89 e5                	mov    %esp,%ebp
  106769:	ff 75 08             	push   0x8(%ebp)
  10676c:	e8 ba be ff ff       	call   10262b <arch_system_halt>

00106771 <z_fatal_error>:
  106771:	55                   	push   %ebp
  106772:	89 e5                	mov    %esp,%ebp
  106774:	57                   	push   %edi
  106775:	56                   	push   %esi
  106776:	53                   	push   %ebx
  106777:	53                   	push   %ebx
  106778:	8b 75 08             	mov    0x8(%ebp),%esi
  10677b:	8b 7d 0c             	mov    0xc(%ebp),%edi
  10677e:	9c                   	pushf
  10677f:	fa                   	cli
  106780:	8f 45 f0             	pop    -0x10(%ebp)
  106783:	0f b6 15 b0 48 12 00 	movzbl 0x1248b0,%edx
  10678a:	8b 1d a8 48 12 00    	mov    0x1248a8,%ebx
  106790:	b8 d7 20 11 00       	mov    $0x1120d7,%eax
  106795:	83 fe 04             	cmp    $0x4,%esi
  106798:	77 07                	ja     1067a1 <z_fatal_error+0x30>
  10679a:	8b 04 b5 24 09 11 00 	mov    0x110924(,%esi,4),%eax
  1067a1:	52                   	push   %edx
  1067a2:	50                   	push   %eax
  1067a3:	56                   	push   %esi
  1067a4:	6a 45                	push   $0x45
  1067a6:	68 ed 20 11 00       	push   $0x1120ed
  1067ab:	e8 48 bd ff ff       	call   1024f8 <z_log_minimal_printk>
  1067b0:	83 c4 14             	add    $0x14,%esp
  1067b3:	85 db                	test   %ebx,%ebx
  1067b5:	74 10                	je     1067c7 <z_fatal_error+0x56>
  1067b7:	53                   	push   %ebx
  1067b8:	e8 ed 18 00 00       	call   1080aa <k_thread_name_get>
  1067bd:	59                   	pop    %ecx
  1067be:	85 c0                	test   %eax,%eax
  1067c0:	74 05                	je     1067c7 <z_fatal_error+0x56>
  1067c2:	80 38 00             	cmpb   $0x0,(%eax)
  1067c5:	75 05                	jne    1067cc <z_fatal_error+0x5b>
  1067c7:	b8 e5 20 11 00       	mov    $0x1120e5,%eax
  1067cc:	50                   	push   %eax
  1067cd:	53                   	push   %ebx
  1067ce:	6a 45                	push   $0x45
  1067d0:	68 1a 21 11 00       	push   $0x11211a
  1067d5:	e8 1e bd ff ff       	call   1024f8 <z_log_minimal_printk>
  1067da:	83 c4 10             	add    $0x10,%esp
  1067dd:	57                   	push   %edi
  1067de:	56                   	push   %esi
  1067df:	e8 3b e8 ff ff       	call   10501f <k_sys_fatal_error_handler>
  1067e4:	0f ba 65 f0 09       	btl    $0x9,-0x10(%ebp)
  1067e9:	58                   	pop    %eax
  1067ea:	5a                   	pop    %edx
  1067eb:	73 01                	jae    1067ee <z_fatal_error+0x7d>
  1067ed:	fb                   	sti
  1067ee:	89 5d 08             	mov    %ebx,0x8(%ebp)
  1067f1:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1067f4:	5b                   	pop    %ebx
  1067f5:	5e                   	pop    %esi
  1067f6:	5f                   	pop    %edi
  1067f7:	5d                   	pop    %ebp
  1067f8:	e9 57 40 00 00       	jmp    10a854 <z_impl_k_thread_abort>

001067fd <do_device_init>:
  1067fd:	55                   	push   %ebp
  1067fe:	89 e5                	mov    %esp,%ebp
  106800:	53                   	push   %ebx
  106801:	8b 58 04             	mov    0x4(%eax),%ebx
  106804:	8b 00                	mov    (%eax),%eax
  106806:	85 c0                	test   %eax,%eax
  106808:	75 04                	jne    10680e <do_device_init+0x11>
  10680a:	31 c0                	xor    %eax,%eax
  10680c:	eb 1e                	jmp    10682c <do_device_init+0x2f>
  10680e:	53                   	push   %ebx
  10680f:	ff d0                	call   *%eax
  106811:	5a                   	pop    %edx
  106812:	85 c0                	test   %eax,%eax
  106814:	74 f4                	je     10680a <do_device_init+0xd>
  106816:	99                   	cltd
  106817:	31 d0                	xor    %edx,%eax
  106819:	29 d0                	sub    %edx,%eax
  10681b:	3d ff 00 00 00       	cmp    $0xff,%eax
  106820:	7e 05                	jle    106827 <do_device_init+0x2a>
  106822:	b8 ff 00 00 00       	mov    $0xff,%eax
  106827:	8b 53 0c             	mov    0xc(%ebx),%edx
  10682a:	88 02                	mov    %al,(%edx)
  10682c:	8b 53 0c             	mov    0xc(%ebx),%edx
  10682f:	80 4a 01 01          	orb    $0x1,0x1(%edx)
  106833:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  106836:	c9                   	leave
  106837:	c3                   	ret

00106838 <z_sys_init_run_level>:
  106838:	55                   	push   %ebp
  106839:	89 e5                	mov    %esp,%ebp
  10683b:	56                   	push   %esi
  10683c:	53                   	push   %ebx
  10683d:	89 c6                	mov    %eax,%esi
  10683f:	8b 1c 85 38 09 11 00 	mov    0x110938(,%eax,4),%ebx
  106846:	3b 1c b5 3c 09 11 00 	cmp    0x11093c(,%esi,4),%ebx
  10684d:	73 16                	jae    106865 <z_sys_init_run_level+0x2d>
  10684f:	83 7b 04 00          	cmpl   $0x0,0x4(%ebx)
  106853:	74 09                	je     10685e <z_sys_init_run_level+0x26>
  106855:	89 d8                	mov    %ebx,%eax
  106857:	e8 a1 ff ff ff       	call   1067fd <do_device_init>
  10685c:	eb 02                	jmp    106860 <z_sys_init_run_level+0x28>
  10685e:	ff 13                	call   *(%ebx)
  106860:	83 c3 08             	add    $0x8,%ebx
  106863:	eb e1                	jmp    106846 <z_sys_init_run_level+0xe>
  106865:	5b                   	pop    %ebx
  106866:	5e                   	pop    %esi
  106867:	5d                   	pop    %ebp
  106868:	c3                   	ret

00106869 <bg_thread_main>:
  106869:	55                   	push   %ebp
  10686a:	89 e5                	mov    %esp,%ebp
  10686c:	56                   	push   %esi
  10686d:	53                   	push   %ebx
  10686e:	e8 1f 5b 00 00       	call   10c392 <z_mem_manage_init>
  106873:	b8 03 00 00 00       	mov    $0x3,%eax
  106878:	c6 05 2f cd 12 00 01 	movb   $0x1,0x12cd2f
  10687f:	e8 b4 ff ff ff       	call   106838 <z_sys_init_run_level>
  106884:	bb c8 00 11 00       	mov    $0x1100c8,%ebx
  106889:	e8 e6 71 00 00       	call   10da74 <boot_banner>
  10688e:	e8 bc 03 00 00       	call   106c4f <z_init_static>
  106893:	b8 04 00 00 00       	mov    $0x4,%eax
  106898:	e8 9b ff ff ff       	call   106838 <z_sys_init_run_level>
  10689d:	81 fb c8 00 11 00    	cmp    $0x1100c8,%ebx
  1068a3:	76 2c                	jbe    1068d1 <bg_thread_main+0x68>
  1068a5:	6a 43                	push   $0x43
  1068a7:	68 81 21 11 00       	push   $0x112181
  1068ac:	68 a2 21 11 00       	push   $0x1121a2
  1068b1:	68 ee 10 11 00       	push   $0x1110ee
  1068b6:	e8 22 ad ff ff       	call   1015dd <assert_print>
  1068bb:	83 c4 10             	add    $0x10,%esp
  1068be:	68 b8 20 11 00       	push   $0x1120b8
  1068c3:	e8 15 ad ff ff       	call   1015dd <assert_print>
  1068c8:	c7 04 24 43 00 00 00 	movl   $0x43,(%esp)
  1068cf:	eb 68                	jmp    106939 <bg_thread_main+0xd0>
  1068d1:	73 2f                	jae    106902 <bg_thread_main+0x99>
  1068d3:	ff 73 24             	push   0x24(%ebx)
  1068d6:	ff 73 20             	push   0x20(%ebx)
  1068d9:	ff 73 1c             	push   0x1c(%ebx)
  1068dc:	ff 73 18             	push   0x18(%ebx)
  1068df:	ff 73 14             	push   0x14(%ebx)
  1068e2:	ff 73 10             	push   0x10(%ebx)
  1068e5:	ff 73 0c             	push   0xc(%ebx)
  1068e8:	ff 73 08             	push   0x8(%ebx)
  1068eb:	ff 73 04             	push   0x4(%ebx)
  1068ee:	ff 33                	push   (%ebx)
  1068f0:	e8 f4 1c 00 00       	call   1085e9 <z_setup_new_thread>
  1068f5:	8b 03                	mov    (%ebx),%eax
  1068f7:	83 c4 28             	add    $0x28,%esp
  1068fa:	89 58 30             	mov    %ebx,0x30(%eax)
  1068fd:	83 c3 2c             	add    $0x2c,%ebx
  106900:	eb 9b                	jmp    10689d <bg_thread_main+0x34>
  106902:	bb b0 00 11 00       	mov    $0x1100b0,%ebx
  106907:	81 fb b0 00 11 00    	cmp    $0x1100b0,%ebx
  10690d:	76 36                	jbe    106945 <bg_thread_main+0xdc>
  10690f:	6a 54                	push   $0x54
  106911:	68 81 21 11 00       	push   $0x112181
  106916:	68 cf 21 11 00       	push   $0x1121cf
  10691b:	68 ee 10 11 00       	push   $0x1110ee
  106920:	e8 b8 ac ff ff       	call   1015dd <assert_print>
  106925:	83 c4 10             	add    $0x10,%esp
  106928:	68 b8 20 11 00       	push   $0x1120b8
  10692d:	e8 ab ac ff ff       	call   1015dd <assert_print>
  106932:	c7 04 24 54 00 00 00 	movl   $0x54,(%esp)
  106939:	68 81 21 11 00       	push   $0x112181
  10693e:	e8 8b ac ff ff       	call   1015ce <assert_post_action>
  106943:	5a                   	pop    %edx
  106944:	59                   	pop    %ecx
  106945:	73 21                	jae    106968 <bg_thread_main+0xff>
  106947:	31 f6                	xor    %esi,%esi
  106949:	8b 43 04             	mov    0x4(%ebx),%eax
  10694c:	8b 04 30             	mov    (%eax,%esi,1),%eax
  10694f:	83 c6 04             	add    $0x4,%esi
  106952:	85 c0                	test   %eax,%eax
  106954:	74 0d                	je     106963 <bg_thread_main+0xfa>
  106956:	8b 13                	mov    (%ebx),%edx
  106958:	52                   	push   %edx
  106959:	50                   	push   %eax
  10695a:	e8 8e 6f 00 00       	call   10d8ed <z_impl_k_object_access_grant>
  10695f:	58                   	pop    %eax
  106960:	5a                   	pop    %edx
  106961:	eb e6                	jmp    106949 <bg_thread_main+0xe0>
  106963:	83 c3 08             	add    $0x8,%ebx
  106966:	eb 9f                	jmp    106907 <bg_thread_main+0x9e>
  106968:	e8 4d 33 00 00       	call   109cba <k_sched_lock>
  10696d:	bb c8 00 11 00       	mov    $0x1100c8,%ebx
  106972:	81 fb c8 00 11 00    	cmp    $0x1100c8,%ebx
  106978:	76 2c                	jbe    1069a6 <bg_thread_main+0x13d>
  10697a:	6a 67                	push   $0x67
  10697c:	68 81 21 11 00       	push   $0x112181
  106981:	68 a2 21 11 00       	push   $0x1121a2
  106986:	68 ee 10 11 00       	push   $0x1110ee
  10698b:	e8 4d ac ff ff       	call   1015dd <assert_print>
  106990:	83 c4 10             	add    $0x10,%esp
  106993:	68 b8 20 11 00       	push   $0x1120b8
  106998:	e8 40 ac ff ff       	call   1015dd <assert_print>
  10699d:	c7 04 24 67 00 00 00 	movl   $0x67,(%esp)
  1069a4:	eb 93                	jmp    106939 <bg_thread_main+0xd0>
  1069a6:	73 52                	jae    1069fa <bg_thread_main+0x191>
  1069a8:	8b 43 28             	mov    0x28(%ebx),%eax
  1069ab:	83 f8 ff             	cmp    $0xffffffff,%eax
  1069ae:	74 42                	je     1069f2 <bg_thread_main+0x189>
  1069b0:	85 c0                	test   %eax,%eax
  1069b2:	79 02                	jns    1069b6 <bg_thread_main+0x14d>
  1069b4:	31 c0                	xor    %eax,%eax
  1069b6:	99                   	cltd
  1069b7:	83 c0 09             	add    $0x9,%eax
  1069ba:	8b 33                	mov    (%ebx),%esi
  1069bc:	83 d2 00             	adc    $0x0,%edx
  1069bf:	89 c1                	mov    %eax,%ecx
  1069c1:	83 f1 09             	xor    $0x9,%ecx
  1069c4:	09 d1                	or     %edx,%ecx
  1069c6:	75 09                	jne    1069d1 <bg_thread_main+0x168>
  1069c8:	56                   	push   %esi
  1069c9:	e8 a0 17 00 00       	call   10816e <z_impl_k_thread_start>
  1069ce:	58                   	pop    %eax
  1069cf:	eb 21                	jmp    1069f2 <bg_thread_main+0x189>
  1069d1:	6a 00                	push   $0x0
  1069d3:	83 c6 18             	add    $0x18,%esi
  1069d6:	6a 0a                	push   $0xa
  1069d8:	52                   	push   %edx
  1069d9:	50                   	push   %eax
  1069da:	e8 98 97 ff ff       	call   100177 <__udivdi3>
  1069df:	83 c4 10             	add    $0x10,%esp
  1069e2:	52                   	push   %edx
  1069e3:	50                   	push   %eax
  1069e4:	68 e1 94 10 00       	push   $0x1094e1
  1069e9:	56                   	push   %esi
  1069ea:	e8 55 44 00 00       	call   10ae44 <z_add_timeout>
  1069ef:	83 c4 10             	add    $0x10,%esp
  1069f2:	83 c3 2c             	add    $0x2c,%ebx
  1069f5:	e9 78 ff ff ff       	jmp    106972 <bg_thread_main+0x109>
  1069fa:	e8 ec 33 00 00       	call   109deb <k_sched_unlock>
  1069ff:	e8 a0 5a 00 00       	call   10c4a4 <z_mem_manage_boot_finish>
  106a04:	e8 85 e3 ff ff       	call   104d8e <main>
  106a09:	80 25 0c 48 12 00 fe 	andb   $0xfe,0x12480c
  106a10:	8d 65 f8             	lea    -0x8(%ebp),%esp
  106a13:	5b                   	pop    %ebx
  106a14:	5e                   	pop    %esi
  106a15:	5d                   	pop    %ebp
  106a16:	c3                   	ret

00106a17 <z_early_memset>:
  106a17:	55                   	push   %ebp
  106a18:	89 e5                	mov    %esp,%ebp
  106a1a:	57                   	push   %edi
  106a1b:	8b 4d 10             	mov    0x10(%ebp),%ecx
  106a1e:	8a 45 0c             	mov    0xc(%ebp),%al
  106a21:	8b 7d 08             	mov    0x8(%ebp),%edi
  106a24:	f3 aa                	rep stos %al,%es:(%edi)
  106a26:	5f                   	pop    %edi
  106a27:	5d                   	pop    %ebp
  106a28:	c3                   	ret

00106a29 <z_bss_zero>:
  106a29:	b8 34 cd 12 00       	mov    $0x12cd34,%eax
  106a2e:	55                   	push   %ebp
  106a2f:	2d 00 40 12 00       	sub    $0x124000,%eax
  106a34:	89 e5                	mov    %esp,%ebp
  106a36:	50                   	push   %eax
  106a37:	6a 00                	push   $0x0
  106a39:	68 00 40 12 00       	push   $0x124000
  106a3e:	e8 d4 ff ff ff       	call   106a17 <z_early_memset>
  106a43:	83 c4 0c             	add    $0xc,%esp
  106a46:	c9                   	leave
  106a47:	c3                   	ret

00106a48 <z_impl_device_init>:
  106a48:	55                   	push   %ebp
  106a49:	b8 60 00 11 00       	mov    $0x110060,%eax
  106a4e:	89 e5                	mov    %esp,%ebp
  106a50:	8b 55 08             	mov    0x8(%ebp),%edx
  106a53:	85 d2                	test   %edx,%edx
  106a55:	74 52                	je     106aa9 <z_impl_device_init+0x61>
  106a57:	3d 60 00 11 00       	cmp    $0x110060,%eax
  106a5c:	76 39                	jbe    106a97 <z_impl_device_init+0x4f>
  106a5e:	68 81 01 00 00       	push   $0x181
  106a63:	68 81 21 11 00       	push   $0x112181
  106a68:	68 f4 21 11 00       	push   $0x1121f4
  106a6d:	68 ee 10 11 00       	push   $0x1110ee
  106a72:	e8 66 ab ff ff       	call   1015dd <assert_print>
  106a77:	83 c4 10             	add    $0x10,%esp
  106a7a:	68 b8 20 11 00       	push   $0x1120b8
  106a7f:	e8 59 ab ff ff       	call   1015dd <assert_print>
  106a84:	c7 04 24 81 01 00 00 	movl   $0x181,(%esp)
  106a8b:	68 81 21 11 00       	push   $0x112181
  106a90:	e8 39 ab ff ff       	call   1015ce <assert_post_action>
  106a95:	58                   	pop    %eax
  106a96:	5a                   	pop    %edx
  106a97:	73 10                	jae    106aa9 <z_impl_device_init+0x61>
  106a99:	39 50 04             	cmp    %edx,0x4(%eax)
  106a9c:	75 06                	jne    106aa4 <z_impl_device_init+0x5c>
  106a9e:	c9                   	leave
  106a9f:	e9 59 fd ff ff       	jmp    1067fd <do_device_init>
  106aa4:	83 c0 08             	add    $0x8,%eax
  106aa7:	eb ae                	jmp    106a57 <z_impl_device_init+0xf>
  106aa9:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  106aae:	c9                   	leave
  106aaf:	c3                   	ret

00106ab0 <z_mrsh_device_init>:
  106ab0:	55                   	push   %ebp
  106ab1:	89 e5                	mov    %esp,%ebp
  106ab3:	56                   	push   %esi
  106ab4:	53                   	push   %ebx
  106ab5:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  106aba:	8b 55 20             	mov    0x20(%ebp),%edx
  106abd:	8b 75 08             	mov    0x8(%ebp),%esi
  106ac0:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  106ac6:	56                   	push   %esi
  106ac7:	e8 69 69 00 00       	call   10d435 <k_object_find>
  106acc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  106ad3:	6a 00                	push   $0x0
  106ad5:	89 c3                	mov    %eax,%ebx
  106ad7:	50                   	push   %eax
  106ad8:	e8 4e 6e 00 00       	call   10d92b <k_object_validate>
  106add:	83 c4 0c             	add    $0xc,%esp
  106ae0:	85 c0                	test   %eax,%eax
  106ae2:	74 31                	je     106b15 <z_mrsh_device_init+0x65>
  106ae4:	6a 00                	push   $0x0
  106ae6:	53                   	push   %ebx
  106ae7:	56                   	push   %esi
  106ae8:	50                   	push   %eax
  106ae9:	e8 c0 6c 00 00       	call   10d7ae <k_object_dump_error>
  106aee:	83 c4 10             	add    $0x10,%esp
  106af1:	68 50 09 11 00       	push   $0x110950
  106af6:	6a 45                	push   $0x45
  106af8:	68 dd 1f 11 00       	push   $0x111fdd
  106afd:	e8 f6 b9 ff ff       	call   1024f8 <z_log_minimal_printk>
  106b02:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  106b07:	83 c4 0c             	add    $0xc,%esp
  106b0a:	ff b0 88 00 00 00    	push   0x88(%eax)
  106b10:	e8 b1 d6 ff ff       	call   1041c6 <arch_syscall_oops>
  106b15:	56                   	push   %esi
  106b16:	e8 2d ff ff ff       	call   106a48 <z_impl_device_init>
  106b1b:	5a                   	pop    %edx
  106b1c:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  106b22:	31 c9                	xor    %ecx,%ecx
  106b24:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  106b2a:	8d 65 f8             	lea    -0x8(%ebp),%esp
  106b2d:	5b                   	pop    %ebx
  106b2e:	5e                   	pop    %esi
  106b2f:	5d                   	pop    %ebp
  106b30:	c3                   	ret

00106b31 <z_init_cpu>:
  106b31:	55                   	push   %ebp
  106b32:	89 e5                	mov    %esp,%ebp
  106b34:	57                   	push   %edi
  106b35:	56                   	push   %esi
  106b36:	53                   	push   %ebx
  106b37:	69 75 08 a0 00 00 00 	imul   $0xa0,0x8(%ebp),%esi
  106b3e:	8b 7d 08             	mov    0x8(%ebp),%edi
  106b41:	68 16 22 11 00       	push   $0x112216
  106b46:	6a 01                	push   $0x1
  106b48:	81 c6 60 47 12 00    	add    $0x124760,%esi
  106b4e:	c1 e7 0d             	shl    $0xd,%edi
  106b51:	6a 0f                	push   $0xf
  106b53:	6a 00                	push   $0x0
  106b55:	6a 00                	push   $0x0
  106b57:	8d 87 00 e0 13 00    	lea    0x13e000(%edi),%eax
  106b5d:	6b 5d 08 14          	imul   $0x14,0x8(%ebp),%ebx
  106b61:	81 c3 a0 48 12 00    	add    $0x1248a0,%ebx
  106b67:	53                   	push   %ebx
  106b68:	68 50 6c 10 00       	push   $0x106c50
  106b6d:	68 00 10 00 00       	push   $0x1000
  106b72:	50                   	push   %eax
  106b73:	56                   	push   %esi
  106b74:	e8 70 1a 00 00       	call   1085e9 <z_setup_new_thread>
  106b79:	80 66 0d fb          	andb   $0xfb,0xd(%esi)
  106b7d:	8a 45 08             	mov    0x8(%ebp),%al
  106b80:	8d 97 00 e0 13 00    	lea    0x13e000(%edi),%edx
  106b86:	89 73 0c             	mov    %esi,0xc(%ebx)
  106b89:	88 43 10             	mov    %al,0x10(%ebx)
  106b8c:	89 53 04             	mov    %edx,0x4(%ebx)
  106b8f:	83 c4 28             	add    $0x28,%esp
  106b92:	8d 65 f4             	lea    -0xc(%ebp),%esp
  106b95:	5b                   	pop    %ebx
  106b96:	5e                   	pop    %esi
  106b97:	5f                   	pop    %edi
  106b98:	5d                   	pop    %ebp
  106b99:	c3                   	ret

00106b9a <z_cstart>:
  106b9a:	55                   	push   %ebp
  106b9b:	31 c0                	xor    %eax,%eax
  106b9d:	89 e5                	mov    %esp,%ebp
  106b9f:	e8 94 fc ff ff       	call   106838 <z_sys_init_run_level>
  106ba4:	31 d2                	xor    %edx,%edx
  106ba6:	31 c0                	xor    %eax,%eax
  106ba8:	89 15 6c 49 12 00    	mov    %edx,0x12496c
  106bae:	a3 44 49 12 00       	mov    %eax,0x124944
  106bb3:	a3 48 49 12 00       	mov    %eax,0x124948
  106bb8:	66 c7 05 ec 48 12 00 	movw   $0x101,0x1248ec
  106bbf:	01 01 
  106bc1:	c7 05 60 49 12 00 80 	movl   $0x12ca80,0x124960
  106bc8:	ca 12 00 
  106bcb:	c7 05 a8 48 12 00 e0 	movl   $0x1248e0,0x1248a8
  106bd2:	48 12 00 
  106bd5:	e8 6c f9 ff ff       	call   106546 <z_device_state_init>
  106bda:	b8 01 00 00 00       	mov    $0x1,%eax
  106bdf:	e8 54 fc ff ff       	call   106838 <z_sys_init_run_level>
  106be4:	b8 02 00 00 00       	mov    $0x2,%eax
  106be9:	e8 4a fc ff ff       	call   106838 <z_sys_init_run_level>
  106bee:	e8 90 33 00 00       	call   109f83 <z_sched_init>
  106bf3:	68 1b 22 11 00       	push   $0x11221b
  106bf8:	6a 01                	push   $0x1
  106bfa:	c7 05 b4 48 12 00 00 	movl   $0x124800,0x1248b4
  106c01:	48 12 00 
  106c04:	6a 00                	push   $0x0
  106c06:	6a 00                	push   $0x0
  106c08:	6a 00                	push   $0x0
  106c0a:	6a 00                	push   $0x0
  106c0c:	68 69 68 10 00       	push   $0x106869
  106c11:	68 00 10 00 00       	push   $0x1000
  106c16:	68 00 70 15 00       	push   $0x157000
  106c1b:	68 00 48 12 00       	push   $0x124800
  106c20:	e8 c4 19 00 00       	call   1085e9 <z_setup_new_thread>
  106c25:	83 c4 28             	add    $0x28,%esp
  106c28:	80 25 0d 48 12 00 fb 	andb   $0xfb,0x12480d
  106c2f:	68 00 48 12 00       	push   $0x124800
  106c34:	e8 cb 25 00 00       	call   109204 <z_ready_thread>
  106c39:	31 c9                	xor    %ecx,%ecx
  106c3b:	89 0c 24             	mov    %ecx,(%esp)
  106c3e:	e8 ee fe ff ff       	call   106b31 <z_init_cpu>
  106c43:	9c                   	pushf
  106c44:	fa                   	cli
  106c45:	58                   	pop    %eax
  106c46:	89 04 24             	mov    %eax,(%esp)
  106c49:	e8 c2 d1 ff ff       	call   103e10 <arch_swap>
  106c4e:	58                   	pop    %eax

00106c4f <z_init_static>:
  106c4f:	c3                   	ret

00106c50 <idle>:
  106c50:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  106c55:	55                   	push   %ebp
  106c56:	89 e5                	mov    %esp,%ebp
  106c58:	80 78 0e 00          	cmpb   $0x0,0xe(%eax)
  106c5c:	79 27                	jns    106c85 <idle+0x35>
  106c5e:	6a 1b                	push   $0x1b
  106c60:	68 23 22 11 00       	push   $0x112223
  106c65:	68 44 22 11 00       	push   $0x112244
  106c6a:	68 ee 10 11 00       	push   $0x1110ee
  106c6f:	e8 69 a9 ff ff       	call   1015dd <assert_print>
  106c74:	83 c4 10             	add    $0x10,%esp
  106c77:	6a 1b                	push   $0x1b
  106c79:	68 23 22 11 00       	push   $0x112223
  106c7e:	e8 4b a9 ff ff       	call   1015ce <assert_post_action>
  106c83:	58                   	pop    %eax
  106c84:	5a                   	pop    %edx
  106c85:	9c                   	pushf
  106c86:	fa                   	cli
  106c87:	58                   	pop    %eax
  106c88:	e8 4a b9 ff ff       	call   1025d7 <arch_cpu_idle>
  106c8d:	eb f6                	jmp    106c85 <idle+0x35>

00106c8f <k_object_validation_check.constprop.0>:
  106c8f:	55                   	push   %ebp
  106c90:	89 e5                	mov    %esp,%ebp
  106c92:	57                   	push   %edi
  106c93:	56                   	push   %esi
  106c94:	89 d7                	mov    %edx,%edi
  106c96:	56                   	push   %esi
  106c97:	89 c6                	mov    %eax,%esi
  106c99:	51                   	push   %ecx
  106c9a:	6a 03                	push   $0x3
  106c9c:	50                   	push   %eax
  106c9d:	e8 89 6c 00 00       	call   10d92b <k_object_validate>
  106ca2:	83 c4 0c             	add    $0xc,%esp
  106ca5:	85 c0                	test   %eax,%eax
  106ca7:	74 13                	je     106cbc <k_object_validation_check.constprop.0+0x2d>
  106ca9:	6a 03                	push   $0x3
  106cab:	56                   	push   %esi
  106cac:	57                   	push   %edi
  106cad:	50                   	push   %eax
  106cae:	89 45 f4             	mov    %eax,-0xc(%ebp)
  106cb1:	e8 f8 6a 00 00       	call   10d7ae <k_object_dump_error>
  106cb6:	83 c4 10             	add    $0x10,%esp
  106cb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106cbc:	8d 65 f8             	lea    -0x8(%ebp),%esp
  106cbf:	5e                   	pop    %esi
  106cc0:	5f                   	pop    %edi
  106cc1:	5d                   	pop    %ebp
  106cc2:	c3                   	ret

00106cc3 <adjust_owner_prio.isra.0>:
  106cc3:	0f be 48 0e          	movsbl 0xe(%eax),%ecx
  106cc7:	39 d1                	cmp    %edx,%ecx
  106cc9:	74 0e                	je     106cd9 <adjust_owner_prio.isra.0+0x16>
  106ccb:	55                   	push   %ebp
  106ccc:	89 e5                	mov    %esp,%ebp
  106cce:	52                   	push   %edx
  106ccf:	50                   	push   %eax
  106cd0:	e8 17 2b 00 00       	call   1097ec <z_thread_prio_set>
  106cd5:	5a                   	pop    %edx
  106cd6:	59                   	pop    %ecx
  106cd7:	c9                   	leave
  106cd8:	c3                   	ret
  106cd9:	31 c0                	xor    %eax,%eax
  106cdb:	c3                   	ret

00106cdc <z_impl_k_mutex_init>:
  106cdc:	55                   	push   %ebp
  106cdd:	31 c0                	xor    %eax,%eax
  106cdf:	89 e5                	mov    %esp,%ebp
  106ce1:	57                   	push   %edi
  106ce2:	b9 04 00 00 00       	mov    $0x4,%ecx
  106ce7:	8b 55 08             	mov    0x8(%ebp),%edx
  106cea:	89 d7                	mov    %edx,%edi
  106cec:	89 42 10             	mov    %eax,0x10(%edx)
  106cef:	89 42 14             	mov    %eax,0x14(%edx)
  106cf2:	31 c0                	xor    %eax,%eax
  106cf4:	f3 ab                	rep stos %eax,%es:(%edi)
  106cf6:	c7 42 04 d3 7e 10 00 	movl   $0x107ed3,0x4(%edx)
  106cfd:	52                   	push   %edx
  106cfe:	e8 9f 6c 00 00       	call   10d9a2 <k_object_init>
  106d03:	5a                   	pop    %edx
  106d04:	31 c0                	xor    %eax,%eax
  106d06:	8b 7d fc             	mov    -0x4(%ebp),%edi
  106d09:	c9                   	leave
  106d0a:	c3                   	ret

00106d0b <z_mrsh_k_mutex_init>:
  106d0b:	55                   	push   %ebp
  106d0c:	89 e5                	mov    %esp,%ebp
  106d0e:	53                   	push   %ebx
  106d0f:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  106d14:	8b 55 20             	mov    0x20(%ebp),%edx
  106d17:	8b 5d 08             	mov    0x8(%ebp),%ebx
  106d1a:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  106d20:	53                   	push   %ebx
  106d21:	e8 0f 67 00 00       	call   10d435 <k_object_find>
  106d26:	5a                   	pop    %edx
  106d27:	b9 01 00 00 00       	mov    $0x1,%ecx
  106d2c:	89 da                	mov    %ebx,%edx
  106d2e:	e8 5c ff ff ff       	call   106c8f <k_object_validation_check.constprop.0>
  106d33:	85 c0                	test   %eax,%eax
  106d35:	74 24                	je     106d5b <z_mrsh_k_mutex_init+0x50>
  106d37:	68 90 09 11 00       	push   $0x110990
  106d3c:	6a 45                	push   $0x45
  106d3e:	68 dd 1f 11 00       	push   $0x111fdd
  106d43:	e8 b0 b7 ff ff       	call   1024f8 <z_log_minimal_printk>
  106d48:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  106d4d:	83 c4 0c             	add    $0xc,%esp
  106d50:	ff b0 88 00 00 00    	push   0x88(%eax)
  106d56:	e8 6b d4 ff ff       	call   1041c6 <arch_syscall_oops>
  106d5b:	53                   	push   %ebx
  106d5c:	e8 7b ff ff ff       	call   106cdc <z_impl_k_mutex_init>
  106d61:	5a                   	pop    %edx
  106d62:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  106d68:	31 c9                	xor    %ecx,%ecx
  106d6a:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  106d70:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  106d73:	c9                   	leave
  106d74:	c3                   	ret

00106d75 <z_impl_k_mutex_lock>:
  106d75:	55                   	push   %ebp
  106d76:	89 e5                	mov    %esp,%ebp
  106d78:	57                   	push   %edi
  106d79:	56                   	push   %esi
  106d7a:	53                   	push   %ebx
  106d7b:	83 3d a0 48 12 00 00 	cmpl   $0x0,0x1248a0
  106d82:	8b 5d 08             	mov    0x8(%ebp),%ebx
  106d85:	74 31                	je     106db8 <z_impl_k_mutex_lock+0x43>
  106d87:	6a 6f                	push   $0x6f
  106d89:	68 6c 22 11 00       	push   $0x11226c
  106d8e:	68 8e 22 11 00       	push   $0x11228e
  106d93:	68 ee 10 11 00       	push   $0x1110ee
  106d98:	e8 40 a8 ff ff       	call   1015dd <assert_print>
  106d9d:	83 c4 10             	add    $0x10,%esp
  106da0:	68 a0 22 11 00       	push   $0x1122a0
  106da5:	e8 33 a8 ff ff       	call   1015dd <assert_print>
  106daa:	c7 04 24 6f 00 00 00 	movl   $0x6f,(%esp)
  106db1:	68 6c 22 11 00       	push   $0x11226c
  106db6:	eb 49                	jmp    106e01 <z_impl_k_mutex_lock+0x8c>
  106db8:	9c                   	pushf
  106db9:	fa                   	cli
  106dba:	5f                   	pop    %edi
  106dbb:	68 d0 cc 12 00       	push   $0x12ccd0
  106dc0:	e8 2a 3f 00 00       	call   10acef <z_spin_lock_valid>
  106dc5:	5a                   	pop    %edx
  106dc6:	84 c0                	test   %al,%al
  106dc8:	75 3e                	jne    106e08 <z_impl_k_mutex_lock+0x93>
  106dca:	68 88 00 00 00       	push   $0x88
  106dcf:	68 61 13 11 00       	push   $0x111361
  106dd4:	68 8e 13 11 00       	push   $0x11138e
  106dd9:	68 ee 10 11 00       	push   $0x1110ee
  106dde:	e8 fa a7 ff ff       	call   1015dd <assert_print>
  106de3:	83 c4 10             	add    $0x10,%esp
  106de6:	68 d0 cc 12 00       	push   $0x12ccd0
  106deb:	68 a3 13 11 00       	push   $0x1113a3
  106df0:	e8 e8 a7 ff ff       	call   1015dd <assert_print>
  106df5:	5f                   	pop    %edi
  106df6:	58                   	pop    %eax
  106df7:	68 88 00 00 00       	push   $0x88
  106dfc:	68 61 13 11 00       	push   $0x111361
  106e01:	e8 c8 a7 ff ff       	call   1015ce <assert_post_action>
  106e06:	5b                   	pop    %ebx
  106e07:	5e                   	pop    %esi
  106e08:	68 d0 cc 12 00       	push   $0x12ccd0
  106e0d:	e8 35 3f 00 00       	call   10ad47 <z_spin_lock_set_owner>
  106e12:	59                   	pop    %ecx
  106e13:	8b 4b 14             	mov    0x14(%ebx),%ecx
  106e16:	85 c9                	test   %ecx,%ecx
  106e18:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  106e1e:	74 15                	je     106e35 <z_impl_k_mutex_lock+0xc0>
  106e20:	8b 43 10             	mov    0x10(%ebx),%eax
  106e23:	39 d0                	cmp    %edx,%eax
  106e25:	74 14                	je     106e3b <z_impl_k_mutex_lock+0xc6>
  106e27:	8b 75 10             	mov    0x10(%ebp),%esi
  106e2a:	0b 75 0c             	or     0xc(%ebp),%esi
  106e2d:	0f 85 8b 00 00 00    	jne    106ebe <z_impl_k_mutex_lock+0x149>
  106e33:	eb 69                	jmp    106e9e <z_impl_k_mutex_lock+0x129>
  106e35:	0f be 42 0e          	movsbl 0xe(%edx),%eax
  106e39:	eb 03                	jmp    106e3e <z_impl_k_mutex_lock+0xc9>
  106e3b:	8b 43 18             	mov    0x18(%ebx),%eax
  106e3e:	41                   	inc    %ecx
  106e3f:	89 53 10             	mov    %edx,0x10(%ebx)
  106e42:	89 43 18             	mov    %eax,0x18(%ebx)
  106e45:	89 4b 14             	mov    %ecx,0x14(%ebx)
  106e48:	68 d0 cc 12 00       	push   $0x12ccd0
  106e4d:	e8 be 3e 00 00       	call   10ad10 <z_spin_unlock_valid>
  106e52:	5a                   	pop    %edx
  106e53:	84 c0                	test   %al,%al
  106e55:	75 37                	jne    106e8e <z_impl_k_mutex_lock+0x119>
  106e57:	68 31 01 00 00       	push   $0x131
  106e5c:	68 61 13 11 00       	push   $0x111361
  106e61:	68 e8 13 11 00       	push   $0x1113e8
  106e66:	68 ee 10 11 00       	push   $0x1110ee
  106e6b:	e8 6d a7 ff ff       	call   1015dd <assert_print>
  106e70:	83 c4 10             	add    $0x10,%esp
  106e73:	68 d0 cc 12 00       	push   $0x12ccd0
  106e78:	68 ff 13 11 00       	push   $0x1113ff
  106e7d:	e8 5b a7 ff ff       	call   1015dd <assert_print>
  106e82:	5b                   	pop    %ebx
  106e83:	5e                   	pop    %esi
  106e84:	68 31 01 00 00       	push   $0x131
  106e89:	e9 6e ff ff ff       	jmp    106dfc <z_impl_k_mutex_lock+0x87>
  106e8e:	0f ba e7 09          	bt     $0x9,%edi
  106e92:	72 07                	jb     106e9b <z_impl_k_mutex_lock+0x126>
  106e94:	31 c0                	xor    %eax,%eax
  106e96:	e9 f3 00 00 00       	jmp    106f8e <z_impl_k_mutex_lock+0x219>
  106e9b:	fb                   	sti
  106e9c:	eb f6                	jmp    106e94 <z_impl_k_mutex_lock+0x11f>
  106e9e:	68 d0 cc 12 00       	push   $0x12ccd0
  106ea3:	e8 68 3e 00 00       	call   10ad10 <z_spin_unlock_valid>
  106ea8:	59                   	pop    %ecx
  106ea9:	84 c0                	test   %al,%al
  106eab:	74 aa                	je     106e57 <z_impl_k_mutex_lock+0xe2>
  106ead:	0f ba e7 09          	bt     $0x9,%edi
  106eb1:	73 01                	jae    106eb4 <z_impl_k_mutex_lock+0x13f>
  106eb3:	fb                   	sti
  106eb4:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
  106eb9:	e9 d0 00 00 00       	jmp    106f8e <z_impl_k_mutex_lock+0x219>
  106ebe:	0f be 48 0e          	movsbl 0xe(%eax),%ecx
  106ec2:	0f be 52 0e          	movsbl 0xe(%edx),%edx
  106ec6:	39 ca                	cmp    %ecx,%edx
  106ec8:	7e 02                	jle    106ecc <z_impl_k_mutex_lock+0x157>
  106eca:	89 ca                	mov    %ecx,%edx
  106ecc:	83 fa 81             	cmp    $0xffffff81,%edx
  106ecf:	7d 05                	jge    106ed6 <z_impl_k_mutex_lock+0x161>
  106ed1:	ba 81 ff ff ff       	mov    $0xffffff81,%edx
  106ed6:	31 f6                	xor    %esi,%esi
  106ed8:	39 d1                	cmp    %edx,%ecx
  106eda:	7e 07                	jle    106ee3 <z_impl_k_mutex_lock+0x16e>
  106edc:	e8 e2 fd ff ff       	call   106cc3 <adjust_owner_prio.isra.0>
  106ee1:	89 c6                	mov    %eax,%esi
  106ee3:	ff 75 10             	push   0x10(%ebp)
  106ee6:	ff 75 0c             	push   0xc(%ebp)
  106ee9:	53                   	push   %ebx
  106eea:	57                   	push   %edi
  106eeb:	68 d0 cc 12 00       	push   $0x12ccd0
  106ef0:	e8 01 26 00 00       	call   1094f6 <z_pend_curr>
  106ef5:	83 c4 14             	add    $0x14,%esp
  106ef8:	85 c0                	test   %eax,%eax
  106efa:	74 98                	je     106e94 <z_impl_k_mutex_lock+0x11f>
  106efc:	9c                   	pushf
  106efd:	fa                   	cli
  106efe:	5f                   	pop    %edi
  106eff:	68 d0 cc 12 00       	push   $0x12ccd0
  106f04:	e8 e6 3d 00 00       	call   10acef <z_spin_lock_valid>
  106f09:	5a                   	pop    %edx
  106f0a:	84 c0                	test   %al,%al
  106f0c:	0f 84 b8 fe ff ff    	je     106dca <z_impl_k_mutex_lock+0x55>
  106f12:	68 d0 cc 12 00       	push   $0x12ccd0
  106f17:	e8 2b 3e 00 00       	call   10ad47 <z_spin_lock_set_owner>
  106f1c:	83 7b 10 00          	cmpl   $0x0,0x10(%ebx)
  106f20:	58                   	pop    %eax
  106f21:	74 4b                	je     106f6e <z_impl_k_mutex_lock+0x1f9>
  106f23:	6a 00                	push   $0x0
  106f25:	53                   	push   %ebx
  106f26:	e8 8e a9 ff ff       	call   1018b9 <z_rb_get_minmax>
  106f2b:	5a                   	pop    %edx
  106f2c:	85 c0                	test   %eax,%eax
  106f2e:	59                   	pop    %ecx
  106f2f:	8b 53 18             	mov    0x18(%ebx),%edx
  106f32:	74 14                	je     106f48 <z_impl_k_mutex_lock+0x1d3>
  106f34:	0f be 40 0e          	movsbl 0xe(%eax),%eax
  106f38:	39 c2                	cmp    %eax,%edx
  106f3a:	7e 02                	jle    106f3e <z_impl_k_mutex_lock+0x1c9>
  106f3c:	89 c2                	mov    %eax,%edx
  106f3e:	83 fa 81             	cmp    $0xffffff81,%edx
  106f41:	7d 05                	jge    106f48 <z_impl_k_mutex_lock+0x1d3>
  106f43:	ba 81 ff ff ff       	mov    $0xffffff81,%edx
  106f48:	8b 43 10             	mov    0x10(%ebx),%eax
  106f4b:	e8 73 fd ff ff       	call   106cc3 <adjust_owner_prio.isra.0>
  106f50:	89 f1                	mov    %esi,%ecx
  106f52:	84 c9                	test   %cl,%cl
  106f54:	75 04                	jne    106f5a <z_impl_k_mutex_lock+0x1e5>
  106f56:	84 c0                	test   %al,%al
  106f58:	74 18                	je     106f72 <z_impl_k_mutex_lock+0x1fd>
  106f5a:	57                   	push   %edi
  106f5b:	68 d0 cc 12 00       	push   $0x12ccd0
  106f60:	e8 48 2a 00 00       	call   1099ad <z_reschedule>
  106f65:	59                   	pop    %ecx
  106f66:	5b                   	pop    %ebx
  106f67:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  106f6c:	eb 20                	jmp    106f8e <z_impl_k_mutex_lock+0x219>
  106f6e:	89 f0                	mov    %esi,%eax
  106f70:	eb e4                	jmp    106f56 <z_impl_k_mutex_lock+0x1e1>
  106f72:	68 d0 cc 12 00       	push   $0x12ccd0
  106f77:	e8 94 3d 00 00       	call   10ad10 <z_spin_unlock_valid>
  106f7c:	5a                   	pop    %edx
  106f7d:	84 c0                	test   %al,%al
  106f7f:	0f 84 d2 fe ff ff    	je     106e57 <z_impl_k_mutex_lock+0xe2>
  106f85:	0f ba e7 09          	bt     $0x9,%edi
  106f89:	73 dc                	jae    106f67 <z_impl_k_mutex_lock+0x1f2>
  106f8b:	fb                   	sti
  106f8c:	eb d9                	jmp    106f67 <z_impl_k_mutex_lock+0x1f2>
  106f8e:	8d 65 f4             	lea    -0xc(%ebp),%esp
  106f91:	5b                   	pop    %ebx
  106f92:	5e                   	pop    %esi
  106f93:	5f                   	pop    %edi
  106f94:	5d                   	pop    %ebp
  106f95:	c3                   	ret

00106f96 <z_mrsh_k_mutex_lock>:
  106f96:	55                   	push   %ebp
  106f97:	89 e5                	mov    %esp,%ebp
  106f99:	57                   	push   %edi
  106f9a:	56                   	push   %esi
  106f9b:	53                   	push   %ebx
  106f9c:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  106fa1:	8b 55 20             	mov    0x20(%ebp),%edx
  106fa4:	8b 5d 08             	mov    0x8(%ebp),%ebx
  106fa7:	8b 75 0c             	mov    0xc(%ebp),%esi
  106faa:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  106fb0:	8b 7d 10             	mov    0x10(%ebp),%edi
  106fb3:	53                   	push   %ebx
  106fb4:	e8 7c 64 00 00       	call   10d435 <k_object_find>
  106fb9:	5a                   	pop    %edx
  106fba:	31 c9                	xor    %ecx,%ecx
  106fbc:	89 da                	mov    %ebx,%edx
  106fbe:	e8 cc fc ff ff       	call   106c8f <k_object_validation_check.constprop.0>
  106fc3:	85 c0                	test   %eax,%eax
  106fc5:	74 24                	je     106feb <z_mrsh_k_mutex_lock+0x55>
  106fc7:	68 7c 09 11 00       	push   $0x11097c
  106fcc:	6a 45                	push   $0x45
  106fce:	68 dd 1f 11 00       	push   $0x111fdd
  106fd3:	e8 20 b5 ff ff       	call   1024f8 <z_log_minimal_printk>
  106fd8:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  106fdd:	83 c4 0c             	add    $0xc,%esp
  106fe0:	ff b0 88 00 00 00    	push   0x88(%eax)
  106fe6:	e8 db d1 ff ff       	call   1041c6 <arch_syscall_oops>
  106feb:	57                   	push   %edi
  106fec:	56                   	push   %esi
  106fed:	53                   	push   %ebx
  106fee:	e8 82 fd ff ff       	call   106d75 <z_impl_k_mutex_lock>
  106ff3:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  106ff9:	31 c9                	xor    %ecx,%ecx
  106ffb:	83 c4 0c             	add    $0xc,%esp
  106ffe:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  107004:	8d 65 f4             	lea    -0xc(%ebp),%esp
  107007:	5b                   	pop    %ebx
  107008:	5e                   	pop    %esi
  107009:	5f                   	pop    %edi
  10700a:	5d                   	pop    %ebp
  10700b:	c3                   	ret

0010700c <z_impl_k_mutex_unlock>:
  10700c:	55                   	push   %ebp
  10700d:	89 e5                	mov    %esp,%ebp
  10700f:	56                   	push   %esi
  107010:	53                   	push   %ebx
  107011:	83 3d a0 48 12 00 00 	cmpl   $0x0,0x1248a0
  107018:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10701b:	74 2f                	je     10704c <z_impl_k_mutex_unlock+0x40>
  10701d:	68 d7 00 00 00       	push   $0xd7
  107022:	68 6c 22 11 00       	push   $0x11226c
  107027:	68 8e 22 11 00       	push   $0x11228e
  10702c:	68 ee 10 11 00       	push   $0x1110ee
  107031:	e8 a7 a5 ff ff       	call   1015dd <assert_print>
  107036:	83 c4 10             	add    $0x10,%esp
  107039:	68 a0 22 11 00       	push   $0x1122a0
  10703e:	e8 9a a5 ff ff       	call   1015dd <assert_print>
  107043:	c7 04 24 d7 00 00 00 	movl   $0xd7,(%esp)
  10704a:	eb 3f                	jmp    10708b <z_impl_k_mutex_unlock+0x7f>
  10704c:	8b 43 10             	mov    0x10(%ebx),%eax
  10704f:	85 c0                	test   %eax,%eax
  107051:	0f 84 45 01 00 00    	je     10719c <z_impl_k_mutex_unlock+0x190>
  107057:	3b 05 a8 48 12 00    	cmp    0x1248a8,%eax
  10705d:	0f 85 40 01 00 00    	jne    1071a3 <z_impl_k_mutex_unlock+0x197>
  107063:	8b 43 14             	mov    0x14(%ebx),%eax
  107066:	85 c0                	test   %eax,%eax
  107068:	75 2d                	jne    107097 <z_impl_k_mutex_unlock+0x8b>
  10706a:	68 ef 00 00 00       	push   $0xef
  10706f:	68 6c 22 11 00       	push   $0x11226c
  107074:	68 c5 22 11 00       	push   $0x1122c5
  107079:	68 ee 10 11 00       	push   $0x1110ee
  10707e:	e8 5a a5 ff ff       	call   1015dd <assert_print>
  107083:	83 c4 10             	add    $0x10,%esp
  107086:	68 ef 00 00 00       	push   $0xef
  10708b:	68 6c 22 11 00       	push   $0x11226c
  107090:	e8 39 a5 ff ff       	call   1015ce <assert_post_action>
  107095:	59                   	pop    %ecx
  107096:	5b                   	pop    %ebx
  107097:	83 f8 01             	cmp    $0x1,%eax
  10709a:	74 0b                	je     1070a7 <z_impl_k_mutex_unlock+0x9b>
  10709c:	48                   	dec    %eax
  10709d:	89 43 14             	mov    %eax,0x14(%ebx)
  1070a0:	31 c0                	xor    %eax,%eax
  1070a2:	e9 ff 00 00 00       	jmp    1071a6 <z_impl_k_mutex_unlock+0x19a>
  1070a7:	9c                   	pushf
  1070a8:	fa                   	cli
  1070a9:	5e                   	pop    %esi
  1070aa:	68 d0 cc 12 00       	push   $0x12ccd0
  1070af:	e8 3b 3c 00 00       	call   10acef <z_spin_lock_valid>
  1070b4:	5a                   	pop    %edx
  1070b5:	84 c0                	test   %al,%al
  1070b7:	75 37                	jne    1070f0 <z_impl_k_mutex_unlock+0xe4>
  1070b9:	68 88 00 00 00       	push   $0x88
  1070be:	68 61 13 11 00       	push   $0x111361
  1070c3:	68 8e 13 11 00       	push   $0x11138e
  1070c8:	68 ee 10 11 00       	push   $0x1110ee
  1070cd:	e8 0b a5 ff ff       	call   1015dd <assert_print>
  1070d2:	83 c4 10             	add    $0x10,%esp
  1070d5:	68 d0 cc 12 00       	push   $0x12ccd0
  1070da:	68 a3 13 11 00       	push   $0x1113a3
  1070df:	e8 f9 a4 ff ff       	call   1015dd <assert_print>
  1070e4:	59                   	pop    %ecx
  1070e5:	5b                   	pop    %ebx
  1070e6:	68 88 00 00 00       	push   $0x88
  1070eb:	e9 92 00 00 00       	jmp    107182 <z_impl_k_mutex_unlock+0x176>
  1070f0:	68 d0 cc 12 00       	push   $0x12ccd0
  1070f5:	e8 4d 3c 00 00       	call   10ad47 <z_spin_lock_set_owner>
  1070fa:	58                   	pop    %eax
  1070fb:	8b 53 18             	mov    0x18(%ebx),%edx
  1070fe:	8b 43 10             	mov    0x10(%ebx),%eax
  107101:	e8 bd fb ff ff       	call   106cc3 <adjust_owner_prio.isra.0>
  107106:	53                   	push   %ebx
  107107:	e8 45 25 00 00       	call   109651 <z_unpend_first_thread>
  10710c:	5a                   	pop    %edx
  10710d:	85 c0                	test   %eax,%eax
  10710f:	89 43 10             	mov    %eax,0x10(%ebx)
  107112:	74 28                	je     10713c <z_impl_k_mutex_unlock+0x130>
  107114:	0f be 50 0e          	movsbl 0xe(%eax),%edx
  107118:	89 53 18             	mov    %edx,0x18(%ebx)
  10711b:	31 c9                	xor    %ecx,%ecx
  10711d:	8b 50 2c             	mov    0x2c(%eax),%edx
  107120:	89 0a                	mov    %ecx,(%edx)
  107122:	50                   	push   %eax
  107123:	e8 dc 20 00 00       	call   109204 <z_ready_thread>
  107128:	89 34 24             	mov    %esi,(%esp)
  10712b:	68 d0 cc 12 00       	push   $0x12ccd0
  107130:	e8 78 28 00 00       	call   1099ad <z_reschedule>
  107135:	5b                   	pop    %ebx
  107136:	5e                   	pop    %esi
  107137:	e9 64 ff ff ff       	jmp    1070a0 <z_impl_k_mutex_unlock+0x94>
  10713c:	31 c9                	xor    %ecx,%ecx
  10713e:	89 4b 14             	mov    %ecx,0x14(%ebx)
  107141:	68 d0 cc 12 00       	push   $0x12ccd0
  107146:	e8 c5 3b 00 00       	call   10ad10 <z_spin_unlock_valid>
  10714b:	5b                   	pop    %ebx
  10714c:	84 c0                	test   %al,%al
  10714e:	75 3c                	jne    10718c <z_impl_k_mutex_unlock+0x180>
  107150:	68 31 01 00 00       	push   $0x131
  107155:	68 61 13 11 00       	push   $0x111361
  10715a:	68 e8 13 11 00       	push   $0x1113e8
  10715f:	68 ee 10 11 00       	push   $0x1110ee
  107164:	e8 74 a4 ff ff       	call   1015dd <assert_print>
  107169:	83 c4 10             	add    $0x10,%esp
  10716c:	68 d0 cc 12 00       	push   $0x12ccd0
  107171:	68 ff 13 11 00       	push   $0x1113ff
  107176:	e8 62 a4 ff ff       	call   1015dd <assert_print>
  10717b:	58                   	pop    %eax
  10717c:	5a                   	pop    %edx
  10717d:	68 31 01 00 00       	push   $0x131
  107182:	68 61 13 11 00       	push   $0x111361
  107187:	e9 04 ff ff ff       	jmp    107090 <z_impl_k_mutex_unlock+0x84>
  10718c:	0f ba e6 09          	bt     $0x9,%esi
  107190:	0f 83 0a ff ff ff    	jae    1070a0 <z_impl_k_mutex_unlock+0x94>
  107196:	fb                   	sti
  107197:	e9 04 ff ff ff       	jmp    1070a0 <z_impl_k_mutex_unlock+0x94>
  10719c:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
  1071a1:	eb 03                	jmp    1071a6 <z_impl_k_mutex_unlock+0x19a>
  1071a3:	83 c8 ff             	or     $0xffffffff,%eax
  1071a6:	8d 65 f8             	lea    -0x8(%ebp),%esp
  1071a9:	5b                   	pop    %ebx
  1071aa:	5e                   	pop    %esi
  1071ab:	5d                   	pop    %ebp
  1071ac:	c3                   	ret

001071ad <z_mrsh_k_mutex_unlock>:
  1071ad:	55                   	push   %ebp
  1071ae:	89 e5                	mov    %esp,%ebp
  1071b0:	53                   	push   %ebx
  1071b1:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1071b6:	8b 55 20             	mov    0x20(%ebp),%edx
  1071b9:	8b 5d 08             	mov    0x8(%ebp),%ebx
  1071bc:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  1071c2:	53                   	push   %ebx
  1071c3:	e8 6d 62 00 00       	call   10d435 <k_object_find>
  1071c8:	5a                   	pop    %edx
  1071c9:	31 c9                	xor    %ecx,%ecx
  1071cb:	89 da                	mov    %ebx,%edx
  1071cd:	e8 bd fa ff ff       	call   106c8f <k_object_validation_check.constprop.0>
  1071d2:	85 c0                	test   %eax,%eax
  1071d4:	74 24                	je     1071fa <z_mrsh_k_mutex_unlock+0x4d>
  1071d6:	68 64 09 11 00       	push   $0x110964
  1071db:	6a 45                	push   $0x45
  1071dd:	68 dd 1f 11 00       	push   $0x111fdd
  1071e2:	e8 11 b3 ff ff       	call   1024f8 <z_log_minimal_printk>
  1071e7:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1071ec:	83 c4 0c             	add    $0xc,%esp
  1071ef:	ff b0 88 00 00 00    	push   0x88(%eax)
  1071f5:	e8 cc cf ff ff       	call   1041c6 <arch_syscall_oops>
  1071fa:	53                   	push   %ebx
  1071fb:	e8 0c fe ff ff       	call   10700c <z_impl_k_mutex_unlock>
  107200:	5a                   	pop    %edx
  107201:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  107207:	31 c9                	xor    %ecx,%ecx
  107209:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  10720f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  107212:	c9                   	leave
  107213:	c3                   	ret

00107214 <k_object_validation_check.constprop.0>:
  107214:	55                   	push   %ebp
  107215:	89 e5                	mov    %esp,%ebp
  107217:	57                   	push   %edi
  107218:	56                   	push   %esi
  107219:	89 d7                	mov    %edx,%edi
  10721b:	56                   	push   %esi
  10721c:	89 c6                	mov    %eax,%esi
  10721e:	51                   	push   %ecx
  10721f:	6a 05                	push   $0x5
  107221:	50                   	push   %eax
  107222:	e8 04 67 00 00       	call   10d92b <k_object_validate>
  107227:	83 c4 0c             	add    $0xc,%esp
  10722a:	85 c0                	test   %eax,%eax
  10722c:	74 13                	je     107241 <k_object_validation_check.constprop.0+0x2d>
  10722e:	6a 05                	push   $0x5
  107230:	56                   	push   %esi
  107231:	57                   	push   %edi
  107232:	50                   	push   %eax
  107233:	89 45 f4             	mov    %eax,-0xc(%ebp)
  107236:	e8 73 65 00 00       	call   10d7ae <k_object_dump_error>
  10723b:	83 c4 10             	add    $0x10,%esp
  10723e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  107241:	8d 65 f8             	lea    -0x8(%ebp),%esp
  107244:	5e                   	pop    %esi
  107245:	5f                   	pop    %edi
  107246:	5d                   	pop    %ebp
  107247:	c3                   	ret

00107248 <queue_insert>:
  107248:	55                   	push   %ebp
  107249:	89 e5                	mov    %esp,%ebp
  10724b:	57                   	push   %edi
  10724c:	56                   	push   %esi
  10724d:	89 d7                	mov    %edx,%edi
  10724f:	53                   	push   %ebx
  107250:	89 c3                	mov    %eax,%ebx
  107252:	83 ec 10             	sub    $0x10,%esp
  107255:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  107258:	8b 45 08             	mov    0x8(%ebp),%eax
  10725b:	8d 73 08             	lea    0x8(%ebx),%esi
  10725e:	89 45 e8             	mov    %eax,-0x18(%ebp)
  107261:	8b 45 0c             	mov    0xc(%ebp),%eax
  107264:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  107267:	9c                   	pushf
  107268:	fa                   	cli
  107269:	8f 45 ec             	pop    -0x14(%ebp)
  10726c:	56                   	push   %esi
  10726d:	e8 7d 3a 00 00       	call   10acef <z_spin_lock_valid>
  107272:	5a                   	pop    %edx
  107273:	84 c0                	test   %al,%al
  107275:	75 33                	jne    1072aa <queue_insert+0x62>
  107277:	68 88 00 00 00       	push   $0x88
  10727c:	68 61 13 11 00       	push   $0x111361
  107281:	68 8e 13 11 00       	push   $0x11138e
  107286:	68 ee 10 11 00       	push   $0x1110ee
  10728b:	e8 4d a3 ff ff       	call   1015dd <assert_print>
  107290:	83 c4 10             	add    $0x10,%esp
  107293:	56                   	push   %esi
  107294:	68 a3 13 11 00       	push   $0x1113a3
  107299:	e8 3f a3 ff ff       	call   1015dd <assert_print>
  10729e:	5b                   	pop    %ebx
  10729f:	5e                   	pop    %esi
  1072a0:	68 88 00 00 00       	push   $0x88
  1072a5:	e9 85 00 00 00       	jmp    10732f <queue_insert+0xe7>
  1072aa:	56                   	push   %esi
  1072ab:	e8 97 3a 00 00       	call   10ad47 <z_spin_lock_set_owner>
  1072b0:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
  1072b4:	59                   	pop    %ecx
  1072b5:	74 03                	je     1072ba <queue_insert+0x72>
  1072b7:	8b 7b 04             	mov    0x4(%ebx),%edi
  1072ba:	8d 43 0c             	lea    0xc(%ebx),%eax
  1072bd:	50                   	push   %eax
  1072be:	e8 8e 23 00 00       	call   109651 <z_unpend_first_thread>
  1072c3:	5a                   	pop    %edx
  1072c4:	85 c0                	test   %eax,%eax
  1072c6:	74 19                	je     1072e1 <queue_insert+0x99>
  1072c8:	8b 50 2c             	mov    0x2c(%eax),%edx
  1072cb:	8b 7d f0             	mov    -0x10(%ebp),%edi
  1072ce:	31 c9                	xor    %ecx,%ecx
  1072d0:	89 0a                	mov    %ecx,(%edx)
  1072d2:	89 78 14             	mov    %edi,0x14(%eax)
  1072d5:	50                   	push   %eax
  1072d6:	e8 29 1f 00 00       	call   109204 <z_ready_thread>
  1072db:	5b                   	pop    %ebx
  1072dc:	e9 ca 00 00 00       	jmp    1073ab <queue_insert+0x163>
  1072e1:	80 7d e8 00          	cmpb   $0x0,-0x18(%ebp)
  1072e5:	74 71                	je     107358 <queue_insert+0x110>
  1072e7:	6a 08                	push   $0x8
  1072e9:	6a 00                	push   $0x0
  1072eb:	e8 cf 51 00 00       	call   10c4bf <z_thread_aligned_alloc>
  1072f0:	59                   	pop    %ecx
  1072f1:	85 c0                	test   %eax,%eax
  1072f3:	5a                   	pop    %edx
  1072f4:	75 54                	jne    10734a <queue_insert+0x102>
  1072f6:	56                   	push   %esi
  1072f7:	e8 14 3a 00 00       	call   10ad10 <z_spin_unlock_valid>
  1072fc:	5a                   	pop    %edx
  1072fd:	84 c0                	test   %al,%al
  1072ff:	75 3a                	jne    10733b <queue_insert+0xf3>
  107301:	68 31 01 00 00       	push   $0x131
  107306:	68 61 13 11 00       	push   $0x111361
  10730b:	68 e8 13 11 00       	push   $0x1113e8
  107310:	68 ee 10 11 00       	push   $0x1110ee
  107315:	e8 c3 a2 ff ff       	call   1015dd <assert_print>
  10731a:	83 c4 10             	add    $0x10,%esp
  10731d:	56                   	push   %esi
  10731e:	68 ff 13 11 00       	push   $0x1113ff
  107323:	e8 b5 a2 ff ff       	call   1015dd <assert_print>
  107328:	5f                   	pop    %edi
  107329:	58                   	pop    %eax
  10732a:	68 31 01 00 00       	push   $0x131
  10732f:	68 61 13 11 00       	push   $0x111361
  107334:	e8 95 a2 ff ff       	call   1015ce <assert_post_action>
  107339:	5b                   	pop    %ebx
  10733a:	5e                   	pop    %esi
  10733b:	0f ba 65 ec 09       	btl    $0x9,-0x14(%ebp)
  107340:	73 01                	jae    107343 <queue_insert+0xfb>
  107342:	fb                   	sti
  107343:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
  107348:	eb 6e                	jmp    1073b8 <queue_insert+0x170>
  10734a:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10734d:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
  107353:	89 48 04             	mov    %ecx,0x4(%eax)
  107356:	eb 07                	jmp    10735f <queue_insert+0x117>
  107358:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10735b:	31 c9                	xor    %ecx,%ecx
  10735d:	89 08                	mov    %ecx,(%eax)
  10735f:	8b 10                	mov    (%eax),%edx
  107361:	83 e2 03             	and    $0x3,%edx
  107364:	85 ff                	test   %edi,%edi
  107366:	75 0e                	jne    107376 <queue_insert+0x12e>
  107368:	0b 13                	or     (%ebx),%edx
  10736a:	89 10                	mov    %edx,(%eax)
  10736c:	89 03                	mov    %eax,(%ebx)
  10736e:	83 7b 04 00          	cmpl   $0x0,0x4(%ebx)
  107372:	75 37                	jne    1073ab <queue_insert+0x163>
  107374:	eb 20                	jmp    107396 <queue_insert+0x14e>
  107376:	8b 0f                	mov    (%edi),%ecx
  107378:	83 f9 03             	cmp    $0x3,%ecx
  10737b:	77 1e                	ja     10739b <queue_insert+0x153>
  10737d:	89 10                	mov    %edx,(%eax)
  10737f:	8b 4b 04             	mov    0x4(%ebx),%ecx
  107382:	85 c9                	test   %ecx,%ecx
  107384:	75 07                	jne    10738d <queue_insert+0x145>
  107386:	89 43 04             	mov    %eax,0x4(%ebx)
  107389:	89 03                	mov    %eax,(%ebx)
  10738b:	eb 1e                	jmp    1073ab <queue_insert+0x163>
  10738d:	8b 11                	mov    (%ecx),%edx
  10738f:	83 e2 03             	and    $0x3,%edx
  107392:	09 c2                	or     %eax,%edx
  107394:	89 11                	mov    %edx,(%ecx)
  107396:	89 43 04             	mov    %eax,0x4(%ebx)
  107399:	eb 10                	jmp    1073ab <queue_insert+0x163>
  10739b:	83 e1 fc             	and    $0xfffffffc,%ecx
  10739e:	09 d1                	or     %edx,%ecx
  1073a0:	89 08                	mov    %ecx,(%eax)
  1073a2:	8b 17                	mov    (%edi),%edx
  1073a4:	83 e2 03             	and    $0x3,%edx
  1073a7:	09 d0                	or     %edx,%eax
  1073a9:	89 07                	mov    %eax,(%edi)
  1073ab:	ff 75 ec             	push   -0x14(%ebp)
  1073ae:	56                   	push   %esi
  1073af:	e8 f9 25 00 00       	call   1099ad <z_reschedule>
  1073b4:	58                   	pop    %eax
  1073b5:	31 c0                	xor    %eax,%eax
  1073b7:	5a                   	pop    %edx
  1073b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1073bb:	5b                   	pop    %ebx
  1073bc:	5e                   	pop    %esi
  1073bd:	5f                   	pop    %edi
  1073be:	5d                   	pop    %ebp
  1073bf:	c3                   	ret

001073c0 <z_queue_node_peek>:
  1073c0:	55                   	push   %ebp
  1073c1:	89 e5                	mov    %esp,%ebp
  1073c3:	53                   	push   %ebx
  1073c4:	8b 45 08             	mov    0x8(%ebp),%eax
  1073c7:	8b 55 0c             	mov    0xc(%ebp),%edx
  1073ca:	85 c0                	test   %eax,%eax
  1073cc:	74 15                	je     1073e3 <z_queue_node_peek+0x23>
  1073ce:	f6 00 03             	testb  $0x3,(%eax)
  1073d1:	74 10                	je     1073e3 <z_queue_node_peek+0x23>
  1073d3:	8b 58 04             	mov    0x4(%eax),%ebx
  1073d6:	84 d2                	test   %dl,%dl
  1073d8:	74 07                	je     1073e1 <z_queue_node_peek+0x21>
  1073da:	50                   	push   %eax
  1073db:	e8 c5 50 00 00       	call   10c4a5 <k_free>
  1073e0:	58                   	pop    %eax
  1073e1:	89 d8                	mov    %ebx,%eax
  1073e3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1073e6:	c9                   	leave
  1073e7:	c3                   	ret

001073e8 <z_impl_k_queue_init>:
  1073e8:	55                   	push   %ebp
  1073e9:	31 c0                	xor    %eax,%eax
  1073eb:	89 e5                	mov    %esp,%ebp
  1073ed:	57                   	push   %edi
  1073ee:	b9 04 00 00 00       	mov    $0x4,%ecx
  1073f3:	8b 55 08             	mov    0x8(%ebp),%edx
  1073f6:	89 02                	mov    %eax,(%edx)
  1073f8:	89 42 04             	mov    %eax,0x4(%edx)
  1073fb:	89 42 08             	mov    %eax,0x8(%edx)
  1073fe:	8d 7a 0c             	lea    0xc(%edx),%edi
  107401:	31 c0                	xor    %eax,%eax
  107403:	f3 ab                	rep stos %eax,%es:(%edi)
  107405:	c7 42 10 d3 7e 10 00 	movl   $0x107ed3,0x10(%edx)
  10740c:	5f                   	pop    %edi
  10740d:	5d                   	pop    %ebp
  10740e:	e9 8f 65 00 00       	jmp    10d9a2 <k_object_init>

00107413 <z_mrsh_k_queue_init>:
  107413:	55                   	push   %ebp
  107414:	89 e5                	mov    %esp,%ebp
  107416:	53                   	push   %ebx
  107417:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10741c:	8b 55 20             	mov    0x20(%ebp),%edx
  10741f:	8b 5d 08             	mov    0x8(%ebp),%ebx
  107422:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  107428:	53                   	push   %ebx
  107429:	e8 07 60 00 00       	call   10d435 <k_object_find>
  10742e:	59                   	pop    %ecx
  10742f:	89 da                	mov    %ebx,%edx
  107431:	83 c9 ff             	or     $0xffffffff,%ecx
  107434:	e8 db fd ff ff       	call   107214 <k_object_validation_check.constprop.0>
  107439:	85 c0                	test   %eax,%eax
  10743b:	74 24                	je     107461 <z_mrsh_k_queue_init+0x4e>
  10743d:	68 60 0a 11 00       	push   $0x110a60
  107442:	6a 45                	push   $0x45
  107444:	68 dd 1f 11 00       	push   $0x111fdd
  107449:	e8 aa b0 ff ff       	call   1024f8 <z_log_minimal_printk>
  10744e:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107453:	83 c4 0c             	add    $0xc,%esp
  107456:	ff b0 88 00 00 00    	push   0x88(%eax)
  10745c:	e8 65 cd ff ff       	call   1041c6 <arch_syscall_oops>
  107461:	53                   	push   %ebx
  107462:	e8 81 ff ff ff       	call   1073e8 <z_impl_k_queue_init>
  107467:	58                   	pop    %eax
  107468:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10746d:	31 d2                	xor    %edx,%edx
  10746f:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  107475:	31 c0                	xor    %eax,%eax
  107477:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10747a:	c9                   	leave
  10747b:	c3                   	ret

0010747c <z_impl_k_queue_cancel_wait>:
  10747c:	55                   	push   %ebp
  10747d:	89 e5                	mov    %esp,%ebp
  10747f:	57                   	push   %edi
  107480:	56                   	push   %esi
  107481:	53                   	push   %ebx
  107482:	8b 7d 08             	mov    0x8(%ebp),%edi
  107485:	8d 5f 08             	lea    0x8(%edi),%ebx
  107488:	9c                   	pushf
  107489:	fa                   	cli
  10748a:	5e                   	pop    %esi
  10748b:	53                   	push   %ebx
  10748c:	e8 5e 38 00 00       	call   10acef <z_spin_lock_valid>
  107491:	5a                   	pop    %edx
  107492:	84 c0                	test   %al,%al
  107494:	75 3a                	jne    1074d0 <z_impl_k_queue_cancel_wait+0x54>
  107496:	68 88 00 00 00       	push   $0x88
  10749b:	68 61 13 11 00       	push   $0x111361
  1074a0:	68 8e 13 11 00       	push   $0x11138e
  1074a5:	68 ee 10 11 00       	push   $0x1110ee
  1074aa:	e8 2e a1 ff ff       	call   1015dd <assert_print>
  1074af:	83 c4 10             	add    $0x10,%esp
  1074b2:	53                   	push   %ebx
  1074b3:	68 a3 13 11 00       	push   $0x1113a3
  1074b8:	e8 20 a1 ff ff       	call   1015dd <assert_print>
  1074bd:	59                   	pop    %ecx
  1074be:	5b                   	pop    %ebx
  1074bf:	68 88 00 00 00       	push   $0x88
  1074c4:	68 61 13 11 00       	push   $0x111361
  1074c9:	e8 00 a1 ff ff       	call   1015ce <assert_post_action>
  1074ce:	5e                   	pop    %esi
  1074cf:	5f                   	pop    %edi
  1074d0:	53                   	push   %ebx
  1074d1:	83 c7 0c             	add    $0xc,%edi
  1074d4:	e8 6e 38 00 00       	call   10ad47 <z_spin_lock_set_owner>
  1074d9:	89 3c 24             	mov    %edi,(%esp)
  1074dc:	e8 70 21 00 00       	call   109651 <z_unpend_first_thread>
  1074e1:	5a                   	pop    %edx
  1074e2:	85 c0                	test   %eax,%eax
  1074e4:	74 11                	je     1074f7 <z_impl_k_queue_cancel_wait+0x7b>
  1074e6:	8b 50 2c             	mov    0x2c(%eax),%edx
  1074e9:	31 c9                	xor    %ecx,%ecx
  1074eb:	89 0a                	mov    %ecx,(%edx)
  1074ed:	89 48 14             	mov    %ecx,0x14(%eax)
  1074f0:	50                   	push   %eax
  1074f1:	e8 0e 1d 00 00       	call   109204 <z_ready_thread>
  1074f6:	5f                   	pop    %edi
  1074f7:	56                   	push   %esi
  1074f8:	53                   	push   %ebx
  1074f9:	e8 af 24 00 00       	call   1099ad <z_reschedule>
  1074fe:	58                   	pop    %eax
  1074ff:	5a                   	pop    %edx
  107500:	8d 65 f4             	lea    -0xc(%ebp),%esp
  107503:	5b                   	pop    %ebx
  107504:	5e                   	pop    %esi
  107505:	5f                   	pop    %edi
  107506:	5d                   	pop    %ebp
  107507:	c3                   	ret

00107508 <z_mrsh_k_queue_cancel_wait>:
  107508:	55                   	push   %ebp
  107509:	89 e5                	mov    %esp,%ebp
  10750b:	53                   	push   %ebx
  10750c:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107511:	8b 55 20             	mov    0x20(%ebp),%edx
  107514:	8b 5d 08             	mov    0x8(%ebp),%ebx
  107517:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10751d:	53                   	push   %ebx
  10751e:	e8 12 5f 00 00       	call   10d435 <k_object_find>
  107523:	59                   	pop    %ecx
  107524:	89 da                	mov    %ebx,%edx
  107526:	31 c9                	xor    %ecx,%ecx
  107528:	e8 e7 fc ff ff       	call   107214 <k_object_validation_check.constprop.0>
  10752d:	85 c0                	test   %eax,%eax
  10752f:	74 24                	je     107555 <z_mrsh_k_queue_cancel_wait+0x4d>
  107531:	68 44 0a 11 00       	push   $0x110a44
  107536:	6a 45                	push   $0x45
  107538:	68 dd 1f 11 00       	push   $0x111fdd
  10753d:	e8 b6 af ff ff       	call   1024f8 <z_log_minimal_printk>
  107542:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107547:	83 c4 0c             	add    $0xc,%esp
  10754a:	ff b0 88 00 00 00    	push   0x88(%eax)
  107550:	e8 71 cc ff ff       	call   1041c6 <arch_syscall_oops>
  107555:	53                   	push   %ebx
  107556:	e8 21 ff ff ff       	call   10747c <z_impl_k_queue_cancel_wait>
  10755b:	58                   	pop    %eax
  10755c:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107561:	31 d2                	xor    %edx,%edx
  107563:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  107569:	31 c0                	xor    %eax,%eax
  10756b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10756e:	c9                   	leave
  10756f:	c3                   	ret

00107570 <z_impl_k_queue_alloc_append>:
  107570:	55                   	push   %ebp
  107571:	31 d2                	xor    %edx,%edx
  107573:	89 e5                	mov    %esp,%ebp
  107575:	8b 45 08             	mov    0x8(%ebp),%eax
  107578:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10757b:	c7 45 08 01 00 00 00 	movl   $0x1,0x8(%ebp)
  107582:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
  107589:	5d                   	pop    %ebp
  10758a:	e9 b9 fc ff ff       	jmp    107248 <queue_insert>

0010758f <z_mrsh_k_queue_alloc_append>:
  10758f:	55                   	push   %ebp
  107590:	89 e5                	mov    %esp,%ebp
  107592:	53                   	push   %ebx
  107593:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107598:	8b 55 20             	mov    0x20(%ebp),%edx
  10759b:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10759e:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  1075a4:	53                   	push   %ebx
  1075a5:	e8 8b 5e 00 00       	call   10d435 <k_object_find>
  1075aa:	5a                   	pop    %edx
  1075ab:	31 c9                	xor    %ecx,%ecx
  1075ad:	89 da                	mov    %ebx,%edx
  1075af:	e8 60 fc ff ff       	call   107214 <k_object_validation_check.constprop.0>
  1075b4:	85 c0                	test   %eax,%eax
  1075b6:	74 24                	je     1075dc <z_mrsh_k_queue_alloc_append+0x4d>
  1075b8:	68 28 0a 11 00       	push   $0x110a28
  1075bd:	6a 45                	push   $0x45
  1075bf:	68 dd 1f 11 00       	push   $0x111fdd
  1075c4:	e8 2f af ff ff       	call   1024f8 <z_log_minimal_printk>
  1075c9:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1075ce:	83 c4 0c             	add    $0xc,%esp
  1075d1:	ff b0 88 00 00 00    	push   0x88(%eax)
  1075d7:	e8 ea cb ff ff       	call   1041c6 <arch_syscall_oops>
  1075dc:	ff 75 0c             	push   0xc(%ebp)
  1075df:	53                   	push   %ebx
  1075e0:	e8 8b ff ff ff       	call   107570 <z_impl_k_queue_alloc_append>
  1075e5:	5a                   	pop    %edx
  1075e6:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  1075ec:	31 db                	xor    %ebx,%ebx
  1075ee:	59                   	pop    %ecx
  1075ef:	89 9a 88 00 00 00    	mov    %ebx,0x88(%edx)
  1075f5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1075f8:	c9                   	leave
  1075f9:	c3                   	ret

001075fa <z_impl_k_queue_alloc_prepend>:
  1075fa:	55                   	push   %ebp
  1075fb:	31 d2                	xor    %edx,%edx
  1075fd:	89 e5                	mov    %esp,%ebp
  1075ff:	8b 45 08             	mov    0x8(%ebp),%eax
  107602:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  107605:	c7 45 08 01 00 00 00 	movl   $0x1,0x8(%ebp)
  10760c:	89 55 0c             	mov    %edx,0xc(%ebp)
  10760f:	31 d2                	xor    %edx,%edx
  107611:	5d                   	pop    %ebp
  107612:	e9 31 fc ff ff       	jmp    107248 <queue_insert>

00107617 <z_mrsh_k_queue_alloc_prepend>:
  107617:	55                   	push   %ebp
  107618:	89 e5                	mov    %esp,%ebp
  10761a:	53                   	push   %ebx
  10761b:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107620:	8b 55 20             	mov    0x20(%ebp),%edx
  107623:	8b 5d 08             	mov    0x8(%ebp),%ebx
  107626:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10762c:	53                   	push   %ebx
  10762d:	e8 03 5e 00 00       	call   10d435 <k_object_find>
  107632:	5a                   	pop    %edx
  107633:	31 c9                	xor    %ecx,%ecx
  107635:	89 da                	mov    %ebx,%edx
  107637:	e8 d8 fb ff ff       	call   107214 <k_object_validation_check.constprop.0>
  10763c:	85 c0                	test   %eax,%eax
  10763e:	74 24                	je     107664 <z_mrsh_k_queue_alloc_prepend+0x4d>
  107640:	68 08 0a 11 00       	push   $0x110a08
  107645:	6a 45                	push   $0x45
  107647:	68 dd 1f 11 00       	push   $0x111fdd
  10764c:	e8 a7 ae ff ff       	call   1024f8 <z_log_minimal_printk>
  107651:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107656:	83 c4 0c             	add    $0xc,%esp
  107659:	ff b0 88 00 00 00    	push   0x88(%eax)
  10765f:	e8 62 cb ff ff       	call   1041c6 <arch_syscall_oops>
  107664:	ff 75 0c             	push   0xc(%ebp)
  107667:	53                   	push   %ebx
  107668:	e8 8d ff ff ff       	call   1075fa <z_impl_k_queue_alloc_prepend>
  10766d:	5a                   	pop    %edx
  10766e:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  107674:	31 db                	xor    %ebx,%ebx
  107676:	59                   	pop    %ecx
  107677:	89 9a 88 00 00 00    	mov    %ebx,0x88(%edx)
  10767d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  107680:	c9                   	leave
  107681:	c3                   	ret

00107682 <z_impl_k_queue_get>:
  107682:	55                   	push   %ebp
  107683:	89 e5                	mov    %esp,%ebp
  107685:	57                   	push   %edi
  107686:	56                   	push   %esi
  107687:	53                   	push   %ebx
  107688:	50                   	push   %eax
  107689:	8b 7d 08             	mov    0x8(%ebp),%edi
  10768c:	8d 5f 08             	lea    0x8(%edi),%ebx
  10768f:	9c                   	pushf
  107690:	fa                   	cli
  107691:	8f 45 f0             	pop    -0x10(%ebp)
  107694:	53                   	push   %ebx
  107695:	e8 55 36 00 00       	call   10acef <z_spin_lock_valid>
  10769a:	5a                   	pop    %edx
  10769b:	84 c0                	test   %al,%al
  10769d:	75 30                	jne    1076cf <z_impl_k_queue_get+0x4d>
  10769f:	68 88 00 00 00       	push   $0x88
  1076a4:	68 61 13 11 00       	push   $0x111361
  1076a9:	68 8e 13 11 00       	push   $0x11138e
  1076ae:	68 ee 10 11 00       	push   $0x1110ee
  1076b3:	e8 25 9f ff ff       	call   1015dd <assert_print>
  1076b8:	83 c4 10             	add    $0x10,%esp
  1076bb:	53                   	push   %ebx
  1076bc:	68 a3 13 11 00       	push   $0x1113a3
  1076c1:	e8 17 9f ff ff       	call   1015dd <assert_print>
  1076c6:	5f                   	pop    %edi
  1076c7:	58                   	pop    %eax
  1076c8:	68 88 00 00 00       	push   $0x88
  1076cd:	eb 61                	jmp    107730 <z_impl_k_queue_get+0xae>
  1076cf:	53                   	push   %ebx
  1076d0:	e8 72 36 00 00       	call   10ad47 <z_spin_lock_set_owner>
  1076d5:	5e                   	pop    %esi
  1076d6:	8b 37                	mov    (%edi),%esi
  1076d8:	85 f6                	test   %esi,%esi
  1076da:	74 60                	je     10773c <z_impl_k_queue_get+0xba>
  1076dc:	8b 06                	mov    (%esi),%eax
  1076de:	83 e0 fc             	and    $0xfffffffc,%eax
  1076e1:	3b 77 04             	cmp    0x4(%edi),%esi
  1076e4:	89 07                	mov    %eax,(%edi)
  1076e6:	75 03                	jne    1076eb <z_impl_k_queue_get+0x69>
  1076e8:	89 47 04             	mov    %eax,0x4(%edi)
  1076eb:	6a 01                	push   $0x1
  1076ed:	56                   	push   %esi
  1076ee:	e8 cd fc ff ff       	call   1073c0 <z_queue_node_peek>
  1076f3:	5a                   	pop    %edx
  1076f4:	89 c6                	mov    %eax,%esi
  1076f6:	59                   	pop    %ecx
  1076f7:	53                   	push   %ebx
  1076f8:	e8 13 36 00 00       	call   10ad10 <z_spin_unlock_valid>
  1076fd:	5f                   	pop    %edi
  1076fe:	84 c0                	test   %al,%al
  107700:	75 44                	jne    107746 <z_impl_k_queue_get+0xc4>
  107702:	68 31 01 00 00       	push   $0x131
  107707:	68 61 13 11 00       	push   $0x111361
  10770c:	68 e8 13 11 00       	push   $0x1113e8
  107711:	68 ee 10 11 00       	push   $0x1110ee
  107716:	e8 c2 9e ff ff       	call   1015dd <assert_print>
  10771b:	83 c4 10             	add    $0x10,%esp
  10771e:	53                   	push   %ebx
  10771f:	68 ff 13 11 00       	push   $0x1113ff
  107724:	e8 b4 9e ff ff       	call   1015dd <assert_print>
  107729:	59                   	pop    %ecx
  10772a:	5b                   	pop    %ebx
  10772b:	68 31 01 00 00       	push   $0x131
  107730:	68 61 13 11 00       	push   $0x111361
  107735:	e8 94 9e ff ff       	call   1015ce <assert_post_action>
  10773a:	58                   	pop    %eax
  10773b:	5a                   	pop    %edx
  10773c:	8b 45 10             	mov    0x10(%ebp),%eax
  10773f:	0b 45 0c             	or     0xc(%ebp),%eax
  107742:	75 0c                	jne    107750 <z_impl_k_queue_get+0xce>
  107744:	eb b1                	jmp    1076f7 <z_impl_k_queue_get+0x75>
  107746:	0f ba 65 f0 09       	btl    $0x9,-0x10(%ebp)
  10774b:	73 25                	jae    107772 <z_impl_k_queue_get+0xf0>
  10774d:	fb                   	sti
  10774e:	eb 22                	jmp    107772 <z_impl_k_queue_get+0xf0>
  107750:	ff 75 10             	push   0x10(%ebp)
  107753:	ff 75 0c             	push   0xc(%ebp)
  107756:	8d 4f 0c             	lea    0xc(%edi),%ecx
  107759:	51                   	push   %ecx
  10775a:	ff 75 f0             	push   -0x10(%ebp)
  10775d:	53                   	push   %ebx
  10775e:	e8 93 1d 00 00       	call   1094f6 <z_pend_curr>
  107763:	83 c4 14             	add    $0x14,%esp
  107766:	85 c0                	test   %eax,%eax
  107768:	75 08                	jne    107772 <z_impl_k_queue_get+0xf0>
  10776a:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10776f:	8b 70 14             	mov    0x14(%eax),%esi
  107772:	8d 65 f4             	lea    -0xc(%ebp),%esp
  107775:	89 f0                	mov    %esi,%eax
  107777:	5b                   	pop    %ebx
  107778:	5e                   	pop    %esi
  107779:	5f                   	pop    %edi
  10777a:	5d                   	pop    %ebp
  10777b:	c3                   	ret

0010777c <z_impl_k_queue_peek_head>:
  10777c:	55                   	push   %ebp
  10777d:	89 e5                	mov    %esp,%ebp
  10777f:	6a 00                	push   $0x0
  107781:	8b 45 08             	mov    0x8(%ebp),%eax
  107784:	ff 30                	push   (%eax)
  107786:	e8 35 fc ff ff       	call   1073c0 <z_queue_node_peek>
  10778b:	5a                   	pop    %edx
  10778c:	59                   	pop    %ecx
  10778d:	c9                   	leave
  10778e:	c3                   	ret

0010778f <z_impl_k_queue_peek_tail>:
  10778f:	55                   	push   %ebp
  107790:	89 e5                	mov    %esp,%ebp
  107792:	6a 00                	push   $0x0
  107794:	8b 45 08             	mov    0x8(%ebp),%eax
  107797:	ff 70 04             	push   0x4(%eax)
  10779a:	e8 21 fc ff ff       	call   1073c0 <z_queue_node_peek>
  10779f:	5a                   	pop    %edx
  1077a0:	59                   	pop    %ecx
  1077a1:	c9                   	leave
  1077a2:	c3                   	ret

001077a3 <z_mrsh_k_queue_get>:
  1077a3:	55                   	push   %ebp
  1077a4:	89 e5                	mov    %esp,%ebp
  1077a6:	57                   	push   %edi
  1077a7:	56                   	push   %esi
  1077a8:	53                   	push   %ebx
  1077a9:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1077ae:	8b 55 20             	mov    0x20(%ebp),%edx
  1077b1:	8b 5d 08             	mov    0x8(%ebp),%ebx
  1077b4:	8b 75 0c             	mov    0xc(%ebp),%esi
  1077b7:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  1077bd:	8b 7d 10             	mov    0x10(%ebp),%edi
  1077c0:	53                   	push   %ebx
  1077c1:	e8 6f 5c 00 00       	call   10d435 <k_object_find>
  1077c6:	5a                   	pop    %edx
  1077c7:	31 c9                	xor    %ecx,%ecx
  1077c9:	89 da                	mov    %ebx,%edx
  1077cb:	e8 44 fa ff ff       	call   107214 <k_object_validation_check.constprop.0>
  1077d0:	85 c0                	test   %eax,%eax
  1077d2:	74 24                	je     1077f8 <z_mrsh_k_queue_get+0x55>
  1077d4:	68 f4 09 11 00       	push   $0x1109f4
  1077d9:	6a 45                	push   $0x45
  1077db:	68 dd 1f 11 00       	push   $0x111fdd
  1077e0:	e8 13 ad ff ff       	call   1024f8 <z_log_minimal_printk>
  1077e5:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1077ea:	83 c4 0c             	add    $0xc,%esp
  1077ed:	ff b0 88 00 00 00    	push   0x88(%eax)
  1077f3:	e8 ce c9 ff ff       	call   1041c6 <arch_syscall_oops>
  1077f8:	57                   	push   %edi
  1077f9:	56                   	push   %esi
  1077fa:	53                   	push   %ebx
  1077fb:	e8 82 fe ff ff       	call   107682 <z_impl_k_queue_get>
  107800:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  107806:	31 c9                	xor    %ecx,%ecx
  107808:	83 c4 0c             	add    $0xc,%esp
  10780b:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  107811:	8d 65 f4             	lea    -0xc(%ebp),%esp
  107814:	5b                   	pop    %ebx
  107815:	5e                   	pop    %esi
  107816:	5f                   	pop    %edi
  107817:	5d                   	pop    %ebp
  107818:	c3                   	ret

00107819 <z_mrsh_k_queue_is_empty>:
  107819:	55                   	push   %ebp
  10781a:	89 e5                	mov    %esp,%ebp
  10781c:	53                   	push   %ebx
  10781d:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107822:	8b 55 20             	mov    0x20(%ebp),%edx
  107825:	8b 5d 08             	mov    0x8(%ebp),%ebx
  107828:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10782e:	53                   	push   %ebx
  10782f:	e8 01 5c 00 00       	call   10d435 <k_object_find>
  107834:	5a                   	pop    %edx
  107835:	31 c9                	xor    %ecx,%ecx
  107837:	89 da                	mov    %ebx,%edx
  107839:	e8 d6 f9 ff ff       	call   107214 <k_object_validation_check.constprop.0>
  10783e:	85 c0                	test   %eax,%eax
  107840:	74 24                	je     107866 <z_mrsh_k_queue_is_empty+0x4d>
  107842:	68 dc 09 11 00       	push   $0x1109dc
  107847:	6a 45                	push   $0x45
  107849:	68 dd 1f 11 00       	push   $0x111fdd
  10784e:	e8 a5 ac ff ff       	call   1024f8 <z_log_minimal_printk>
  107853:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107858:	83 c4 0c             	add    $0xc,%esp
  10785b:	ff b0 88 00 00 00    	push   0x88(%eax)
  107861:	e8 60 c9 ff ff       	call   1041c6 <arch_syscall_oops>
  107866:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10786b:	83 3b 00             	cmpl   $0x0,(%ebx)
  10786e:	c7 80 88 00 00 00 00 	movl   $0x0,0x88(%eax)
  107875:	00 00 00 
  107878:	0f 94 c0             	sete   %al
  10787b:	0f b6 c0             	movzbl %al,%eax
  10787e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  107881:	c9                   	leave
  107882:	c3                   	ret

00107883 <z_mrsh_k_queue_peek_head>:
  107883:	55                   	push   %ebp
  107884:	89 e5                	mov    %esp,%ebp
  107886:	53                   	push   %ebx
  107887:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10788c:	8b 55 20             	mov    0x20(%ebp),%edx
  10788f:	8b 5d 08             	mov    0x8(%ebp),%ebx
  107892:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  107898:	53                   	push   %ebx
  107899:	e8 97 5b 00 00       	call   10d435 <k_object_find>
  10789e:	5a                   	pop    %edx
  10789f:	31 c9                	xor    %ecx,%ecx
  1078a1:	89 da                	mov    %ebx,%edx
  1078a3:	e8 6c f9 ff ff       	call   107214 <k_object_validation_check.constprop.0>
  1078a8:	85 c0                	test   %eax,%eax
  1078aa:	74 24                	je     1078d0 <z_mrsh_k_queue_peek_head+0x4d>
  1078ac:	68 c0 09 11 00       	push   $0x1109c0
  1078b1:	6a 45                	push   $0x45
  1078b3:	68 dd 1f 11 00       	push   $0x111fdd
  1078b8:	e8 3b ac ff ff       	call   1024f8 <z_log_minimal_printk>
  1078bd:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1078c2:	83 c4 0c             	add    $0xc,%esp
  1078c5:	ff b0 88 00 00 00    	push   0x88(%eax)
  1078cb:	e8 f6 c8 ff ff       	call   1041c6 <arch_syscall_oops>
  1078d0:	53                   	push   %ebx
  1078d1:	e8 a6 fe ff ff       	call   10777c <z_impl_k_queue_peek_head>
  1078d6:	5a                   	pop    %edx
  1078d7:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  1078dd:	31 c9                	xor    %ecx,%ecx
  1078df:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  1078e5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1078e8:	c9                   	leave
  1078e9:	c3                   	ret

001078ea <z_mrsh_k_queue_peek_tail>:
  1078ea:	55                   	push   %ebp
  1078eb:	89 e5                	mov    %esp,%ebp
  1078ed:	53                   	push   %ebx
  1078ee:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1078f3:	8b 55 20             	mov    0x20(%ebp),%edx
  1078f6:	8b 5d 08             	mov    0x8(%ebp),%ebx
  1078f9:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  1078ff:	53                   	push   %ebx
  107900:	e8 30 5b 00 00       	call   10d435 <k_object_find>
  107905:	5a                   	pop    %edx
  107906:	31 c9                	xor    %ecx,%ecx
  107908:	89 da                	mov    %ebx,%edx
  10790a:	e8 05 f9 ff ff       	call   107214 <k_object_validation_check.constprop.0>
  10790f:	85 c0                	test   %eax,%eax
  107911:	74 24                	je     107937 <z_mrsh_k_queue_peek_tail+0x4d>
  107913:	68 a4 09 11 00       	push   $0x1109a4
  107918:	6a 45                	push   $0x45
  10791a:	68 dd 1f 11 00       	push   $0x111fdd
  10791f:	e8 d4 ab ff ff       	call   1024f8 <z_log_minimal_printk>
  107924:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107929:	83 c4 0c             	add    $0xc,%esp
  10792c:	ff b0 88 00 00 00    	push   0x88(%eax)
  107932:	e8 8f c8 ff ff       	call   1041c6 <arch_syscall_oops>
  107937:	53                   	push   %ebx
  107938:	e8 52 fe ff ff       	call   10778f <z_impl_k_queue_peek_tail>
  10793d:	5a                   	pop    %edx
  10793e:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  107944:	31 c9                	xor    %ecx,%ecx
  107946:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  10794c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10794f:	c9                   	leave
  107950:	c3                   	ret

00107951 <k_object_validation_check.constprop.0>:
  107951:	55                   	push   %ebp
  107952:	89 e5                	mov    %esp,%ebp
  107954:	57                   	push   %edi
  107955:	56                   	push   %esi
  107956:	89 d7                	mov    %edx,%edi
  107958:	56                   	push   %esi
  107959:	89 c6                	mov    %eax,%esi
  10795b:	51                   	push   %ecx
  10795c:	6a 07                	push   $0x7
  10795e:	50                   	push   %eax
  10795f:	e8 c7 5f 00 00       	call   10d92b <k_object_validate>
  107964:	83 c4 0c             	add    $0xc,%esp
  107967:	85 c0                	test   %eax,%eax
  107969:	74 13                	je     10797e <k_object_validation_check.constprop.0+0x2d>
  10796b:	6a 07                	push   $0x7
  10796d:	56                   	push   %esi
  10796e:	57                   	push   %edi
  10796f:	50                   	push   %eax
  107970:	89 45 f4             	mov    %eax,-0xc(%ebp)
  107973:	e8 36 5e 00 00       	call   10d7ae <k_object_dump_error>
  107978:	83 c4 10             	add    $0x10,%esp
  10797b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10797e:	8d 65 f8             	lea    -0x8(%ebp),%esp
  107981:	5e                   	pop    %esi
  107982:	5f                   	pop    %edi
  107983:	5d                   	pop    %ebp
  107984:	c3                   	ret

00107985 <z_impl_k_sem_init>:
  107985:	55                   	push   %ebp
  107986:	89 e5                	mov    %esp,%ebp
  107988:	57                   	push   %edi
  107989:	8b 45 10             	mov    0x10(%ebp),%eax
  10798c:	8b 55 08             	mov    0x8(%ebp),%edx
  10798f:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  107992:	85 c0                	test   %eax,%eax
  107994:	74 27                	je     1079bd <z_impl_k_sem_init+0x38>
  107996:	39 c8                	cmp    %ecx,%eax
  107998:	72 23                	jb     1079bd <z_impl_k_sem_init+0x38>
  10799a:	89 4a 10             	mov    %ecx,0x10(%edx)
  10799d:	89 42 14             	mov    %eax,0x14(%edx)
  1079a0:	89 d7                	mov    %edx,%edi
  1079a2:	31 c0                	xor    %eax,%eax
  1079a4:	b9 04 00 00 00       	mov    $0x4,%ecx
  1079a9:	f3 ab                	rep stos %eax,%es:(%edi)
  1079ab:	c7 42 04 d3 7e 10 00 	movl   $0x107ed3,0x4(%edx)
  1079b2:	52                   	push   %edx
  1079b3:	e8 ea 5f 00 00       	call   10d9a2 <k_object_init>
  1079b8:	58                   	pop    %eax
  1079b9:	31 c0                	xor    %eax,%eax
  1079bb:	eb 05                	jmp    1079c2 <z_impl_k_sem_init+0x3d>
  1079bd:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
  1079c2:	8b 7d fc             	mov    -0x4(%ebp),%edi
  1079c5:	c9                   	leave
  1079c6:	c3                   	ret

001079c7 <z_vrfy_k_sem_init>:
  1079c7:	55                   	push   %ebp
  1079c8:	89 e5                	mov    %esp,%ebp
  1079ca:	57                   	push   %edi
  1079cb:	56                   	push   %esi
  1079cc:	53                   	push   %ebx
  1079cd:	8b 5d 08             	mov    0x8(%ebp),%ebx
  1079d0:	8b 75 0c             	mov    0xc(%ebp),%esi
  1079d3:	8b 7d 10             	mov    0x10(%ebp),%edi
  1079d6:	53                   	push   %ebx
  1079d7:	e8 59 5a 00 00       	call   10d435 <k_object_find>
  1079dc:	5a                   	pop    %edx
  1079dd:	b9 01 00 00 00       	mov    $0x1,%ecx
  1079e2:	89 da                	mov    %ebx,%edx
  1079e4:	e8 68 ff ff ff       	call   107951 <k_object_validation_check.constprop.0>
  1079e9:	85 c0                	test   %eax,%eax
  1079eb:	75 15                	jne    107a02 <z_vrfy_k_sem_init+0x3b>
  1079ed:	89 7d 10             	mov    %edi,0x10(%ebp)
  1079f0:	89 75 0c             	mov    %esi,0xc(%ebp)
  1079f3:	89 5d 08             	mov    %ebx,0x8(%ebp)
  1079f6:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1079f9:	5b                   	pop    %ebx
  1079fa:	5e                   	pop    %esi
  1079fb:	5f                   	pop    %edi
  1079fc:	5d                   	pop    %ebp
  1079fd:	e9 83 ff ff ff       	jmp    107985 <z_impl_k_sem_init>
  107a02:	68 c8 0a 11 00       	push   $0x110ac8
  107a07:	6a 45                	push   $0x45
  107a09:	68 dd 1f 11 00       	push   $0x111fdd
  107a0e:	e8 e5 aa ff ff       	call   1024f8 <z_log_minimal_printk>
  107a13:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107a18:	83 c4 0c             	add    $0xc,%esp
  107a1b:	ff b0 88 00 00 00    	push   0x88(%eax)
  107a21:	e8 a0 c7 ff ff       	call   1041c6 <arch_syscall_oops>

00107a26 <z_mrsh_k_sem_init>:
  107a26:	55                   	push   %ebp
  107a27:	89 e5                	mov    %esp,%ebp
  107a29:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107a2e:	8b 55 20             	mov    0x20(%ebp),%edx
  107a31:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  107a37:	ff 75 10             	push   0x10(%ebp)
  107a3a:	ff 75 0c             	push   0xc(%ebp)
  107a3d:	ff 75 08             	push   0x8(%ebp)
  107a40:	e8 82 ff ff ff       	call   1079c7 <z_vrfy_k_sem_init>
  107a45:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  107a4b:	31 c9                	xor    %ecx,%ecx
  107a4d:	83 c4 0c             	add    $0xc,%esp
  107a50:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  107a56:	c9                   	leave
  107a57:	c3                   	ret

00107a58 <z_impl_k_sem_give>:
  107a58:	55                   	push   %ebp
  107a59:	89 e5                	mov    %esp,%ebp
  107a5b:	56                   	push   %esi
  107a5c:	53                   	push   %ebx
  107a5d:	8b 5d 08             	mov    0x8(%ebp),%ebx
  107a60:	9c                   	pushf
  107a61:	fa                   	cli
  107a62:	5e                   	pop    %esi
  107a63:	68 d4 cc 12 00       	push   $0x12ccd4
  107a68:	e8 82 32 00 00       	call   10acef <z_spin_lock_valid>
  107a6d:	5a                   	pop    %edx
  107a6e:	84 c0                	test   %al,%al
  107a70:	75 37                	jne    107aa9 <z_impl_k_sem_give+0x51>
  107a72:	68 88 00 00 00       	push   $0x88
  107a77:	68 61 13 11 00       	push   $0x111361
  107a7c:	68 8e 13 11 00       	push   $0x11138e
  107a81:	68 ee 10 11 00       	push   $0x1110ee
  107a86:	e8 52 9b ff ff       	call   1015dd <assert_print>
  107a8b:	83 c4 10             	add    $0x10,%esp
  107a8e:	68 d4 cc 12 00       	push   $0x12ccd4
  107a93:	68 a3 13 11 00       	push   $0x1113a3
  107a98:	e8 40 9b ff ff       	call   1015dd <assert_print>
  107a9d:	59                   	pop    %ecx
  107a9e:	5b                   	pop    %ebx
  107a9f:	68 88 00 00 00       	push   $0x88
  107aa4:	e9 86 00 00 00       	jmp    107b2f <z_impl_k_sem_give+0xd7>
  107aa9:	68 d4 cc 12 00       	push   $0x12ccd4
  107aae:	e8 94 32 00 00       	call   10ad47 <z_spin_lock_set_owner>
  107ab3:	89 1c 24             	mov    %ebx,(%esp)
  107ab6:	e8 96 1b 00 00       	call   109651 <z_unpend_first_thread>
  107abb:	5a                   	pop    %edx
  107abc:	85 c0                	test   %eax,%eax
  107abe:	74 1e                	je     107ade <z_impl_k_sem_give+0x86>
  107ac0:	8b 50 2c             	mov    0x2c(%eax),%edx
  107ac3:	31 c9                	xor    %ecx,%ecx
  107ac5:	89 0a                	mov    %ecx,(%edx)
  107ac7:	50                   	push   %eax
  107ac8:	e8 37 17 00 00       	call   109204 <z_ready_thread>
  107acd:	89 34 24             	mov    %esi,(%esp)
  107ad0:	68 d4 cc 12 00       	push   $0x12ccd4
  107ad5:	e8 d3 1e 00 00       	call   1099ad <z_reschedule>
  107ada:	5b                   	pop    %ebx
  107adb:	5e                   	pop    %esi
  107adc:	eb 64                	jmp    107b42 <z_impl_k_sem_give+0xea>
  107ade:	8b 53 10             	mov    0x10(%ebx),%edx
  107ae1:	31 c0                	xor    %eax,%eax
  107ae3:	39 53 14             	cmp    %edx,0x14(%ebx)
  107ae6:	0f 95 c0             	setne  %al
  107ae9:	01 d0                	add    %edx,%eax
  107aeb:	89 43 10             	mov    %eax,0x10(%ebx)
  107aee:	68 d4 cc 12 00       	push   $0x12ccd4
  107af3:	e8 18 32 00 00       	call   10ad10 <z_spin_unlock_valid>
  107af8:	5a                   	pop    %edx
  107af9:	84 c0                	test   %al,%al
  107afb:	75 3e                	jne    107b3b <z_impl_k_sem_give+0xe3>
  107afd:	68 31 01 00 00       	push   $0x131
  107b02:	68 61 13 11 00       	push   $0x111361
  107b07:	68 e8 13 11 00       	push   $0x1113e8
  107b0c:	68 ee 10 11 00       	push   $0x1110ee
  107b11:	e8 c7 9a ff ff       	call   1015dd <assert_print>
  107b16:	83 c4 10             	add    $0x10,%esp
  107b19:	68 d4 cc 12 00       	push   $0x12ccd4
  107b1e:	68 ff 13 11 00       	push   $0x1113ff
  107b23:	e8 b5 9a ff ff       	call   1015dd <assert_print>
  107b28:	59                   	pop    %ecx
  107b29:	5b                   	pop    %ebx
  107b2a:	68 31 01 00 00       	push   $0x131
  107b2f:	68 61 13 11 00       	push   $0x111361
  107b34:	e8 95 9a ff ff       	call   1015ce <assert_post_action>
  107b39:	58                   	pop    %eax
  107b3a:	5a                   	pop    %edx
  107b3b:	0f ba e6 09          	bt     $0x9,%esi
  107b3f:	73 01                	jae    107b42 <z_impl_k_sem_give+0xea>
  107b41:	fb                   	sti
  107b42:	8d 65 f8             	lea    -0x8(%ebp),%esp
  107b45:	5b                   	pop    %ebx
  107b46:	5e                   	pop    %esi
  107b47:	5d                   	pop    %ebp
  107b48:	c3                   	ret

00107b49 <z_mrsh_k_sem_give>:
  107b49:	55                   	push   %ebp
  107b4a:	89 e5                	mov    %esp,%ebp
  107b4c:	53                   	push   %ebx
  107b4d:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107b52:	8b 55 20             	mov    0x20(%ebp),%edx
  107b55:	8b 5d 08             	mov    0x8(%ebp),%ebx
  107b58:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  107b5e:	53                   	push   %ebx
  107b5f:	e8 d1 58 00 00       	call   10d435 <k_object_find>
  107b64:	59                   	pop    %ecx
  107b65:	89 da                	mov    %ebx,%edx
  107b67:	31 c9                	xor    %ecx,%ecx
  107b69:	e8 e3 fd ff ff       	call   107951 <k_object_validation_check.constprop.0>
  107b6e:	85 c0                	test   %eax,%eax
  107b70:	74 24                	je     107b96 <z_mrsh_k_sem_give+0x4d>
  107b72:	68 b4 0a 11 00       	push   $0x110ab4
  107b77:	6a 45                	push   $0x45
  107b79:	68 dd 1f 11 00       	push   $0x111fdd
  107b7e:	e8 75 a9 ff ff       	call   1024f8 <z_log_minimal_printk>
  107b83:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107b88:	83 c4 0c             	add    $0xc,%esp
  107b8b:	ff b0 88 00 00 00    	push   0x88(%eax)
  107b91:	e8 30 c6 ff ff       	call   1041c6 <arch_syscall_oops>
  107b96:	53                   	push   %ebx
  107b97:	e8 bc fe ff ff       	call   107a58 <z_impl_k_sem_give>
  107b9c:	58                   	pop    %eax
  107b9d:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107ba2:	31 d2                	xor    %edx,%edx
  107ba4:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  107baa:	31 c0                	xor    %eax,%eax
  107bac:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  107baf:	c9                   	leave
  107bb0:	c3                   	ret

00107bb1 <z_impl_k_sem_take>:
  107bb1:	55                   	push   %ebp
  107bb2:	89 e5                	mov    %esp,%ebp
  107bb4:	57                   	push   %edi
  107bb5:	56                   	push   %esi
  107bb6:	53                   	push   %ebx
  107bb7:	8b 45 0c             	mov    0xc(%ebp),%eax
  107bba:	8b 55 10             	mov    0x10(%ebp),%edx
  107bbd:	83 3d a0 48 12 00 00 	cmpl   $0x0,0x1248a0
  107bc4:	89 c7                	mov    %eax,%edi
  107bc6:	89 d6                	mov    %edx,%esi
  107bc8:	74 38                	je     107c02 <z_impl_k_sem_take+0x51>
  107bca:	09 d0                	or     %edx,%eax
  107bcc:	74 34                	je     107c02 <z_impl_k_sem_take+0x51>
  107bce:	68 88 00 00 00       	push   $0x88
  107bd3:	68 dc 22 11 00       	push   $0x1122dc
  107bd8:	68 fc 22 11 00       	push   $0x1122fc
  107bdd:	68 ee 10 11 00       	push   $0x1110ee
  107be2:	e8 f6 99 ff ff       	call   1015dd <assert_print>
  107be7:	83 c4 10             	add    $0x10,%esp
  107bea:	68 4a 23 11 00       	push   $0x11234a
  107bef:	e8 e9 99 ff ff       	call   1015dd <assert_print>
  107bf4:	c7 04 24 88 00 00 00 	movl   $0x88,(%esp)
  107bfb:	68 dc 22 11 00       	push   $0x1122dc
  107c00:	eb 49                	jmp    107c4b <z_impl_k_sem_take+0x9a>
  107c02:	9c                   	pushf
  107c03:	fa                   	cli
  107c04:	5b                   	pop    %ebx
  107c05:	68 d4 cc 12 00       	push   $0x12ccd4
  107c0a:	e8 e0 30 00 00       	call   10acef <z_spin_lock_valid>
  107c0f:	5a                   	pop    %edx
  107c10:	84 c0                	test   %al,%al
  107c12:	75 3e                	jne    107c52 <z_impl_k_sem_take+0xa1>
  107c14:	68 88 00 00 00       	push   $0x88
  107c19:	68 61 13 11 00       	push   $0x111361
  107c1e:	68 8e 13 11 00       	push   $0x11138e
  107c23:	68 ee 10 11 00       	push   $0x1110ee
  107c28:	e8 b0 99 ff ff       	call   1015dd <assert_print>
  107c2d:	83 c4 10             	add    $0x10,%esp
  107c30:	68 d4 cc 12 00       	push   $0x12ccd4
  107c35:	68 a3 13 11 00       	push   $0x1113a3
  107c3a:	e8 9e 99 ff ff       	call   1015dd <assert_print>
  107c3f:	59                   	pop    %ecx
  107c40:	5b                   	pop    %ebx
  107c41:	68 88 00 00 00       	push   $0x88
  107c46:	68 61 13 11 00       	push   $0x111361
  107c4b:	e8 7e 99 ff ff       	call   1015ce <assert_post_action>
  107c50:	58                   	pop    %eax
  107c51:	5a                   	pop    %edx
  107c52:	68 d4 cc 12 00       	push   $0x12ccd4
  107c57:	e8 eb 30 00 00       	call   10ad47 <z_spin_lock_set_owner>
  107c5c:	58                   	pop    %eax
  107c5d:	8b 45 08             	mov    0x8(%ebp),%eax
  107c60:	8b 40 10             	mov    0x10(%eax),%eax
  107c63:	85 c0                	test   %eax,%eax
  107c65:	74 55                	je     107cbc <z_impl_k_sem_take+0x10b>
  107c67:	8b 55 08             	mov    0x8(%ebp),%edx
  107c6a:	48                   	dec    %eax
  107c6b:	89 42 10             	mov    %eax,0x10(%edx)
  107c6e:	68 d4 cc 12 00       	push   $0x12ccd4
  107c73:	e8 98 30 00 00       	call   10ad10 <z_spin_unlock_valid>
  107c78:	5e                   	pop    %esi
  107c79:	84 c0                	test   %al,%al
  107c7b:	75 34                	jne    107cb1 <z_impl_k_sem_take+0x100>
  107c7d:	68 31 01 00 00       	push   $0x131
  107c82:	68 61 13 11 00       	push   $0x111361
  107c87:	68 e8 13 11 00       	push   $0x1113e8
  107c8c:	68 ee 10 11 00       	push   $0x1110ee
  107c91:	e8 47 99 ff ff       	call   1015dd <assert_print>
  107c96:	83 c4 10             	add    $0x10,%esp
  107c99:	68 d4 cc 12 00       	push   $0x12ccd4
  107c9e:	68 ff 13 11 00       	push   $0x1113ff
  107ca3:	e8 35 99 ff ff       	call   1015dd <assert_print>
  107ca8:	59                   	pop    %ecx
  107ca9:	5b                   	pop    %ebx
  107caa:	68 31 01 00 00       	push   $0x131
  107caf:	eb 95                	jmp    107c46 <z_impl_k_sem_take+0x95>
  107cb1:	0f ba e3 09          	bt     $0x9,%ebx
  107cb5:	73 01                	jae    107cb8 <z_impl_k_sem_take+0x107>
  107cb7:	fb                   	sti
  107cb8:	31 c0                	xor    %eax,%eax
  107cba:	eb 36                	jmp    107cf2 <z_impl_k_sem_take+0x141>
  107cbc:	89 f0                	mov    %esi,%eax
  107cbe:	09 f8                	or     %edi,%eax
  107cc0:	75 1d                	jne    107cdf <z_impl_k_sem_take+0x12e>
  107cc2:	68 d4 cc 12 00       	push   $0x12ccd4
  107cc7:	e8 44 30 00 00       	call   10ad10 <z_spin_unlock_valid>
  107ccc:	5a                   	pop    %edx
  107ccd:	84 c0                	test   %al,%al
  107ccf:	74 ac                	je     107c7d <z_impl_k_sem_take+0xcc>
  107cd1:	0f ba e3 09          	bt     $0x9,%ebx
  107cd5:	73 01                	jae    107cd8 <z_impl_k_sem_take+0x127>
  107cd7:	fb                   	sti
  107cd8:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
  107cdd:	eb 13                	jmp    107cf2 <z_impl_k_sem_take+0x141>
  107cdf:	56                   	push   %esi
  107ce0:	57                   	push   %edi
  107ce1:	ff 75 08             	push   0x8(%ebp)
  107ce4:	53                   	push   %ebx
  107ce5:	68 d4 cc 12 00       	push   $0x12ccd4
  107cea:	e8 07 18 00 00       	call   1094f6 <z_pend_curr>
  107cef:	83 c4 14             	add    $0x14,%esp
  107cf2:	8d 65 f4             	lea    -0xc(%ebp),%esp
  107cf5:	5b                   	pop    %ebx
  107cf6:	5e                   	pop    %esi
  107cf7:	5f                   	pop    %edi
  107cf8:	5d                   	pop    %ebp
  107cf9:	c3                   	ret

00107cfa <z_impl_k_sem_reset>:
  107cfa:	55                   	push   %ebp
  107cfb:	89 e5                	mov    %esp,%ebp
  107cfd:	56                   	push   %esi
  107cfe:	53                   	push   %ebx
  107cff:	8b 5d 08             	mov    0x8(%ebp),%ebx
  107d02:	9c                   	pushf
  107d03:	fa                   	cli
  107d04:	5e                   	pop    %esi
  107d05:	68 d4 cc 12 00       	push   $0x12ccd4
  107d0a:	e8 e0 2f 00 00       	call   10acef <z_spin_lock_valid>
  107d0f:	5a                   	pop    %edx
  107d10:	84 c0                	test   %al,%al
  107d12:	75 3e                	jne    107d52 <z_impl_k_sem_reset+0x58>
  107d14:	68 88 00 00 00       	push   $0x88
  107d19:	68 61 13 11 00       	push   $0x111361
  107d1e:	68 8e 13 11 00       	push   $0x11138e
  107d23:	68 ee 10 11 00       	push   $0x1110ee
  107d28:	e8 b0 98 ff ff       	call   1015dd <assert_print>
  107d2d:	83 c4 10             	add    $0x10,%esp
  107d30:	68 d4 cc 12 00       	push   $0x12ccd4
  107d35:	68 a3 13 11 00       	push   $0x1113a3
  107d3a:	e8 9e 98 ff ff       	call   1015dd <assert_print>
  107d3f:	59                   	pop    %ecx
  107d40:	5b                   	pop    %ebx
  107d41:	68 88 00 00 00       	push   $0x88
  107d46:	68 61 13 11 00       	push   $0x111361
  107d4b:	e8 7e 98 ff ff       	call   1015ce <assert_post_action>
  107d50:	5e                   	pop    %esi
  107d51:	58                   	pop    %eax
  107d52:	68 d4 cc 12 00       	push   $0x12ccd4
  107d57:	e8 eb 2f 00 00       	call   10ad47 <z_spin_lock_set_owner>
  107d5c:	58                   	pop    %eax
  107d5d:	53                   	push   %ebx
  107d5e:	e8 ee 18 00 00       	call   109651 <z_unpend_first_thread>
  107d63:	5a                   	pop    %edx
  107d64:	85 c0                	test   %eax,%eax
  107d66:	74 11                	je     107d79 <z_impl_k_sem_reset+0x7f>
  107d68:	8b 50 2c             	mov    0x2c(%eax),%edx
  107d6b:	c7 02 f5 ff ff ff    	movl   $0xfffffff5,(%edx)
  107d71:	50                   	push   %eax
  107d72:	e8 8d 14 00 00       	call   109204 <z_ready_thread>
  107d77:	eb e3                	jmp    107d5c <z_impl_k_sem_reset+0x62>
  107d79:	31 c0                	xor    %eax,%eax
  107d7b:	89 43 10             	mov    %eax,0x10(%ebx)
  107d7e:	56                   	push   %esi
  107d7f:	68 d4 cc 12 00       	push   $0x12ccd4
  107d84:	e8 24 1c 00 00       	call   1099ad <z_reschedule>
  107d89:	5a                   	pop    %edx
  107d8a:	59                   	pop    %ecx
  107d8b:	8d 65 f8             	lea    -0x8(%ebp),%esp
  107d8e:	5b                   	pop    %ebx
  107d8f:	5e                   	pop    %esi
  107d90:	5d                   	pop    %ebp
  107d91:	c3                   	ret

00107d92 <z_mrsh_k_sem_take>:
  107d92:	55                   	push   %ebp
  107d93:	89 e5                	mov    %esp,%ebp
  107d95:	57                   	push   %edi
  107d96:	56                   	push   %esi
  107d97:	53                   	push   %ebx
  107d98:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107d9d:	8b 55 20             	mov    0x20(%ebp),%edx
  107da0:	8b 5d 08             	mov    0x8(%ebp),%ebx
  107da3:	8b 75 0c             	mov    0xc(%ebp),%esi
  107da6:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  107dac:	8b 7d 10             	mov    0x10(%ebp),%edi
  107daf:	53                   	push   %ebx
  107db0:	e8 80 56 00 00       	call   10d435 <k_object_find>
  107db5:	5a                   	pop    %edx
  107db6:	31 c9                	xor    %ecx,%ecx
  107db8:	89 da                	mov    %ebx,%edx
  107dba:	e8 92 fb ff ff       	call   107951 <k_object_validation_check.constprop.0>
  107dbf:	85 c0                	test   %eax,%eax
  107dc1:	74 24                	je     107de7 <z_mrsh_k_sem_take+0x55>
  107dc3:	68 a0 0a 11 00       	push   $0x110aa0
  107dc8:	6a 45                	push   $0x45
  107dca:	68 dd 1f 11 00       	push   $0x111fdd
  107dcf:	e8 24 a7 ff ff       	call   1024f8 <z_log_minimal_printk>
  107dd4:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107dd9:	83 c4 0c             	add    $0xc,%esp
  107ddc:	ff b0 88 00 00 00    	push   0x88(%eax)
  107de2:	e8 df c3 ff ff       	call   1041c6 <arch_syscall_oops>
  107de7:	57                   	push   %edi
  107de8:	56                   	push   %esi
  107de9:	53                   	push   %ebx
  107dea:	e8 c2 fd ff ff       	call   107bb1 <z_impl_k_sem_take>
  107def:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  107df5:	31 c9                	xor    %ecx,%ecx
  107df7:	83 c4 0c             	add    $0xc,%esp
  107dfa:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  107e00:	8d 65 f4             	lea    -0xc(%ebp),%esp
  107e03:	5b                   	pop    %ebx
  107e04:	5e                   	pop    %esi
  107e05:	5f                   	pop    %edi
  107e06:	5d                   	pop    %ebp
  107e07:	c3                   	ret

00107e08 <z_mrsh_k_sem_reset>:
  107e08:	55                   	push   %ebp
  107e09:	89 e5                	mov    %esp,%ebp
  107e0b:	53                   	push   %ebx
  107e0c:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107e11:	8b 55 20             	mov    0x20(%ebp),%edx
  107e14:	8b 5d 08             	mov    0x8(%ebp),%ebx
  107e17:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  107e1d:	53                   	push   %ebx
  107e1e:	e8 12 56 00 00       	call   10d435 <k_object_find>
  107e23:	59                   	pop    %ecx
  107e24:	89 da                	mov    %ebx,%edx
  107e26:	31 c9                	xor    %ecx,%ecx
  107e28:	e8 24 fb ff ff       	call   107951 <k_object_validation_check.constprop.0>
  107e2d:	85 c0                	test   %eax,%eax
  107e2f:	74 24                	je     107e55 <z_mrsh_k_sem_reset+0x4d>
  107e31:	68 8c 0a 11 00       	push   $0x110a8c
  107e36:	6a 45                	push   $0x45
  107e38:	68 dd 1f 11 00       	push   $0x111fdd
  107e3d:	e8 b6 a6 ff ff       	call   1024f8 <z_log_minimal_printk>
  107e42:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107e47:	83 c4 0c             	add    $0xc,%esp
  107e4a:	ff b0 88 00 00 00    	push   0x88(%eax)
  107e50:	e8 71 c3 ff ff       	call   1041c6 <arch_syscall_oops>
  107e55:	53                   	push   %ebx
  107e56:	e8 9f fe ff ff       	call   107cfa <z_impl_k_sem_reset>
  107e5b:	58                   	pop    %eax
  107e5c:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107e61:	31 d2                	xor    %edx,%edx
  107e63:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  107e69:	31 c0                	xor    %eax,%eax
  107e6b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  107e6e:	c9                   	leave
  107e6f:	c3                   	ret

00107e70 <z_mrsh_k_sem_count_get>:
  107e70:	55                   	push   %ebp
  107e71:	89 e5                	mov    %esp,%ebp
  107e73:	53                   	push   %ebx
  107e74:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107e79:	8b 55 20             	mov    0x20(%ebp),%edx
  107e7c:	8b 5d 08             	mov    0x8(%ebp),%ebx
  107e7f:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  107e85:	53                   	push   %ebx
  107e86:	e8 aa 55 00 00       	call   10d435 <k_object_find>
  107e8b:	5a                   	pop    %edx
  107e8c:	31 c9                	xor    %ecx,%ecx
  107e8e:	89 da                	mov    %ebx,%edx
  107e90:	e8 bc fa ff ff       	call   107951 <k_object_validation_check.constprop.0>
  107e95:	85 c0                	test   %eax,%eax
  107e97:	74 24                	je     107ebd <z_mrsh_k_sem_count_get+0x4d>
  107e99:	68 74 0a 11 00       	push   $0x110a74
  107e9e:	6a 45                	push   $0x45
  107ea0:	68 dd 1f 11 00       	push   $0x111fdd
  107ea5:	e8 4e a6 ff ff       	call   1024f8 <z_log_minimal_printk>
  107eaa:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107eaf:	83 c4 0c             	add    $0xc,%esp
  107eb2:	ff b0 88 00 00 00    	push   0x88(%eax)
  107eb8:	e8 09 c3 ff ff       	call   1041c6 <arch_syscall_oops>
  107ebd:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  107ec3:	31 c9                	xor    %ecx,%ecx
  107ec5:	8b 43 10             	mov    0x10(%ebx),%eax
  107ec8:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  107ece:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  107ed1:	c9                   	leave
  107ed2:	c3                   	ret

00107ed3 <z_priq_rb_lessthan>:
  107ed3:	55                   	push   %ebp
  107ed4:	89 e5                	mov    %esp,%ebp
  107ed6:	56                   	push   %esi
  107ed7:	53                   	push   %ebx
  107ed8:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  107edb:	8b 75 08             	mov    0x8(%ebp),%esi
  107ede:	53                   	push   %ebx
  107edf:	56                   	push   %esi
  107ee0:	e8 e8 11 00 00       	call   1090cd <z_sched_prio_cmp>
  107ee5:	5a                   	pop    %edx
  107ee6:	89 c2                	mov    %eax,%edx
  107ee8:	59                   	pop    %ecx
  107ee9:	b0 01                	mov    $0x1,%al
  107eeb:	85 d2                	test   %edx,%edx
  107eed:	7f 0d                	jg     107efc <z_priq_rb_lessthan+0x29>
  107eef:	b0 00                	mov    $0x0,%al
  107ef1:	75 09                	jne    107efc <z_priq_rb_lessthan+0x29>
  107ef3:	8b 43 10             	mov    0x10(%ebx),%eax
  107ef6:	39 46 10             	cmp    %eax,0x10(%esi)
  107ef9:	0f 92 c0             	setb   %al
  107efc:	8d 65 f8             	lea    -0x8(%ebp),%esp
  107eff:	5b                   	pop    %ebx
  107f00:	5e                   	pop    %esi
  107f01:	5d                   	pop    %ebp
  107f02:	c3                   	ret

00107f03 <k_object_validation_check>:
  107f03:	55                   	push   %ebp
  107f04:	89 e5                	mov    %esp,%ebp
  107f06:	57                   	push   %edi
  107f07:	56                   	push   %esi
  107f08:	89 d7                	mov    %edx,%edi
  107f0a:	53                   	push   %ebx
  107f0b:	89 c6                	mov    %eax,%esi
  107f0d:	53                   	push   %ebx
  107f0e:	89 cb                	mov    %ecx,%ebx
  107f10:	ff 75 08             	push   0x8(%ebp)
  107f13:	51                   	push   %ecx
  107f14:	50                   	push   %eax
  107f15:	e8 11 5a 00 00       	call   10d92b <k_object_validate>
  107f1a:	83 c4 0c             	add    $0xc,%esp
  107f1d:	85 c0                	test   %eax,%eax
  107f1f:	74 12                	je     107f33 <k_object_validation_check+0x30>
  107f21:	53                   	push   %ebx
  107f22:	56                   	push   %esi
  107f23:	57                   	push   %edi
  107f24:	50                   	push   %eax
  107f25:	89 45 f0             	mov    %eax,-0x10(%ebp)
  107f28:	e8 81 58 00 00       	call   10d7ae <k_object_dump_error>
  107f2d:	83 c4 10             	add    $0x10,%esp
  107f30:	8b 45 f0             	mov    -0x10(%ebp),%eax
  107f33:	8d 65 f4             	lea    -0xc(%ebp),%esp
  107f36:	5b                   	pop    %ebx
  107f37:	5e                   	pop    %esi
  107f38:	5f                   	pop    %edi
  107f39:	5d                   	pop    %ebp
  107f3a:	c3                   	ret

00107f3b <k_is_in_isr>:
  107f3b:	83 3d a0 48 12 00 00 	cmpl   $0x0,0x1248a0
  107f42:	0f 95 c0             	setne  %al
  107f45:	c3                   	ret

00107f46 <z_impl_k_is_preempt_thread>:
  107f46:	31 c0                	xor    %eax,%eax
  107f48:	83 3d a0 48 12 00 00 	cmpl   $0x0,0x1248a0
  107f4f:	75 10                	jne    107f61 <z_impl_k_is_preempt_thread+0x1b>
  107f51:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107f56:	66 83 78 0e 7f       	cmpw   $0x7f,0xe(%eax)
  107f5b:	0f 96 c0             	setbe  %al
  107f5e:	0f b6 c0             	movzbl %al,%eax
  107f61:	c3                   	ret

00107f62 <z_mrsh_k_is_preempt_thread>:
  107f62:	55                   	push   %ebp
  107f63:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  107f69:	89 e5                	mov    %esp,%ebp
  107f6b:	31 c9                	xor    %ecx,%ecx
  107f6d:	8b 45 20             	mov    0x20(%ebp),%eax
  107f70:	89 82 88 00 00 00    	mov    %eax,0x88(%edx)
  107f76:	e8 cb ff ff ff       	call   107f46 <z_impl_k_is_preempt_thread>
  107f7b:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  107f81:	5d                   	pop    %ebp
  107f82:	c3                   	ret

00107f83 <z_mrsh_k_thread_priority_get>:
  107f83:	55                   	push   %ebp
  107f84:	89 e5                	mov    %esp,%ebp
  107f86:	53                   	push   %ebx
  107f87:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107f8c:	8b 55 20             	mov    0x20(%ebp),%edx
  107f8f:	8b 5d 08             	mov    0x8(%ebp),%ebx
  107f92:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  107f98:	53                   	push   %ebx
  107f99:	e8 97 54 00 00       	call   10d435 <k_object_find>
  107f9e:	31 d2                	xor    %edx,%edx
  107fa0:	89 14 24             	mov    %edx,(%esp)
  107fa3:	b9 09 00 00 00       	mov    $0x9,%ecx
  107fa8:	89 da                	mov    %ebx,%edx
  107faa:	e8 54 ff ff ff       	call   107f03 <k_object_validation_check>
  107faf:	59                   	pop    %ecx
  107fb0:	85 c0                	test   %eax,%eax
  107fb2:	74 24                	je     107fd8 <z_mrsh_k_thread_priority_get+0x55>
  107fb4:	68 5c 0b 11 00       	push   $0x110b5c
  107fb9:	6a 45                	push   $0x45
  107fbb:	68 dd 1f 11 00       	push   $0x111fdd
  107fc0:	e8 33 a5 ff ff       	call   1024f8 <z_log_minimal_printk>
  107fc5:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  107fca:	83 c4 0c             	add    $0xc,%esp
  107fcd:	ff b0 88 00 00 00    	push   0x88(%eax)
  107fd3:	e8 ee c1 ff ff       	call   1041c6 <arch_syscall_oops>
  107fd8:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  107fde:	31 c9                	xor    %ecx,%ecx
  107fe0:	0f be 43 0e          	movsbl 0xe(%ebx),%eax
  107fe4:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  107fea:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  107fed:	c9                   	leave
  107fee:	c3                   	ret

00107fef <z_impl_k_thread_name_set>:
  107fef:	55                   	push   %ebp
  107ff0:	89 e5                	mov    %esp,%ebp
  107ff2:	53                   	push   %ebx
  107ff3:	8b 5d 08             	mov    0x8(%ebp),%ebx
  107ff6:	85 db                	test   %ebx,%ebx
  107ff8:	75 06                	jne    108000 <z_impl_k_thread_name_set+0x11>
  107ffa:	8b 1d a8 48 12 00    	mov    0x1248a8,%ebx
  108000:	6a 1f                	push   $0x1f
  108002:	8d 43 44             	lea    0x44(%ebx),%eax
  108005:	ff 75 0c             	push   0xc(%ebp)
  108008:	50                   	push   %eax
  108009:	e8 2b 70 00 00       	call   10f039 <strncpy>
  10800e:	c6 43 63 00          	movb   $0x0,0x63(%ebx)
  108012:	83 c4 0c             	add    $0xc,%esp
  108015:	31 c0                	xor    %eax,%eax
  108017:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10801a:	c9                   	leave
  10801b:	c3                   	ret

0010801c <z_mrsh_k_thread_name_set>:
  10801c:	55                   	push   %ebp
  10801d:	89 e5                	mov    %esp,%ebp
  10801f:	56                   	push   %esi
  108020:	53                   	push   %ebx
  108021:	83 ec 20             	sub    $0x20,%esp
  108024:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  108029:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10802c:	8b 55 20             	mov    0x20(%ebp),%edx
  10802f:	85 db                	test   %ebx,%ebx
  108031:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  108037:	74 37                	je     108070 <z_mrsh_k_thread_name_set+0x54>
  108039:	53                   	push   %ebx
  10803a:	e8 f6 53 00 00       	call   10d435 <k_object_find>
  10803f:	31 d2                	xor    %edx,%edx
  108041:	b9 09 00 00 00       	mov    $0x9,%ecx
  108046:	89 14 24             	mov    %edx,(%esp)
  108049:	89 da                	mov    %ebx,%edx
  10804b:	e8 b3 fe ff ff       	call   107f03 <k_object_validation_check>
  108050:	59                   	pop    %ecx
  108051:	85 c0                	test   %eax,%eax
  108053:	74 1b                	je     108070 <z_mrsh_k_thread_name_set+0x54>
  108055:	68 40 0b 11 00       	push   $0x110b40
  10805a:	6a 45                	push   $0x45
  10805c:	68 dd 1f 11 00       	push   $0x111fdd
  108061:	e8 92 a4 ff ff       	call   1024f8 <z_log_minimal_printk>
  108066:	83 c4 0c             	add    $0xc,%esp
  108069:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
  10806e:	eb 25                	jmp    108095 <z_mrsh_k_thread_name_set+0x79>
  108070:	6a 20                	push   $0x20
  108072:	8d 75 d8             	lea    -0x28(%ebp),%esi
  108075:	ff 75 0c             	push   0xc(%ebp)
  108078:	56                   	push   %esi
  108079:	e8 80 59 00 00       	call   10d9fe <k_usermode_string_copy>
  10807e:	89 c2                	mov    %eax,%edx
  108080:	83 c4 0c             	add    $0xc,%esp
  108083:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
  108088:	85 d2                	test   %edx,%edx
  10808a:	75 09                	jne    108095 <z_mrsh_k_thread_name_set+0x79>
  10808c:	56                   	push   %esi
  10808d:	53                   	push   %ebx
  10808e:	e8 5c ff ff ff       	call   107fef <z_impl_k_thread_name_set>
  108093:	5b                   	pop    %ebx
  108094:	5e                   	pop    %esi
  108095:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  10809b:	31 c9                	xor    %ecx,%ecx
  10809d:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  1080a3:	8d 65 f8             	lea    -0x8(%ebp),%esp
  1080a6:	5b                   	pop    %ebx
  1080a7:	5e                   	pop    %esi
  1080a8:	5d                   	pop    %ebp
  1080a9:	c3                   	ret

001080aa <k_thread_name_get>:
  1080aa:	55                   	push   %ebp
  1080ab:	89 e5                	mov    %esp,%ebp
  1080ad:	8b 45 08             	mov    0x8(%ebp),%eax
  1080b0:	5d                   	pop    %ebp
  1080b1:	83 c0 44             	add    $0x44,%eax
  1080b4:	c3                   	ret

001080b5 <z_mrsh_k_thread_name_copy>:
  1080b5:	55                   	push   %ebp
  1080b6:	89 e5                	mov    %esp,%ebp
  1080b8:	57                   	push   %edi
  1080b9:	56                   	push   %esi
  1080ba:	53                   	push   %ebx
  1080bb:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1080c0:	8b 55 20             	mov    0x20(%ebp),%edx
  1080c3:	8b 75 08             	mov    0x8(%ebp),%esi
  1080c6:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  1080c9:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  1080cf:	8b 7d 10             	mov    0x10(%ebp),%edi
  1080d2:	56                   	push   %esi
  1080d3:	e8 5d 53 00 00       	call   10d435 <k_object_find>
  1080d8:	59                   	pop    %ecx
  1080d9:	89 c2                	mov    %eax,%edx
  1080db:	85 f6                	test   %esi,%esi
  1080dd:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
  1080e2:	74 74                	je     108158 <z_mrsh_k_thread_name_copy+0xa3>
  1080e4:	80 7a 07 09          	cmpb   $0x9,0x7(%edx)
  1080e8:	75 6e                	jne    108158 <z_mrsh_k_thread_name_copy+0xa3>
  1080ea:	f6 42 08 01          	testb  $0x1,0x8(%edx)
  1080ee:	74 68                	je     108158 <z_mrsh_k_thread_name_copy+0xa3>
  1080f0:	89 d8                	mov    %ebx,%eax
  1080f2:	01 f8                	add    %edi,%eax
  1080f4:	73 22                	jae    108118 <z_mrsh_k_thread_name_copy+0x63>
  1080f6:	68 c7 12 11 00       	push   $0x1112c7
  1080fb:	57                   	push   %edi
  1080fc:	53                   	push   %ebx
  1080fd:	68 24 0b 11 00       	push   $0x110b24
  108102:	6a 45                	push   $0x45
  108104:	68 7c 12 11 00       	push   $0x11127c
  108109:	e8 ea a3 ff ff       	call   1024f8 <z_log_minimal_printk>
  10810e:	83 c4 18             	add    $0x18,%esp
  108111:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
  108116:	eb 40                	jmp    108158 <z_mrsh_k_thread_name_copy+0xa3>
  108118:	85 ff                	test   %edi,%edi
  10811a:	74 0b                	je     108127 <z_mrsh_k_thread_name_copy+0x72>
  10811c:	89 d8                	mov    %ebx,%eax
  10811e:	8d 57 ff             	lea    -0x1(%edi),%edx
  108121:	f7 d0                	not    %eax
  108123:	39 c2                	cmp    %eax,%edx
  108125:	73 cf                	jae    1080f6 <z_mrsh_k_thread_name_copy+0x41>
  108127:	6a 01                	push   $0x1
  108129:	57                   	push   %edi
  10812a:	53                   	push   %ebx
  10812b:	e8 66 b6 ff ff       	call   103796 <arch_buffer_validate>
  108130:	83 c4 0c             	add    $0xc,%esp
  108133:	85 c0                	test   %eax,%eax
  108135:	75 bf                	jne    1080f6 <z_mrsh_k_thread_name_copy+0x41>
  108137:	83 c6 44             	add    $0x44,%esi
  10813a:	56                   	push   %esi
  10813b:	e8 29 81 ff ff       	call   100269 <strlen>
  108140:	5a                   	pop    %edx
  108141:	8d 50 01             	lea    0x1(%eax),%edx
  108144:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
  108149:	39 d7                	cmp    %edx,%edi
  10814b:	72 0b                	jb     108158 <z_mrsh_k_thread_name_copy+0xa3>
  10814d:	52                   	push   %edx
  10814e:	56                   	push   %esi
  10814f:	53                   	push   %ebx
  108150:	e8 90 58 00 00       	call   10d9e5 <k_usermode_to_copy>
  108155:	83 c4 0c             	add    $0xc,%esp
  108158:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  10815e:	31 c9                	xor    %ecx,%ecx
  108160:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  108166:	8d 65 f4             	lea    -0xc(%ebp),%esp
  108169:	5b                   	pop    %ebx
  10816a:	5e                   	pop    %esi
  10816b:	5f                   	pop    %edi
  10816c:	5d                   	pop    %ebp
  10816d:	c3                   	ret

0010816e <z_impl_k_thread_start>:
  10816e:	e9 0a 19 00 00       	jmp    109a7d <z_sched_start>

00108173 <z_mrsh_k_thread_start>:
  108173:	55                   	push   %ebp
  108174:	89 e5                	mov    %esp,%ebp
  108176:	53                   	push   %ebx
  108177:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10817c:	8b 55 20             	mov    0x20(%ebp),%edx
  10817f:	8b 5d 08             	mov    0x8(%ebp),%ebx
  108182:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  108188:	53                   	push   %ebx
  108189:	e8 a7 52 00 00       	call   10d435 <k_object_find>
  10818e:	31 c9                	xor    %ecx,%ecx
  108190:	89 0c 24             	mov    %ecx,(%esp)
  108193:	89 da                	mov    %ebx,%edx
  108195:	b9 09 00 00 00       	mov    $0x9,%ecx
  10819a:	e8 64 fd ff ff       	call   107f03 <k_object_validation_check>
  10819f:	5a                   	pop    %edx
  1081a0:	85 c0                	test   %eax,%eax
  1081a2:	74 24                	je     1081c8 <z_mrsh_k_thread_start+0x55>
  1081a4:	68 0c 0b 11 00       	push   $0x110b0c
  1081a9:	6a 45                	push   $0x45
  1081ab:	68 dd 1f 11 00       	push   $0x111fdd
  1081b0:	e8 43 a3 ff ff       	call   1024f8 <z_log_minimal_printk>
  1081b5:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1081ba:	83 c4 0c             	add    $0xc,%esp
  1081bd:	ff b0 88 00 00 00    	push   0x88(%eax)
  1081c3:	e8 fe bf ff ff       	call   1041c6 <arch_syscall_oops>
  1081c8:	53                   	push   %ebx
  1081c9:	e8 af 18 00 00       	call   109a7d <z_sched_start>
  1081ce:	58                   	pop    %eax
  1081cf:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1081d4:	31 d2                	xor    %edx,%edx
  1081d6:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  1081dc:	31 c0                	xor    %eax,%eax
  1081de:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1081e1:	c9                   	leave
  1081e2:	c3                   	ret

001081e3 <z_stack_is_user_capable>:
  1081e3:	55                   	push   %ebp
  1081e4:	89 e5                	mov    %esp,%ebp
  1081e6:	ff 75 08             	push   0x8(%ebp)
  1081e9:	e8 47 52 00 00       	call   10d435 <k_object_find>
  1081ee:	5a                   	pop    %edx
  1081ef:	85 c0                	test   %eax,%eax
  1081f1:	c9                   	leave
  1081f2:	0f 95 c0             	setne  %al
  1081f5:	c3                   	ret

001081f6 <k_thread_user_mode_enter>:
  1081f6:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  1081fc:	55                   	push   %ebp
  1081fd:	89 e5                	mov    %esp,%ebp
  1081ff:	8a 42 0c             	mov    0xc(%edx),%al
  108202:	83 e0 fe             	and    $0xfffffffe,%eax
  108205:	83 c8 04             	or     $0x4,%eax
  108208:	88 42 0c             	mov    %al,0xc(%edx)
  10820b:	ff b2 84 00 00 00    	push   0x84(%edx)
  108211:	e8 cd ff ff ff       	call   1081e3 <z_stack_is_user_capable>
  108216:	5a                   	pop    %edx
  108217:	84 c0                	test   %al,%al
  108219:	75 39                	jne    108254 <k_thread_user_mode_enter+0x5e>
  10821b:	68 14 03 00 00       	push   $0x314
  108220:	68 4d 23 11 00       	push   $0x11234d
  108225:	68 70 23 11 00       	push   $0x112370
  10822a:	68 ee 10 11 00       	push   $0x1110ee
  10822f:	e8 a9 93 ff ff       	call   1015dd <assert_print>
  108234:	83 c4 10             	add    $0x10,%esp
  108237:	68 ac 23 11 00       	push   $0x1123ac
  10823c:	e8 9c 93 ff ff       	call   1015dd <assert_print>
  108241:	c7 04 24 14 03 00 00 	movl   $0x314,(%esp)
  108248:	68 4d 23 11 00       	push   $0x11234d
  10824d:	e8 7c 93 ff ff       	call   1015ce <assert_post_action>
  108252:	59                   	pop    %ecx
  108253:	58                   	pop    %eax
  108254:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  108259:	8b 50 68             	mov    0x68(%eax),%edx
  10825c:	03 50 64             	add    0x64(%eax),%edx
  10825f:	52                   	push   %edx
  108260:	50                   	push   %eax
  108261:	e8 a3 ba ff ff       	call   103d09 <arch_tls_stack_setup>
  108266:	58                   	pop    %eax
  108267:	5a                   	pop    %edx
  108268:	ff 75 14             	push   0x14(%ebp)
  10826b:	ff 75 10             	push   0x10(%ebp)
  10826e:	ff 75 0c             	push   0xc(%ebp)
  108271:	ff 75 08             	push   0x8(%ebp)
  108274:	e8 94 b9 ff ff       	call   103c0d <arch_user_mode_enter>

00108279 <z_mrsh_k_thread_timeout_remaining_ticks>:
  108279:	55                   	push   %ebp
  10827a:	89 e5                	mov    %esp,%ebp
  10827c:	57                   	push   %edi
  10827d:	56                   	push   %esi
  10827e:	31 f6                	xor    %esi,%esi
  108280:	53                   	push   %ebx
  108281:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  108286:	8b 55 20             	mov    0x20(%ebp),%edx
  108289:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10828c:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  108292:	53                   	push   %ebx
  108293:	e8 9d 51 00 00       	call   10d435 <k_object_find>
  108298:	89 34 24             	mov    %esi,(%esp)
  10829b:	b9 09 00 00 00       	mov    $0x9,%ecx
  1082a0:	89 da                	mov    %ebx,%edx
  1082a2:	e8 5c fc ff ff       	call   107f03 <k_object_validation_check>
  1082a7:	5f                   	pop    %edi
  1082a8:	85 c0                	test   %eax,%eax
  1082aa:	75 34                	jne    1082e0 <z_mrsh_k_thread_timeout_remaining_ticks+0x67>
  1082ac:	83 c3 18             	add    $0x18,%ebx
  1082af:	53                   	push   %ebx
  1082b0:	e8 6b 2e 00 00       	call   10b120 <z_timeout_remaining>
  1082b5:	83 7d 0c f7          	cmpl   $0xfffffff7,0xc(%ebp)
  1082b9:	59                   	pop    %ecx
  1082ba:	89 c6                	mov    %eax,%esi
  1082bc:	89 d7                	mov    %edx,%edi
  1082be:	76 44                	jbe    108304 <z_mrsh_k_thread_timeout_remaining_ticks+0x8b>
  1082c0:	68 c7 12 11 00       	push   $0x1112c7
  1082c5:	6a 08                	push   $0x8
  1082c7:	ff 75 0c             	push   0xc(%ebp)
  1082ca:	68 80 02 11 00       	push   $0x110280
  1082cf:	6a 45                	push   $0x45
  1082d1:	68 7c 12 11 00       	push   $0x11127c
  1082d6:	e8 1d a2 ff ff       	call   1024f8 <z_log_minimal_printk>
  1082db:	83 c4 18             	add    $0x18,%esp
  1082de:	eb 14                	jmp    1082f4 <z_mrsh_k_thread_timeout_remaining_ticks+0x7b>
  1082e0:	68 40 02 11 00       	push   $0x110240
  1082e5:	6a 45                	push   $0x45
  1082e7:	68 dd 1f 11 00       	push   $0x111fdd
  1082ec:	e8 07 a2 ff ff       	call   1024f8 <z_log_minimal_printk>
  1082f1:	83 c4 0c             	add    $0xc,%esp
  1082f4:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1082f9:	ff b0 88 00 00 00    	push   0x88(%eax)
  1082ff:	e8 c2 be ff ff       	call   1041c6 <arch_syscall_oops>
  108304:	6a 01                	push   $0x1
  108306:	6a 08                	push   $0x8
  108308:	ff 75 0c             	push   0xc(%ebp)
  10830b:	e8 86 b4 ff ff       	call   103796 <arch_buffer_validate>
  108310:	83 c4 0c             	add    $0xc,%esp
  108313:	85 c0                	test   %eax,%eax
  108315:	75 a9                	jne    1082c0 <z_mrsh_k_thread_timeout_remaining_ticks+0x47>
  108317:	8b 45 0c             	mov    0xc(%ebp),%eax
  10831a:	31 d2                	xor    %edx,%edx
  10831c:	89 30                	mov    %esi,(%eax)
  10831e:	89 78 04             	mov    %edi,0x4(%eax)
  108321:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  108326:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10832c:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10832f:	31 c0                	xor    %eax,%eax
  108331:	5b                   	pop    %ebx
  108332:	5e                   	pop    %esi
  108333:	5f                   	pop    %edi
  108334:	5d                   	pop    %ebp
  108335:	c3                   	ret

00108336 <z_mrsh_k_thread_timeout_expires_ticks>:
  108336:	55                   	push   %ebp
  108337:	89 e5                	mov    %esp,%ebp
  108339:	57                   	push   %edi
  10833a:	56                   	push   %esi
  10833b:	31 f6                	xor    %esi,%esi
  10833d:	53                   	push   %ebx
  10833e:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  108343:	8b 55 20             	mov    0x20(%ebp),%edx
  108346:	8b 5d 08             	mov    0x8(%ebp),%ebx
  108349:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10834f:	53                   	push   %ebx
  108350:	e8 e0 50 00 00       	call   10d435 <k_object_find>
  108355:	89 34 24             	mov    %esi,(%esp)
  108358:	b9 09 00 00 00       	mov    $0x9,%ecx
  10835d:	89 da                	mov    %ebx,%edx
  10835f:	e8 9f fb ff ff       	call   107f03 <k_object_validation_check>
  108364:	5f                   	pop    %edi
  108365:	85 c0                	test   %eax,%eax
  108367:	75 34                	jne    10839d <z_mrsh_k_thread_timeout_expires_ticks+0x67>
  108369:	83 c3 18             	add    $0x18,%ebx
  10836c:	53                   	push   %ebx
  10836d:	e8 8e 2e 00 00       	call   10b200 <z_timeout_expires>
  108372:	83 7d 0c f7          	cmpl   $0xfffffff7,0xc(%ebp)
  108376:	59                   	pop    %ecx
  108377:	89 c6                	mov    %eax,%esi
  108379:	89 d7                	mov    %edx,%edi
  10837b:	76 44                	jbe    1083c1 <z_mrsh_k_thread_timeout_expires_ticks+0x8b>
  10837d:	68 c7 12 11 00       	push   $0x1112c7
  108382:	6a 08                	push   $0x8
  108384:	ff 75 0c             	push   0xc(%ebp)
  108387:	68 00 02 11 00       	push   $0x110200
  10838c:	6a 45                	push   $0x45
  10838e:	68 7c 12 11 00       	push   $0x11127c
  108393:	e8 60 a1 ff ff       	call   1024f8 <z_log_minimal_printk>
  108398:	83 c4 18             	add    $0x18,%esp
  10839b:	eb 14                	jmp    1083b1 <z_mrsh_k_thread_timeout_expires_ticks+0x7b>
  10839d:	68 c0 01 11 00       	push   $0x1101c0
  1083a2:	6a 45                	push   $0x45
  1083a4:	68 dd 1f 11 00       	push   $0x111fdd
  1083a9:	e8 4a a1 ff ff       	call   1024f8 <z_log_minimal_printk>
  1083ae:	83 c4 0c             	add    $0xc,%esp
  1083b1:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1083b6:	ff b0 88 00 00 00    	push   0x88(%eax)
  1083bc:	e8 05 be ff ff       	call   1041c6 <arch_syscall_oops>
  1083c1:	6a 01                	push   $0x1
  1083c3:	6a 08                	push   $0x8
  1083c5:	ff 75 0c             	push   0xc(%ebp)
  1083c8:	e8 c9 b3 ff ff       	call   103796 <arch_buffer_validate>
  1083cd:	83 c4 0c             	add    $0xc,%esp
  1083d0:	85 c0                	test   %eax,%eax
  1083d2:	75 a9                	jne    10837d <z_mrsh_k_thread_timeout_expires_ticks+0x47>
  1083d4:	8b 45 0c             	mov    0xc(%ebp),%eax
  1083d7:	31 d2                	xor    %edx,%edx
  1083d9:	89 30                	mov    %esi,(%eax)
  1083db:	89 78 04             	mov    %edi,0x4(%eax)
  1083de:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1083e3:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  1083e9:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1083ec:	31 c0                	xor    %eax,%eax
  1083ee:	5b                   	pop    %ebx
  1083ef:	5e                   	pop    %esi
  1083f0:	5f                   	pop    %edi
  1083f1:	5d                   	pop    %ebp
  1083f2:	c3                   	ret

001083f3 <defer_thread_cleanup>:
  1083f3:	55                   	push   %ebp
  1083f4:	89 e5                	mov    %esp,%ebp
  1083f6:	8b 45 08             	mov    0x8(%ebp),%eax
  1083f9:	a3 e4 cc 12 00       	mov    %eax,0x12cce4
  1083fe:	8b 50 70             	mov    0x70(%eax),%edx
  108401:	89 15 dc cc 12 00    	mov    %edx,0x12ccdc
  108407:	8b 50 74             	mov    0x74(%eax),%edx
  10840a:	89 15 d8 cc 12 00    	mov    %edx,0x12ccd8
  108410:	31 d2                	xor    %edx,%edx
  108412:	89 50 70             	mov    %edx,0x70(%eax)
  108415:	89 50 74             	mov    %edx,0x74(%eax)
  108418:	5d                   	pop    %ebp
  108419:	c3                   	ret

0010841a <do_thread_cleanup>:
  10841a:	a1 dc cc 12 00       	mov    0x12ccdc,%eax
  10841f:	85 c0                	test   %eax,%eax
  108421:	74 1d                	je     108440 <do_thread_cleanup+0x26>
  108423:	55                   	push   %ebp
  108424:	89 e5                	mov    %esp,%ebp
  108426:	6a 00                	push   $0x0
  108428:	ff 35 d8 cc 12 00    	push   0x12ccd8
  10842e:	50                   	push   %eax
  10842f:	e8 88 39 00 00       	call   10bdbc <k_mem_unmap_phys_guard>
  108434:	31 c0                	xor    %eax,%eax
  108436:	83 c4 0c             	add    $0xc,%esp
  108439:	a3 dc cc 12 00       	mov    %eax,0x12ccdc
  10843e:	c9                   	leave
  10843f:	c3                   	ret
  108440:	c3                   	ret

00108441 <k_thread_abort_cleanup>:
  108441:	55                   	push   %ebp
  108442:	89 e5                	mov    %esp,%ebp
  108444:	56                   	push   %esi
  108445:	53                   	push   %ebx
  108446:	8b 5d 08             	mov    0x8(%ebp),%ebx
  108449:	9c                   	pushf
  10844a:	fa                   	cli
  10844b:	5e                   	pop    %esi
  10844c:	68 e0 cc 12 00       	push   $0x12cce0
  108451:	e8 99 28 00 00       	call   10acef <z_spin_lock_valid>
  108456:	59                   	pop    %ecx
  108457:	84 c0                	test   %al,%al
  108459:	75 34                	jne    10848f <k_thread_abort_cleanup+0x4e>
  10845b:	68 88 00 00 00       	push   $0x88
  108460:	68 61 13 11 00       	push   $0x111361
  108465:	68 8e 13 11 00       	push   $0x11138e
  10846a:	68 ee 10 11 00       	push   $0x1110ee
  10846f:	e8 69 91 ff ff       	call   1015dd <assert_print>
  108474:	83 c4 10             	add    $0x10,%esp
  108477:	68 e0 cc 12 00       	push   $0x12cce0
  10847c:	68 a3 13 11 00       	push   $0x1113a3
  108481:	e8 57 91 ff ff       	call   1015dd <assert_print>
  108486:	58                   	pop    %eax
  108487:	5a                   	pop    %edx
  108488:	68 88 00 00 00       	push   $0x88
  10848d:	eb 7a                	jmp    108509 <k_thread_abort_cleanup+0xc8>
  10848f:	68 e0 cc 12 00       	push   $0x12cce0
  108494:	e8 ae 28 00 00       	call   10ad47 <z_spin_lock_set_owner>
  108499:	58                   	pop    %eax
  10849a:	a1 e4 cc 12 00       	mov    0x12cce4,%eax
  10849f:	85 c0                	test   %eax,%eax
  1084a1:	74 0e                	je     1084b1 <k_thread_abort_cleanup+0x70>
  1084a3:	50                   	push   %eax
  1084a4:	e8 71 ff ff ff       	call   10841a <do_thread_cleanup>
  1084a9:	31 c0                	xor    %eax,%eax
  1084ab:	59                   	pop    %ecx
  1084ac:	a3 e4 cc 12 00       	mov    %eax,0x12cce4
  1084b1:	39 1d a8 48 12 00    	cmp    %ebx,0x1248a8
  1084b7:	75 08                	jne    1084c1 <k_thread_abort_cleanup+0x80>
  1084b9:	53                   	push   %ebx
  1084ba:	e8 34 ff ff ff       	call   1083f3 <defer_thread_cleanup>
  1084bf:	eb 06                	jmp    1084c7 <k_thread_abort_cleanup+0x86>
  1084c1:	53                   	push   %ebx
  1084c2:	e8 53 ff ff ff       	call   10841a <do_thread_cleanup>
  1084c7:	58                   	pop    %eax
  1084c8:	68 e0 cc 12 00       	push   $0x12cce0
  1084cd:	e8 3e 28 00 00       	call   10ad10 <z_spin_unlock_valid>
  1084d2:	5a                   	pop    %edx
  1084d3:	84 c0                	test   %al,%al
  1084d5:	75 3e                	jne    108515 <k_thread_abort_cleanup+0xd4>
  1084d7:	68 31 01 00 00       	push   $0x131
  1084dc:	68 61 13 11 00       	push   $0x111361
  1084e1:	68 e8 13 11 00       	push   $0x1113e8
  1084e6:	68 ee 10 11 00       	push   $0x1110ee
  1084eb:	e8 ed 90 ff ff       	call   1015dd <assert_print>
  1084f0:	83 c4 10             	add    $0x10,%esp
  1084f3:	68 e0 cc 12 00       	push   $0x12cce0
  1084f8:	68 ff 13 11 00       	push   $0x1113ff
  1084fd:	e8 db 90 ff ff       	call   1015dd <assert_print>
  108502:	59                   	pop    %ecx
  108503:	5b                   	pop    %ebx
  108504:	68 31 01 00 00       	push   $0x131
  108509:	68 61 13 11 00       	push   $0x111361
  10850e:	e8 bb 90 ff ff       	call   1015ce <assert_post_action>
  108513:	58                   	pop    %eax
  108514:	5a                   	pop    %edx
  108515:	0f ba e6 09          	bt     $0x9,%esi
  108519:	73 01                	jae    10851c <k_thread_abort_cleanup+0xdb>
  10851b:	fb                   	sti
  10851c:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10851f:	5b                   	pop    %ebx
  108520:	5e                   	pop    %esi
  108521:	5d                   	pop    %ebp
  108522:	c3                   	ret

00108523 <k_thread_abort_cleanup_check_reuse>:
  108523:	55                   	push   %ebp
  108524:	89 e5                	mov    %esp,%ebp
  108526:	53                   	push   %ebx
  108527:	9c                   	pushf
  108528:	fa                   	cli
  108529:	5b                   	pop    %ebx
  10852a:	68 e0 cc 12 00       	push   $0x12cce0
  10852f:	e8 bb 27 00 00       	call   10acef <z_spin_lock_valid>
  108534:	59                   	pop    %ecx
  108535:	84 c0                	test   %al,%al
  108537:	75 34                	jne    10856d <k_thread_abort_cleanup_check_reuse+0x4a>
  108539:	68 88 00 00 00       	push   $0x88
  10853e:	68 61 13 11 00       	push   $0x111361
  108543:	68 8e 13 11 00       	push   $0x11138e
  108548:	68 ee 10 11 00       	push   $0x1110ee
  10854d:	e8 8b 90 ff ff       	call   1015dd <assert_print>
  108552:	83 c4 10             	add    $0x10,%esp
  108555:	68 e0 cc 12 00       	push   $0x12cce0
  10855a:	68 a3 13 11 00       	push   $0x1113a3
  10855f:	e8 79 90 ff ff       	call   1015dd <assert_print>
  108564:	58                   	pop    %eax
  108565:	5a                   	pop    %edx
  108566:	68 88 00 00 00       	push   $0x88
  10856b:	eb 64                	jmp    1085d1 <k_thread_abort_cleanup_check_reuse+0xae>
  10856d:	68 e0 cc 12 00       	push   $0x12cce0
  108572:	e8 d0 27 00 00       	call   10ad47 <z_spin_lock_set_owner>
  108577:	58                   	pop    %eax
  108578:	a1 e4 cc 12 00       	mov    0x12cce4,%eax
  10857d:	3b 45 08             	cmp    0x8(%ebp),%eax
  108580:	75 0e                	jne    108590 <k_thread_abort_cleanup_check_reuse+0x6d>
  108582:	50                   	push   %eax
  108583:	e8 92 fe ff ff       	call   10841a <do_thread_cleanup>
  108588:	31 c0                	xor    %eax,%eax
  10858a:	59                   	pop    %ecx
  10858b:	a3 e4 cc 12 00       	mov    %eax,0x12cce4
  108590:	68 e0 cc 12 00       	push   $0x12cce0
  108595:	e8 76 27 00 00       	call   10ad10 <z_spin_unlock_valid>
  10859a:	5a                   	pop    %edx
  10859b:	84 c0                	test   %al,%al
  10859d:	75 3e                	jne    1085dd <k_thread_abort_cleanup_check_reuse+0xba>
  10859f:	68 31 01 00 00       	push   $0x131
  1085a4:	68 61 13 11 00       	push   $0x111361
  1085a9:	68 e8 13 11 00       	push   $0x1113e8
  1085ae:	68 ee 10 11 00       	push   $0x1110ee
  1085b3:	e8 25 90 ff ff       	call   1015dd <assert_print>
  1085b8:	83 c4 10             	add    $0x10,%esp
  1085bb:	68 e0 cc 12 00       	push   $0x12cce0
  1085c0:	68 ff 13 11 00       	push   $0x1113ff
  1085c5:	e8 13 90 ff ff       	call   1015dd <assert_print>
  1085ca:	59                   	pop    %ecx
  1085cb:	5b                   	pop    %ebx
  1085cc:	68 31 01 00 00       	push   $0x131
  1085d1:	68 61 13 11 00       	push   $0x111361
  1085d6:	e8 f3 8f ff ff       	call   1015ce <assert_post_action>
  1085db:	58                   	pop    %eax
  1085dc:	5a                   	pop    %edx
  1085dd:	0f ba e3 09          	bt     $0x9,%ebx
  1085e1:	73 01                	jae    1085e4 <k_thread_abort_cleanup_check_reuse+0xc1>
  1085e3:	fb                   	sti
  1085e4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1085e7:	c9                   	leave
  1085e8:	c3                   	ret

001085e9 <z_setup_new_thread>:
  1085e9:	55                   	push   %ebp
  1085ea:	89 e5                	mov    %esp,%ebp
  1085ec:	57                   	push   %edi
  1085ed:	56                   	push   %esi
  1085ee:	53                   	push   %ebx
  1085ef:	83 ec 08             	sub    $0x8,%esp
  1085f2:	8b 75 24             	mov    0x24(%ebp),%esi
  1085f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
  1085f8:	83 fe 0f             	cmp    $0xf,%esi
  1085fb:	75 0b                	jne    108608 <z_setup_new_thread+0x1f>
  1085fd:	81 7d 14 50 6c 10 00 	cmpl   $0x106c50,0x14(%ebp)
  108604:	75 0a                	jne    108610 <z_setup_new_thread+0x27>
  108606:	eb 3d                	jmp    108645 <z_setup_new_thread+0x5c>
  108608:	8d 46 10             	lea    0x10(%esi),%eax
  10860b:	83 f8 1e             	cmp    $0x1e,%eax
  10860e:	76 35                	jbe    108645 <z_setup_new_thread+0x5c>
  108610:	68 0d 02 00 00       	push   $0x20d
  108615:	68 4d 23 11 00       	push   $0x11234d
  10861a:	68 e2 23 11 00       	push   $0x1123e2
  10861f:	68 ee 10 11 00       	push   $0x1110ee
  108624:	e8 b4 8f ff ff       	call   1015dd <assert_print>
  108629:	83 c4 10             	add    $0x10,%esp
  10862c:	6a f0                	push   $0xfffffff0
  10862e:	6a 0e                	push   $0xe
  108630:	56                   	push   %esi
  108631:	68 62 24 11 00       	push   $0x112462
  108636:	e8 a2 8f ff ff       	call   1015dd <assert_print>
  10863b:	83 c4 10             	add    $0x10,%esp
  10863e:	68 0d 02 00 00       	push   $0x20d
  108643:	eb 4c                	jmp    108691 <z_setup_new_thread+0xa8>
  108645:	53                   	push   %ebx
  108646:	e8 d8 fe ff ff       	call   108523 <k_thread_abort_cleanup_check_reuse>
  10864b:	f6 45 28 04          	testb  $0x4,0x28(%ebp)
  10864f:	5f                   	pop    %edi
  108650:	74 4b                	je     10869d <z_setup_new_thread+0xb4>
  108652:	ff 75 0c             	push   0xc(%ebp)
  108655:	e8 89 fb ff ff       	call   1081e3 <z_stack_is_user_capable>
  10865a:	59                   	pop    %ecx
  10865b:	84 c0                	test   %al,%al
  10865d:	75 3e                	jne    10869d <z_setup_new_thread+0xb4>
  10865f:	68 1d 02 00 00       	push   $0x21d
  108664:	68 4d 23 11 00       	push   $0x11234d
  108669:	68 93 24 11 00       	push   $0x112493
  10866e:	68 ee 10 11 00       	push   $0x1110ee
  108673:	e8 65 8f ff ff       	call   1015dd <assert_print>
  108678:	83 c4 10             	add    $0x10,%esp
  10867b:	ff 75 0c             	push   0xc(%ebp)
  10867e:	53                   	push   %ebx
  10867f:	68 d6 24 11 00       	push   $0x1124d6
  108684:	e8 54 8f ff ff       	call   1015dd <assert_print>
  108689:	83 c4 0c             	add    $0xc,%esp
  10868c:	68 1d 02 00 00       	push   $0x21d
  108691:	68 4d 23 11 00       	push   $0x11234d
  108696:	e8 33 8f ff ff       	call   1015ce <assert_post_action>
  10869b:	58                   	pop    %eax
  10869c:	5a                   	pop    %edx
  10869d:	53                   	push   %ebx
  10869e:	e8 ff 52 00 00       	call   10d9a2 <k_object_init>
  1086a3:	5f                   	pop    %edi
  1086a4:	ff 75 0c             	push   0xc(%ebp)
  1086a7:	e8 f6 52 00 00       	call   10d9a2 <k_object_init>
  1086ac:	8b 45 0c             	mov    0xc(%ebp),%eax
  1086af:	89 83 84 00 00 00    	mov    %eax,0x84(%ebx)
  1086b5:	31 c0                	xor    %eax,%eax
  1086b7:	89 83 88 00 00 00    	mov    %eax,0x88(%ebx)
  1086bd:	89 1c 24             	mov    %ebx,(%esp)
  1086c0:	53                   	push   %ebx
  1086c1:	8d 7b 34             	lea    0x34(%ebx),%edi
  1086c4:	e8 24 52 00 00       	call   10d8ed <z_impl_k_object_access_grant>
  1086c9:	58                   	pop    %eax
  1086ca:	b9 04 00 00 00       	mov    $0x4,%ecx
  1086cf:	31 c0                	xor    %eax,%eax
  1086d1:	5a                   	pop    %edx
  1086d2:	f3 ab                	rep stos %eax,%es:(%edi)
  1086d4:	8a 45 28             	mov    0x28(%ebp),%al
  1086d7:	31 c9                	xor    %ecx,%ecx
  1086d9:	88 43 0c             	mov    %al,0xc(%ebx)
  1086dc:	89 f0                	mov    %esi,%eax
  1086de:	31 f6                	xor    %esi,%esi
  1086e0:	c7 43 38 d3 7e 10 00 	movl   $0x107ed3,0x38(%ebx)
  1086e7:	89 4b 08             	mov    %ecx,0x8(%ebx)
  1086ea:	c6 43 0d 04          	movb   $0x4,0xd(%ebx)
  1086ee:	88 43 0e             	mov    %al,0xe(%ebx)
  1086f1:	c6 43 0f 00          	movb   $0x0,0xf(%ebx)
  1086f5:	89 73 18             	mov    %esi,0x18(%ebx)
  1086f8:	89 73 1c             	mov    %esi,0x1c(%ebx)
  1086fb:	ff 75 0c             	push   0xc(%ebp)
  1086fe:	e8 e0 fa ff ff       	call   1081e3 <z_stack_is_user_capable>
  108703:	5f                   	pop    %edi
  108704:	84 c0                	test   %al,%al
  108706:	8b 45 10             	mov    0x10(%ebp),%eax
  108709:	74 17                	je     108722 <z_setup_new_thread+0x139>
  10870b:	8d b0 ff 1f 00 00    	lea    0x1fff(%eax),%esi
  108711:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
  108717:	8d 86 00 f0 ff ff    	lea    -0x1000(%esi),%eax
  10871d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  108720:	eb 27                	jmp    108749 <z_setup_new_thread+0x160>
  108722:	8d 70 03             	lea    0x3(%eax),%esi
  108725:	83 e6 fc             	and    $0xfffffffc,%esi
  108728:	81 c6 ff 1f 00 00    	add    $0x1fff,%esi
  10872e:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
  108734:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
  10873a:	8d 86 00 f0 ff ff    	lea    -0x1000(%esi),%eax
  108740:	89 45 f0             	mov    %eax,-0x10(%ebp)
  108743:	77 04                	ja     108749 <z_setup_new_thread+0x160>
  108745:	6a 04                	push   $0x4
  108747:	cd 20                	int    $0x20
  108749:	6a 00                	push   $0x0
  10874b:	68 08 00 01 00       	push   $0x10008
  108750:	56                   	push   %esi
  108751:	ff 75 0c             	push   0xc(%ebp)
  108754:	e8 09 33 00 00       	call   10ba62 <k_mem_map_phys_guard>
  108759:	83 c4 10             	add    $0x10,%esp
  10875c:	89 c7                	mov    %eax,%edi
  10875e:	85 c0                	test   %eax,%eax
  108760:	75 26                	jne    108788 <z_setup_new_thread+0x19f>
  108762:	68 b4 01 00 00       	push   $0x1b4
  108767:	68 4d 23 11 00       	push   $0x11234d
  10876c:	68 01 25 11 00       	push   $0x112501
  108771:	68 ee 10 11 00       	push   $0x1110ee
  108776:	e8 62 8e ff ff       	call   1015dd <assert_print>
  10877b:	83 c4 10             	add    $0x10,%esp
  10877e:	68 b4 01 00 00       	push   $0x1b4
  108783:	e9 09 ff ff ff       	jmp    108691 <z_setup_new_thread+0xa8>
  108788:	ff 75 0c             	push   0xc(%ebp)
  10878b:	e8 53 fa ff ff       	call   1081e3 <z_stack_is_user_capable>
  108790:	8d 0c 37             	lea    (%edi,%esi,1),%ecx
  108793:	89 73 74             	mov    %esi,0x74(%ebx)
  108796:	89 7b 70             	mov    %edi,0x70(%ebx)
  108799:	89 0c 24             	mov    %ecx,(%esp)
  10879c:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10879f:	53                   	push   %ebx
  1087a0:	e8 64 b5 ff ff       	call   103d09 <arch_tls_stack_setup>
  1087a5:	5e                   	pop    %esi
  1087a6:	83 c0 03             	add    $0x3,%eax
  1087a9:	5a                   	pop    %edx
  1087aa:	8d 97 00 10 00 00    	lea    0x1000(%edi),%edx
  1087b0:	89 53 64             	mov    %edx,0x64(%ebx)
  1087b3:	83 e0 fc             	and    $0xfffffffc,%eax
  1087b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1087b9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1087bc:	89 53 68             	mov    %edx,0x68(%ebx)
  1087bf:	89 43 6c             	mov    %eax,0x6c(%ebx)
  1087c2:	ff 75 20             	push   0x20(%ebp)
  1087c5:	ff 75 1c             	push   0x1c(%ebp)
  1087c8:	ff 75 18             	push   0x18(%ebp)
  1087cb:	ff 75 14             	push   0x14(%ebp)
  1087ce:	29 c1                	sub    %eax,%ecx
  1087d0:	51                   	push   %ecx
  1087d1:	89 ce                	mov    %ecx,%esi
  1087d3:	ff 75 0c             	push   0xc(%ebp)
  1087d6:	53                   	push   %ebx
  1087d7:	e8 73 b6 ff ff       	call   103e4f <arch_new_thread>
  1087dc:	31 c9                	xor    %ecx,%ecx
  1087de:	83 c4 1c             	add    $0x1c,%esp
  1087e1:	89 4b 30             	mov    %ecx,0x30(%ebx)
  1087e4:	83 7d 2c 00          	cmpl   $0x0,0x2c(%ebp)
  1087e8:	74 17                	je     108801 <z_setup_new_thread+0x218>
  1087ea:	6a 1f                	push   $0x1f
  1087ec:	8d 43 44             	lea    0x44(%ebx),%eax
  1087ef:	ff 75 2c             	push   0x2c(%ebp)
  1087f2:	50                   	push   %eax
  1087f3:	e8 41 68 00 00       	call   10f039 <strncpy>
  1087f8:	83 c4 0c             	add    $0xc,%esp
  1087fb:	c6 43 63 00          	movb   $0x0,0x63(%ebx)
  1087ff:	eb 04                	jmp    108805 <z_setup_new_thread+0x21c>
  108801:	c6 43 44 00          	movb   $0x0,0x44(%ebx)
  108805:	53                   	push   %ebx
  108806:	e8 51 45 00 00       	call   10cd5c <z_mem_domain_init_thread>
  10880b:	f6 45 28 08          	testb  $0x8,0x28(%ebp)
  10880f:	59                   	pop    %ecx
  108810:	74 0e                	je     108820 <z_setup_new_thread+0x237>
  108812:	53                   	push   %ebx
  108813:	ff 35 a8 48 12 00    	push   0x1248a8
  108819:	e8 b2 4d 00 00       	call   10d5d0 <k_thread_perms_inherit>
  10881e:	58                   	pop    %eax
  10881f:	5a                   	pop    %edx
  108820:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  108825:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
  10882b:	89 83 8c 00 00 00    	mov    %eax,0x8c(%ebx)
  108831:	8d 65 f4             	lea    -0xc(%ebp),%esp
  108834:	89 f0                	mov    %esi,%eax
  108836:	5b                   	pop    %ebx
  108837:	5e                   	pop    %esi
  108838:	5f                   	pop    %edi
  108839:	5d                   	pop    %ebp
  10883a:	c3                   	ret

0010883b <z_impl_k_thread_create>:
  10883b:	55                   	push   %ebp
  10883c:	89 e5                	mov    %esp,%ebp
  10883e:	57                   	push   %edi
  10883f:	56                   	push   %esi
  108840:	53                   	push   %ebx
  108841:	83 3d a0 48 12 00 00 	cmpl   $0x0,0x1248a0
  108848:	8b 75 08             	mov    0x8(%ebp),%esi
  10884b:	8b 7d 2c             	mov    0x2c(%ebp),%edi
  10884e:	8b 5d 30             	mov    0x30(%ebp),%ebx
  108851:	74 39                	je     10888c <z_impl_k_thread_create+0x51>
  108853:	68 97 02 00 00       	push   $0x297
  108858:	68 4d 23 11 00       	push   $0x11234d
  10885d:	68 8e 22 11 00       	push   $0x11228e
  108862:	68 ee 10 11 00       	push   $0x1110ee
  108867:	e8 71 8d ff ff       	call   1015dd <assert_print>
  10886c:	83 c4 10             	add    $0x10,%esp
  10886f:	68 1e 25 11 00       	push   $0x11251e
  108874:	e8 64 8d ff ff       	call   1015dd <assert_print>
  108879:	c7 04 24 97 02 00 00 	movl   $0x297,(%esp)
  108880:	68 4d 23 11 00       	push   $0x11234d
  108885:	e8 44 8d ff ff       	call   1015ce <assert_post_action>
  10888a:	5a                   	pop    %edx
  10888b:	59                   	pop    %ecx
  10888c:	6a 00                	push   $0x0
  10888e:	ff 75 28             	push   0x28(%ebp)
  108891:	ff 75 24             	push   0x24(%ebp)
  108894:	ff 75 20             	push   0x20(%ebp)
  108897:	ff 75 1c             	push   0x1c(%ebp)
  10889a:	ff 75 18             	push   0x18(%ebp)
  10889d:	ff 75 14             	push   0x14(%ebp)
  1088a0:	ff 75 10             	push   0x10(%ebp)
  1088a3:	ff 75 0c             	push   0xc(%ebp)
  1088a6:	56                   	push   %esi
  1088a7:	e8 3d fd ff ff       	call   1085e9 <z_setup_new_thread>
  1088ac:	83 c4 28             	add    $0x28,%esp
  1088af:	89 fa                	mov    %edi,%edx
  1088b1:	89 d8                	mov    %ebx,%eax
  1088b3:	83 fb ff             	cmp    $0xffffffff,%ebx
  1088b6:	75 05                	jne    1088bd <z_impl_k_thread_create+0x82>
  1088b8:	83 ff ff             	cmp    $0xffffffff,%edi
  1088bb:	74 22                	je     1088df <z_impl_k_thread_create+0xa4>
  1088bd:	89 c3                	mov    %eax,%ebx
  1088bf:	09 d3                	or     %edx,%ebx
  1088c1:	75 09                	jne    1088cc <z_impl_k_thread_create+0x91>
  1088c3:	56                   	push   %esi
  1088c4:	e8 b4 11 00 00       	call   109a7d <z_sched_start>
  1088c9:	58                   	pop    %eax
  1088ca:	eb 13                	jmp    1088df <z_impl_k_thread_create+0xa4>
  1088cc:	50                   	push   %eax
  1088cd:	8d 46 18             	lea    0x18(%esi),%eax
  1088d0:	52                   	push   %edx
  1088d1:	68 e1 94 10 00       	push   $0x1094e1
  1088d6:	50                   	push   %eax
  1088d7:	e8 68 25 00 00       	call   10ae44 <z_add_timeout>
  1088dc:	83 c4 10             	add    $0x10,%esp
  1088df:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1088e2:	89 f0                	mov    %esi,%eax
  1088e4:	5b                   	pop    %ebx
  1088e5:	5e                   	pop    %esi
  1088e6:	5f                   	pop    %edi
  1088e7:	5d                   	pop    %ebp
  1088e8:	c3                   	ret

001088e9 <z_vrfy_k_thread_create>:
  1088e9:	55                   	push   %ebp
  1088ea:	89 e5                	mov    %esp,%ebp
  1088ec:	57                   	push   %edi
  1088ed:	56                   	push   %esi
  1088ee:	53                   	push   %ebx
  1088ef:	83 ec 08             	sub    $0x8,%esp
  1088f2:	8b 45 2c             	mov    0x2c(%ebp),%eax
  1088f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
  1088f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1088fb:	8b 45 30             	mov    0x30(%ebp),%eax
  1088fe:	8b 7d 24             	mov    0x24(%ebp),%edi
  108901:	89 45 ec             	mov    %eax,-0x14(%ebp)
  108904:	53                   	push   %ebx
  108905:	e8 2b 4b 00 00       	call   10d435 <k_object_find>
  10890a:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
  108911:	b9 09 00 00 00       	mov    $0x9,%ecx
  108916:	89 da                	mov    %ebx,%edx
  108918:	e8 e6 f5 ff ff       	call   107f03 <k_object_validation_check>
  10891d:	5e                   	pop    %esi
  10891e:	85 c0                	test   %eax,%eax
  108920:	75 25                	jne    108947 <z_vrfy_k_thread_create+0x5e>
  108922:	ff 75 0c             	push   0xc(%ebp)
  108925:	e8 0b 4b 00 00       	call   10d435 <k_object_find>
  10892a:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
  108931:	8b 55 0c             	mov    0xc(%ebp),%edx
  108934:	b9 0b 00 00 00       	mov    $0xb,%ecx
  108939:	89 c6                	mov    %eax,%esi
  10893b:	e8 c3 f5 ff ff       	call   107f03 <k_object_validation_check>
  108940:	5a                   	pop    %edx
  108941:	85 c0                	test   %eax,%eax
  108943:	74 13                	je     108958 <z_vrfy_k_thread_create+0x6f>
  108945:	eb 50                	jmp    108997 <z_vrfy_k_thread_create+0xae>
  108947:	68 f4 0a 11 00       	push   $0x110af4
  10894c:	6a 45                	push   $0x45
  10894e:	68 dd 1f 11 00       	push   $0x111fdd
  108953:	e9 f0 00 00 00       	jmp    108a48 <z_vrfy_k_thread_create+0x15f>
  108958:	8b 45 10             	mov    0x10(%ebp),%eax
  10895b:	05 00 10 00 00       	add    $0x1000,%eax
  108960:	72 09                	jb     10896b <z_vrfy_k_thread_create+0x82>
  108962:	8b 56 09             	mov    0x9(%esi),%edx
  108965:	39 c2                	cmp    %eax,%edx
  108967:	73 3f                	jae    1089a8 <z_vrfy_k_thread_create+0xbf>
  108969:	eb 45                	jmp    1089b0 <z_vrfy_k_thread_create+0xc7>
  10896b:	68 00 10 00 00       	push   $0x1000
  108970:	ff 75 10             	push   0x10(%ebp)
  108973:	68 f4 0a 11 00       	push   $0x110af4
  108978:	6a 45                	push   $0x45
  10897a:	68 72 25 11 00       	push   $0x112572
  10897f:	e8 74 9b ff ff       	call   1024f8 <z_log_minimal_printk>
  108984:	83 c4 14             	add    $0x14,%esp
  108987:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10898c:	ff b0 88 00 00 00    	push   0x88(%eax)
  108992:	e8 2f b8 ff ff       	call   1041c6 <arch_syscall_oops>
  108997:	68 f4 0a 11 00       	push   $0x110af4
  10899c:	6a 45                	push   $0x45
  10899e:	68 43 25 11 00       	push   $0x112543
  1089a3:	e9 a0 00 00 00       	jmp    108a48 <z_vrfy_k_thread_create+0x15f>
  1089a8:	f6 45 28 04          	testb  $0x4,0x28(%ebp)
  1089ac:	75 12                	jne    1089c0 <z_vrfy_k_thread_create+0xd7>
  1089ae:	eb 18                	jmp    1089c8 <z_vrfy_k_thread_create+0xdf>
  1089b0:	52                   	push   %edx
  1089b1:	50                   	push   %eax
  1089b2:	68 f4 0a 11 00       	push   $0x110af4
  1089b7:	6a 45                	push   $0x45
  1089b9:	68 ae 25 11 00       	push   $0x1125ae
  1089be:	eb bf                	jmp    10897f <z_vrfy_k_thread_create+0x96>
  1089c0:	f6 45 28 01          	testb  $0x1,0x28(%ebp)
  1089c4:	74 10                	je     1089d6 <z_vrfy_k_thread_create+0xed>
  1089c6:	eb 25                	jmp    1089ed <z_vrfy_k_thread_create+0x104>
  1089c8:	68 f4 0a 11 00       	push   $0x110af4
  1089cd:	6a 45                	push   $0x45
  1089cf:	68 f2 25 11 00       	push   $0x1125f2
  1089d4:	eb 72                	jmp    108a48 <z_vrfy_k_thread_create+0x15f>
  1089d6:	8d 47 10             	lea    0x10(%edi),%eax
  1089d9:	83 f8 1e             	cmp    $0x1e,%eax
  1089dc:	77 50                	ja     108a2e <z_vrfy_k_thread_create+0x145>
  1089de:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1089e3:	0f be 40 0e          	movsbl 0xe(%eax),%eax
  1089e7:	39 f8                	cmp    %edi,%eax
  1089e9:	7e 10                	jle    1089fb <z_vrfy_k_thread_create+0x112>
  1089eb:	eb 4f                	jmp    108a3c <z_vrfy_k_thread_create+0x153>
  1089ed:	68 f4 0a 11 00       	push   $0x110af4
  1089f2:	6a 45                	push   $0x45
  1089f4:	68 21 26 11 00       	push   $0x112621
  1089f9:	eb 4d                	jmp    108a48 <z_vrfy_k_thread_create+0x15f>
  1089fb:	6a 00                	push   $0x0
  1089fd:	ff 75 28             	push   0x28(%ebp)
  108a00:	57                   	push   %edi
  108a01:	ff 75 20             	push   0x20(%ebp)
  108a04:	ff 75 1c             	push   0x1c(%ebp)
  108a07:	ff 75 18             	push   0x18(%ebp)
  108a0a:	ff 75 14             	push   0x14(%ebp)
  108a0d:	ff 75 10             	push   0x10(%ebp)
  108a10:	ff 75 0c             	push   0xc(%ebp)
  108a13:	53                   	push   %ebx
  108a14:	e8 d0 fb ff ff       	call   1085e9 <z_setup_new_thread>
  108a19:	8b 45 ec             	mov    -0x14(%ebp),%eax
  108a1c:	83 c4 28             	add    $0x28,%esp
  108a1f:	8b 55 f0             	mov    -0x10(%ebp),%edx
  108a22:	83 f8 ff             	cmp    $0xffffffff,%eax
  108a25:	75 2e                	jne    108a55 <z_vrfy_k_thread_create+0x16c>
  108a27:	83 fa ff             	cmp    $0xffffffff,%edx
  108a2a:	74 4b                	je     108a77 <z_vrfy_k_thread_create+0x18e>
  108a2c:	eb 27                	jmp    108a55 <z_vrfy_k_thread_create+0x16c>
  108a2e:	68 f4 0a 11 00       	push   $0x110af4
  108a33:	6a 45                	push   $0x45
  108a35:	68 58 26 11 00       	push   $0x112658
  108a3a:	eb 0c                	jmp    108a48 <z_vrfy_k_thread_create+0x15f>
  108a3c:	68 f4 0a 11 00       	push   $0x110af4
  108a41:	6a 45                	push   $0x45
  108a43:	68 91 26 11 00       	push   $0x112691
  108a48:	e8 ab 9a ff ff       	call   1024f8 <z_log_minimal_printk>
  108a4d:	83 c4 0c             	add    $0xc,%esp
  108a50:	e9 32 ff ff ff       	jmp    108987 <z_vrfy_k_thread_create+0x9e>
  108a55:	89 c1                	mov    %eax,%ecx
  108a57:	09 d1                	or     %edx,%ecx
  108a59:	75 09                	jne    108a64 <z_vrfy_k_thread_create+0x17b>
  108a5b:	53                   	push   %ebx
  108a5c:	e8 1c 10 00 00       	call   109a7d <z_sched_start>
  108a61:	58                   	pop    %eax
  108a62:	eb 13                	jmp    108a77 <z_vrfy_k_thread_create+0x18e>
  108a64:	50                   	push   %eax
  108a65:	8d 43 18             	lea    0x18(%ebx),%eax
  108a68:	52                   	push   %edx
  108a69:	68 e1 94 10 00       	push   $0x1094e1
  108a6e:	50                   	push   %eax
  108a6f:	e8 d0 23 00 00       	call   10ae44 <z_add_timeout>
  108a74:	83 c4 10             	add    $0x10,%esp
  108a77:	8d 65 f4             	lea    -0xc(%ebp),%esp
  108a7a:	89 d8                	mov    %ebx,%eax
  108a7c:	5b                   	pop    %ebx
  108a7d:	5e                   	pop    %esi
  108a7e:	5f                   	pop    %edi
  108a7f:	5d                   	pop    %ebp
  108a80:	c3                   	ret

00108a81 <z_mrsh_k_thread_create>:
  108a81:	55                   	push   %ebp
  108a82:	89 e5                	mov    %esp,%ebp
  108a84:	53                   	push   %ebx
  108a85:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  108a8a:	8b 5d 1c             	mov    0x1c(%ebp),%ebx
  108a8d:	8b 55 20             	mov    0x20(%ebp),%edx
  108a90:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  108a96:	83 fb e7             	cmp    $0xffffffe7,%ebx
  108a99:	76 2c                	jbe    108ac7 <z_mrsh_k_thread_create+0x46>
  108a9b:	68 cc 3b 11 00       	push   $0x113bcc
  108aa0:	6a 18                	push   $0x18
  108aa2:	53                   	push   %ebx
  108aa3:	68 dc 0a 11 00       	push   $0x110adc
  108aa8:	6a 45                	push   $0x45
  108aaa:	68 7c 12 11 00       	push   $0x11127c
  108aaf:	e8 44 9a ff ff       	call   1024f8 <z_log_minimal_printk>
  108ab4:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  108ab9:	83 c4 18             	add    $0x18,%esp
  108abc:	ff b0 88 00 00 00    	push   0x88(%eax)
  108ac2:	e8 ff b6 ff ff       	call   1041c6 <arch_syscall_oops>
  108ac7:	6a 00                	push   $0x0
  108ac9:	6a 18                	push   $0x18
  108acb:	53                   	push   %ebx
  108acc:	e8 c5 ac ff ff       	call   103796 <arch_buffer_validate>
  108ad1:	83 c4 0c             	add    $0xc,%esp
  108ad4:	85 c0                	test   %eax,%eax
  108ad6:	75 c3                	jne    108a9b <z_mrsh_k_thread_create+0x1a>
  108ad8:	8b 53 14             	mov    0x14(%ebx),%edx
  108adb:	8b 43 10             	mov    0x10(%ebx),%eax
  108ade:	52                   	push   %edx
  108adf:	50                   	push   %eax
  108ae0:	ff 73 0c             	push   0xc(%ebx)
  108ae3:	ff 73 08             	push   0x8(%ebx)
  108ae6:	ff 73 04             	push   0x4(%ebx)
  108ae9:	ff 33                	push   (%ebx)
  108aeb:	ff 75 18             	push   0x18(%ebp)
  108aee:	ff 75 14             	push   0x14(%ebp)
  108af1:	ff 75 10             	push   0x10(%ebp)
  108af4:	ff 75 0c             	push   0xc(%ebp)
  108af7:	ff 75 08             	push   0x8(%ebp)
  108afa:	e8 ea fd ff ff       	call   1088e9 <z_vrfy_k_thread_create>
  108aff:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  108b05:	31 c9                	xor    %ecx,%ecx
  108b07:	83 c4 2c             	add    $0x2c,%esp
  108b0a:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  108b10:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  108b13:	c9                   	leave
  108b14:	c3                   	ret

00108b15 <rb_get_min>:
  108b15:	55                   	push   %ebp
  108b16:	89 e5                	mov    %esp,%ebp
  108b18:	6a 00                	push   $0x0
  108b1a:	50                   	push   %eax
  108b1b:	e8 99 8d ff ff       	call   1018b9 <z_rb_get_minmax>
  108b20:	5a                   	pop    %edx
  108b21:	59                   	pop    %ecx
  108b22:	c9                   	leave
  108b23:	c3                   	ret

00108b24 <update_cache>:
  108b24:	55                   	push   %ebp
  108b25:	89 e5                	mov    %esp,%ebp
  108b27:	56                   	push   %esi
  108b28:	89 c6                	mov    %eax,%esi
  108b2a:	b8 b8 48 12 00       	mov    $0x1248b8,%eax
  108b2f:	53                   	push   %ebx
  108b30:	e8 e0 ff ff ff       	call   108b15 <rb_get_min>
  108b35:	8b 1d ac 48 12 00    	mov    0x1248ac,%ebx
  108b3b:	85 c0                	test   %eax,%eax
  108b3d:	74 02                	je     108b41 <update_cache+0x1d>
  108b3f:	89 c3                	mov    %eax,%ebx
  108b41:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  108b47:	85 f6                	test   %esi,%esi
  108b49:	75 4a                	jne    108b95 <update_cache+0x71>
  108b4b:	85 d2                	test   %edx,%edx
  108b4d:	75 39                	jne    108b88 <update_cache+0x64>
  108b4f:	68 c8 00 00 00       	push   $0xc8
  108b54:	68 e3 26 11 00       	push   $0x1126e3
  108b59:	68 0f 27 11 00       	push   $0x11270f
  108b5e:	68 ee 10 11 00       	push   $0x1110ee
  108b63:	e8 75 8a ff ff       	call   1015dd <assert_print>
  108b68:	83 c4 10             	add    $0x10,%esp
  108b6b:	68 4a 23 11 00       	push   $0x11234a
  108b70:	e8 68 8a ff ff       	call   1015dd <assert_print>
  108b75:	c7 04 24 c8 00 00 00 	movl   $0xc8,(%esp)
  108b7c:	68 e3 26 11 00       	push   $0x1126e3
  108b81:	e8 48 8a ff ff       	call   1015ce <assert_post_action>
  108b86:	5a                   	pop    %edx
  108b87:	59                   	pop    %ecx
  108b88:	f6 42 0d 1f          	testb  $0x1f,0xd(%edx)
  108b8c:	75 07                	jne    108b95 <update_cache+0x71>
  108b8e:	66 83 7a 0e 7f       	cmpw   $0x7f,0xe(%edx)
  108b93:	77 0d                	ja     108ba2 <update_cache+0x7e>
  108b95:	39 d3                	cmp    %edx,%ebx
  108b97:	74 07                	je     108ba0 <update_cache+0x7c>
  108b99:	53                   	push   %ebx
  108b9a:	e8 19 20 00 00       	call   10abb8 <z_reset_time_slice>
  108b9f:	58                   	pop    %eax
  108ba0:	89 da                	mov    %ebx,%edx
  108ba2:	89 15 b4 48 12 00    	mov    %edx,0x1248b4
  108ba8:	8d 65 f8             	lea    -0x8(%ebp),%esp
  108bab:	5b                   	pop    %ebx
  108bac:	5e                   	pop    %esi
  108bad:	5d                   	pop    %ebp
  108bae:	c3                   	ret

00108baf <thread_obj_validate>:
  108baf:	55                   	push   %ebp
  108bb0:	89 e5                	mov    %esp,%ebp
  108bb2:	56                   	push   %esi
  108bb3:	53                   	push   %ebx
  108bb4:	89 c3                	mov    %eax,%ebx
  108bb6:	50                   	push   %eax
  108bb7:	e8 79 48 00 00       	call   10d435 <k_object_find>
  108bbc:	31 d2                	xor    %edx,%edx
  108bbe:	89 c6                	mov    %eax,%esi
  108bc0:	89 14 24             	mov    %edx,(%esp)
  108bc3:	6a 09                	push   $0x9
  108bc5:	50                   	push   %eax
  108bc6:	e8 60 4d 00 00       	call   10d92b <k_object_validate>
  108bcb:	83 c4 0c             	add    $0xc,%esp
  108bce:	83 f8 ea             	cmp    $0xffffffea,%eax
  108bd1:	74 13                	je     108be6 <thread_obj_validate+0x37>
  108bd3:	31 d2                	xor    %edx,%edx
  108bd5:	85 c0                	test   %eax,%eax
  108bd7:	74 0f                	je     108be8 <thread_obj_validate+0x39>
  108bd9:	6a 09                	push   $0x9
  108bdb:	56                   	push   %esi
  108bdc:	53                   	push   %ebx
  108bdd:	50                   	push   %eax
  108bde:	e8 cb 4b 00 00       	call   10d7ae <k_object_dump_error>
  108be3:	83 c4 10             	add    $0x10,%esp
  108be6:	b2 01                	mov    $0x1,%dl
  108be8:	8d 65 f8             	lea    -0x8(%ebp),%esp
  108beb:	88 d0                	mov    %dl,%al
  108bed:	5b                   	pop    %ebx
  108bee:	5e                   	pop    %esi
  108bef:	5d                   	pop    %ebp
  108bf0:	c3                   	ret

00108bf1 <ready_thread.part.0>:
  108bf1:	55                   	push   %ebp
  108bf2:	89 e5                	mov    %esp,%ebp
  108bf4:	53                   	push   %ebx
  108bf5:	83 ec 0c             	sub    $0xc,%esp
  108bf8:	89 c3                	mov    %eax,%ebx
  108bfa:	a1 c4 48 12 00       	mov    0x1248c4,%eax
  108bff:	89 43 10             	mov    %eax,0x10(%ebx)
  108c02:	ff 05 c4 48 12 00    	incl   0x1248c4
  108c08:	75 56                	jne    108c60 <ready_thread.part.0+0x6f>
  108c0a:	a1 c0 48 12 00       	mov    0x1248c0,%eax
  108c0f:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
  108c16:	8d 14 85 0c 00 00 00 	lea    0xc(,%eax,4),%edx
  108c1d:	83 c0 0f             	add    $0xf,%eax
  108c20:	29 d4                	sub    %edx,%esp
  108c22:	83 e0 fc             	and    $0xfffffffc,%eax
  108c25:	8d 54 24 0f          	lea    0xf(%esp),%edx
  108c29:	29 c4                	sub    %eax,%esp
  108c2b:	83 e2 f0             	and    $0xfffffff0,%edx
  108c2e:	8d 44 24 0f          	lea    0xf(%esp),%eax
  108c32:	89 55 f0             	mov    %edx,-0x10(%ebp)
  108c35:	83 e0 f0             	and    $0xfffffff0,%eax
  108c38:	89 45 f4             	mov    %eax,-0xc(%ebp)
  108c3b:	8d 45 f0             	lea    -0x10(%ebp),%eax
  108c3e:	50                   	push   %eax
  108c3f:	68 b8 48 12 00       	push   $0x1248b8
  108c44:	e8 a1 91 ff ff       	call   101dea <z_rb_foreach_next>
  108c49:	59                   	pop    %ecx
  108c4a:	85 c0                	test   %eax,%eax
  108c4c:	5a                   	pop    %edx
  108c4d:	74 11                	je     108c60 <ready_thread.part.0+0x6f>
  108c4f:	8b 15 c4 48 12 00    	mov    0x1248c4,%edx
  108c55:	89 50 10             	mov    %edx,0x10(%eax)
  108c58:	ff 05 c4 48 12 00    	incl   0x1248c4
  108c5e:	eb db                	jmp    108c3b <ready_thread.part.0+0x4a>
  108c60:	53                   	push   %ebx
  108c61:	68 b8 48 12 00       	push   $0x1248b8
  108c66:	e8 75 8c ff ff       	call   1018e0 <rb_insert>
  108c6b:	58                   	pop    %eax
  108c6c:	31 c0                	xor    %eax,%eax
  108c6e:	5a                   	pop    %edx
  108c6f:	e8 b0 fe ff ff       	call   108b24 <update_cache>
  108c74:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  108c77:	c9                   	leave
  108c78:	c3                   	ret

00108c79 <ready_thread>:
  108c79:	8a 50 0d             	mov    0xd(%eax),%dl
  108c7c:	84 d2                	test   %dl,%dl
  108c7e:	78 47                	js     108cc7 <ready_thread+0x4e>
  108c80:	f6 c2 1f             	test   $0x1f,%dl
  108c83:	75 42                	jne    108cc7 <ready_thread+0x4e>
  108c85:	83 78 18 00          	cmpl   $0x0,0x18(%eax)
  108c89:	75 3c                	jne    108cc7 <ready_thread+0x4e>
  108c8b:	83 ca 80             	or     $0xffffff80,%edx
  108c8e:	3d 60 47 12 00       	cmp    $0x124760,%eax
  108c93:	88 50 0d             	mov    %dl,0xd(%eax)
  108c96:	75 2a                	jne    108cc2 <ready_thread+0x49>
  108c98:	55                   	push   %ebp
  108c99:	89 e5                	mov    %esp,%ebp
  108c9b:	6a 79                	push   $0x79
  108c9d:	68 36 27 11 00       	push   $0x112736
  108ca2:	68 58 27 11 00       	push   $0x112758
  108ca7:	68 ee 10 11 00       	push   $0x1110ee
  108cac:	e8 2c 89 ff ff       	call   1015dd <assert_print>
  108cb1:	83 c4 10             	add    $0x10,%esp
  108cb4:	6a 79                	push   $0x79
  108cb6:	68 36 27 11 00       	push   $0x112736
  108cbb:	e8 0e 89 ff ff       	call   1015ce <assert_post_action>
  108cc0:	58                   	pop    %eax
  108cc1:	5a                   	pop    %edx
  108cc2:	e9 2a ff ff ff       	jmp    108bf1 <ready_thread.part.0>
  108cc7:	c3                   	ret

00108cc8 <unready_thread>:
  108cc8:	55                   	push   %ebp
  108cc9:	89 e5                	mov    %esp,%ebp
  108ccb:	53                   	push   %ebx
  108ccc:	89 c3                	mov    %eax,%ebx
  108cce:	8a 40 0d             	mov    0xd(%eax),%al
  108cd1:	84 c0                	test   %al,%al
  108cd3:	79 58                	jns    108d2d <unready_thread+0x65>
  108cd5:	83 e0 7f             	and    $0x7f,%eax
  108cd8:	81 fb 60 47 12 00    	cmp    $0x124760,%ebx
  108cde:	88 43 0d             	mov    %al,0xd(%ebx)
  108ce1:	75 2d                	jne    108d10 <unready_thread+0x48>
  108ce3:	68 80 00 00 00       	push   $0x80
  108ce8:	68 36 27 11 00       	push   $0x112736
  108ced:	68 58 27 11 00       	push   $0x112758
  108cf2:	68 ee 10 11 00       	push   $0x1110ee
  108cf7:	e8 e1 88 ff ff       	call   1015dd <assert_print>
  108cfc:	83 c4 10             	add    $0x10,%esp
  108cff:	68 80 00 00 00       	push   $0x80
  108d04:	68 36 27 11 00       	push   $0x112736
  108d09:	e8 c0 88 ff ff       	call   1015ce <assert_post_action>
  108d0e:	5b                   	pop    %ebx
  108d0f:	58                   	pop    %eax
  108d10:	53                   	push   %ebx
  108d11:	68 b8 48 12 00       	push   $0x1248b8
  108d16:	e8 fe 8c ff ff       	call   101a19 <rb_remove>
  108d1b:	5a                   	pop    %edx
  108d1c:	83 3d b8 48 12 00 00 	cmpl   $0x0,0x1248b8
  108d23:	59                   	pop    %ecx
  108d24:	75 07                	jne    108d2d <unready_thread+0x65>
  108d26:	31 c0                	xor    %eax,%eax
  108d28:	a3 c4 48 12 00       	mov    %eax,0x1248c4
  108d2d:	31 c0                	xor    %eax,%eax
  108d2f:	39 1d a8 48 12 00    	cmp    %ebx,0x1248a8
  108d35:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  108d38:	c9                   	leave
  108d39:	0f 94 c0             	sete   %al
  108d3c:	e9 e3 fd ff ff       	jmp    108b24 <update_cache>

00108d41 <add_to_waitq_locked>:
  108d41:	55                   	push   %ebp
  108d42:	89 e5                	mov    %esp,%ebp
  108d44:	56                   	push   %esi
  108d45:	53                   	push   %ebx
  108d46:	89 c6                	mov    %eax,%esi
  108d48:	83 ec 0c             	sub    $0xc,%esp
  108d4b:	89 d3                	mov    %edx,%ebx
  108d4d:	e8 76 ff ff ff       	call   108cc8 <unready_thread>
  108d52:	80 4e 0d 02          	orb    $0x2,0xd(%esi)
  108d56:	85 db                	test   %ebx,%ebx
  108d58:	74 61                	je     108dbb <add_to_waitq_locked+0x7a>
  108d5a:	89 5e 08             	mov    %ebx,0x8(%esi)
  108d5d:	8b 43 0c             	mov    0xc(%ebx),%eax
  108d60:	89 46 10             	mov    %eax,0x10(%esi)
  108d63:	ff 43 0c             	incl   0xc(%ebx)
  108d66:	75 4a                	jne    108db2 <add_to_waitq_locked+0x71>
  108d68:	8b 43 08             	mov    0x8(%ebx),%eax
  108d6b:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
  108d72:	8d 14 85 0c 00 00 00 	lea    0xc(,%eax,4),%edx
  108d79:	83 c0 0f             	add    $0xf,%eax
  108d7c:	29 d4                	sub    %edx,%esp
  108d7e:	83 e0 fc             	and    $0xfffffffc,%eax
  108d81:	8d 54 24 0f          	lea    0xf(%esp),%edx
  108d85:	29 c4                	sub    %eax,%esp
  108d87:	83 e2 f0             	and    $0xfffffff0,%edx
  108d8a:	8d 44 24 0f          	lea    0xf(%esp),%eax
  108d8e:	89 55 ec             	mov    %edx,-0x14(%ebp)
  108d91:	83 e0 f0             	and    $0xfffffff0,%eax
  108d94:	89 45 f0             	mov    %eax,-0x10(%ebp)
  108d97:	8d 45 ec             	lea    -0x14(%ebp),%eax
  108d9a:	50                   	push   %eax
  108d9b:	53                   	push   %ebx
  108d9c:	e8 49 90 ff ff       	call   101dea <z_rb_foreach_next>
  108da1:	59                   	pop    %ecx
  108da2:	85 c0                	test   %eax,%eax
  108da4:	5a                   	pop    %edx
  108da5:	74 0b                	je     108db2 <add_to_waitq_locked+0x71>
  108da7:	8b 53 0c             	mov    0xc(%ebx),%edx
  108daa:	89 50 10             	mov    %edx,0x10(%eax)
  108dad:	ff 43 0c             	incl   0xc(%ebx)
  108db0:	eb e5                	jmp    108d97 <add_to_waitq_locked+0x56>
  108db2:	56                   	push   %esi
  108db3:	53                   	push   %ebx
  108db4:	e8 27 8b ff ff       	call   1018e0 <rb_insert>
  108db9:	58                   	pop    %eax
  108dba:	5a                   	pop    %edx
  108dbb:	8d 65 f8             	lea    -0x8(%ebp),%esp
  108dbe:	5b                   	pop    %ebx
  108dbf:	5e                   	pop    %esi
  108dc0:	5d                   	pop    %ebp
  108dc1:	c3                   	ret

00108dc2 <k_object_validation_check.constprop.0>:
  108dc2:	55                   	push   %ebp
  108dc3:	89 e5                	mov    %esp,%ebp
  108dc5:	57                   	push   %edi
  108dc6:	56                   	push   %esi
  108dc7:	89 d7                	mov    %edx,%edi
  108dc9:	51                   	push   %ecx
  108dca:	89 c6                	mov    %eax,%esi
  108dcc:	6a 00                	push   $0x0
  108dce:	6a 09                	push   $0x9
  108dd0:	50                   	push   %eax
  108dd1:	e8 55 4b 00 00       	call   10d92b <k_object_validate>
  108dd6:	83 c4 0c             	add    $0xc,%esp
  108dd9:	85 c0                	test   %eax,%eax
  108ddb:	74 13                	je     108df0 <k_object_validation_check.constprop.0+0x2e>
  108ddd:	6a 09                	push   $0x9
  108ddf:	56                   	push   %esi
  108de0:	57                   	push   %edi
  108de1:	50                   	push   %eax
  108de2:	89 45 f4             	mov    %eax,-0xc(%ebp)
  108de5:	e8 c4 49 00 00       	call   10d7ae <k_object_dump_error>
  108dea:	83 c4 10             	add    $0x10,%esp
  108ded:	8b 45 f4             	mov    -0xc(%ebp),%eax
  108df0:	8d 65 f8             	lea    -0x8(%ebp),%esp
  108df3:	5e                   	pop    %esi
  108df4:	5f                   	pop    %edi
  108df5:	5d                   	pop    %ebp
  108df6:	c3                   	ret

00108df7 <unpend_thread_no_timeout>:
  108df7:	55                   	push   %ebp
  108df8:	89 e5                	mov    %esp,%ebp
  108dfa:	56                   	push   %esi
  108dfb:	53                   	push   %ebx
  108dfc:	8b 70 08             	mov    0x8(%eax),%esi
  108dff:	85 f6                	test   %esi,%esi
  108e01:	75 2d                	jne    108e30 <unpend_thread_no_timeout+0x39>
  108e03:	68 36 02 00 00       	push   $0x236
  108e08:	68 36 27 11 00       	push   $0x112736
  108e0d:	68 79 27 11 00       	push   $0x112779
  108e12:	68 ee 10 11 00       	push   $0x1110ee
  108e17:	e8 c1 87 ff ff       	call   1015dd <assert_print>
  108e1c:	83 c4 10             	add    $0x10,%esp
  108e1f:	68 36 02 00 00       	push   $0x236
  108e24:	68 36 27 11 00       	push   $0x112736
  108e29:	e8 a0 87 ff ff       	call   1015ce <assert_post_action>
  108e2e:	58                   	pop    %eax
  108e2f:	5a                   	pop    %edx
  108e30:	50                   	push   %eax
  108e31:	89 c3                	mov    %eax,%ebx
  108e33:	56                   	push   %esi
  108e34:	e8 e0 8b ff ff       	call   101a19 <rb_remove>
  108e39:	59                   	pop    %ecx
  108e3a:	83 3e 00             	cmpl   $0x0,(%esi)
  108e3d:	58                   	pop    %eax
  108e3e:	75 05                	jne    108e45 <unpend_thread_no_timeout+0x4e>
  108e40:	31 d2                	xor    %edx,%edx
  108e42:	89 56 0c             	mov    %edx,0xc(%esi)
  108e45:	80 63 0d fd          	andb   $0xfd,0xd(%ebx)
  108e49:	31 c0                	xor    %eax,%eax
  108e4b:	89 43 08             	mov    %eax,0x8(%ebx)
  108e4e:	8d 65 f8             	lea    -0x8(%ebp),%esp
  108e51:	5b                   	pop    %ebx
  108e52:	5e                   	pop    %esi
  108e53:	5d                   	pop    %ebp
  108e54:	c3                   	ret

00108e55 <z_thread_halt>:
  108e55:	55                   	push   %ebp
  108e56:	89 e5                	mov    %esp,%ebp
  108e58:	57                   	push   %edi
  108e59:	56                   	push   %esi
  108e5a:	89 d6                	mov    %edx,%esi
  108e5c:	53                   	push   %ebx
  108e5d:	89 c3                	mov    %eax,%ebx
  108e5f:	83 ec 08             	sub    $0x8,%esp
  108e62:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  108e65:	80 7d f0 01          	cmpb   $0x1,-0x10(%ebp)
  108e69:	19 c0                	sbb    %eax,%eax
  108e6b:	8a 53 0d             	mov    0xd(%ebx),%dl
  108e6e:	83 e0 08             	and    $0x8,%eax
  108e71:	83 c0 08             	add    $0x8,%eax
  108e74:	84 c2                	test   %al,%dl
  108e76:	0f 85 51 01 00 00    	jne    108fcd <z_thread_halt+0x178>
  108e7c:	08 c2                	or     %al,%dl
  108e7e:	78 05                	js     108e85 <z_thread_halt+0x30>
  108e80:	88 53 0d             	mov    %dl,0xd(%ebx)
  108e83:	eb 58                	jmp    108edd <z_thread_halt+0x88>
  108e85:	83 e2 7f             	and    $0x7f,%edx
  108e88:	81 fb 60 47 12 00    	cmp    $0x124760,%ebx
  108e8e:	88 53 0d             	mov    %dl,0xd(%ebx)
  108e91:	75 26                	jne    108eb9 <z_thread_halt+0x64>
  108e93:	68 80 00 00 00       	push   $0x80
  108e98:	68 36 27 11 00       	push   $0x112736
  108e9d:	68 58 27 11 00       	push   $0x112758
  108ea2:	68 ee 10 11 00       	push   $0x1110ee
  108ea7:	e8 31 87 ff ff       	call   1015dd <assert_print>
  108eac:	83 c4 10             	add    $0x10,%esp
  108eaf:	68 80 00 00 00       	push   $0x80
  108eb4:	e9 b8 01 00 00       	jmp    109071 <z_thread_halt+0x21c>
  108eb9:	89 45 ec             	mov    %eax,-0x14(%ebp)
  108ebc:	53                   	push   %ebx
  108ebd:	68 b8 48 12 00       	push   $0x1248b8
  108ec2:	e8 52 8b ff ff       	call   101a19 <rb_remove>
  108ec7:	58                   	pop    %eax
  108ec8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  108ecb:	83 3d b8 48 12 00 00 	cmpl   $0x0,0x1248b8
  108ed2:	5a                   	pop    %edx
  108ed3:	75 08                	jne    108edd <z_thread_halt+0x88>
  108ed5:	31 ff                	xor    %edi,%edi
  108ed7:	89 3d c4 48 12 00    	mov    %edi,0x1248c4
  108edd:	83 f8 08             	cmp    $0x8,%eax
  108ee0:	74 0f                	je     108ef1 <z_thread_halt+0x9c>
  108ee2:	b8 01 00 00 00       	mov    $0x1,%eax
  108ee7:	e8 38 fc ff ff       	call   108b24 <update_cache>
  108eec:	e9 d8 00 00 00       	jmp    108fc9 <z_thread_halt+0x174>
  108ef1:	83 7b 08 00          	cmpl   $0x0,0x8(%ebx)
  108ef5:	74 07                	je     108efe <z_thread_halt+0xa9>
  108ef7:	89 d8                	mov    %ebx,%eax
  108ef9:	e8 f9 fe ff ff       	call   108df7 <unpend_thread_no_timeout>
  108efe:	8d 43 18             	lea    0x18(%ebx),%eax
  108f01:	50                   	push   %eax
  108f02:	e8 52 21 00 00       	call   10b059 <z_abort_timeout>
  108f07:	8d 43 34             	lea    0x34(%ebx),%eax
  108f0a:	59                   	pop    %ecx
  108f0b:	89 45 ec             	mov    %eax,-0x14(%ebp)
  108f0e:	e8 02 fc ff ff       	call   108b15 <rb_get_min>
  108f13:	89 c7                	mov    %eax,%edi
  108f15:	85 c0                	test   %eax,%eax
  108f17:	74 24                	je     108f3d <z_thread_halt+0xe8>
  108f19:	89 f8                	mov    %edi,%eax
  108f1b:	e8 d7 fe ff ff       	call   108df7 <unpend_thread_no_timeout>
  108f20:	8d 47 18             	lea    0x18(%edi),%eax
  108f23:	50                   	push   %eax
  108f24:	e8 30 21 00 00       	call   10b059 <z_abort_timeout>
  108f29:	58                   	pop    %eax
  108f2a:	8b 47 2c             	mov    0x2c(%edi),%eax
  108f2d:	31 d2                	xor    %edx,%edx
  108f2f:	89 10                	mov    %edx,(%eax)
  108f31:	89 f8                	mov    %edi,%eax
  108f33:	e8 41 fd ff ff       	call   108c79 <ready_thread>
  108f38:	8b 45 ec             	mov    -0x14(%ebp),%eax
  108f3b:	eb d1                	jmp    108f0e <z_thread_halt+0xb9>
  108f3d:	3b 1d a8 48 12 00    	cmp    0x1248a8,%ebx
  108f43:	b8 01 00 00 00       	mov    $0x1,%eax
  108f48:	74 09                	je     108f53 <z_thread_halt+0xfe>
  108f4a:	e8 d5 fb ff ff       	call   108b24 <update_cache>
  108f4f:	31 ff                	xor    %edi,%edi
  108f51:	eb 13                	jmp    108f66 <z_thread_halt+0x111>
  108f53:	83 3d a0 48 12 00 00 	cmpl   $0x0,0x1248a0
  108f5a:	74 ee                	je     108f4a <z_thread_halt+0xf5>
  108f5c:	e8 c3 fb ff ff       	call   108b24 <update_cache>
  108f61:	bf 01 00 00 00       	mov    $0x1,%edi
  108f66:	53                   	push   %ebx
  108f67:	e8 e0 3e 00 00       	call   10ce4c <z_mem_domain_exit_thread>
  108f6c:	89 1c 24             	mov    %ebx,(%esp)
  108f6f:	e8 1b 48 00 00       	call   10d78f <k_thread_perms_all_clear>
  108f74:	58                   	pop    %eax
  108f75:	ff b3 84 00 00 00    	push   0x84(%ebx)
  108f7b:	e8 38 4a 00 00       	call   10d9b8 <k_object_uninit>
  108f80:	89 1c 24             	mov    %ebx,(%esp)
  108f83:	e8 30 4a 00 00       	call   10d9b8 <k_object_uninit>
  108f88:	89 1c 24             	mov    %ebx,(%esp)
  108f8b:	e8 b1 f4 ff ff       	call   108441 <k_thread_abort_cleanup>
  108f90:	58                   	pop    %eax
  108f91:	89 f8                	mov    %edi,%eax
  108f93:	84 c0                	test   %al,%al
  108f95:	74 32                	je     108fc9 <z_thread_halt+0x174>
  108f97:	31 ff                	xor    %edi,%edi
  108f99:	31 c0                	xor    %eax,%eax
  108f9b:	66 c7 05 ec 48 12 00 	movw   $0x101,0x1248ec
  108fa2:	01 01 
  108fa4:	89 3d 44 49 12 00    	mov    %edi,0x124944
  108faa:	89 3d 48 49 12 00    	mov    %edi,0x124948
  108fb0:	c7 05 60 49 12 00 80 	movl   $0x12ca80,0x124960
  108fb7:	ca 12 00 
  108fba:	a3 6c 49 12 00       	mov    %eax,0x12496c
  108fbf:	c7 05 a8 48 12 00 e0 	movl   $0x1248e0,0x1248a8
  108fc6:	48 12 00 
  108fc9:	80 63 0d 9f          	andb   $0x9f,0xd(%ebx)
  108fcd:	39 1d a8 48 12 00    	cmp    %ebx,0x1248a8
  108fd3:	0f 85 9f 00 00 00    	jne    109078 <z_thread_halt+0x223>
  108fd9:	83 3d a0 48 12 00 00 	cmpl   $0x0,0x1248a0
  108fe0:	0f 85 92 00 00 00    	jne    109078 <z_thread_halt+0x223>
  108fe6:	68 e8 cc 12 00       	push   $0x12cce8
  108feb:	e8 20 1d 00 00       	call   10ad10 <z_spin_unlock_valid>
  108ff0:	59                   	pop    %ecx
  108ff1:	84 c0                	test   %al,%al
  108ff3:	75 3e                	jne    109033 <z_thread_halt+0x1de>
  108ff5:	68 6b 01 00 00       	push   $0x16b
  108ffa:	68 61 13 11 00       	push   $0x111361
  108fff:	68 e8 13 11 00       	push   $0x1113e8
  109004:	68 ee 10 11 00       	push   $0x1110ee
  109009:	e8 cf 85 ff ff       	call   1015dd <assert_print>
  10900e:	83 c4 10             	add    $0x10,%esp
  109011:	68 e8 cc 12 00       	push   $0x12cce8
  109016:	68 ff 13 11 00       	push   $0x1113ff
  10901b:	e8 bd 85 ff ff       	call   1015dd <assert_print>
  109020:	58                   	pop    %eax
  109021:	5a                   	pop    %edx
  109022:	68 6b 01 00 00       	push   $0x16b
  109027:	68 61 13 11 00       	push   $0x111361
  10902c:	e8 9d 85 ff ff       	call   1015ce <assert_post_action>
  109031:	5e                   	pop    %esi
  109032:	5f                   	pop    %edi
  109033:	56                   	push   %esi
  109034:	e8 d7 ad ff ff       	call   103e10 <arch_swap>
  109039:	80 7d f0 00          	cmpb   $0x0,-0x10(%ebp)
  10903d:	5b                   	pop    %ebx
  10903e:	0f 84 81 00 00 00    	je     1090c5 <z_thread_halt+0x270>
  109044:	68 ed 01 00 00       	push   $0x1ed
  109049:	68 36 27 11 00       	push   $0x112736
  10904e:	68 90 27 11 00       	push   $0x112790
  109053:	68 ee 10 11 00       	push   $0x1110ee
  109058:	e8 80 85 ff ff       	call   1015dd <assert_print>
  10905d:	83 c4 10             	add    $0x10,%esp
  109060:	68 9b 27 11 00       	push   $0x11279b
  109065:	e8 73 85 ff ff       	call   1015dd <assert_print>
  10906a:	c7 04 24 ed 01 00 00 	movl   $0x1ed,(%esp)
  109071:	68 36 27 11 00       	push   $0x112736
  109076:	eb b4                	jmp    10902c <z_thread_halt+0x1d7>
  109078:	68 e8 cc 12 00       	push   $0x12cce8
  10907d:	e8 8e 1c 00 00       	call   10ad10 <z_spin_unlock_valid>
  109082:	59                   	pop    %ecx
  109083:	84 c0                	test   %al,%al
  109085:	75 37                	jne    1090be <z_thread_halt+0x269>
  109087:	68 31 01 00 00       	push   $0x131
  10908c:	68 61 13 11 00       	push   $0x111361
  109091:	68 e8 13 11 00       	push   $0x1113e8
  109096:	68 ee 10 11 00       	push   $0x1110ee
  10909b:	e8 3d 85 ff ff       	call   1015dd <assert_print>
  1090a0:	83 c4 10             	add    $0x10,%esp
  1090a3:	68 e8 cc 12 00       	push   $0x12cce8
  1090a8:	68 ff 13 11 00       	push   $0x1113ff
  1090ad:	e8 2b 85 ff ff       	call   1015dd <assert_print>
  1090b2:	58                   	pop    %eax
  1090b3:	5a                   	pop    %edx
  1090b4:	68 31 01 00 00       	push   $0x131
  1090b9:	e9 69 ff ff ff       	jmp    109027 <z_thread_halt+0x1d2>
  1090be:	0f ba e6 09          	bt     $0x9,%esi
  1090c2:	73 01                	jae    1090c5 <z_thread_halt+0x270>
  1090c4:	fb                   	sti
  1090c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1090c8:	5b                   	pop    %ebx
  1090c9:	5e                   	pop    %esi
  1090ca:	5f                   	pop    %edi
  1090cb:	5d                   	pop    %ebp
  1090cc:	c3                   	ret

001090cd <z_sched_prio_cmp>:
  1090cd:	55                   	push   %ebp
  1090ce:	89 e5                	mov    %esp,%ebp
  1090d0:	8b 45 08             	mov    0x8(%ebp),%eax
  1090d3:	0f be 50 0e          	movsbl 0xe(%eax),%edx
  1090d7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1090da:	0f be 48 0e          	movsbl 0xe(%eax),%ecx
  1090de:	31 c0                	xor    %eax,%eax
  1090e0:	39 ca                	cmp    %ecx,%edx
  1090e2:	74 04                	je     1090e8 <z_sched_prio_cmp+0x1b>
  1090e4:	89 c8                	mov    %ecx,%eax
  1090e6:	29 d0                	sub    %edx,%eax
  1090e8:	5d                   	pop    %ebp
  1090e9:	c3                   	ret

001090ea <move_thread_to_end_of_prio_q>:
  1090ea:	55                   	push   %ebp
  1090eb:	89 e5                	mov    %esp,%ebp
  1090ed:	53                   	push   %ebx
  1090ee:	83 ec 0c             	sub    $0xc,%esp
  1090f1:	8b 5d 08             	mov    0x8(%ebp),%ebx
  1090f4:	8a 43 0d             	mov    0xd(%ebx),%al
  1090f7:	84 c0                	test   %al,%al
  1090f9:	79 4e                	jns    109149 <move_thread_to_end_of_prio_q+0x5f>
  1090fb:	83 e0 7f             	and    $0x7f,%eax
  1090fe:	81 fb 60 47 12 00    	cmp    $0x124760,%ebx
  109104:	88 43 0d             	mov    %al,0xd(%ebx)
  109107:	75 23                	jne    10912c <move_thread_to_end_of_prio_q+0x42>
  109109:	68 80 00 00 00       	push   $0x80
  10910e:	68 36 27 11 00       	push   $0x112736
  109113:	68 58 27 11 00       	push   $0x112758
  109118:	68 ee 10 11 00       	push   $0x1110ee
  10911d:	e8 bb 84 ff ff       	call   1015dd <assert_print>
  109122:	83 c4 10             	add    $0x10,%esp
  109125:	68 80 00 00 00       	push   $0x80
  10912a:	eb 44                	jmp    109170 <move_thread_to_end_of_prio_q+0x86>
  10912c:	53                   	push   %ebx
  10912d:	68 b8 48 12 00       	push   $0x1248b8
  109132:	e8 e2 88 ff ff       	call   101a19 <rb_remove>
  109137:	58                   	pop    %eax
  109138:	83 3d b8 48 12 00 00 	cmpl   $0x0,0x1248b8
  10913f:	5a                   	pop    %edx
  109140:	75 07                	jne    109149 <move_thread_to_end_of_prio_q+0x5f>
  109142:	31 c0                	xor    %eax,%eax
  109144:	a3 c4 48 12 00       	mov    %eax,0x1248c4
  109149:	80 4b 0d 80          	orb    $0x80,0xd(%ebx)
  10914d:	81 fb 60 47 12 00    	cmp    $0x124760,%ebx
  109153:	75 27                	jne    10917c <move_thread_to_end_of_prio_q+0x92>
  109155:	6a 79                	push   $0x79
  109157:	68 36 27 11 00       	push   $0x112736
  10915c:	68 58 27 11 00       	push   $0x112758
  109161:	68 ee 10 11 00       	push   $0x1110ee
  109166:	e8 72 84 ff ff       	call   1015dd <assert_print>
  10916b:	83 c4 10             	add    $0x10,%esp
  10916e:	6a 79                	push   $0x79
  109170:	68 36 27 11 00       	push   $0x112736
  109175:	e8 54 84 ff ff       	call   1015ce <assert_post_action>
  10917a:	59                   	pop    %ecx
  10917b:	5b                   	pop    %ebx
  10917c:	a1 c4 48 12 00       	mov    0x1248c4,%eax
  109181:	89 43 10             	mov    %eax,0x10(%ebx)
  109184:	ff 05 c4 48 12 00    	incl   0x1248c4
  10918a:	75 56                	jne    1091e2 <move_thread_to_end_of_prio_q+0xf8>
  10918c:	a1 c0 48 12 00       	mov    0x1248c0,%eax
  109191:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
  109198:	8d 14 85 0c 00 00 00 	lea    0xc(,%eax,4),%edx
  10919f:	83 c0 0f             	add    $0xf,%eax
  1091a2:	29 d4                	sub    %edx,%esp
  1091a4:	83 e0 fc             	and    $0xfffffffc,%eax
  1091a7:	8d 54 24 0f          	lea    0xf(%esp),%edx
  1091ab:	29 c4                	sub    %eax,%esp
  1091ad:	83 e2 f0             	and    $0xfffffff0,%edx
  1091b0:	8d 44 24 0f          	lea    0xf(%esp),%eax
  1091b4:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1091b7:	83 e0 f0             	and    $0xfffffff0,%eax
  1091ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1091bd:	8d 45 f0             	lea    -0x10(%ebp),%eax
  1091c0:	50                   	push   %eax
  1091c1:	68 b8 48 12 00       	push   $0x1248b8
  1091c6:	e8 1f 8c ff ff       	call   101dea <z_rb_foreach_next>
  1091cb:	59                   	pop    %ecx
  1091cc:	85 c0                	test   %eax,%eax
  1091ce:	5a                   	pop    %edx
  1091cf:	74 11                	je     1091e2 <move_thread_to_end_of_prio_q+0xf8>
  1091d1:	8b 15 c4 48 12 00    	mov    0x1248c4,%edx
  1091d7:	89 50 10             	mov    %edx,0x10(%eax)
  1091da:	ff 05 c4 48 12 00    	incl   0x1248c4
  1091e0:	eb db                	jmp    1091bd <move_thread_to_end_of_prio_q+0xd3>
  1091e2:	53                   	push   %ebx
  1091e3:	68 b8 48 12 00       	push   $0x1248b8
  1091e8:	e8 f3 86 ff ff       	call   1018e0 <rb_insert>
  1091ed:	58                   	pop    %eax
  1091ee:	31 c0                	xor    %eax,%eax
  1091f0:	39 1d a8 48 12 00    	cmp    %ebx,0x1248a8
  1091f6:	5a                   	pop    %edx
  1091f7:	0f 94 c0             	sete   %al
  1091fa:	e8 25 f9 ff ff       	call   108b24 <update_cache>
  1091ff:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  109202:	c9                   	leave
  109203:	c3                   	ret

00109204 <z_ready_thread>:
  109204:	55                   	push   %ebp
  109205:	89 e5                	mov    %esp,%ebp
  109207:	53                   	push   %ebx
  109208:	9c                   	pushf
  109209:	fa                   	cli
  10920a:	5b                   	pop    %ebx
  10920b:	68 e8 cc 12 00       	push   $0x12cce8
  109210:	e8 da 1a 00 00       	call   10acef <z_spin_lock_valid>
  109215:	5a                   	pop    %edx
  109216:	84 c0                	test   %al,%al
  109218:	75 34                	jne    10924e <z_ready_thread+0x4a>
  10921a:	68 88 00 00 00       	push   $0x88
  10921f:	68 61 13 11 00       	push   $0x111361
  109224:	68 8e 13 11 00       	push   $0x11138e
  109229:	68 ee 10 11 00       	push   $0x1110ee
  10922e:	e8 aa 83 ff ff       	call   1015dd <assert_print>
  109233:	83 c4 10             	add    $0x10,%esp
  109236:	68 e8 cc 12 00       	push   $0x12cce8
  10923b:	68 a3 13 11 00       	push   $0x1113a3
  109240:	e8 98 83 ff ff       	call   1015dd <assert_print>
  109245:	59                   	pop    %ecx
  109246:	5b                   	pop    %ebx
  109247:	68 88 00 00 00       	push   $0x88
  10924c:	eb 54                	jmp    1092a2 <z_ready_thread+0x9e>
  10924e:	68 e8 cc 12 00       	push   $0x12cce8
  109253:	e8 ef 1a 00 00       	call   10ad47 <z_spin_lock_set_owner>
  109258:	58                   	pop    %eax
  109259:	8b 45 08             	mov    0x8(%ebp),%eax
  10925c:	e8 18 fa ff ff       	call   108c79 <ready_thread>
  109261:	68 e8 cc 12 00       	push   $0x12cce8
  109266:	e8 a5 1a 00 00       	call   10ad10 <z_spin_unlock_valid>
  10926b:	5a                   	pop    %edx
  10926c:	84 c0                	test   %al,%al
  10926e:	75 3e                	jne    1092ae <z_ready_thread+0xaa>
  109270:	68 31 01 00 00       	push   $0x131
  109275:	68 61 13 11 00       	push   $0x111361
  10927a:	68 e8 13 11 00       	push   $0x1113e8
  10927f:	68 ee 10 11 00       	push   $0x1110ee
  109284:	e8 54 83 ff ff       	call   1015dd <assert_print>
  109289:	83 c4 10             	add    $0x10,%esp
  10928c:	68 e8 cc 12 00       	push   $0x12cce8
  109291:	68 ff 13 11 00       	push   $0x1113ff
  109296:	e8 42 83 ff ff       	call   1015dd <assert_print>
  10929b:	59                   	pop    %ecx
  10929c:	5b                   	pop    %ebx
  10929d:	68 31 01 00 00       	push   $0x131
  1092a2:	68 61 13 11 00       	push   $0x111361
  1092a7:	e8 22 83 ff ff       	call   1015ce <assert_post_action>
  1092ac:	58                   	pop    %eax
  1092ad:	5a                   	pop    %edx
  1092ae:	0f ba e3 09          	bt     $0x9,%ebx
  1092b2:	73 01                	jae    1092b5 <z_ready_thread+0xb1>
  1092b4:	fb                   	sti
  1092b5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1092b8:	c9                   	leave
  1092b9:	c3                   	ret

001092ba <z_impl_k_thread_suspend>:
  1092ba:	55                   	push   %ebp
  1092bb:	89 e5                	mov    %esp,%ebp
  1092bd:	56                   	push   %esi
  1092be:	53                   	push   %ebx
  1092bf:	8b 5d 08             	mov    0x8(%ebp),%ebx
  1092c2:	8d 43 18             	lea    0x18(%ebx),%eax
  1092c5:	50                   	push   %eax
  1092c6:	e8 8e 1d 00 00       	call   10b059 <z_abort_timeout>
  1092cb:	9c                   	pushf
  1092cc:	fa                   	cli
  1092cd:	5e                   	pop    %esi
  1092ce:	c7 04 24 e8 cc 12 00 	movl   $0x12cce8,(%esp)
  1092d5:	e8 15 1a 00 00       	call   10acef <z_spin_lock_valid>
  1092da:	5a                   	pop    %edx
  1092db:	84 c0                	test   %al,%al
  1092dd:	75 34                	jne    109313 <z_impl_k_thread_suspend+0x59>
  1092df:	68 88 00 00 00       	push   $0x88
  1092e4:	68 61 13 11 00       	push   $0x111361
  1092e9:	68 8e 13 11 00       	push   $0x11138e
  1092ee:	68 ee 10 11 00       	push   $0x1110ee
  1092f3:	e8 e5 82 ff ff       	call   1015dd <assert_print>
  1092f8:	83 c4 10             	add    $0x10,%esp
  1092fb:	68 e8 cc 12 00       	push   $0x12cce8
  109300:	68 a3 13 11 00       	push   $0x1113a3
  109305:	e8 d3 82 ff ff       	call   1015dd <assert_print>
  10930a:	5b                   	pop    %ebx
  10930b:	5e                   	pop    %esi
  10930c:	68 88 00 00 00       	push   $0x88
  109311:	eb 52                	jmp    109365 <z_impl_k_thread_suspend+0xab>
  109313:	68 e8 cc 12 00       	push   $0x12cce8
  109318:	e8 2a 1a 00 00       	call   10ad47 <z_spin_lock_set_owner>
  10931d:	f6 43 0d 10          	testb  $0x10,0xd(%ebx)
  109321:	59                   	pop    %ecx
  109322:	74 56                	je     10937a <z_impl_k_thread_suspend+0xc0>
  109324:	68 e8 cc 12 00       	push   $0x12cce8
  109329:	e8 e2 19 00 00       	call   10ad10 <z_spin_unlock_valid>
  10932e:	5a                   	pop    %edx
  10932f:	84 c0                	test   %al,%al
  109331:	75 3e                	jne    109371 <z_impl_k_thread_suspend+0xb7>
  109333:	68 31 01 00 00       	push   $0x131
  109338:	68 61 13 11 00       	push   $0x111361
  10933d:	68 e8 13 11 00       	push   $0x1113e8
  109342:	68 ee 10 11 00       	push   $0x1110ee
  109347:	e8 91 82 ff ff       	call   1015dd <assert_print>
  10934c:	83 c4 10             	add    $0x10,%esp
  10934f:	68 e8 cc 12 00       	push   $0x12cce8
  109354:	68 ff 13 11 00       	push   $0x1113ff
  109359:	e8 7f 82 ff ff       	call   1015dd <assert_print>
  10935e:	59                   	pop    %ecx
  10935f:	5b                   	pop    %ebx
  109360:	68 31 01 00 00       	push   $0x131
  109365:	68 61 13 11 00       	push   $0x111361
  10936a:	e8 5f 82 ff ff       	call   1015ce <assert_post_action>
  10936f:	58                   	pop    %eax
  109370:	5a                   	pop    %edx
  109371:	0f ba e6 09          	bt     $0x9,%esi
  109375:	73 14                	jae    10938b <z_impl_k_thread_suspend+0xd1>
  109377:	fb                   	sti
  109378:	eb 11                	jmp    10938b <z_impl_k_thread_suspend+0xd1>
  10937a:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10937d:	89 d8                	mov    %ebx,%eax
  10937f:	89 f2                	mov    %esi,%edx
  109381:	31 c9                	xor    %ecx,%ecx
  109383:	5b                   	pop    %ebx
  109384:	5e                   	pop    %esi
  109385:	5d                   	pop    %ebp
  109386:	e9 ca fa ff ff       	jmp    108e55 <z_thread_halt>
  10938b:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10938e:	5b                   	pop    %ebx
  10938f:	5e                   	pop    %esi
  109390:	5d                   	pop    %ebp
  109391:	c3                   	ret

00109392 <z_mrsh_k_thread_suspend>:
  109392:	55                   	push   %ebp
  109393:	89 e5                	mov    %esp,%ebp
  109395:	53                   	push   %ebx
  109396:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10939b:	8b 55 20             	mov    0x20(%ebp),%edx
  10939e:	8b 5d 08             	mov    0x8(%ebp),%ebx
  1093a1:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  1093a7:	53                   	push   %ebx
  1093a8:	e8 88 40 00 00       	call   10d435 <k_object_find>
  1093ad:	89 da                	mov    %ebx,%edx
  1093af:	59                   	pop    %ecx
  1093b0:	e8 0d fa ff ff       	call   108dc2 <k_object_validation_check.constprop.0>
  1093b5:	85 c0                	test   %eax,%eax
  1093b7:	74 24                	je     1093dd <z_mrsh_k_thread_suspend+0x4b>
  1093b9:	68 dc 0b 11 00       	push   $0x110bdc
  1093be:	6a 45                	push   $0x45
  1093c0:	68 dd 1f 11 00       	push   $0x111fdd
  1093c5:	e8 2e 91 ff ff       	call   1024f8 <z_log_minimal_printk>
  1093ca:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1093cf:	83 c4 0c             	add    $0xc,%esp
  1093d2:	ff b0 88 00 00 00    	push   0x88(%eax)
  1093d8:	e8 e9 ad ff ff       	call   1041c6 <arch_syscall_oops>
  1093dd:	53                   	push   %ebx
  1093de:	e8 d7 fe ff ff       	call   1092ba <z_impl_k_thread_suspend>
  1093e3:	58                   	pop    %eax
  1093e4:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1093e9:	31 d2                	xor    %edx,%edx
  1093eb:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  1093f1:	31 c0                	xor    %eax,%eax
  1093f3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1093f6:	c9                   	leave
  1093f7:	c3                   	ret

001093f8 <z_sched_wake_thread>:
  1093f8:	55                   	push   %ebp
  1093f9:	89 e5                	mov    %esp,%ebp
  1093fb:	57                   	push   %edi
  1093fc:	56                   	push   %esi
  1093fd:	53                   	push   %ebx
  1093fe:	8b 5d 08             	mov    0x8(%ebp),%ebx
  109401:	8b 7d 0c             	mov    0xc(%ebp),%edi
  109404:	9c                   	pushf
  109405:	fa                   	cli
  109406:	5e                   	pop    %esi
  109407:	68 e8 cc 12 00       	push   $0x12cce8
  10940c:	e8 de 18 00 00       	call   10acef <z_spin_lock_valid>
  109411:	59                   	pop    %ecx
  109412:	84 c0                	test   %al,%al
  109414:	75 34                	jne    10944a <z_sched_wake_thread+0x52>
  109416:	68 88 00 00 00       	push   $0x88
  10941b:	68 61 13 11 00       	push   $0x111361
  109420:	68 8e 13 11 00       	push   $0x11138e
  109425:	68 ee 10 11 00       	push   $0x1110ee
  10942a:	e8 ae 81 ff ff       	call   1015dd <assert_print>
  10942f:	83 c4 10             	add    $0x10,%esp
  109432:	68 e8 cc 12 00       	push   $0x12cce8
  109437:	68 a3 13 11 00       	push   $0x1113a3
  10943c:	e8 9c 81 ff ff       	call   1015dd <assert_print>
  109441:	58                   	pop    %eax
  109442:	5a                   	pop    %edx
  109443:	68 88 00 00 00       	push   $0x88
  109448:	eb 7c                	jmp    1094c6 <z_sched_wake_thread+0xce>
  10944a:	68 e8 cc 12 00       	push   $0x12cce8
  10944f:	e8 f3 18 00 00       	call   10ad47 <z_spin_lock_set_owner>
  109454:	f6 43 0d 28          	testb  $0x28,0xd(%ebx)
  109458:	58                   	pop    %eax
  109459:	75 2a                	jne    109485 <z_sched_wake_thread+0x8d>
  10945b:	83 7b 08 00          	cmpl   $0x0,0x8(%ebx)
  10945f:	74 07                	je     109468 <z_sched_wake_thread+0x70>
  109461:	89 d8                	mov    %ebx,%eax
  109463:	e8 8f f9 ff ff       	call   108df7 <unpend_thread_no_timeout>
  109468:	8a 53 0d             	mov    0xd(%ebx),%dl
  10946b:	89 f9                	mov    %edi,%ecx
  10946d:	88 d0                	mov    %dl,%al
  10946f:	83 e0 eb             	and    $0xffffffeb,%eax
  109472:	84 c9                	test   %cl,%cl
  109474:	75 05                	jne    10947b <z_sched_wake_thread+0x83>
  109476:	88 d0                	mov    %dl,%al
  109478:	83 e0 fb             	and    $0xfffffffb,%eax
  10947b:	88 43 0d             	mov    %al,0xd(%ebx)
  10947e:	89 d8                	mov    %ebx,%eax
  109480:	e8 f4 f7 ff ff       	call   108c79 <ready_thread>
  109485:	68 e8 cc 12 00       	push   $0x12cce8
  10948a:	e8 81 18 00 00       	call   10ad10 <z_spin_unlock_valid>
  10948f:	5f                   	pop    %edi
  109490:	84 c0                	test   %al,%al
  109492:	75 3e                	jne    1094d2 <z_sched_wake_thread+0xda>
  109494:	68 31 01 00 00       	push   $0x131
  109499:	68 61 13 11 00       	push   $0x111361
  10949e:	68 e8 13 11 00       	push   $0x1113e8
  1094a3:	68 ee 10 11 00       	push   $0x1110ee
  1094a8:	e8 30 81 ff ff       	call   1015dd <assert_print>
  1094ad:	83 c4 10             	add    $0x10,%esp
  1094b0:	68 e8 cc 12 00       	push   $0x12cce8
  1094b5:	68 ff 13 11 00       	push   $0x1113ff
  1094ba:	e8 1e 81 ff ff       	call   1015dd <assert_print>
  1094bf:	59                   	pop    %ecx
  1094c0:	5b                   	pop    %ebx
  1094c1:	68 31 01 00 00       	push   $0x131
  1094c6:	68 61 13 11 00       	push   $0x111361
  1094cb:	e8 fe 80 ff ff       	call   1015ce <assert_post_action>
  1094d0:	58                   	pop    %eax
  1094d1:	5a                   	pop    %edx
  1094d2:	0f ba e6 09          	bt     $0x9,%esi
  1094d6:	73 01                	jae    1094d9 <z_sched_wake_thread+0xe1>
  1094d8:	fb                   	sti
  1094d9:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1094dc:	5b                   	pop    %ebx
  1094dd:	5e                   	pop    %esi
  1094de:	5f                   	pop    %edi
  1094df:	5d                   	pop    %ebp
  1094e0:	c3                   	ret

001094e1 <z_thread_timeout>:
  1094e1:	55                   	push   %ebp
  1094e2:	89 e5                	mov    %esp,%ebp
  1094e4:	6a 01                	push   $0x1
  1094e6:	8b 45 08             	mov    0x8(%ebp),%eax
  1094e9:	83 e8 18             	sub    $0x18,%eax
  1094ec:	50                   	push   %eax
  1094ed:	e8 06 ff ff ff       	call   1093f8 <z_sched_wake_thread>
  1094f2:	58                   	pop    %eax
  1094f3:	5a                   	pop    %edx
  1094f4:	c9                   	leave
  1094f5:	c3                   	ret

001094f6 <z_pend_curr>:
  1094f6:	55                   	push   %ebp
  1094f7:	89 e5                	mov    %esp,%ebp
  1094f9:	57                   	push   %edi
  1094fa:	56                   	push   %esi
  1094fb:	53                   	push   %ebx
  1094fc:	83 ec 0c             	sub    $0xc,%esp
  1094ff:	8b 45 0c             	mov    0xc(%ebp),%eax
  109502:	8b 7d 08             	mov    0x8(%ebp),%edi
  109505:	89 45 ec             	mov    %eax,-0x14(%ebp)
  109508:	8b 45 10             	mov    0x10(%ebp),%eax
  10950b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10950e:	8b 75 14             	mov    0x14(%ebp),%esi
  109511:	8b 5d 18             	mov    0x18(%ebp),%ebx
  109514:	81 ff e8 cc 12 00    	cmp    $0x12cce8,%edi
  10951a:	75 28                	jne    109544 <z_pend_curr+0x4e>
  10951c:	68 ab 02 00 00       	push   $0x2ab
  109521:	68 36 27 11 00       	push   $0x112736
  109526:	68 bd 27 11 00       	push   $0x1127bd
  10952b:	68 ee 10 11 00       	push   $0x1110ee
  109530:	e8 a8 80 ff ff       	call   1015dd <assert_print>
  109535:	83 c4 10             	add    $0x10,%esp
  109538:	68 ab 02 00 00       	push   $0x2ab
  10953d:	68 36 27 11 00       	push   $0x112736
  109542:	eb 49                	jmp    10958d <z_pend_curr+0x97>
  109544:	9c                   	pushf
  109545:	fa                   	cli
  109546:	58                   	pop    %eax
  109547:	68 e8 cc 12 00       	push   $0x12cce8
  10954c:	e8 9e 17 00 00       	call   10acef <z_spin_lock_valid>
  109551:	5a                   	pop    %edx
  109552:	84 c0                	test   %al,%al
  109554:	75 3e                	jne    109594 <z_pend_curr+0x9e>
  109556:	68 88 00 00 00       	push   $0x88
  10955b:	68 61 13 11 00       	push   $0x111361
  109560:	68 8e 13 11 00       	push   $0x11138e
  109565:	68 ee 10 11 00       	push   $0x1110ee
  10956a:	e8 6e 80 ff ff       	call   1015dd <assert_print>
  10956f:	83 c4 10             	add    $0x10,%esp
  109572:	68 e8 cc 12 00       	push   $0x12cce8
  109577:	68 a3 13 11 00       	push   $0x1113a3
  10957c:	e8 5c 80 ff ff       	call   1015dd <assert_print>
  109581:	59                   	pop    %ecx
  109582:	5b                   	pop    %ebx
  109583:	68 88 00 00 00       	push   $0x88
  109588:	68 61 13 11 00       	push   $0x111361
  10958d:	e8 3c 80 ff ff       	call   1015ce <assert_post_action>
  109592:	58                   	pop    %eax
  109593:	5a                   	pop    %edx
  109594:	68 e8 cc 12 00       	push   $0x12cce8
  109599:	e8 a9 17 00 00       	call   10ad47 <z_spin_lock_set_owner>
  10959e:	58                   	pop    %eax
  10959f:	8b 55 e8             	mov    -0x18(%ebp),%edx
  1095a2:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1095a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1095aa:	e8 92 f7 ff ff       	call   108d41 <add_to_waitq_locked>
  1095af:	83 fb ff             	cmp    $0xffffffff,%ebx
  1095b2:	75 05                	jne    1095b9 <z_pend_curr+0xc3>
  1095b4:	83 fe ff             	cmp    $0xffffffff,%esi
  1095b7:	74 16                	je     1095cf <z_pend_curr+0xd9>
  1095b9:	53                   	push   %ebx
  1095ba:	56                   	push   %esi
  1095bb:	68 e1 94 10 00       	push   $0x1094e1
  1095c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1095c3:	83 c0 18             	add    $0x18,%eax
  1095c6:	50                   	push   %eax
  1095c7:	e8 78 18 00 00       	call   10ae44 <z_add_timeout>
  1095cc:	83 c4 10             	add    $0x10,%esp
  1095cf:	57                   	push   %edi
  1095d0:	e8 3b 17 00 00       	call   10ad10 <z_spin_unlock_valid>
  1095d5:	5b                   	pop    %ebx
  1095d6:	84 c0                	test   %al,%al
  1095d8:	75 1f                	jne    1095f9 <z_pend_curr+0x103>
  1095da:	68 6b 01 00 00       	push   $0x16b
  1095df:	68 61 13 11 00       	push   $0x111361
  1095e4:	68 e8 13 11 00       	push   $0x1113e8
  1095e9:	68 ee 10 11 00       	push   $0x1110ee
  1095ee:	e8 ea 7f ff ff       	call   1015dd <assert_print>
  1095f3:	83 c4 10             	add    $0x10,%esp
  1095f6:	57                   	push   %edi
  1095f7:	eb 30                	jmp    109629 <z_pend_curr+0x133>
  1095f9:	68 e8 cc 12 00       	push   $0x12cce8
  1095fe:	e8 0d 17 00 00       	call   10ad10 <z_spin_unlock_valid>
  109603:	59                   	pop    %ecx
  109604:	84 c0                	test   %al,%al
  109606:	75 37                	jne    10963f <z_pend_curr+0x149>
  109608:	68 6b 01 00 00       	push   $0x16b
  10960d:	68 61 13 11 00       	push   $0x111361
  109612:	68 e8 13 11 00       	push   $0x1113e8
  109617:	68 ee 10 11 00       	push   $0x1110ee
  10961c:	e8 bc 7f ff ff       	call   1015dd <assert_print>
  109621:	83 c4 10             	add    $0x10,%esp
  109624:	68 e8 cc 12 00       	push   $0x12cce8
  109629:	68 ff 13 11 00       	push   $0x1113ff
  10962e:	e8 aa 7f ff ff       	call   1015dd <assert_print>
  109633:	58                   	pop    %eax
  109634:	5a                   	pop    %edx
  109635:	68 6b 01 00 00       	push   $0x16b
  10963a:	e9 49 ff ff ff       	jmp    109588 <z_pend_curr+0x92>
  10963f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  109642:	89 45 08             	mov    %eax,0x8(%ebp)
  109645:	8d 65 f4             	lea    -0xc(%ebp),%esp
  109648:	5b                   	pop    %ebx
  109649:	5e                   	pop    %esi
  10964a:	5f                   	pop    %edi
  10964b:	5d                   	pop    %ebp
  10964c:	e9 bf a7 ff ff       	jmp    103e10 <arch_swap>

00109651 <z_unpend_first_thread>:
  109651:	55                   	push   %ebp
  109652:	89 e5                	mov    %esp,%ebp
  109654:	56                   	push   %esi
  109655:	53                   	push   %ebx
  109656:	9c                   	pushf
  109657:	fa                   	cli
  109658:	5e                   	pop    %esi
  109659:	68 e8 cc 12 00       	push   $0x12cce8
  10965e:	e8 8c 16 00 00       	call   10acef <z_spin_lock_valid>
  109663:	5a                   	pop    %edx
  109664:	84 c0                	test   %al,%al
  109666:	75 34                	jne    10969c <z_unpend_first_thread+0x4b>
  109668:	68 88 00 00 00       	push   $0x88
  10966d:	68 61 13 11 00       	push   $0x111361
  109672:	68 8e 13 11 00       	push   $0x11138e
  109677:	68 ee 10 11 00       	push   $0x1110ee
  10967c:	e8 5c 7f ff ff       	call   1015dd <assert_print>
  109681:	83 c4 10             	add    $0x10,%esp
  109684:	68 e8 cc 12 00       	push   $0x12cce8
  109689:	68 a3 13 11 00       	push   $0x1113a3
  10968e:	e8 4a 7f ff ff       	call   1015dd <assert_print>
  109693:	5e                   	pop    %esi
  109694:	58                   	pop    %eax
  109695:	68 88 00 00 00       	push   $0x88
  10969a:	eb 69                	jmp    109705 <z_unpend_first_thread+0xb4>
  10969c:	68 e8 cc 12 00       	push   $0x12cce8
  1096a1:	e8 a1 16 00 00       	call   10ad47 <z_spin_lock_set_owner>
  1096a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1096a9:	5b                   	pop    %ebx
  1096aa:	e8 66 f4 ff ff       	call   108b15 <rb_get_min>
  1096af:	89 c3                	mov    %eax,%ebx
  1096b1:	85 c0                	test   %eax,%eax
  1096b3:	74 0f                	je     1096c4 <z_unpend_first_thread+0x73>
  1096b5:	e8 3d f7 ff ff       	call   108df7 <unpend_thread_no_timeout>
  1096ba:	8d 43 18             	lea    0x18(%ebx),%eax
  1096bd:	50                   	push   %eax
  1096be:	e8 96 19 00 00       	call   10b059 <z_abort_timeout>
  1096c3:	59                   	pop    %ecx
  1096c4:	68 e8 cc 12 00       	push   $0x12cce8
  1096c9:	e8 42 16 00 00       	call   10ad10 <z_spin_unlock_valid>
  1096ce:	5a                   	pop    %edx
  1096cf:	84 c0                	test   %al,%al
  1096d1:	75 3e                	jne    109711 <z_unpend_first_thread+0xc0>
  1096d3:	68 31 01 00 00       	push   $0x131
  1096d8:	68 61 13 11 00       	push   $0x111361
  1096dd:	68 e8 13 11 00       	push   $0x1113e8
  1096e2:	68 ee 10 11 00       	push   $0x1110ee
  1096e7:	e8 f1 7e ff ff       	call   1015dd <assert_print>
  1096ec:	83 c4 10             	add    $0x10,%esp
  1096ef:	68 e8 cc 12 00       	push   $0x12cce8
  1096f4:	68 ff 13 11 00       	push   $0x1113ff
  1096f9:	e8 df 7e ff ff       	call   1015dd <assert_print>
  1096fe:	59                   	pop    %ecx
  1096ff:	5b                   	pop    %ebx
  109700:	68 31 01 00 00       	push   $0x131
  109705:	68 61 13 11 00       	push   $0x111361
  10970a:	e8 bf 7e ff ff       	call   1015ce <assert_post_action>
  10970f:	58                   	pop    %eax
  109710:	5a                   	pop    %edx
  109711:	0f ba e6 09          	bt     $0x9,%esi
  109715:	73 01                	jae    109718 <z_unpend_first_thread+0xc7>
  109717:	fb                   	sti
  109718:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10971b:	89 d8                	mov    %ebx,%eax
  10971d:	5b                   	pop    %ebx
  10971e:	5e                   	pop    %esi
  10971f:	5d                   	pop    %ebp
  109720:	c3                   	ret

00109721 <z_unpend_thread>:
  109721:	55                   	push   %ebp
  109722:	89 e5                	mov    %esp,%ebp
  109724:	56                   	push   %esi
  109725:	53                   	push   %ebx
  109726:	8b 5d 08             	mov    0x8(%ebp),%ebx
  109729:	9c                   	pushf
  10972a:	fa                   	cli
  10972b:	5e                   	pop    %esi
  10972c:	68 e8 cc 12 00       	push   $0x12cce8
  109731:	e8 b9 15 00 00       	call   10acef <z_spin_lock_valid>
  109736:	5a                   	pop    %edx
  109737:	84 c0                	test   %al,%al
  109739:	75 34                	jne    10976f <z_unpend_thread+0x4e>
  10973b:	68 88 00 00 00       	push   $0x88
  109740:	68 61 13 11 00       	push   $0x111361
  109745:	68 8e 13 11 00       	push   $0x11138e
  10974a:	68 ee 10 11 00       	push   $0x1110ee
  10974f:	e8 89 7e ff ff       	call   1015dd <assert_print>
  109754:	83 c4 10             	add    $0x10,%esp
  109757:	68 e8 cc 12 00       	push   $0x12cce8
  10975c:	68 a3 13 11 00       	push   $0x1113a3
  109761:	e8 77 7e ff ff       	call   1015dd <assert_print>
  109766:	5b                   	pop    %ebx
  109767:	5e                   	pop    %esi
  109768:	68 88 00 00 00       	push   $0x88
  10976d:	eb 59                	jmp    1097c8 <z_unpend_thread+0xa7>
  10976f:	68 e8 cc 12 00       	push   $0x12cce8
  109774:	e8 ce 15 00 00       	call   10ad47 <z_spin_lock_set_owner>
  109779:	83 7b 08 00          	cmpl   $0x0,0x8(%ebx)
  10977d:	59                   	pop    %ecx
  10977e:	74 07                	je     109787 <z_unpend_thread+0x66>
  109780:	89 d8                	mov    %ebx,%eax
  109782:	e8 70 f6 ff ff       	call   108df7 <unpend_thread_no_timeout>
  109787:	68 e8 cc 12 00       	push   $0x12cce8
  10978c:	e8 7f 15 00 00       	call   10ad10 <z_spin_unlock_valid>
  109791:	5a                   	pop    %edx
  109792:	84 c0                	test   %al,%al
  109794:	75 3e                	jne    1097d4 <z_unpend_thread+0xb3>
  109796:	68 31 01 00 00       	push   $0x131
  10979b:	68 61 13 11 00       	push   $0x111361
  1097a0:	68 e8 13 11 00       	push   $0x1113e8
  1097a5:	68 ee 10 11 00       	push   $0x1110ee
  1097aa:	e8 2e 7e ff ff       	call   1015dd <assert_print>
  1097af:	83 c4 10             	add    $0x10,%esp
  1097b2:	68 e8 cc 12 00       	push   $0x12cce8
  1097b7:	68 ff 13 11 00       	push   $0x1113ff
  1097bc:	e8 1c 7e ff ff       	call   1015dd <assert_print>
  1097c1:	59                   	pop    %ecx
  1097c2:	5b                   	pop    %ebx
  1097c3:	68 31 01 00 00       	push   $0x131
  1097c8:	68 61 13 11 00       	push   $0x111361
  1097cd:	e8 fc 7d ff ff       	call   1015ce <assert_post_action>
  1097d2:	58                   	pop    %eax
  1097d3:	5a                   	pop    %edx
  1097d4:	0f ba e6 09          	bt     $0x9,%esi
  1097d8:	73 01                	jae    1097db <z_unpend_thread+0xba>
  1097da:	fb                   	sti
  1097db:	83 c3 18             	add    $0x18,%ebx
  1097de:	89 5d 08             	mov    %ebx,0x8(%ebp)
  1097e1:	8d 65 f8             	lea    -0x8(%ebp),%esp
  1097e4:	5b                   	pop    %ebx
  1097e5:	5e                   	pop    %esi
  1097e6:	5d                   	pop    %ebp
  1097e7:	e9 6d 18 00 00       	jmp    10b059 <z_abort_timeout>

001097ec <z_thread_prio_set>:
  1097ec:	55                   	push   %ebp
  1097ed:	89 e5                	mov    %esp,%ebp
  1097ef:	57                   	push   %edi
  1097f0:	56                   	push   %esi
  1097f1:	53                   	push   %ebx
  1097f2:	83 ec 0c             	sub    $0xc,%esp
  1097f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
  1097f8:	9c                   	pushf
  1097f9:	fa                   	cli
  1097fa:	5f                   	pop    %edi
  1097fb:	68 e8 cc 12 00       	push   $0x12cce8
  109800:	e8 ea 14 00 00       	call   10acef <z_spin_lock_valid>
  109805:	59                   	pop    %ecx
  109806:	89 c6                	mov    %eax,%esi
  109808:	84 c0                	test   %al,%al
  10980a:	75 37                	jne    109843 <z_thread_prio_set+0x57>
  10980c:	68 88 00 00 00       	push   $0x88
  109811:	68 61 13 11 00       	push   $0x111361
  109816:	68 8e 13 11 00       	push   $0x11138e
  10981b:	68 ee 10 11 00       	push   $0x1110ee
  109820:	e8 b8 7d ff ff       	call   1015dd <assert_print>
  109825:	83 c4 10             	add    $0x10,%esp
  109828:	68 e8 cc 12 00       	push   $0x12cce8
  10982d:	68 a3 13 11 00       	push   $0x1113a3
  109832:	e8 a6 7d ff ff       	call   1015dd <assert_print>
  109837:	58                   	pop    %eax
  109838:	5a                   	pop    %edx
  109839:	68 88 00 00 00       	push   $0x88
  10983e:	e9 b8 00 00 00       	jmp    1098fb <z_thread_prio_set+0x10f>
  109843:	68 e8 cc 12 00       	push   $0x12cce8
  109848:	e8 fa 14 00 00       	call   10ad47 <z_spin_lock_set_owner>
  10984d:	58                   	pop    %eax
  10984e:	8a 43 0d             	mov    0xd(%ebx),%al
  109851:	a8 1f                	test   $0x1f,%al
  109853:	75 40                	jne    109895 <z_thread_prio_set+0xa9>
  109855:	83 7b 18 00          	cmpl   $0x0,0x18(%ebx)
  109859:	75 3a                	jne    109895 <z_thread_prio_set+0xa9>
  10985b:	83 e0 7f             	and    $0x7f,%eax
  10985e:	81 fb 60 47 12 00    	cmp    $0x124760,%ebx
  109864:	88 43 0d             	mov    %al,0xd(%ebx)
  109867:	0f 85 9a 00 00 00    	jne    109907 <z_thread_prio_set+0x11b>
  10986d:	68 80 00 00 00       	push   $0x80
  109872:	68 36 27 11 00       	push   $0x112736
  109877:	68 58 27 11 00       	push   $0x112758
  10987c:	68 ee 10 11 00       	push   $0x1110ee
  109881:	e8 57 7d ff ff       	call   1015dd <assert_print>
  109886:	83 c4 10             	add    $0x10,%esp
  109889:	68 80 00 00 00       	push   $0x80
  10988e:	68 36 27 11 00       	push   $0x112736
  109893:	eb 6b                	jmp    109900 <z_thread_prio_set+0x114>
  109895:	8a 45 0c             	mov    0xc(%ebp),%al
  109898:	31 f6                	xor    %esi,%esi
  10989a:	88 43 0e             	mov    %al,0xe(%ebx)
  10989d:	eb 17                	jmp    1098b6 <z_thread_prio_set+0xca>
  10989f:	53                   	push   %ebx
  1098a0:	68 b8 48 12 00       	push   $0x1248b8
  1098a5:	e8 36 80 ff ff       	call   1018e0 <rb_insert>
  1098aa:	5b                   	pop    %ebx
  1098ab:	58                   	pop    %eax
  1098ac:	b8 01 00 00 00       	mov    $0x1,%eax
  1098b1:	e8 6e f2 ff ff       	call   108b24 <update_cache>
  1098b6:	68 e8 cc 12 00       	push   $0x12cce8
  1098bb:	e8 50 14 00 00       	call   10ad10 <z_spin_unlock_valid>
  1098c0:	59                   	pop    %ecx
  1098c1:	84 c0                	test   %al,%al
  1098c3:	0f 85 d3 00 00 00    	jne    10999c <z_thread_prio_set+0x1b0>
  1098c9:	68 31 01 00 00       	push   $0x131
  1098ce:	68 61 13 11 00       	push   $0x111361
  1098d3:	68 e8 13 11 00       	push   $0x1113e8
  1098d8:	68 ee 10 11 00       	push   $0x1110ee
  1098dd:	e8 fb 7c ff ff       	call   1015dd <assert_print>
  1098e2:	83 c4 10             	add    $0x10,%esp
  1098e5:	68 e8 cc 12 00       	push   $0x12cce8
  1098ea:	68 ff 13 11 00       	push   $0x1113ff
  1098ef:	e8 e9 7c ff ff       	call   1015dd <assert_print>
  1098f4:	58                   	pop    %eax
  1098f5:	5a                   	pop    %edx
  1098f6:	68 31 01 00 00       	push   $0x131
  1098fb:	68 61 13 11 00       	push   $0x111361
  109900:	e8 c9 7c ff ff       	call   1015ce <assert_post_action>
  109905:	59                   	pop    %ecx
  109906:	5b                   	pop    %ebx
  109907:	53                   	push   %ebx
  109908:	68 b8 48 12 00       	push   $0x1248b8
  10990d:	e8 07 81 ff ff       	call   101a19 <rb_remove>
  109912:	58                   	pop    %eax
  109913:	83 3d b8 48 12 00 00 	cmpl   $0x0,0x1248b8
  10991a:	5a                   	pop    %edx
  10991b:	75 07                	jne    109924 <z_thread_prio_set+0x138>
  10991d:	31 c0                	xor    %eax,%eax
  10991f:	a3 c4 48 12 00       	mov    %eax,0x1248c4
  109924:	80 4b 0d 80          	orb    $0x80,0xd(%ebx)
  109928:	8a 45 0c             	mov    0xc(%ebp),%al
  10992b:	88 43 0e             	mov    %al,0xe(%ebx)
  10992e:	a1 c4 48 12 00       	mov    0x1248c4,%eax
  109933:	89 43 10             	mov    %eax,0x10(%ebx)
  109936:	ff 05 c4 48 12 00    	incl   0x1248c4
  10993c:	0f 85 5d ff ff ff    	jne    10989f <z_thread_prio_set+0xb3>
  109942:	a1 c0 48 12 00       	mov    0x1248c0,%eax
  109947:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
  10994e:	8d 0c 85 0c 00 00 00 	lea    0xc(,%eax,4),%ecx
  109955:	83 c0 0f             	add    $0xf,%eax
  109958:	29 cc                	sub    %ecx,%esp
  10995a:	83 e0 fc             	and    $0xfffffffc,%eax
  10995d:	8d 4c 24 0f          	lea    0xf(%esp),%ecx
  109961:	29 c4                	sub    %eax,%esp
  109963:	83 e1 f0             	and    $0xfffffff0,%ecx
  109966:	8d 44 24 0f          	lea    0xf(%esp),%eax
  10996a:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  10996d:	83 e0 f0             	and    $0xfffffff0,%eax
  109970:	89 45 ec             	mov    %eax,-0x14(%ebp)
  109973:	8d 45 e8             	lea    -0x18(%ebp),%eax
  109976:	50                   	push   %eax
  109977:	68 b8 48 12 00       	push   $0x1248b8
  10997c:	e8 69 84 ff ff       	call   101dea <z_rb_foreach_next>
  109981:	5a                   	pop    %edx
  109982:	85 c0                	test   %eax,%eax
  109984:	59                   	pop    %ecx
  109985:	0f 84 14 ff ff ff    	je     10989f <z_thread_prio_set+0xb3>
  10998b:	8b 0d c4 48 12 00    	mov    0x1248c4,%ecx
  109991:	89 48 10             	mov    %ecx,0x10(%eax)
  109994:	ff 05 c4 48 12 00    	incl   0x1248c4
  10999a:	eb d7                	jmp    109973 <z_thread_prio_set+0x187>
  10999c:	0f ba e7 09          	bt     $0x9,%edi
  1099a0:	73 01                	jae    1099a3 <z_thread_prio_set+0x1b7>
  1099a2:	fb                   	sti
  1099a3:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1099a6:	89 f0                	mov    %esi,%eax
  1099a8:	5b                   	pop    %ebx
  1099a9:	5e                   	pop    %esi
  1099aa:	5f                   	pop    %edi
  1099ab:	5d                   	pop    %ebp
  1099ac:	c3                   	ret

001099ad <z_reschedule>:
  1099ad:	55                   	push   %ebp
  1099ae:	89 e5                	mov    %esp,%ebp
  1099b0:	56                   	push   %esi
  1099b1:	53                   	push   %ebx
  1099b2:	8b 75 0c             	mov    0xc(%ebp),%esi
  1099b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
  1099b8:	0f ba e6 09          	bt     $0x9,%esi
  1099bc:	73 67                	jae    109a25 <z_reschedule+0x78>
  1099be:	83 3d a0 48 12 00 00 	cmpl   $0x0,0x1248a0
  1099c5:	0f 85 9f 00 00 00    	jne    109a6a <z_reschedule+0xbd>
  1099cb:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  1099d0:	39 05 b4 48 12 00    	cmp    %eax,0x1248b4
  1099d6:	0f 84 8e 00 00 00    	je     109a6a <z_reschedule+0xbd>
  1099dc:	53                   	push   %ebx
  1099dd:	e8 2e 13 00 00       	call   10ad10 <z_spin_unlock_valid>
  1099e2:	5a                   	pop    %edx
  1099e3:	84 c0                	test   %al,%al
  1099e5:	75 30                	jne    109a17 <z_reschedule+0x6a>
  1099e7:	68 6b 01 00 00       	push   $0x16b
  1099ec:	68 61 13 11 00       	push   $0x111361
  1099f1:	68 e8 13 11 00       	push   $0x1113e8
  1099f6:	68 ee 10 11 00       	push   $0x1110ee
  1099fb:	e8 dd 7b ff ff       	call   1015dd <assert_print>
  109a00:	83 c4 10             	add    $0x10,%esp
  109a03:	53                   	push   %ebx
  109a04:	68 ff 13 11 00       	push   $0x1113ff
  109a09:	e8 cf 7b ff ff       	call   1015dd <assert_print>
  109a0e:	59                   	pop    %ecx
  109a0f:	5b                   	pop    %ebx
  109a10:	68 6b 01 00 00       	push   $0x16b
  109a15:	eb 47                	jmp    109a5e <z_reschedule+0xb1>
  109a17:	89 75 08             	mov    %esi,0x8(%ebp)
  109a1a:	8d 65 f8             	lea    -0x8(%ebp),%esp
  109a1d:	5b                   	pop    %ebx
  109a1e:	5e                   	pop    %esi
  109a1f:	5d                   	pop    %ebp
  109a20:	e9 eb a3 ff ff       	jmp    103e10 <arch_swap>
  109a25:	53                   	push   %ebx
  109a26:	e8 e5 12 00 00       	call   10ad10 <z_spin_unlock_valid>
  109a2b:	5a                   	pop    %edx
  109a2c:	84 c0                	test   %al,%al
  109a2e:	75 46                	jne    109a76 <z_reschedule+0xc9>
  109a30:	68 31 01 00 00       	push   $0x131
  109a35:	68 61 13 11 00       	push   $0x111361
  109a3a:	68 e8 13 11 00       	push   $0x1113e8
  109a3f:	68 ee 10 11 00       	push   $0x1110ee
  109a44:	e8 94 7b ff ff       	call   1015dd <assert_print>
  109a49:	83 c4 10             	add    $0x10,%esp
  109a4c:	53                   	push   %ebx
  109a4d:	68 ff 13 11 00       	push   $0x1113ff
  109a52:	e8 86 7b ff ff       	call   1015dd <assert_print>
  109a57:	5e                   	pop    %esi
  109a58:	58                   	pop    %eax
  109a59:	68 31 01 00 00       	push   $0x131
  109a5e:	68 61 13 11 00       	push   $0x111361
  109a63:	e8 66 7b ff ff       	call   1015ce <assert_post_action>
  109a68:	59                   	pop    %ecx
  109a69:	5b                   	pop    %ebx
  109a6a:	53                   	push   %ebx
  109a6b:	e8 a0 12 00 00       	call   10ad10 <z_spin_unlock_valid>
  109a70:	5a                   	pop    %edx
  109a71:	84 c0                	test   %al,%al
  109a73:	74 bb                	je     109a30 <z_reschedule+0x83>
  109a75:	fb                   	sti
  109a76:	8d 65 f8             	lea    -0x8(%ebp),%esp
  109a79:	5b                   	pop    %ebx
  109a7a:	5e                   	pop    %esi
  109a7b:	5d                   	pop    %ebp
  109a7c:	c3                   	ret

00109a7d <z_sched_start>:
  109a7d:	55                   	push   %ebp
  109a7e:	89 e5                	mov    %esp,%ebp
  109a80:	56                   	push   %esi
  109a81:	53                   	push   %ebx
  109a82:	8b 5d 08             	mov    0x8(%ebp),%ebx
  109a85:	9c                   	pushf
  109a86:	fa                   	cli
  109a87:	5e                   	pop    %esi
  109a88:	68 e8 cc 12 00       	push   $0x12cce8
  109a8d:	e8 5d 12 00 00       	call   10acef <z_spin_lock_valid>
  109a92:	5a                   	pop    %edx
  109a93:	84 c0                	test   %al,%al
  109a95:	75 34                	jne    109acb <z_sched_start+0x4e>
  109a97:	68 88 00 00 00       	push   $0x88
  109a9c:	68 61 13 11 00       	push   $0x111361
  109aa1:	68 8e 13 11 00       	push   $0x11138e
  109aa6:	68 ee 10 11 00       	push   $0x1110ee
  109aab:	e8 2d 7b ff ff       	call   1015dd <assert_print>
  109ab0:	83 c4 10             	add    $0x10,%esp
  109ab3:	68 e8 cc 12 00       	push   $0x12cce8
  109ab8:	68 a3 13 11 00       	push   $0x1113a3
  109abd:	e8 1b 7b ff ff       	call   1015dd <assert_print>
  109ac2:	5b                   	pop    %ebx
  109ac3:	5e                   	pop    %esi
  109ac4:	68 88 00 00 00       	push   $0x88
  109ac9:	eb 53                	jmp    109b1e <z_sched_start+0xa1>
  109acb:	68 e8 cc 12 00       	push   $0x12cce8
  109ad0:	e8 72 12 00 00       	call   10ad47 <z_spin_lock_set_owner>
  109ad5:	8a 43 0d             	mov    0xd(%ebx),%al
  109ad8:	59                   	pop    %ecx
  109ad9:	a8 04                	test   $0x4,%al
  109adb:	75 56                	jne    109b33 <z_sched_start+0xb6>
  109add:	68 e8 cc 12 00       	push   $0x12cce8
  109ae2:	e8 29 12 00 00       	call   10ad10 <z_spin_unlock_valid>
  109ae7:	5a                   	pop    %edx
  109ae8:	84 c0                	test   %al,%al
  109aea:	75 3e                	jne    109b2a <z_sched_start+0xad>
  109aec:	68 31 01 00 00       	push   $0x131
  109af1:	68 61 13 11 00       	push   $0x111361
  109af6:	68 e8 13 11 00       	push   $0x1113e8
  109afb:	68 ee 10 11 00       	push   $0x1110ee
  109b00:	e8 d8 7a ff ff       	call   1015dd <assert_print>
  109b05:	83 c4 10             	add    $0x10,%esp
  109b08:	68 e8 cc 12 00       	push   $0x12cce8
  109b0d:	68 ff 13 11 00       	push   $0x1113ff
  109b12:	e8 c6 7a ff ff       	call   1015dd <assert_print>
  109b17:	5e                   	pop    %esi
  109b18:	58                   	pop    %eax
  109b19:	68 31 01 00 00       	push   $0x131
  109b1e:	68 61 13 11 00       	push   $0x111361
  109b23:	e8 a6 7a ff ff       	call   1015ce <assert_post_action>
  109b28:	59                   	pop    %ecx
  109b29:	5b                   	pop    %ebx
  109b2a:	0f ba e6 09          	bt     $0x9,%esi
  109b2e:	73 1d                	jae    109b4d <z_sched_start+0xd0>
  109b30:	fb                   	sti
  109b31:	eb 1a                	jmp    109b4d <z_sched_start+0xd0>
  109b33:	83 e0 fb             	and    $0xfffffffb,%eax
  109b36:	88 43 0d             	mov    %al,0xd(%ebx)
  109b39:	89 d8                	mov    %ebx,%eax
  109b3b:	e8 39 f1 ff ff       	call   108c79 <ready_thread>
  109b40:	56                   	push   %esi
  109b41:	68 e8 cc 12 00       	push   $0x12cce8
  109b46:	e8 62 fe ff ff       	call   1099ad <z_reschedule>
  109b4b:	58                   	pop    %eax
  109b4c:	5a                   	pop    %edx
  109b4d:	8d 65 f8             	lea    -0x8(%ebp),%esp
  109b50:	5b                   	pop    %ebx
  109b51:	5e                   	pop    %esi
  109b52:	5d                   	pop    %ebp
  109b53:	c3                   	ret

00109b54 <z_impl_k_thread_resume>:
  109b54:	55                   	push   %ebp
  109b55:	89 e5                	mov    %esp,%ebp
  109b57:	56                   	push   %esi
  109b58:	53                   	push   %ebx
  109b59:	8b 5d 08             	mov    0x8(%ebp),%ebx
  109b5c:	9c                   	pushf
  109b5d:	fa                   	cli
  109b5e:	5e                   	pop    %esi
  109b5f:	68 e8 cc 12 00       	push   $0x12cce8
  109b64:	e8 86 11 00 00       	call   10acef <z_spin_lock_valid>
  109b69:	5a                   	pop    %edx
  109b6a:	84 c0                	test   %al,%al
  109b6c:	75 34                	jne    109ba2 <z_impl_k_thread_resume+0x4e>
  109b6e:	68 88 00 00 00       	push   $0x88
  109b73:	68 61 13 11 00       	push   $0x111361
  109b78:	68 8e 13 11 00       	push   $0x11138e
  109b7d:	68 ee 10 11 00       	push   $0x1110ee
  109b82:	e8 56 7a ff ff       	call   1015dd <assert_print>
  109b87:	83 c4 10             	add    $0x10,%esp
  109b8a:	68 e8 cc 12 00       	push   $0x12cce8
  109b8f:	68 a3 13 11 00       	push   $0x1113a3
  109b94:	e8 44 7a ff ff       	call   1015dd <assert_print>
  109b99:	5b                   	pop    %ebx
  109b9a:	5e                   	pop    %esi
  109b9b:	68 88 00 00 00       	push   $0x88
  109ba0:	eb 53                	jmp    109bf5 <z_impl_k_thread_resume+0xa1>
  109ba2:	68 e8 cc 12 00       	push   $0x12cce8
  109ba7:	e8 9b 11 00 00       	call   10ad47 <z_spin_lock_set_owner>
  109bac:	8a 43 0d             	mov    0xd(%ebx),%al
  109baf:	59                   	pop    %ecx
  109bb0:	a8 10                	test   $0x10,%al
  109bb2:	75 56                	jne    109c0a <z_impl_k_thread_resume+0xb6>
  109bb4:	68 e8 cc 12 00       	push   $0x12cce8
  109bb9:	e8 52 11 00 00       	call   10ad10 <z_spin_unlock_valid>
  109bbe:	5a                   	pop    %edx
  109bbf:	84 c0                	test   %al,%al
  109bc1:	75 3e                	jne    109c01 <z_impl_k_thread_resume+0xad>
  109bc3:	68 31 01 00 00       	push   $0x131
  109bc8:	68 61 13 11 00       	push   $0x111361
  109bcd:	68 e8 13 11 00       	push   $0x1113e8
  109bd2:	68 ee 10 11 00       	push   $0x1110ee
  109bd7:	e8 01 7a ff ff       	call   1015dd <assert_print>
  109bdc:	83 c4 10             	add    $0x10,%esp
  109bdf:	68 e8 cc 12 00       	push   $0x12cce8
  109be4:	68 ff 13 11 00       	push   $0x1113ff
  109be9:	e8 ef 79 ff ff       	call   1015dd <assert_print>
  109bee:	5e                   	pop    %esi
  109bef:	58                   	pop    %eax
  109bf0:	68 31 01 00 00       	push   $0x131
  109bf5:	68 61 13 11 00       	push   $0x111361
  109bfa:	e8 cf 79 ff ff       	call   1015ce <assert_post_action>
  109bff:	59                   	pop    %ecx
  109c00:	5b                   	pop    %ebx
  109c01:	0f ba e6 09          	bt     $0x9,%esi
  109c05:	73 1d                	jae    109c24 <z_impl_k_thread_resume+0xd0>
  109c07:	fb                   	sti
  109c08:	eb 1a                	jmp    109c24 <z_impl_k_thread_resume+0xd0>
  109c0a:	83 e0 ef             	and    $0xffffffef,%eax
  109c0d:	88 43 0d             	mov    %al,0xd(%ebx)
  109c10:	89 d8                	mov    %ebx,%eax
  109c12:	e8 62 f0 ff ff       	call   108c79 <ready_thread>
  109c17:	56                   	push   %esi
  109c18:	68 e8 cc 12 00       	push   $0x12cce8
  109c1d:	e8 8b fd ff ff       	call   1099ad <z_reschedule>
  109c22:	58                   	pop    %eax
  109c23:	5a                   	pop    %edx
  109c24:	8d 65 f8             	lea    -0x8(%ebp),%esp
  109c27:	5b                   	pop    %ebx
  109c28:	5e                   	pop    %esi
  109c29:	5d                   	pop    %ebp
  109c2a:	c3                   	ret

00109c2b <z_mrsh_k_thread_resume>:
  109c2b:	55                   	push   %ebp
  109c2c:	89 e5                	mov    %esp,%ebp
  109c2e:	53                   	push   %ebx
  109c2f:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  109c34:	8b 55 20             	mov    0x20(%ebp),%edx
  109c37:	8b 5d 08             	mov    0x8(%ebp),%ebx
  109c3a:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  109c40:	53                   	push   %ebx
  109c41:	e8 ef 37 00 00       	call   10d435 <k_object_find>
  109c46:	89 da                	mov    %ebx,%edx
  109c48:	59                   	pop    %ecx
  109c49:	e8 74 f1 ff ff       	call   108dc2 <k_object_validation_check.constprop.0>
  109c4e:	85 c0                	test   %eax,%eax
  109c50:	74 24                	je     109c76 <z_mrsh_k_thread_resume+0x4b>
  109c52:	68 c4 0b 11 00       	push   $0x110bc4
  109c57:	6a 45                	push   $0x45
  109c59:	68 dd 1f 11 00       	push   $0x111fdd
  109c5e:	e8 95 88 ff ff       	call   1024f8 <z_log_minimal_printk>
  109c63:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  109c68:	83 c4 0c             	add    $0xc,%esp
  109c6b:	ff b0 88 00 00 00    	push   0x88(%eax)
  109c71:	e8 50 a5 ff ff       	call   1041c6 <arch_syscall_oops>
  109c76:	53                   	push   %ebx
  109c77:	e8 d8 fe ff ff       	call   109b54 <z_impl_k_thread_resume>
  109c7c:	58                   	pop    %eax
  109c7d:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  109c82:	31 d2                	xor    %edx,%edx
  109c84:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  109c8a:	31 c0                	xor    %eax,%eax
  109c8c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  109c8f:	c9                   	leave
  109c90:	c3                   	ret

00109c91 <z_reschedule_irqlock>:
  109c91:	55                   	push   %ebp
  109c92:	89 e5                	mov    %esp,%ebp
  109c94:	0f ba 65 08 09       	btl    $0x9,0x8(%ebp)
  109c99:	73 1d                	jae    109cb8 <z_reschedule_irqlock+0x27>
  109c9b:	83 3d a0 48 12 00 00 	cmpl   $0x0,0x1248a0
  109ca2:	75 13                	jne    109cb7 <z_reschedule_irqlock+0x26>
  109ca4:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  109ca9:	39 05 b4 48 12 00    	cmp    %eax,0x1248b4
  109caf:	74 06                	je     109cb7 <z_reschedule_irqlock+0x26>
  109cb1:	5d                   	pop    %ebp
  109cb2:	e9 59 a1 ff ff       	jmp    103e10 <arch_swap>
  109cb7:	fb                   	sti
  109cb8:	5d                   	pop    %ebp
  109cb9:	c3                   	ret

00109cba <k_sched_lock>:
  109cba:	55                   	push   %ebp
  109cbb:	89 e5                	mov    %esp,%ebp
  109cbd:	53                   	push   %ebx
  109cbe:	9c                   	pushf
  109cbf:	fa                   	cli
  109cc0:	5b                   	pop    %ebx
  109cc1:	68 e8 cc 12 00       	push   $0x12cce8
  109cc6:	e8 24 10 00 00       	call   10acef <z_spin_lock_valid>
  109ccb:	59                   	pop    %ecx
  109ccc:	84 c0                	test   %al,%al
  109cce:	75 37                	jne    109d07 <k_sched_lock+0x4d>
  109cd0:	68 88 00 00 00       	push   $0x88
  109cd5:	68 61 13 11 00       	push   $0x111361
  109cda:	68 8e 13 11 00       	push   $0x11138e
  109cdf:	68 ee 10 11 00       	push   $0x1110ee
  109ce4:	e8 f4 78 ff ff       	call   1015dd <assert_print>
  109ce9:	83 c4 10             	add    $0x10,%esp
  109cec:	68 e8 cc 12 00       	push   $0x12cce8
  109cf1:	68 a3 13 11 00       	push   $0x1113a3
  109cf6:	e8 e2 78 ff ff       	call   1015dd <assert_print>
  109cfb:	58                   	pop    %eax
  109cfc:	5a                   	pop    %edx
  109cfd:	68 88 00 00 00       	push   $0x88
  109d02:	e9 ce 00 00 00       	jmp    109dd5 <k_sched_lock+0x11b>
  109d07:	68 e8 cc 12 00       	push   $0x12cce8
  109d0c:	e8 36 10 00 00       	call   10ad47 <z_spin_lock_set_owner>
  109d11:	83 3d a0 48 12 00 00 	cmpl   $0x0,0x1248a0
  109d18:	58                   	pop    %eax
  109d19:	74 39                	je     109d54 <k_sched_lock+0x9a>
  109d1b:	68 8b 00 00 00       	push   $0x8b
  109d20:	68 f6 27 11 00       	push   $0x1127f6
  109d25:	68 8e 22 11 00       	push   $0x11228e
  109d2a:	68 ee 10 11 00       	push   $0x1110ee
  109d2f:	e8 a9 78 ff ff       	call   1015dd <assert_print>
  109d34:	83 c4 10             	add    $0x10,%esp
  109d37:	68 4a 23 11 00       	push   $0x11234a
  109d3c:	e8 9c 78 ff ff       	call   1015dd <assert_print>
  109d41:	c7 04 24 8b 00 00 00 	movl   $0x8b,(%esp)
  109d48:	68 f6 27 11 00       	push   $0x1127f6
  109d4d:	e8 7c 78 ff ff       	call   1015ce <assert_post_action>
  109d52:	5b                   	pop    %ebx
  109d53:	58                   	pop    %eax
  109d54:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  109d5a:	8a 42 0f             	mov    0xf(%edx),%al
  109d5d:	3c 01                	cmp    $0x1,%al
  109d5f:	75 2f                	jne    109d90 <k_sched_lock+0xd6>
  109d61:	68 8c 00 00 00       	push   $0x8c
  109d66:	68 f6 27 11 00       	push   $0x1127f6
  109d6b:	68 21 28 11 00       	push   $0x112821
  109d70:	68 ee 10 11 00       	push   $0x1110ee
  109d75:	e8 63 78 ff ff       	call   1015dd <assert_print>
  109d7a:	83 c4 10             	add    $0x10,%esp
  109d7d:	68 4a 23 11 00       	push   $0x11234a
  109d82:	e8 56 78 ff ff       	call   1015dd <assert_print>
  109d87:	c7 04 24 8c 00 00 00 	movl   $0x8c,(%esp)
  109d8e:	eb b8                	jmp    109d48 <k_sched_lock+0x8e>
  109d90:	48                   	dec    %eax
  109d91:	88 42 0f             	mov    %al,0xf(%edx)
  109d94:	68 e8 cc 12 00       	push   $0x12cce8
  109d99:	e8 72 0f 00 00       	call   10ad10 <z_spin_unlock_valid>
  109d9e:	59                   	pop    %ecx
  109d9f:	84 c0                	test   %al,%al
  109da1:	75 3c                	jne    109ddf <k_sched_lock+0x125>
  109da3:	68 31 01 00 00       	push   $0x131
  109da8:	68 61 13 11 00       	push   $0x111361
  109dad:	68 e8 13 11 00       	push   $0x1113e8
  109db2:	68 ee 10 11 00       	push   $0x1110ee
  109db7:	e8 21 78 ff ff       	call   1015dd <assert_print>
  109dbc:	83 c4 10             	add    $0x10,%esp
  109dbf:	68 e8 cc 12 00       	push   $0x12cce8
  109dc4:	68 ff 13 11 00       	push   $0x1113ff
  109dc9:	e8 0f 78 ff ff       	call   1015dd <assert_print>
  109dce:	58                   	pop    %eax
  109dcf:	5a                   	pop    %edx
  109dd0:	68 31 01 00 00       	push   $0x131
  109dd5:	68 61 13 11 00       	push   $0x111361
  109dda:	e9 6e ff ff ff       	jmp    109d4d <k_sched_lock+0x93>
  109ddf:	0f ba e3 09          	bt     $0x9,%ebx
  109de3:	73 01                	jae    109de6 <k_sched_lock+0x12c>
  109de5:	fb                   	sti
  109de6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  109de9:	c9                   	leave
  109dea:	c3                   	ret

00109deb <k_sched_unlock>:
  109deb:	55                   	push   %ebp
  109dec:	89 e5                	mov    %esp,%ebp
  109dee:	53                   	push   %ebx
  109def:	9c                   	pushf
  109df0:	fa                   	cli
  109df1:	5b                   	pop    %ebx
  109df2:	68 e8 cc 12 00       	push   $0x12cce8
  109df7:	e8 f3 0e 00 00       	call   10acef <z_spin_lock_valid>
  109dfc:	59                   	pop    %ecx
  109dfd:	84 c0                	test   %al,%al
  109dff:	75 37                	jne    109e38 <k_sched_unlock+0x4d>
  109e01:	68 88 00 00 00       	push   $0x88
  109e06:	68 61 13 11 00       	push   $0x111361
  109e0b:	68 8e 13 11 00       	push   $0x11138e
  109e10:	68 ee 10 11 00       	push   $0x1110ee
  109e15:	e8 c3 77 ff ff       	call   1015dd <assert_print>
  109e1a:	83 c4 10             	add    $0x10,%esp
  109e1d:	68 e8 cc 12 00       	push   $0x12cce8
  109e22:	68 a3 13 11 00       	push   $0x1113a3
  109e27:	e8 b1 77 ff ff       	call   1015dd <assert_print>
  109e2c:	58                   	pop    %eax
  109e2d:	5a                   	pop    %edx
  109e2e:	68 88 00 00 00       	push   $0x88
  109e33:	e9 d5 00 00 00       	jmp    109f0d <k_sched_unlock+0x122>
  109e38:	68 e8 cc 12 00       	push   $0x12cce8
  109e3d:	e8 05 0f 00 00       	call   10ad47 <z_spin_lock_set_owner>
  109e42:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  109e48:	58                   	pop    %eax
  109e49:	8a 42 0f             	mov    0xf(%edx),%al
  109e4c:	84 c0                	test   %al,%al
  109e4e:	75 39                	jne    109e89 <k_sched_unlock+0x9e>
  109e50:	68 4c 03 00 00       	push   $0x34c
  109e55:	68 36 27 11 00       	push   $0x112736
  109e5a:	68 52 28 11 00       	push   $0x112852
  109e5f:	68 ee 10 11 00       	push   $0x1110ee
  109e64:	e8 74 77 ff ff       	call   1015dd <assert_print>
  109e69:	83 c4 10             	add    $0x10,%esp
  109e6c:	68 4a 23 11 00       	push   $0x11234a
  109e71:	e8 67 77 ff ff       	call   1015dd <assert_print>
  109e76:	c7 04 24 4c 03 00 00 	movl   $0x34c,(%esp)
  109e7d:	68 36 27 11 00       	push   $0x112736
  109e82:	e8 47 77 ff ff       	call   1015ce <assert_post_action>
  109e87:	59                   	pop    %ecx
  109e88:	5b                   	pop    %ebx
  109e89:	83 3d a0 48 12 00 00 	cmpl   $0x0,0x1248a0
  109e90:	74 2f                	je     109ec1 <k_sched_unlock+0xd6>
  109e92:	68 4d 03 00 00       	push   $0x34d
  109e97:	68 36 27 11 00       	push   $0x112736
  109e9c:	68 8e 22 11 00       	push   $0x11228e
  109ea1:	68 ee 10 11 00       	push   $0x1110ee
  109ea6:	e8 32 77 ff ff       	call   1015dd <assert_print>
  109eab:	83 c4 10             	add    $0x10,%esp
  109eae:	68 4a 23 11 00       	push   $0x11234a
  109eb3:	e8 25 77 ff ff       	call   1015dd <assert_print>
  109eb8:	c7 04 24 4d 03 00 00 	movl   $0x34d,(%esp)
  109ebf:	eb bc                	jmp    109e7d <k_sched_unlock+0x92>
  109ec1:	40                   	inc    %eax
  109ec2:	88 42 0f             	mov    %al,0xf(%edx)
  109ec5:	31 c0                	xor    %eax,%eax
  109ec7:	e8 58 ec ff ff       	call   108b24 <update_cache>
  109ecc:	68 e8 cc 12 00       	push   $0x12cce8
  109ed1:	e8 3a 0e 00 00       	call   10ad10 <z_spin_unlock_valid>
  109ed6:	5a                   	pop    %edx
  109ed7:	84 c0                	test   %al,%al
  109ed9:	75 3c                	jne    109f17 <k_sched_unlock+0x12c>
  109edb:	68 31 01 00 00       	push   $0x131
  109ee0:	68 61 13 11 00       	push   $0x111361
  109ee5:	68 e8 13 11 00       	push   $0x1113e8
  109eea:	68 ee 10 11 00       	push   $0x1110ee
  109eef:	e8 e9 76 ff ff       	call   1015dd <assert_print>
  109ef4:	83 c4 10             	add    $0x10,%esp
  109ef7:	68 e8 cc 12 00       	push   $0x12cce8
  109efc:	68 ff 13 11 00       	push   $0x1113ff
  109f01:	e8 d7 76 ff ff       	call   1015dd <assert_print>
  109f06:	5a                   	pop    %edx
  109f07:	59                   	pop    %ecx
  109f08:	68 31 01 00 00       	push   $0x131
  109f0d:	68 61 13 11 00       	push   $0x111361
  109f12:	e9 6b ff ff ff       	jmp    109e82 <k_sched_unlock+0x97>
  109f17:	0f ba e3 09          	bt     $0x9,%ebx
  109f1b:	73 01                	jae    109f1e <k_sched_unlock+0x133>
  109f1d:	fb                   	sti
  109f1e:	9c                   	pushf
  109f1f:	fa                   	cli
  109f20:	58                   	pop    %eax
  109f21:	50                   	push   %eax
  109f22:	e8 6a fd ff ff       	call   109c91 <z_reschedule_irqlock>
  109f27:	58                   	pop    %eax
  109f28:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  109f2b:	c9                   	leave
  109f2c:	c3                   	ret

00109f2d <z_unpend_all>:
  109f2d:	55                   	push   %ebp
  109f2e:	89 e5                	mov    %esp,%ebp
  109f30:	53                   	push   %ebx
  109f31:	8b 45 08             	mov    0x8(%ebp),%eax
  109f34:	e8 dc eb ff ff       	call   108b15 <rb_get_min>
  109f39:	89 c3                	mov    %eax,%ebx
  109f3b:	31 c0                	xor    %eax,%eax
  109f3d:	85 db                	test   %ebx,%ebx
  109f3f:	74 20                	je     109f61 <z_unpend_all+0x34>
  109f41:	53                   	push   %ebx
  109f42:	e8 da f7 ff ff       	call   109721 <z_unpend_thread>
  109f47:	89 1c 24             	mov    %ebx,(%esp)
  109f4a:	e8 b5 f2 ff ff       	call   109204 <z_ready_thread>
  109f4f:	58                   	pop    %eax
  109f50:	8b 45 08             	mov    0x8(%ebp),%eax
  109f53:	e8 bd eb ff ff       	call   108b15 <rb_get_min>
  109f58:	89 c3                	mov    %eax,%ebx
  109f5a:	b8 01 00 00 00       	mov    $0x1,%eax
  109f5f:	eb dc                	jmp    109f3d <z_unpend_all+0x10>
  109f61:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  109f64:	c9                   	leave
  109f65:	c3                   	ret

00109f66 <init_ready_q>:
  109f66:	55                   	push   %ebp
  109f67:	b9 04 00 00 00       	mov    $0x4,%ecx
  109f6c:	89 e5                	mov    %esp,%ebp
  109f6e:	57                   	push   %edi
  109f6f:	31 c0                	xor    %eax,%eax
  109f71:	8b 55 08             	mov    0x8(%ebp),%edx
  109f74:	8d 7a 04             	lea    0x4(%edx),%edi
  109f77:	f3 ab                	rep stos %eax,%es:(%edi)
  109f79:	c7 42 08 d3 7e 10 00 	movl   $0x107ed3,0x8(%edx)
  109f80:	5f                   	pop    %edi
  109f81:	5d                   	pop    %ebp
  109f82:	c3                   	ret

00109f83 <z_sched_init>:
  109f83:	55                   	push   %ebp
  109f84:	89 e5                	mov    %esp,%ebp
  109f86:	68 b4 48 12 00       	push   $0x1248b4
  109f8b:	e8 d6 ff ff ff       	call   109f66 <init_ready_q>
  109f90:	58                   	pop    %eax
  109f91:	c9                   	leave
  109f92:	c3                   	ret

00109f93 <z_impl_k_thread_priority_set>:
  109f93:	55                   	push   %ebp
  109f94:	89 e5                	mov    %esp,%ebp
  109f96:	53                   	push   %ebx
  109f97:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  109f9a:	8b 45 08             	mov    0x8(%ebp),%eax
  109f9d:	8d 53 10             	lea    0x10(%ebx),%edx
  109fa0:	83 fa 1e             	cmp    $0x1e,%edx
  109fa3:	76 35                	jbe    109fda <z_impl_k_thread_priority_set+0x47>
  109fa5:	68 10 04 00 00       	push   $0x410
  109faa:	68 36 27 11 00       	push   $0x112736
  109faf:	68 83 28 11 00       	push   $0x112883
  109fb4:	68 ee 10 11 00       	push   $0x1110ee
  109fb9:	e8 1f 76 ff ff       	call   1015dd <assert_print>
  109fbe:	83 c4 10             	add    $0x10,%esp
  109fc1:	6a f0                	push   $0xfffffff0
  109fc3:	6a 0e                	push   $0xe
  109fc5:	53                   	push   %ebx
  109fc6:	68 62 24 11 00       	push   $0x112462
  109fcb:	e8 0d 76 ff ff       	call   1015dd <assert_print>
  109fd0:	83 c4 10             	add    $0x10,%esp
  109fd3:	68 10 04 00 00       	push   $0x410
  109fd8:	eb 36                	jmp    10a010 <z_impl_k_thread_priority_set+0x7d>
  109fda:	83 3d a0 48 12 00 00 	cmpl   $0x0,0x1248a0
  109fe1:	74 39                	je     10a01c <z_impl_k_thread_priority_set+0x89>
  109fe3:	68 11 04 00 00       	push   $0x411
  109fe8:	68 36 27 11 00       	push   $0x112736
  109fed:	68 8e 22 11 00       	push   $0x11228e
  109ff2:	68 ee 10 11 00       	push   $0x1110ee
  109ff7:	e8 e1 75 ff ff       	call   1015dd <assert_print>
  109ffc:	83 c4 10             	add    $0x10,%esp
  109fff:	68 4a 23 11 00       	push   $0x11234a
  10a004:	e8 d4 75 ff ff       	call   1015dd <assert_print>
  10a009:	c7 04 24 11 04 00 00 	movl   $0x411,(%esp)
  10a010:	68 36 27 11 00       	push   $0x112736
  10a015:	e8 b4 75 ff ff       	call   1015ce <assert_post_action>
  10a01a:	5b                   	pop    %ebx
  10a01b:	58                   	pop    %eax
  10a01c:	53                   	push   %ebx
  10a01d:	50                   	push   %eax
  10a01e:	e8 c9 f7 ff ff       	call   1097ec <z_thread_prio_set>
  10a023:	5a                   	pop    %edx
  10a024:	84 c0                	test   %al,%al
  10a026:	59                   	pop    %ecx
  10a027:	74 1a                	je     10a043 <z_impl_k_thread_priority_set+0xb0>
  10a029:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10a02e:	80 78 0f 00          	cmpb   $0x0,0xf(%eax)
  10a032:	75 0f                	jne    10a043 <z_impl_k_thread_priority_set+0xb0>
  10a034:	9c                   	pushf
  10a035:	fa                   	cli
  10a036:	58                   	pop    %eax
  10a037:	89 45 08             	mov    %eax,0x8(%ebp)
  10a03a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10a03d:	c9                   	leave
  10a03e:	e9 4e fc ff ff       	jmp    109c91 <z_reschedule_irqlock>
  10a043:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10a046:	c9                   	leave
  10a047:	c3                   	ret

0010a048 <z_mrsh_k_thread_priority_set>:
  10a048:	55                   	push   %ebp
  10a049:	89 e5                	mov    %esp,%ebp
  10a04b:	56                   	push   %esi
  10a04c:	53                   	push   %ebx
  10a04d:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10a052:	8b 55 20             	mov    0x20(%ebp),%edx
  10a055:	8b 75 08             	mov    0x8(%ebp),%esi
  10a058:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  10a05b:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10a061:	56                   	push   %esi
  10a062:	e8 ce 33 00 00       	call   10d435 <k_object_find>
  10a067:	5a                   	pop    %edx
  10a068:	89 f2                	mov    %esi,%edx
  10a06a:	e8 53 ed ff ff       	call   108dc2 <k_object_validation_check.constprop.0>
  10a06f:	85 c0                	test   %eax,%eax
  10a071:	75 28                	jne    10a09b <z_mrsh_k_thread_priority_set+0x53>
  10a073:	8d 43 10             	lea    0x10(%ebx),%eax
  10a076:	83 f8 1e             	cmp    $0x1e,%eax
  10a079:	77 36                	ja     10a0b1 <z_mrsh_k_thread_priority_set+0x69>
  10a07b:	0f be 46 0e          	movsbl 0xe(%esi),%eax
  10a07f:	38 d8                	cmp    %bl,%al
  10a081:	7e 53                	jle    10a0d6 <z_mrsh_k_thread_priority_set+0x8e>
  10a083:	50                   	push   %eax
  10a084:	53                   	push   %ebx
  10a085:	68 a4 0b 11 00       	push   $0x110ba4
  10a08a:	6a 45                	push   $0x45
  10a08c:	68 42 29 11 00       	push   $0x112942
  10a091:	e8 62 84 ff ff       	call   1024f8 <z_log_minimal_printk>
  10a096:	83 c4 14             	add    $0x14,%esp
  10a099:	eb 2b                	jmp    10a0c6 <z_mrsh_k_thread_priority_set+0x7e>
  10a09b:	68 a4 0b 11 00       	push   $0x110ba4
  10a0a0:	6a 45                	push   $0x45
  10a0a2:	68 dd 1f 11 00       	push   $0x111fdd
  10a0a7:	e8 4c 84 ff ff       	call   1024f8 <z_log_minimal_printk>
  10a0ac:	83 c4 0c             	add    $0xc,%esp
  10a0af:	eb 15                	jmp    10a0c6 <z_mrsh_k_thread_priority_set+0x7e>
  10a0b1:	53                   	push   %ebx
  10a0b2:	68 a4 0b 11 00       	push   $0x110ba4
  10a0b7:	6a 45                	push   $0x45
  10a0b9:	68 09 29 11 00       	push   $0x112909
  10a0be:	e8 35 84 ff ff       	call   1024f8 <z_log_minimal_printk>
  10a0c3:	83 c4 10             	add    $0x10,%esp
  10a0c6:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10a0cb:	ff b0 88 00 00 00    	push   0x88(%eax)
  10a0d1:	e8 f0 a0 ff ff       	call   1041c6 <arch_syscall_oops>
  10a0d6:	53                   	push   %ebx
  10a0d7:	56                   	push   %esi
  10a0d8:	e8 b6 fe ff ff       	call   109f93 <z_impl_k_thread_priority_set>
  10a0dd:	58                   	pop    %eax
  10a0de:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10a0e3:	31 c9                	xor    %ecx,%ecx
  10a0e5:	5a                   	pop    %edx
  10a0e6:	89 88 88 00 00 00    	mov    %ecx,0x88(%eax)
  10a0ec:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10a0ef:	31 c0                	xor    %eax,%eax
  10a0f1:	5b                   	pop    %ebx
  10a0f2:	5e                   	pop    %esi
  10a0f3:	5d                   	pop    %ebp
  10a0f4:	c3                   	ret

0010a0f5 <z_impl_k_yield>:
  10a0f5:	55                   	push   %ebp
  10a0f6:	89 e5                	mov    %esp,%ebp
  10a0f8:	56                   	push   %esi
  10a0f9:	53                   	push   %ebx
  10a0fa:	83 ec 0c             	sub    $0xc,%esp
  10a0fd:	83 3d a0 48 12 00 00 	cmpl   $0x0,0x1248a0
  10a104:	74 32                	je     10a138 <z_impl_k_yield+0x43>
  10a106:	68 5d 04 00 00       	push   $0x45d
  10a10b:	68 36 27 11 00       	push   $0x112736
  10a110:	68 8e 22 11 00       	push   $0x11228e
  10a115:	68 ee 10 11 00       	push   $0x1110ee
  10a11a:	e8 be 74 ff ff       	call   1015dd <assert_print>
  10a11f:	83 c4 10             	add    $0x10,%esp
  10a122:	68 4a 23 11 00       	push   $0x11234a
  10a127:	e8 b1 74 ff ff       	call   1015dd <assert_print>
  10a12c:	c7 04 24 5d 04 00 00 	movl   $0x45d,(%esp)
  10a133:	e9 d9 00 00 00       	jmp    10a211 <z_impl_k_yield+0x11c>
  10a138:	9c                   	pushf
  10a139:	fa                   	cli
  10a13a:	5b                   	pop    %ebx
  10a13b:	68 e8 cc 12 00       	push   $0x12cce8
  10a140:	e8 aa 0b 00 00       	call   10acef <z_spin_lock_valid>
  10a145:	5e                   	pop    %esi
  10a146:	84 c0                	test   %al,%al
  10a148:	75 3e                	jne    10a188 <z_impl_k_yield+0x93>
  10a14a:	68 88 00 00 00       	push   $0x88
  10a14f:	68 61 13 11 00       	push   $0x111361
  10a154:	68 8e 13 11 00       	push   $0x11138e
  10a159:	68 ee 10 11 00       	push   $0x1110ee
  10a15e:	e8 7a 74 ff ff       	call   1015dd <assert_print>
  10a163:	83 c4 10             	add    $0x10,%esp
  10a166:	68 e8 cc 12 00       	push   $0x12cce8
  10a16b:	68 a3 13 11 00       	push   $0x1113a3
  10a170:	e8 68 74 ff ff       	call   1015dd <assert_print>
  10a175:	59                   	pop    %ecx
  10a176:	5b                   	pop    %ebx
  10a177:	68 88 00 00 00       	push   $0x88
  10a17c:	68 61 13 11 00       	push   $0x111361
  10a181:	e8 48 74 ff ff       	call   1015ce <assert_post_action>
  10a186:	58                   	pop    %eax
  10a187:	5a                   	pop    %edx
  10a188:	68 e8 cc 12 00       	push   $0x12cce8
  10a18d:	e8 b5 0b 00 00       	call   10ad47 <z_spin_lock_set_owner>
  10a192:	58                   	pop    %eax
  10a193:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10a198:	80 60 0d 7f          	andb   $0x7f,0xd(%eax)
  10a19c:	3d 60 47 12 00       	cmp    $0x124760,%eax
  10a1a1:	75 23                	jne    10a1c6 <z_impl_k_yield+0xd1>
  10a1a3:	68 80 00 00 00       	push   $0x80
  10a1a8:	68 36 27 11 00       	push   $0x112736
  10a1ad:	68 58 27 11 00       	push   $0x112758
  10a1b2:	68 ee 10 11 00       	push   $0x1110ee
  10a1b7:	e8 21 74 ff ff       	call   1015dd <assert_print>
  10a1bc:	83 c4 10             	add    $0x10,%esp
  10a1bf:	68 80 00 00 00       	push   $0x80
  10a1c4:	eb 4b                	jmp    10a211 <z_impl_k_yield+0x11c>
  10a1c6:	50                   	push   %eax
  10a1c7:	68 b8 48 12 00       	push   $0x1248b8
  10a1cc:	e8 48 78 ff ff       	call   101a19 <rb_remove>
  10a1d1:	5e                   	pop    %esi
  10a1d2:	83 3d b8 48 12 00 00 	cmpl   $0x0,0x1248b8
  10a1d9:	58                   	pop    %eax
  10a1da:	75 08                	jne    10a1e4 <z_impl_k_yield+0xef>
  10a1dc:	31 c9                	xor    %ecx,%ecx
  10a1de:	89 0d c4 48 12 00    	mov    %ecx,0x1248c4
  10a1e4:	8b 35 a8 48 12 00    	mov    0x1248a8,%esi
  10a1ea:	80 4e 0d 80          	orb    $0x80,0xd(%esi)
  10a1ee:	81 fe 60 47 12 00    	cmp    $0x124760,%esi
  10a1f4:	75 25                	jne    10a21b <z_impl_k_yield+0x126>
  10a1f6:	6a 79                	push   $0x79
  10a1f8:	68 36 27 11 00       	push   $0x112736
  10a1fd:	68 58 27 11 00       	push   $0x112758
  10a202:	68 ee 10 11 00       	push   $0x1110ee
  10a207:	e8 d1 73 ff ff       	call   1015dd <assert_print>
  10a20c:	83 c4 10             	add    $0x10,%esp
  10a20f:	6a 79                	push   $0x79
  10a211:	68 36 27 11 00       	push   $0x112736
  10a216:	e9 66 ff ff ff       	jmp    10a181 <z_impl_k_yield+0x8c>
  10a21b:	a1 c4 48 12 00       	mov    0x1248c4,%eax
  10a220:	89 46 10             	mov    %eax,0x10(%esi)
  10a223:	ff 05 c4 48 12 00    	incl   0x1248c4
  10a229:	75 56                	jne    10a281 <z_impl_k_yield+0x18c>
  10a22b:	a1 c0 48 12 00       	mov    0x1248c0,%eax
  10a230:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
  10a237:	8d 14 85 0c 00 00 00 	lea    0xc(,%eax,4),%edx
  10a23e:	83 c0 0f             	add    $0xf,%eax
  10a241:	29 d4                	sub    %edx,%esp
  10a243:	83 e0 fc             	and    $0xfffffffc,%eax
  10a246:	8d 54 24 0f          	lea    0xf(%esp),%edx
  10a24a:	29 c4                	sub    %eax,%esp
  10a24c:	83 e2 f0             	and    $0xfffffff0,%edx
  10a24f:	8d 44 24 0f          	lea    0xf(%esp),%eax
  10a253:	89 55 ec             	mov    %edx,-0x14(%ebp)
  10a256:	83 e0 f0             	and    $0xfffffff0,%eax
  10a259:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10a25c:	8d 45 ec             	lea    -0x14(%ebp),%eax
  10a25f:	50                   	push   %eax
  10a260:	68 b8 48 12 00       	push   $0x1248b8
  10a265:	e8 80 7b ff ff       	call   101dea <z_rb_foreach_next>
  10a26a:	59                   	pop    %ecx
  10a26b:	85 c0                	test   %eax,%eax
  10a26d:	5a                   	pop    %edx
  10a26e:	74 11                	je     10a281 <z_impl_k_yield+0x18c>
  10a270:	8b 15 c4 48 12 00    	mov    0x1248c4,%edx
  10a276:	89 50 10             	mov    %edx,0x10(%eax)
  10a279:	ff 05 c4 48 12 00    	incl   0x1248c4
  10a27f:	eb db                	jmp    10a25c <z_impl_k_yield+0x167>
  10a281:	56                   	push   %esi
  10a282:	68 b8 48 12 00       	push   $0x1248b8
  10a287:	e8 54 76 ff ff       	call   1018e0 <rb_insert>
  10a28c:	5e                   	pop    %esi
  10a28d:	58                   	pop    %eax
  10a28e:	b8 01 00 00 00       	mov    $0x1,%eax
  10a293:	e8 8c e8 ff ff       	call   108b24 <update_cache>
  10a298:	68 e8 cc 12 00       	push   $0x12cce8
  10a29d:	e8 6e 0a 00 00       	call   10ad10 <z_spin_unlock_valid>
  10a2a2:	5a                   	pop    %edx
  10a2a3:	84 c0                	test   %al,%al
  10a2a5:	75 37                	jne    10a2de <z_impl_k_yield+0x1e9>
  10a2a7:	68 6b 01 00 00       	push   $0x16b
  10a2ac:	68 61 13 11 00       	push   $0x111361
  10a2b1:	68 e8 13 11 00       	push   $0x1113e8
  10a2b6:	68 ee 10 11 00       	push   $0x1110ee
  10a2bb:	e8 1d 73 ff ff       	call   1015dd <assert_print>
  10a2c0:	83 c4 10             	add    $0x10,%esp
  10a2c3:	68 e8 cc 12 00       	push   $0x12cce8
  10a2c8:	68 ff 13 11 00       	push   $0x1113ff
  10a2cd:	e8 0b 73 ff ff       	call   1015dd <assert_print>
  10a2d2:	5a                   	pop    %edx
  10a2d3:	59                   	pop    %ecx
  10a2d4:	68 6b 01 00 00       	push   $0x16b
  10a2d9:	e9 9e fe ff ff       	jmp    10a17c <z_impl_k_yield+0x87>
  10a2de:	53                   	push   %ebx
  10a2df:	e8 2c 9b ff ff       	call   103e10 <arch_swap>
  10a2e4:	58                   	pop    %eax
  10a2e5:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10a2e8:	5b                   	pop    %ebx
  10a2e9:	5e                   	pop    %esi
  10a2ea:	5d                   	pop    %ebp
  10a2eb:	c3                   	ret

0010a2ec <z_tick_sleep>:
  10a2ec:	55                   	push   %ebp
  10a2ed:	89 e5                	mov    %esp,%ebp
  10a2ef:	57                   	push   %edi
  10a2f0:	56                   	push   %esi
  10a2f1:	53                   	push   %ebx
  10a2f2:	51                   	push   %ecx
  10a2f3:	83 3d a0 48 12 00 00 	cmpl   $0x0,0x1248a0
  10a2fa:	74 32                	je     10a32e <z_tick_sleep+0x42>
  10a2fc:	68 78 04 00 00       	push   $0x478
  10a301:	68 36 27 11 00       	push   $0x112736
  10a306:	68 8e 22 11 00       	push   $0x11228e
  10a30b:	68 ee 10 11 00       	push   $0x1110ee
  10a310:	e8 c8 72 ff ff       	call   1015dd <assert_print>
  10a315:	83 c4 10             	add    $0x10,%esp
  10a318:	68 4a 23 11 00       	push   $0x11234a
  10a31d:	e8 bb 72 ff ff       	call   1015dd <assert_print>
  10a322:	c7 04 24 78 04 00 00 	movl   $0x478,(%esp)
  10a329:	e9 3e 01 00 00       	jmp    10a46c <z_tick_sleep+0x180>
  10a32e:	89 c6                	mov    %eax,%esi
  10a330:	89 d0                	mov    %edx,%eax
  10a332:	89 d7                	mov    %edx,%edi
  10a334:	09 f0                	or     %esi,%eax
  10a336:	75 0a                	jne    10a342 <z_tick_sleep+0x56>
  10a338:	e8 b8 fd ff ff       	call   10a0f5 <z_impl_k_yield>
  10a33d:	e9 4d 01 00 00       	jmp    10a48f <z_tick_sleep+0x1a3>
  10a342:	83 fe fe             	cmp    $0xfffffffe,%esi
  10a345:	89 d0                	mov    %edx,%eax
  10a347:	83 d8 ff             	sbb    $0xffffffff,%eax
  10a34a:	7c 0a                	jl     10a356 <z_tick_sleep+0x6a>
  10a34c:	e8 39 12 00 00       	call   10b58a <sys_clock_tick_get_32>
  10a351:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
  10a354:	eb 07                	jmp    10a35d <z_tick_sleep+0x71>
  10a356:	bb fe ff ff ff       	mov    $0xfffffffe,%ebx
  10a35b:	29 f3                	sub    %esi,%ebx
  10a35d:	9c                   	pushf
  10a35e:	fa                   	cli
  10a35f:	8f 45 f0             	pop    -0x10(%ebp)
  10a362:	68 e8 cc 12 00       	push   $0x12cce8
  10a367:	e8 83 09 00 00       	call   10acef <z_spin_lock_valid>
  10a36c:	5a                   	pop    %edx
  10a36d:	84 c0                	test   %al,%al
  10a36f:	75 3e                	jne    10a3af <z_tick_sleep+0xc3>
  10a371:	68 88 00 00 00       	push   $0x88
  10a376:	68 61 13 11 00       	push   $0x111361
  10a37b:	68 8e 13 11 00       	push   $0x11138e
  10a380:	68 ee 10 11 00       	push   $0x1110ee
  10a385:	e8 53 72 ff ff       	call   1015dd <assert_print>
  10a38a:	83 c4 10             	add    $0x10,%esp
  10a38d:	68 e8 cc 12 00       	push   $0x12cce8
  10a392:	68 a3 13 11 00       	push   $0x1113a3
  10a397:	e8 41 72 ff ff       	call   1015dd <assert_print>
  10a39c:	5e                   	pop    %esi
  10a39d:	5f                   	pop    %edi
  10a39e:	68 88 00 00 00       	push   $0x88
  10a3a3:	68 61 13 11 00       	push   $0x111361
  10a3a8:	e8 21 72 ff ff       	call   1015ce <assert_post_action>
  10a3ad:	59                   	pop    %ecx
  10a3ae:	5b                   	pop    %ebx
  10a3af:	68 e8 cc 12 00       	push   $0x12cce8
  10a3b4:	e8 8e 09 00 00       	call   10ad47 <z_spin_lock_set_owner>
  10a3b9:	58                   	pop    %eax
  10a3ba:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10a3bf:	e8 04 e9 ff ff       	call   108cc8 <unready_thread>
  10a3c4:	57                   	push   %edi
  10a3c5:	56                   	push   %esi
  10a3c6:	68 e1 94 10 00       	push   $0x1094e1
  10a3cb:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10a3d0:	83 c0 18             	add    $0x18,%eax
  10a3d3:	50                   	push   %eax
  10a3d4:	e8 6b 0a 00 00       	call   10ae44 <z_add_timeout>
  10a3d9:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10a3de:	83 c4 10             	add    $0x10,%esp
  10a3e1:	80 48 0d 10          	orb    $0x10,0xd(%eax)
  10a3e5:	68 e8 cc 12 00       	push   $0x12cce8
  10a3ea:	e8 21 09 00 00       	call   10ad10 <z_spin_unlock_valid>
  10a3ef:	5a                   	pop    %edx
  10a3f0:	84 c0                	test   %al,%al
  10a3f2:	75 37                	jne    10a42b <z_tick_sleep+0x13f>
  10a3f4:	68 6b 01 00 00       	push   $0x16b
  10a3f9:	68 61 13 11 00       	push   $0x111361
  10a3fe:	68 e8 13 11 00       	push   $0x1113e8
  10a403:	68 ee 10 11 00       	push   $0x1110ee
  10a408:	e8 d0 71 ff ff       	call   1015dd <assert_print>
  10a40d:	83 c4 10             	add    $0x10,%esp
  10a410:	68 e8 cc 12 00       	push   $0x12cce8
  10a415:	68 ff 13 11 00       	push   $0x1113ff
  10a41a:	e8 be 71 ff ff       	call   1015dd <assert_print>
  10a41f:	5a                   	pop    %edx
  10a420:	59                   	pop    %ecx
  10a421:	68 6b 01 00 00       	push   $0x16b
  10a426:	e9 78 ff ff ff       	jmp    10a3a3 <z_tick_sleep+0xb7>
  10a42b:	ff 75 f0             	push   -0x10(%ebp)
  10a42e:	e8 dd 99 ff ff       	call   103e10 <arch_swap>
  10a433:	58                   	pop    %eax
  10a434:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10a439:	f6 40 0d 10          	testb  $0x10,0xd(%eax)
  10a43d:	74 37                	je     10a476 <z_tick_sleep+0x18a>
  10a43f:	68 94 04 00 00       	push   $0x494
  10a444:	68 36 27 11 00       	push   $0x112736
  10a449:	68 91 29 11 00       	push   $0x112991
  10a44e:	68 ee 10 11 00       	push   $0x1110ee
  10a453:	e8 85 71 ff ff       	call   1015dd <assert_print>
  10a458:	83 c4 10             	add    $0x10,%esp
  10a45b:	68 4a 23 11 00       	push   $0x11234a
  10a460:	e8 78 71 ff ff       	call   1015dd <assert_print>
  10a465:	c7 04 24 94 04 00 00 	movl   $0x494,(%esp)
  10a46c:	68 36 27 11 00       	push   $0x112736
  10a471:	e9 32 ff ff ff       	jmp    10a3a8 <z_tick_sleep+0xbc>
  10a476:	e8 0f 11 00 00       	call   10b58a <sys_clock_tick_get_32>
  10a47b:	31 d2                	xor    %edx,%edx
  10a47d:	89 c1                	mov    %eax,%ecx
  10a47f:	89 d8                	mov    %ebx,%eax
  10a481:	31 db                	xor    %ebx,%ebx
  10a483:	29 c8                	sub    %ecx,%eax
  10a485:	19 da                	sbb    %ebx,%edx
  10a487:	31 c9                	xor    %ecx,%ecx
  10a489:	39 c1                	cmp    %eax,%ecx
  10a48b:	19 d1                	sbb    %edx,%ecx
  10a48d:	7c 02                	jl     10a491 <z_tick_sleep+0x1a5>
  10a48f:	31 c0                	xor    %eax,%eax
  10a491:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10a494:	5b                   	pop    %ebx
  10a495:	5e                   	pop    %esi
  10a496:	5f                   	pop    %edi
  10a497:	5d                   	pop    %ebp
  10a498:	c3                   	ret

0010a499 <z_mrsh_k_yield>:
  10a499:	55                   	push   %ebp
  10a49a:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10a49f:	89 e5                	mov    %esp,%ebp
  10a4a1:	8b 55 20             	mov    0x20(%ebp),%edx
  10a4a4:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10a4aa:	e8 46 fc ff ff       	call   10a0f5 <z_impl_k_yield>
  10a4af:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10a4b4:	31 d2                	xor    %edx,%edx
  10a4b6:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10a4bc:	31 c0                	xor    %eax,%eax
  10a4be:	5d                   	pop    %ebp
  10a4bf:	c3                   	ret

0010a4c0 <z_impl_k_sleep>:
  10a4c0:	55                   	push   %ebp
  10a4c1:	89 e5                	mov    %esp,%ebp
  10a4c3:	83 3d a0 48 12 00 00 	cmpl   $0x0,0x1248a0
  10a4ca:	8b 45 08             	mov    0x8(%ebp),%eax
  10a4cd:	8b 55 0c             	mov    0xc(%ebp),%edx
  10a4d0:	74 39                	je     10a50b <z_impl_k_sleep+0x4b>
  10a4d2:	68 a2 04 00 00       	push   $0x4a2
  10a4d7:	68 36 27 11 00       	push   $0x112736
  10a4dc:	68 8e 22 11 00       	push   $0x11228e
  10a4e1:	68 ee 10 11 00       	push   $0x1110ee
  10a4e6:	e8 f2 70 ff ff       	call   1015dd <assert_print>
  10a4eb:	83 c4 10             	add    $0x10,%esp
  10a4ee:	68 4a 23 11 00       	push   $0x11234a
  10a4f3:	e8 e5 70 ff ff       	call   1015dd <assert_print>
  10a4f8:	c7 04 24 a2 04 00 00 	movl   $0x4a2,(%esp)
  10a4ff:	68 36 27 11 00       	push   $0x112736
  10a504:	e8 c5 70 ff ff       	call   1015ce <assert_post_action>
  10a509:	5a                   	pop    %edx
  10a50a:	59                   	pop    %ecx
  10a50b:	83 fa ff             	cmp    $0xffffffff,%edx
  10a50e:	75 16                	jne    10a526 <z_impl_k_sleep+0x66>
  10a510:	83 f8 ff             	cmp    $0xffffffff,%eax
  10a513:	75 11                	jne    10a526 <z_impl_k_sleep+0x66>
  10a515:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10a51a:	50                   	push   %eax
  10a51b:	e8 9a ed ff ff       	call   1092ba <z_impl_k_thread_suspend>
  10a520:	58                   	pop    %eax
  10a521:	83 c8 ff             	or     $0xffffffff,%eax
  10a524:	eb 08                	jmp    10a52e <z_impl_k_sleep+0x6e>
  10a526:	e8 c1 fd ff ff       	call   10a2ec <z_tick_sleep>
  10a52b:	6b c0 0a             	imul   $0xa,%eax,%eax
  10a52e:	c9                   	leave
  10a52f:	c3                   	ret

0010a530 <z_mrsh_k_sleep>:
  10a530:	55                   	push   %ebp
  10a531:	89 e5                	mov    %esp,%ebp
  10a533:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10a538:	8b 55 20             	mov    0x20(%ebp),%edx
  10a53b:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10a541:	8b 55 0c             	mov    0xc(%ebp),%edx
  10a544:	8b 45 08             	mov    0x8(%ebp),%eax
  10a547:	52                   	push   %edx
  10a548:	50                   	push   %eax
  10a549:	e8 72 ff ff ff       	call   10a4c0 <z_impl_k_sleep>
  10a54e:	5a                   	pop    %edx
  10a54f:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  10a555:	59                   	pop    %ecx
  10a556:	31 c9                	xor    %ecx,%ecx
  10a558:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  10a55e:	c9                   	leave
  10a55f:	c3                   	ret

0010a560 <z_impl_k_usleep>:
  10a560:	55                   	push   %ebp
  10a561:	89 e5                	mov    %esp,%ebp
  10a563:	8b 45 08             	mov    0x8(%ebp),%eax
  10a566:	6a 00                	push   $0x0
  10a568:	99                   	cltd
  10a569:	05 0f 27 00 00       	add    $0x270f,%eax
  10a56e:	68 10 27 00 00       	push   $0x2710
  10a573:	83 d2 00             	adc    $0x0,%edx
  10a576:	52                   	push   %edx
  10a577:	50                   	push   %eax
  10a578:	e8 fa 5b ff ff       	call   100177 <__udivdi3>
  10a57d:	83 c4 10             	add    $0x10,%esp
  10a580:	99                   	cltd
  10a581:	e8 66 fd ff ff       	call   10a2ec <z_tick_sleep>
  10a586:	c9                   	leave
  10a587:	69 c0 10 27 00 00    	imul   $0x2710,%eax,%eax
  10a58d:	c3                   	ret

0010a58e <z_mrsh_k_usleep>:
  10a58e:	55                   	push   %ebp
  10a58f:	89 e5                	mov    %esp,%ebp
  10a591:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10a596:	8b 55 20             	mov    0x20(%ebp),%edx
  10a599:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10a59f:	ff 75 08             	push   0x8(%ebp)
  10a5a2:	e8 b9 ff ff ff       	call   10a560 <z_impl_k_usleep>
  10a5a7:	31 c9                	xor    %ecx,%ecx
  10a5a9:	5a                   	pop    %edx
  10a5aa:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  10a5b0:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  10a5b6:	c9                   	leave
  10a5b7:	c3                   	ret

0010a5b8 <z_impl_k_wakeup>:
  10a5b8:	55                   	push   %ebp
  10a5b9:	89 e5                	mov    %esp,%ebp
  10a5bb:	56                   	push   %esi
  10a5bc:	53                   	push   %ebx
  10a5bd:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10a5c0:	f6 43 0d 02          	testb  $0x2,0xd(%ebx)
  10a5c4:	0f 85 e0 00 00 00    	jne    10a6aa <z_impl_k_wakeup+0xf2>
  10a5ca:	8d 43 18             	lea    0x18(%ebx),%eax
  10a5cd:	50                   	push   %eax
  10a5ce:	e8 86 0a 00 00       	call   10b059 <z_abort_timeout>
  10a5d3:	59                   	pop    %ecx
  10a5d4:	85 c0                	test   %eax,%eax
  10a5d6:	79 0a                	jns    10a5e2 <z_impl_k_wakeup+0x2a>
  10a5d8:	80 7b 0d 10          	cmpb   $0x10,0xd(%ebx)
  10a5dc:	0f 85 c8 00 00 00    	jne    10a6aa <z_impl_k_wakeup+0xf2>
  10a5e2:	9c                   	pushf
  10a5e3:	fa                   	cli
  10a5e4:	5e                   	pop    %esi
  10a5e5:	68 e8 cc 12 00       	push   $0x12cce8
  10a5ea:	e8 00 07 00 00       	call   10acef <z_spin_lock_valid>
  10a5ef:	5a                   	pop    %edx
  10a5f0:	84 c0                	test   %al,%al
  10a5f2:	75 34                	jne    10a628 <z_impl_k_wakeup+0x70>
  10a5f4:	68 88 00 00 00       	push   $0x88
  10a5f9:	68 61 13 11 00       	push   $0x111361
  10a5fe:	68 8e 13 11 00       	push   $0x11138e
  10a603:	68 ee 10 11 00       	push   $0x1110ee
  10a608:	e8 d0 6f ff ff       	call   1015dd <assert_print>
  10a60d:	83 c4 10             	add    $0x10,%esp
  10a610:	68 e8 cc 12 00       	push   $0x12cce8
  10a615:	68 a3 13 11 00       	push   $0x1113a3
  10a61a:	e8 be 6f ff ff       	call   1015dd <assert_print>
  10a61f:	5b                   	pop    %ebx
  10a620:	5e                   	pop    %esi
  10a621:	68 88 00 00 00       	push   $0x88
  10a626:	eb 60                	jmp    10a688 <z_impl_k_wakeup+0xd0>
  10a628:	68 e8 cc 12 00       	push   $0x12cce8
  10a62d:	e8 15 07 00 00       	call   10ad47 <z_spin_lock_set_owner>
  10a632:	59                   	pop    %ecx
  10a633:	89 d8                	mov    %ebx,%eax
  10a635:	80 63 0d ef          	andb   $0xef,0xd(%ebx)
  10a639:	e8 3b e6 ff ff       	call   108c79 <ready_thread>
  10a63e:	83 3d a0 48 12 00 00 	cmpl   $0x0,0x1248a0
  10a645:	74 56                	je     10a69d <z_impl_k_wakeup+0xe5>
  10a647:	68 e8 cc 12 00       	push   $0x12cce8
  10a64c:	e8 bf 06 00 00       	call   10ad10 <z_spin_unlock_valid>
  10a651:	5a                   	pop    %edx
  10a652:	84 c0                	test   %al,%al
  10a654:	75 3e                	jne    10a694 <z_impl_k_wakeup+0xdc>
  10a656:	68 31 01 00 00       	push   $0x131
  10a65b:	68 61 13 11 00       	push   $0x111361
  10a660:	68 e8 13 11 00       	push   $0x1113e8
  10a665:	68 ee 10 11 00       	push   $0x1110ee
  10a66a:	e8 6e 6f ff ff       	call   1015dd <assert_print>
  10a66f:	83 c4 10             	add    $0x10,%esp
  10a672:	68 e8 cc 12 00       	push   $0x12cce8
  10a677:	68 ff 13 11 00       	push   $0x1113ff
  10a67c:	e8 5c 6f ff ff       	call   1015dd <assert_print>
  10a681:	5e                   	pop    %esi
  10a682:	58                   	pop    %eax
  10a683:	68 31 01 00 00       	push   $0x131
  10a688:	68 61 13 11 00       	push   $0x111361
  10a68d:	e8 3c 6f ff ff       	call   1015ce <assert_post_action>
  10a692:	59                   	pop    %ecx
  10a693:	5b                   	pop    %ebx
  10a694:	0f ba e6 09          	bt     $0x9,%esi
  10a698:	73 10                	jae    10a6aa <z_impl_k_wakeup+0xf2>
  10a69a:	fb                   	sti
  10a69b:	eb 0d                	jmp    10a6aa <z_impl_k_wakeup+0xf2>
  10a69d:	56                   	push   %esi
  10a69e:	68 e8 cc 12 00       	push   $0x12cce8
  10a6a3:	e8 05 f3 ff ff       	call   1099ad <z_reschedule>
  10a6a8:	58                   	pop    %eax
  10a6a9:	5a                   	pop    %edx
  10a6aa:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10a6ad:	5b                   	pop    %ebx
  10a6ae:	5e                   	pop    %esi
  10a6af:	5d                   	pop    %ebp
  10a6b0:	c3                   	ret

0010a6b1 <z_mrsh_k_wakeup>:
  10a6b1:	55                   	push   %ebp
  10a6b2:	89 e5                	mov    %esp,%ebp
  10a6b4:	53                   	push   %ebx
  10a6b5:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10a6ba:	8b 55 20             	mov    0x20(%ebp),%edx
  10a6bd:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10a6c0:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10a6c6:	53                   	push   %ebx
  10a6c7:	e8 69 2d 00 00       	call   10d435 <k_object_find>
  10a6cc:	89 da                	mov    %ebx,%edx
  10a6ce:	59                   	pop    %ecx
  10a6cf:	e8 ee e6 ff ff       	call   108dc2 <k_object_validation_check.constprop.0>
  10a6d4:	85 c0                	test   %eax,%eax
  10a6d6:	74 24                	je     10a6fc <z_mrsh_k_wakeup+0x4b>
  10a6d8:	68 94 0b 11 00       	push   $0x110b94
  10a6dd:	6a 45                	push   $0x45
  10a6df:	68 dd 1f 11 00       	push   $0x111fdd
  10a6e4:	e8 0f 7e ff ff       	call   1024f8 <z_log_minimal_printk>
  10a6e9:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10a6ee:	83 c4 0c             	add    $0xc,%esp
  10a6f1:	ff b0 88 00 00 00    	push   0x88(%eax)
  10a6f7:	e8 ca 9a ff ff       	call   1041c6 <arch_syscall_oops>
  10a6fc:	53                   	push   %ebx
  10a6fd:	e8 b6 fe ff ff       	call   10a5b8 <z_impl_k_wakeup>
  10a702:	58                   	pop    %eax
  10a703:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10a708:	31 d2                	xor    %edx,%edx
  10a70a:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10a710:	31 c0                	xor    %eax,%eax
  10a712:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10a715:	c9                   	leave
  10a716:	c3                   	ret

0010a717 <z_impl_k_sched_current_thread_query>:
  10a717:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10a71c:	c3                   	ret

0010a71d <z_mrsh_k_sched_current_thread_query>:
  10a71d:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10a722:	31 d2                	xor    %edx,%edx
  10a724:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10a72a:	c3                   	ret

0010a72b <z_thread_abort>:
  10a72b:	55                   	push   %ebp
  10a72c:	89 e5                	mov    %esp,%ebp
  10a72e:	56                   	push   %esi
  10a72f:	53                   	push   %ebx
  10a730:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10a733:	9c                   	pushf
  10a734:	fa                   	cli
  10a735:	5e                   	pop    %esi
  10a736:	68 e8 cc 12 00       	push   $0x12cce8
  10a73b:	e8 af 05 00 00       	call   10acef <z_spin_lock_valid>
  10a740:	59                   	pop    %ecx
  10a741:	84 c0                	test   %al,%al
  10a743:	75 34                	jne    10a779 <z_thread_abort+0x4e>
  10a745:	68 88 00 00 00       	push   $0x88
  10a74a:	68 61 13 11 00       	push   $0x111361
  10a74f:	68 8e 13 11 00       	push   $0x11138e
  10a754:	68 ee 10 11 00       	push   $0x1110ee
  10a759:	e8 7f 6e ff ff       	call   1015dd <assert_print>
  10a75e:	83 c4 10             	add    $0x10,%esp
  10a761:	68 e8 cc 12 00       	push   $0x12cce8
  10a766:	68 a3 13 11 00       	push   $0x1113a3
  10a76b:	e8 6d 6e ff ff       	call   1015dd <assert_print>
  10a770:	58                   	pop    %eax
  10a771:	5a                   	pop    %edx
  10a772:	68 88 00 00 00       	push   $0x88
  10a777:	eb 56                	jmp    10a7cf <z_thread_abort+0xa4>
  10a779:	68 e8 cc 12 00       	push   $0x12cce8
  10a77e:	e8 c4 05 00 00       	call   10ad47 <z_spin_lock_set_owner>
  10a783:	f6 43 0c 01          	testb  $0x1,0xc(%ebx)
  10a787:	58                   	pop    %eax
  10a788:	0f 84 89 00 00 00    	je     10a817 <z_thread_abort+0xec>
  10a78e:	68 e8 cc 12 00       	push   $0x12cce8
  10a793:	e8 78 05 00 00       	call   10ad10 <z_spin_unlock_valid>
  10a798:	59                   	pop    %ecx
  10a799:	84 c0                	test   %al,%al
  10a79b:	75 3e                	jne    10a7db <z_thread_abort+0xb0>
  10a79d:	68 31 01 00 00       	push   $0x131
  10a7a2:	68 61 13 11 00       	push   $0x111361
  10a7a7:	68 e8 13 11 00       	push   $0x1113e8
  10a7ac:	68 ee 10 11 00       	push   $0x1110ee
  10a7b1:	e8 27 6e ff ff       	call   1015dd <assert_print>
  10a7b6:	83 c4 10             	add    $0x10,%esp
  10a7b9:	68 e8 cc 12 00       	push   $0x12cce8
  10a7be:	68 ff 13 11 00       	push   $0x1113ff
  10a7c3:	e8 15 6e ff ff       	call   1015dd <assert_print>
  10a7c8:	58                   	pop    %eax
  10a7c9:	5a                   	pop    %edx
  10a7ca:	68 31 01 00 00       	push   $0x131
  10a7cf:	68 61 13 11 00       	push   $0x111361
  10a7d4:	e8 f5 6d ff ff       	call   1015ce <assert_post_action>
  10a7d9:	5e                   	pop    %esi
  10a7da:	58                   	pop    %eax
  10a7db:	0f ba e6 09          	bt     $0x9,%esi
  10a7df:	73 01                	jae    10a7e2 <z_thread_abort+0xb7>
  10a7e1:	fb                   	sti
  10a7e2:	68 97 05 00 00       	push   $0x597
  10a7e7:	68 36 27 11 00       	push   $0x112736
  10a7ec:	68 20 2a 11 00       	push   $0x112a20
  10a7f1:	68 ee 10 11 00       	push   $0x1110ee
  10a7f6:	e8 e2 6d ff ff       	call   1015dd <assert_print>
  10a7fb:	83 c4 10             	add    $0x10,%esp
  10a7fe:	53                   	push   %ebx
  10a7ff:	68 d1 29 11 00       	push   $0x1129d1
  10a804:	e8 d4 6d ff ff       	call   1015dd <assert_print>
  10a809:	59                   	pop    %ecx
  10a80a:	5b                   	pop    %ebx
  10a80b:	68 97 05 00 00       	push   $0x597
  10a810:	68 36 27 11 00       	push   $0x112736
  10a815:	eb bd                	jmp    10a7d4 <z_thread_abort+0xa9>
  10a817:	f6 43 0d 08          	testb  $0x8,0xd(%ebx)
  10a81b:	74 1c                	je     10a839 <z_thread_abort+0x10e>
  10a81d:	68 e8 cc 12 00       	push   $0x12cce8
  10a822:	e8 e9 04 00 00       	call   10ad10 <z_spin_unlock_valid>
  10a827:	5a                   	pop    %edx
  10a828:	84 c0                	test   %al,%al
  10a82a:	0f 84 6d ff ff ff    	je     10a79d <z_thread_abort+0x72>
  10a830:	0f ba e6 09          	bt     $0x9,%esi
  10a834:	73 17                	jae    10a84d <z_thread_abort+0x122>
  10a836:	fb                   	sti
  10a837:	eb 14                	jmp    10a84d <z_thread_abort+0x122>
  10a839:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10a83c:	89 d8                	mov    %ebx,%eax
  10a83e:	89 f2                	mov    %esi,%edx
  10a840:	b9 01 00 00 00       	mov    $0x1,%ecx
  10a845:	5b                   	pop    %ebx
  10a846:	5e                   	pop    %esi
  10a847:	5d                   	pop    %ebp
  10a848:	e9 08 e6 ff ff       	jmp    108e55 <z_thread_halt>
  10a84d:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10a850:	5b                   	pop    %ebx
  10a851:	5e                   	pop    %esi
  10a852:	5d                   	pop    %ebp
  10a853:	c3                   	ret

0010a854 <z_impl_k_thread_abort>:
  10a854:	55                   	push   %ebp
  10a855:	89 e5                	mov    %esp,%ebp
  10a857:	53                   	push   %ebx
  10a858:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10a85b:	53                   	push   %ebx
  10a85c:	e8 ca fe ff ff       	call   10a72b <z_thread_abort>
  10a861:	f6 43 0d 08          	testb  $0x8,0xd(%ebx)
  10a865:	59                   	pop    %ecx
  10a866:	75 2d                	jne    10a895 <z_impl_k_thread_abort+0x41>
  10a868:	68 ab 05 00 00       	push   $0x5ab
  10a86d:	68 36 27 11 00       	push   $0x112736
  10a872:	68 f0 29 11 00       	push   $0x1129f0
  10a877:	68 ee 10 11 00       	push   $0x1110ee
  10a87c:	e8 5c 6d ff ff       	call   1015dd <assert_print>
  10a881:	83 c4 10             	add    $0x10,%esp
  10a884:	68 ab 05 00 00       	push   $0x5ab
  10a889:	68 36 27 11 00       	push   $0x112736
  10a88e:	e8 3b 6d ff ff       	call   1015ce <assert_post_action>
  10a893:	58                   	pop    %eax
  10a894:	5a                   	pop    %edx
  10a895:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10a898:	c9                   	leave
  10a899:	c3                   	ret

0010a89a <z_impl_k_thread_join>:
  10a89a:	55                   	push   %ebp
  10a89b:	89 e5                	mov    %esp,%ebp
  10a89d:	57                   	push   %edi
  10a89e:	56                   	push   %esi
  10a89f:	53                   	push   %ebx
  10a8a0:	57                   	push   %edi
  10a8a1:	8b 7d 08             	mov    0x8(%ebp),%edi
  10a8a4:	8b 75 0c             	mov    0xc(%ebp),%esi
  10a8a7:	8b 5d 10             	mov    0x10(%ebp),%ebx
  10a8aa:	9c                   	pushf
  10a8ab:	fa                   	cli
  10a8ac:	8f 45 f0             	pop    -0x10(%ebp)
  10a8af:	68 e8 cc 12 00       	push   $0x12cce8
  10a8b4:	e8 36 04 00 00       	call   10acef <z_spin_lock_valid>
  10a8b9:	5a                   	pop    %edx
  10a8ba:	84 c0                	test   %al,%al
  10a8bc:	75 37                	jne    10a8f5 <z_impl_k_thread_join+0x5b>
  10a8be:	68 88 00 00 00       	push   $0x88
  10a8c3:	68 61 13 11 00       	push   $0x111361
  10a8c8:	68 8e 13 11 00       	push   $0x11138e
  10a8cd:	68 ee 10 11 00       	push   $0x1110ee
  10a8d2:	e8 06 6d ff ff       	call   1015dd <assert_print>
  10a8d7:	83 c4 10             	add    $0x10,%esp
  10a8da:	68 e8 cc 12 00       	push   $0x12cce8
  10a8df:	68 a3 13 11 00       	push   $0x1113a3
  10a8e4:	e8 f4 6c ff ff       	call   1015dd <assert_print>
  10a8e9:	5b                   	pop    %ebx
  10a8ea:	5e                   	pop    %esi
  10a8eb:	68 88 00 00 00       	push   $0x88
  10a8f0:	e9 4a 01 00 00       	jmp    10aa3f <z_impl_k_thread_join+0x1a5>
  10a8f5:	68 e8 cc 12 00       	push   $0x12cce8
  10a8fa:	e8 48 04 00 00       	call   10ad47 <z_spin_lock_set_owner>
  10a8ff:	f6 47 0d 08          	testb  $0x8,0xd(%edi)
  10a903:	59                   	pop    %ecx
  10a904:	0f 85 e4 00 00 00    	jne    10a9ee <z_impl_k_thread_join+0x154>
  10a90a:	89 d8                	mov    %ebx,%eax
  10a90c:	09 f0                	or     %esi,%eax
  10a90e:	0f 84 de 00 00 00    	je     10a9f2 <z_impl_k_thread_join+0x158>
  10a914:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10a919:	39 f8                	cmp    %edi,%eax
  10a91b:	0f 84 d8 00 00 00    	je     10a9f9 <z_impl_k_thread_join+0x15f>
  10a921:	8d 48 34             	lea    0x34(%eax),%ecx
  10a924:	39 4f 08             	cmp    %ecx,0x8(%edi)
  10a927:	0f 84 cc 00 00 00    	je     10a9f9 <z_impl_k_thread_join+0x15f>
  10a92d:	83 3d a0 48 12 00 00 	cmpl   $0x0,0x1248a0
  10a934:	74 39                	je     10a96f <z_impl_k_thread_join+0xd5>
  10a936:	68 c1 05 00 00       	push   $0x5c1
  10a93b:	68 36 27 11 00       	push   $0x112736
  10a940:	68 8e 22 11 00       	push   $0x11228e
  10a945:	68 ee 10 11 00       	push   $0x1110ee
  10a94a:	e8 8e 6c ff ff       	call   1015dd <assert_print>
  10a94f:	83 c4 10             	add    $0x10,%esp
  10a952:	68 22 2a 11 00       	push   $0x112a22
  10a957:	e8 81 6c ff ff       	call   1015dd <assert_print>
  10a95c:	c7 04 24 c1 05 00 00 	movl   $0x5c1,(%esp)
  10a963:	68 36 27 11 00       	push   $0x112736
  10a968:	e8 61 6c ff ff       	call   1015ce <assert_post_action>
  10a96d:	58                   	pop    %eax
  10a96e:	5a                   	pop    %edx
  10a96f:	8d 57 34             	lea    0x34(%edi),%edx
  10a972:	e8 ca e3 ff ff       	call   108d41 <add_to_waitq_locked>
  10a977:	83 fb ff             	cmp    $0xffffffff,%ebx
  10a97a:	75 05                	jne    10a981 <z_impl_k_thread_join+0xe7>
  10a97c:	83 fe ff             	cmp    $0xffffffff,%esi
  10a97f:	74 18                	je     10a999 <z_impl_k_thread_join+0xff>
  10a981:	53                   	push   %ebx
  10a982:	56                   	push   %esi
  10a983:	68 e1 94 10 00       	push   $0x1094e1
  10a988:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10a98d:	83 c0 18             	add    $0x18,%eax
  10a990:	50                   	push   %eax
  10a991:	e8 ae 04 00 00       	call   10ae44 <z_add_timeout>
  10a996:	83 c4 10             	add    $0x10,%esp
  10a999:	68 e8 cc 12 00       	push   $0x12cce8
  10a99e:	e8 6d 03 00 00       	call   10ad10 <z_spin_unlock_valid>
  10a9a3:	5f                   	pop    %edi
  10a9a4:	84 c0                	test   %al,%al
  10a9a6:	75 34                	jne    10a9dc <z_impl_k_thread_join+0x142>
  10a9a8:	68 6b 01 00 00       	push   $0x16b
  10a9ad:	68 61 13 11 00       	push   $0x111361
  10a9b2:	68 e8 13 11 00       	push   $0x1113e8
  10a9b7:	68 ee 10 11 00       	push   $0x1110ee
  10a9bc:	e8 1c 6c ff ff       	call   1015dd <assert_print>
  10a9c1:	83 c4 10             	add    $0x10,%esp
  10a9c4:	68 e8 cc 12 00       	push   $0x12cce8
  10a9c9:	68 ff 13 11 00       	push   $0x1113ff
  10a9ce:	e8 0a 6c ff ff       	call   1015dd <assert_print>
  10a9d3:	5b                   	pop    %ebx
  10a9d4:	5e                   	pop    %esi
  10a9d5:	68 6b 01 00 00       	push   $0x16b
  10a9da:	eb 63                	jmp    10aa3f <z_impl_k_thread_join+0x1a5>
  10a9dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10a9df:	89 45 08             	mov    %eax,0x8(%ebp)
  10a9e2:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10a9e5:	5b                   	pop    %ebx
  10a9e6:	5e                   	pop    %esi
  10a9e7:	5f                   	pop    %edi
  10a9e8:	5d                   	pop    %ebp
  10a9e9:	e9 22 94 ff ff       	jmp    103e10 <arch_swap>
  10a9ee:	31 db                	xor    %ebx,%ebx
  10a9f0:	eb 0c                	jmp    10a9fe <z_impl_k_thread_join+0x164>
  10a9f2:	bb f0 ff ff ff       	mov    $0xfffffff0,%ebx
  10a9f7:	eb 05                	jmp    10a9fe <z_impl_k_thread_join+0x164>
  10a9f9:	bb d3 ff ff ff       	mov    $0xffffffd3,%ebx
  10a9fe:	68 e8 cc 12 00       	push   $0x12cce8
  10aa03:	e8 08 03 00 00       	call   10ad10 <z_spin_unlock_valid>
  10aa08:	59                   	pop    %ecx
  10aa09:	84 c0                	test   %al,%al
  10aa0b:	75 3c                	jne    10aa49 <z_impl_k_thread_join+0x1af>
  10aa0d:	68 31 01 00 00       	push   $0x131
  10aa12:	68 61 13 11 00       	push   $0x111361
  10aa17:	68 e8 13 11 00       	push   $0x1113e8
  10aa1c:	68 ee 10 11 00       	push   $0x1110ee
  10aa21:	e8 b7 6b ff ff       	call   1015dd <assert_print>
  10aa26:	83 c4 10             	add    $0x10,%esp
  10aa29:	68 e8 cc 12 00       	push   $0x12cce8
  10aa2e:	68 ff 13 11 00       	push   $0x1113ff
  10aa33:	e8 a5 6b ff ff       	call   1015dd <assert_print>
  10aa38:	58                   	pop    %eax
  10aa39:	5a                   	pop    %edx
  10aa3a:	68 31 01 00 00       	push   $0x131
  10aa3f:	68 61 13 11 00       	push   $0x111361
  10aa44:	e9 1f ff ff ff       	jmp    10a968 <z_impl_k_thread_join+0xce>
  10aa49:	0f ba 65 f0 09       	btl    $0x9,-0x10(%ebp)
  10aa4e:	73 01                	jae    10aa51 <z_impl_k_thread_join+0x1b7>
  10aa50:	fb                   	sti
  10aa51:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10aa54:	89 d8                	mov    %ebx,%eax
  10aa56:	5b                   	pop    %ebx
  10aa57:	5e                   	pop    %esi
  10aa58:	5f                   	pop    %edi
  10aa59:	5d                   	pop    %ebp
  10aa5a:	c3                   	ret

0010aa5b <z_mrsh_k_thread_join>:
  10aa5b:	55                   	push   %ebp
  10aa5c:	89 e5                	mov    %esp,%ebp
  10aa5e:	57                   	push   %edi
  10aa5f:	56                   	push   %esi
  10aa60:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10aa65:	8b 55 20             	mov    0x20(%ebp),%edx
  10aa68:	8b 75 0c             	mov    0xc(%ebp),%esi
  10aa6b:	8b 7d 10             	mov    0x10(%ebp),%edi
  10aa6e:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10aa74:	8b 45 08             	mov    0x8(%ebp),%eax
  10aa77:	e8 33 e1 ff ff       	call   108baf <thread_obj_validate>
  10aa7c:	88 c2                	mov    %al,%dl
  10aa7e:	31 c0                	xor    %eax,%eax
  10aa80:	84 d2                	test   %dl,%dl
  10aa82:	75 0d                	jne    10aa91 <z_mrsh_k_thread_join+0x36>
  10aa84:	57                   	push   %edi
  10aa85:	56                   	push   %esi
  10aa86:	ff 75 08             	push   0x8(%ebp)
  10aa89:	e8 0c fe ff ff       	call   10a89a <z_impl_k_thread_join>
  10aa8e:	83 c4 0c             	add    $0xc,%esp
  10aa91:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  10aa97:	31 c9                	xor    %ecx,%ecx
  10aa99:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  10aa9f:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10aaa2:	5e                   	pop    %esi
  10aaa3:	5f                   	pop    %edi
  10aaa4:	5d                   	pop    %ebp
  10aaa5:	c3                   	ret

0010aaa6 <z_mrsh_k_thread_abort>:
  10aaa6:	55                   	push   %ebp
  10aaa7:	89 e5                	mov    %esp,%ebp
  10aaa9:	53                   	push   %ebx
  10aaaa:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10aaaf:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10aab2:	8b 55 20             	mov    0x20(%ebp),%edx
  10aab5:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10aabb:	89 d8                	mov    %ebx,%eax
  10aabd:	e8 ed e0 ff ff       	call   108baf <thread_obj_validate>
  10aac2:	84 c0                	test   %al,%al
  10aac4:	75 34                	jne    10aafa <z_mrsh_k_thread_abort+0x54>
  10aac6:	f6 43 0c 01          	testb  $0x1,0xc(%ebx)
  10aaca:	75 09                	jne    10aad5 <z_mrsh_k_thread_abort+0x2f>
  10aacc:	53                   	push   %ebx
  10aacd:	e8 82 fd ff ff       	call   10a854 <z_impl_k_thread_abort>
  10aad2:	59                   	pop    %ecx
  10aad3:	eb 25                	jmp    10aafa <z_mrsh_k_thread_abort+0x54>
  10aad5:	53                   	push   %ebx
  10aad6:	68 7c 0b 11 00       	push   $0x110b7c
  10aadb:	6a 45                	push   $0x45
  10aadd:	68 37 2a 11 00       	push   $0x112a37
  10aae2:	e8 11 7a ff ff       	call   1024f8 <z_log_minimal_printk>
  10aae7:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10aaec:	83 c4 10             	add    $0x10,%esp
  10aaef:	ff b0 88 00 00 00    	push   0x88(%eax)
  10aaf5:	e8 cc 96 ff ff       	call   1041c6 <arch_syscall_oops>
  10aafa:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10aaff:	31 d2                	xor    %edx,%edx
  10ab01:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10ab07:	31 c0                	xor    %eax,%eax
  10ab09:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10ab0c:	c9                   	leave
  10ab0d:	c3                   	ret

0010ab0e <slice_timeout>:
  10ab0e:	55                   	push   %ebp
  10ab0f:	89 e5                	mov    %esp,%ebp
  10ab11:	53                   	push   %ebx
  10ab12:	8b 45 08             	mov    0x8(%ebp),%eax
  10ab15:	85 c0                	test   %eax,%eax
  10ab17:	74 22                	je     10ab3b <slice_timeout+0x2d>
  10ab19:	3d ec cc 12 00       	cmp    $0x12ccec,%eax
  10ab1e:	72 1b                	jb     10ab3b <slice_timeout+0x2d>
  10ab20:	3d 00 cd 12 00       	cmp    $0x12cd00,%eax
  10ab25:	73 14                	jae    10ab3b <slice_timeout+0x2d>
  10ab27:	2d ec cc 12 00       	sub    $0x12ccec,%eax
  10ab2c:	31 d2                	xor    %edx,%edx
  10ab2e:	bb 14 00 00 00       	mov    $0x14,%ebx
  10ab33:	89 c1                	mov    %eax,%ecx
  10ab35:	f7 f3                	div    %ebx
  10ab37:	85 d2                	test   %edx,%edx
  10ab39:	74 27                	je     10ab62 <slice_timeout+0x54>
  10ab3b:	6a 38                	push   $0x38
  10ab3d:	68 72 2a 11 00       	push   $0x112a72
  10ab42:	68 9a 2a 11 00       	push   $0x112a9a
  10ab47:	68 ee 10 11 00       	push   $0x1110ee
  10ab4c:	e8 8c 6a ff ff       	call   1015dd <assert_print>
  10ab51:	83 c4 10             	add    $0x10,%esp
  10ab54:	6a 38                	push   $0x38
  10ab56:	68 72 2a 11 00       	push   $0x112a72
  10ab5b:	e8 6e 6a ff ff       	call   1015ce <assert_post_action>
  10ab60:	58                   	pop    %eax
  10ab61:	5a                   	pop    %edx
  10ab62:	89 c8                	mov    %ecx,%eax
  10ab64:	c1 f8 02             	sar    $0x2,%eax
  10ab67:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
  10ab6d:	c6 80 30 cd 12 00 01 	movb   $0x1,0x12cd30(%eax)
  10ab74:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10ab77:	c9                   	leave
  10ab78:	c3                   	ret

0010ab79 <thread_is_sliceable>:
  10ab79:	55                   	push   %ebp
  10ab7a:	31 c0                	xor    %eax,%eax
  10ab7c:	89 e5                	mov    %esp,%ebp
  10ab7e:	8b 55 08             	mov    0x8(%ebp),%edx
  10ab81:	66 83 7a 0e 7f       	cmpw   $0x7f,0xe(%edx)
  10ab86:	77 2b                	ja     10abb3 <thread_is_sliceable+0x3a>
  10ab88:	a1 04 cd 12 00       	mov    0x12cd04,%eax
  10ab8d:	85 c0                	test   %eax,%eax
  10ab8f:	74 22                	je     10abb3 <thread_is_sliceable+0x3a>
  10ab91:	0f be 4a 0e          	movsbl 0xe(%edx),%ecx
  10ab95:	31 c0                	xor    %eax,%eax
  10ab97:	39 0d 00 cd 12 00    	cmp    %ecx,0x12cd00
  10ab9d:	7f 14                	jg     10abb3 <thread_is_sliceable+0x3a>
  10ab9f:	f6 42 0d 1f          	testb  $0x1f,0xd(%edx)
  10aba3:	0f 94 c1             	sete   %cl
  10aba6:	31 c0                	xor    %eax,%eax
  10aba8:	81 fa 60 47 12 00    	cmp    $0x124760,%edx
  10abae:	0f 95 c0             	setne  %al
  10abb1:	21 c8                	and    %ecx,%eax
  10abb3:	83 e0 01             	and    $0x1,%eax
  10abb6:	5d                   	pop    %ebp
  10abb7:	c3                   	ret

0010abb8 <z_reset_time_slice>:
  10abb8:	55                   	push   %ebp
  10abb9:	89 e5                	mov    %esp,%ebp
  10abbb:	56                   	push   %esi
  10abbc:	53                   	push   %ebx
  10abbd:	0f b6 35 b0 48 12 00 	movzbl 0x1248b0,%esi
  10abc4:	6b de 14             	imul   $0x14,%esi,%ebx
  10abc7:	81 c3 ec cc 12 00    	add    $0x12ccec,%ebx
  10abcd:	53                   	push   %ebx
  10abce:	e8 86 04 00 00       	call   10b059 <z_abort_timeout>
  10abd3:	58                   	pop    %eax
  10abd4:	c6 86 30 cd 12 00 00 	movb   $0x0,0x12cd30(%esi)
  10abdb:	ff 75 08             	push   0x8(%ebp)
  10abde:	e8 96 ff ff ff       	call   10ab79 <thread_is_sliceable>
  10abe3:	5a                   	pop    %edx
  10abe4:	84 c0                	test   %al,%al
  10abe6:	74 17                	je     10abff <z_reset_time_slice+0x47>
  10abe8:	a1 04 cd 12 00       	mov    0x12cd04,%eax
  10abed:	48                   	dec    %eax
  10abee:	99                   	cltd
  10abef:	52                   	push   %edx
  10abf0:	50                   	push   %eax
  10abf1:	68 0e ab 10 00       	push   $0x10ab0e
  10abf6:	53                   	push   %ebx
  10abf7:	e8 48 02 00 00       	call   10ae44 <z_add_timeout>
  10abfc:	83 c4 10             	add    $0x10,%esp
  10abff:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10ac02:	5b                   	pop    %ebx
  10ac03:	5e                   	pop    %esi
  10ac04:	5d                   	pop    %ebp
  10ac05:	c3                   	ret

0010ac06 <z_time_slice>:
  10ac06:	55                   	push   %ebp
  10ac07:	89 e5                	mov    %esp,%ebp
  10ac09:	56                   	push   %esi
  10ac0a:	53                   	push   %ebx
  10ac0b:	9c                   	pushf
  10ac0c:	fa                   	cli
  10ac0d:	5e                   	pop    %esi
  10ac0e:	68 e8 cc 12 00       	push   $0x12cce8
  10ac13:	e8 d7 00 00 00       	call   10acef <z_spin_lock_valid>
  10ac18:	5a                   	pop    %edx
  10ac19:	84 c0                	test   %al,%al
  10ac1b:	75 37                	jne    10ac54 <z_time_slice+0x4e>
  10ac1d:	68 88 00 00 00       	push   $0x88
  10ac22:	68 61 13 11 00       	push   $0x111361
  10ac27:	68 8e 13 11 00       	push   $0x11138e
  10ac2c:	68 ee 10 11 00       	push   $0x1110ee
  10ac31:	e8 a7 69 ff ff       	call   1015dd <assert_print>
  10ac36:	83 c4 10             	add    $0x10,%esp
  10ac39:	68 e8 cc 12 00       	push   $0x12cce8
  10ac3e:	68 a3 13 11 00       	push   $0x1113a3
  10ac43:	e8 95 69 ff ff       	call   1015dd <assert_print>
  10ac48:	5b                   	pop    %ebx
  10ac49:	5e                   	pop    %esi
  10ac4a:	68 88 00 00 00       	push   $0x88
  10ac4f:	e9 81 00 00 00       	jmp    10acd5 <z_time_slice+0xcf>
  10ac54:	68 e8 cc 12 00       	push   $0x12cce8
  10ac59:	e8 e9 00 00 00       	call   10ad47 <z_spin_lock_set_owner>
  10ac5e:	0f b6 05 b0 48 12 00 	movzbl 0x1248b0,%eax
  10ac65:	59                   	pop    %ecx
  10ac66:	80 b8 30 cd 12 00 00 	cmpb   $0x0,0x12cd30(%eax)
  10ac6d:	74 25                	je     10ac94 <z_time_slice+0x8e>
  10ac6f:	8b 1d a8 48 12 00    	mov    0x1248a8,%ebx
  10ac75:	53                   	push   %ebx
  10ac76:	e8 fe fe ff ff       	call   10ab79 <thread_is_sliceable>
  10ac7b:	5a                   	pop    %edx
  10ac7c:	84 c0                	test   %al,%al
  10ac7e:	74 14                	je     10ac94 <z_time_slice+0x8e>
  10ac80:	f6 43 0d 1f          	testb  $0x1f,0xd(%ebx)
  10ac84:	75 07                	jne    10ac8d <z_time_slice+0x87>
  10ac86:	53                   	push   %ebx
  10ac87:	e8 5e e4 ff ff       	call   1090ea <move_thread_to_end_of_prio_q>
  10ac8c:	58                   	pop    %eax
  10ac8d:	53                   	push   %ebx
  10ac8e:	e8 25 ff ff ff       	call   10abb8 <z_reset_time_slice>
  10ac93:	59                   	pop    %ecx
  10ac94:	68 e8 cc 12 00       	push   $0x12cce8
  10ac99:	e8 72 00 00 00       	call   10ad10 <z_spin_unlock_valid>
  10ac9e:	5a                   	pop    %edx
  10ac9f:	84 c0                	test   %al,%al
  10aca1:	75 3e                	jne    10ace1 <z_time_slice+0xdb>
  10aca3:	68 31 01 00 00       	push   $0x131
  10aca8:	68 61 13 11 00       	push   $0x111361
  10acad:	68 e8 13 11 00       	push   $0x1113e8
  10acb2:	68 ee 10 11 00       	push   $0x1110ee
  10acb7:	e8 21 69 ff ff       	call   1015dd <assert_print>
  10acbc:	83 c4 10             	add    $0x10,%esp
  10acbf:	68 e8 cc 12 00       	push   $0x12cce8
  10acc4:	68 ff 13 11 00       	push   $0x1113ff
  10acc9:	e8 0f 69 ff ff       	call   1015dd <assert_print>
  10acce:	59                   	pop    %ecx
  10accf:	5b                   	pop    %ebx
  10acd0:	68 31 01 00 00       	push   $0x131
  10acd5:	68 61 13 11 00       	push   $0x111361
  10acda:	e8 ef 68 ff ff       	call   1015ce <assert_post_action>
  10acdf:	58                   	pop    %eax
  10ace0:	5a                   	pop    %edx
  10ace1:	0f ba e6 09          	bt     $0x9,%esi
  10ace5:	73 01                	jae    10ace8 <z_time_slice+0xe2>
  10ace7:	fb                   	sti
  10ace8:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10aceb:	5b                   	pop    %ebx
  10acec:	5e                   	pop    %esi
  10aced:	5d                   	pop    %ebp
  10acee:	c3                   	ret

0010acef <z_spin_lock_valid>:
  10acef:	55                   	push   %ebp
  10acf0:	b2 01                	mov    $0x1,%dl
  10acf2:	89 e5                	mov    %esp,%ebp
  10acf4:	8b 45 08             	mov    0x8(%ebp),%eax
  10acf7:	8b 00                	mov    (%eax),%eax
  10acf9:	85 c0                	test   %eax,%eax
  10acfb:	74 0f                	je     10ad0c <z_spin_lock_valid+0x1d>
  10acfd:	0f b6 15 b0 48 12 00 	movzbl 0x1248b0,%edx
  10ad04:	83 e0 03             	and    $0x3,%eax
  10ad07:	39 d0                	cmp    %edx,%eax
  10ad09:	0f 95 c2             	setne  %dl
  10ad0c:	88 d0                	mov    %dl,%al
  10ad0e:	5d                   	pop    %ebp
  10ad0f:	c3                   	ret

0010ad10 <z_spin_unlock_valid>:
  10ad10:	55                   	push   %ebp
  10ad11:	31 c9                	xor    %ecx,%ecx
  10ad13:	89 e5                	mov    %esp,%ebp
  10ad15:	8b 45 08             	mov    0x8(%ebp),%eax
  10ad18:	8b 10                	mov    (%eax),%edx
  10ad1a:	89 08                	mov    %ecx,(%eax)
  10ad1c:	83 3d a0 48 12 00 00 	cmpl   $0x0,0x1248a0
  10ad23:	74 0e                	je     10ad33 <z_spin_unlock_valid+0x23>
  10ad25:	8b 0d a8 48 12 00    	mov    0x1248a8,%ecx
  10ad2b:	b0 01                	mov    $0x1,%al
  10ad2d:	f6 41 0d 01          	testb  $0x1,0xd(%ecx)
  10ad31:	75 12                	jne    10ad45 <z_spin_unlock_valid+0x35>
  10ad33:	0f b6 05 b0 48 12 00 	movzbl 0x1248b0,%eax
  10ad3a:	0b 05 a8 48 12 00    	or     0x1248a8,%eax
  10ad40:	39 d0                	cmp    %edx,%eax
  10ad42:	0f 94 c0             	sete   %al
  10ad45:	5d                   	pop    %ebp
  10ad46:	c3                   	ret

0010ad47 <z_spin_lock_set_owner>:
  10ad47:	55                   	push   %ebp
  10ad48:	0f b6 05 b0 48 12 00 	movzbl 0x1248b0,%eax
  10ad4f:	89 e5                	mov    %esp,%ebp
  10ad51:	0b 05 a8 48 12 00    	or     0x1248a8,%eax
  10ad57:	8b 55 08             	mov    0x8(%ebp),%edx
  10ad5a:	89 02                	mov    %eax,(%edx)
  10ad5c:	5d                   	pop    %ebp
  10ad5d:	c3                   	ret

0010ad5e <elapsed>:
  10ad5e:	83 3d 08 cd 12 00 00 	cmpl   $0x0,0x12cd08
  10ad65:	75 05                	jne    10ad6c <elapsed+0xe>
  10ad67:	e9 f1 b6 ff ff       	jmp    10645d <sys_clock_elapsed>
  10ad6c:	31 c0                	xor    %eax,%eax
  10ad6e:	c3                   	ret

0010ad6f <remove_timeout>:
  10ad6f:	55                   	push   %ebp
  10ad70:	85 c0                	test   %eax,%eax
  10ad72:	89 e5                	mov    %esp,%ebp
  10ad74:	53                   	push   %ebx
  10ad75:	74 1a                	je     10ad91 <remove_timeout+0x22>
  10ad77:	3b 05 60 b5 11 00    	cmp    0x11b560,%eax
  10ad7d:	74 12                	je     10ad91 <remove_timeout+0x22>
  10ad7f:	8b 10                	mov    (%eax),%edx
  10ad81:	85 d2                	test   %edx,%edx
  10ad83:	74 0c                	je     10ad91 <remove_timeout+0x22>
  10ad85:	8b 48 0c             	mov    0xc(%eax),%ecx
  10ad88:	8b 58 10             	mov    0x10(%eax),%ebx
  10ad8b:	01 4a 0c             	add    %ecx,0xc(%edx)
  10ad8e:	11 5a 10             	adc    %ebx,0x10(%edx)
  10ad91:	8b 10                	mov    (%eax),%edx
  10ad93:	8b 48 04             	mov    0x4(%eax),%ecx
  10ad96:	89 11                	mov    %edx,(%ecx)
  10ad98:	89 4a 04             	mov    %ecx,0x4(%edx)
  10ad9b:	5b                   	pop    %ebx
  10ad9c:	31 d2                	xor    %edx,%edx
  10ad9e:	89 10                	mov    %edx,(%eax)
  10ada0:	89 50 04             	mov    %edx,0x4(%eax)
  10ada3:	5d                   	pop    %ebp
  10ada4:	c3                   	ret

0010ada5 <timeout_rem>:
  10ada5:	55                   	push   %ebp
  10ada6:	8b 15 5c b5 11 00    	mov    0x11b55c,%edx
  10adac:	89 e5                	mov    %esp,%ebp
  10adae:	56                   	push   %esi
  10adaf:	53                   	push   %ebx
  10adb0:	81 fa 5c b5 11 00    	cmp    $0x11b55c,%edx
  10adb6:	75 02                	jne    10adba <timeout_rem+0x15>
  10adb8:	31 d2                	xor    %edx,%edx
  10adba:	8b 35 60 b5 11 00    	mov    0x11b560,%esi
  10adc0:	31 c9                	xor    %ecx,%ecx
  10adc2:	31 db                	xor    %ebx,%ebx
  10adc4:	85 d2                	test   %edx,%edx
  10adc6:	74 12                	je     10adda <timeout_rem+0x35>
  10adc8:	03 4a 0c             	add    0xc(%edx),%ecx
  10adcb:	13 5a 10             	adc    0x10(%edx),%ebx
  10adce:	39 c2                	cmp    %eax,%edx
  10add0:	74 08                	je     10adda <timeout_rem+0x35>
  10add2:	39 d6                	cmp    %edx,%esi
  10add4:	74 04                	je     10adda <timeout_rem+0x35>
  10add6:	8b 12                	mov    (%edx),%edx
  10add8:	eb ea                	jmp    10adc4 <timeout_rem+0x1f>
  10adda:	89 da                	mov    %ebx,%edx
  10addc:	5b                   	pop    %ebx
  10addd:	5e                   	pop    %esi
  10adde:	89 c8                	mov    %ecx,%eax
  10ade0:	5d                   	pop    %ebp
  10ade1:	c3                   	ret

0010ade2 <next_timeout>:
  10ade2:	55                   	push   %ebp
  10ade3:	89 e5                	mov    %esp,%ebp
  10ade5:	53                   	push   %ebx
  10ade6:	8b 1d 5c b5 11 00    	mov    0x11b55c,%ebx
  10adec:	81 fb 5c b5 11 00    	cmp    $0x11b55c,%ebx
  10adf2:	75 07                	jne    10adfb <next_timeout+0x19>
  10adf4:	e8 65 ff ff ff       	call   10ad5e <elapsed>
  10adf9:	eb 24                	jmp    10ae1f <next_timeout+0x3d>
  10adfb:	e8 5e ff ff ff       	call   10ad5e <elapsed>
  10ae00:	85 db                	test   %ebx,%ebx
  10ae02:	74 1b                	je     10ae1f <next_timeout+0x3d>
  10ae04:	8b 4b 0c             	mov    0xc(%ebx),%ecx
  10ae07:	8b 5b 10             	mov    0x10(%ebx),%ebx
  10ae0a:	99                   	cltd
  10ae0b:	29 c1                	sub    %eax,%ecx
  10ae0d:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
  10ae12:	19 d3                	sbb    %edx,%ebx
  10ae14:	39 c8                	cmp    %ecx,%eax
  10ae16:	b8 00 00 00 00       	mov    $0x0,%eax
  10ae1b:	19 d8                	sbb    %ebx,%eax
  10ae1d:	7d 07                	jge    10ae26 <next_timeout+0x44>
  10ae1f:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
  10ae24:	eb 08                	jmp    10ae2e <next_timeout+0x4c>
  10ae26:	89 c8                	mov    %ecx,%eax
  10ae28:	85 db                	test   %ebx,%ebx
  10ae2a:	79 02                	jns    10ae2e <next_timeout+0x4c>
  10ae2c:	31 c0                	xor    %eax,%eax
  10ae2e:	5b                   	pop    %ebx
  10ae2f:	5d                   	pop    %ebp
  10ae30:	c3                   	ret

0010ae31 <z_mrsh_sys_clock_hw_cycles_per_sec_runtime_get>:
  10ae31:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10ae36:	31 d2                	xor    %edx,%edx
  10ae38:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10ae3e:	a1 58 b5 11 00       	mov    0x11b558,%eax
  10ae43:	c3                   	ret

0010ae44 <z_add_timeout>:
  10ae44:	55                   	push   %ebp
  10ae45:	89 e5                	mov    %esp,%ebp
  10ae47:	57                   	push   %edi
  10ae48:	56                   	push   %esi
  10ae49:	53                   	push   %ebx
  10ae4a:	83 ec 0c             	sub    $0xc,%esp
  10ae4d:	83 7d 14 ff          	cmpl   $0xffffffff,0x14(%ebp)
  10ae51:	8b 7d 08             	mov    0x8(%ebp),%edi
  10ae54:	75 0a                	jne    10ae60 <z_add_timeout+0x1c>
  10ae56:	83 7d 10 ff          	cmpl   $0xffffffff,0x10(%ebp)
  10ae5a:	0f 84 f1 01 00 00    	je     10b051 <z_add_timeout+0x20d>
  10ae60:	8b 07                	mov    (%edi),%eax
  10ae62:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10ae65:	85 c0                	test   %eax,%eax
  10ae67:	74 31                	je     10ae9a <z_add_timeout+0x56>
  10ae69:	6a 6e                	push   $0x6e
  10ae6b:	68 4b 2c 11 00       	push   $0x112c4b
  10ae70:	68 6f 2c 11 00       	push   $0x112c6f
  10ae75:	68 ee 10 11 00       	push   $0x1110ee
  10ae7a:	e8 5e 67 ff ff       	call   1015dd <assert_print>
  10ae7f:	83 c4 10             	add    $0x10,%esp
  10ae82:	68 4a 23 11 00       	push   $0x11234a
  10ae87:	e8 51 67 ff ff       	call   1015dd <assert_print>
  10ae8c:	c7 04 24 6e 00 00 00 	movl   $0x6e,(%esp)
  10ae93:	68 4b 2c 11 00       	push   $0x112c4b
  10ae98:	eb 51                	jmp    10aeeb <z_add_timeout+0xa7>
  10ae9a:	8b 45 0c             	mov    0xc(%ebp),%eax
  10ae9d:	89 47 08             	mov    %eax,0x8(%edi)
  10aea0:	9c                   	pushf
  10aea1:	fa                   	cli
  10aea2:	8f 45 e8             	pop    -0x18(%ebp)
  10aea5:	68 0c cd 12 00       	push   $0x12cd0c
  10aeaa:	e8 40 fe ff ff       	call   10acef <z_spin_lock_valid>
  10aeaf:	5e                   	pop    %esi
  10aeb0:	84 c0                	test   %al,%al
  10aeb2:	75 3e                	jne    10aef2 <z_add_timeout+0xae>
  10aeb4:	68 88 00 00 00       	push   $0x88
  10aeb9:	68 61 13 11 00       	push   $0x111361
  10aebe:	68 8e 13 11 00       	push   $0x11138e
  10aec3:	68 ee 10 11 00       	push   $0x1110ee
  10aec8:	e8 10 67 ff ff       	call   1015dd <assert_print>
  10aecd:	83 c4 10             	add    $0x10,%esp
  10aed0:	68 0c cd 12 00       	push   $0x12cd0c
  10aed5:	68 a3 13 11 00       	push   $0x1113a3
  10aeda:	e8 fe 66 ff ff       	call   1015dd <assert_print>
  10aedf:	59                   	pop    %ecx
  10aee0:	5b                   	pop    %ebx
  10aee1:	68 88 00 00 00       	push   $0x88
  10aee6:	68 61 13 11 00       	push   $0x111361
  10aeeb:	e8 de 66 ff ff       	call   1015ce <assert_post_action>
  10aef0:	58                   	pop    %eax
  10aef1:	5a                   	pop    %edx
  10aef2:	68 0c cd 12 00       	push   $0x12cd0c
  10aef7:	e8 4b fe ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10aefc:	58                   	pop    %eax
  10aefd:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  10af02:	3b 45 10             	cmp    0x10(%ebp),%eax
  10af05:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  10af0a:	1b 45 14             	sbb    0x14(%ebp),%eax
  10af0d:	7c 2d                	jl     10af3c <z_add_timeout+0xf8>
  10af0f:	b9 fe ff ff ff       	mov    $0xfffffffe,%ecx
  10af14:	83 cb ff             	or     $0xffffffff,%ebx
  10af17:	2b 0d f0 cb 12 00    	sub    0x12cbf0,%ecx
  10af1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10af20:	1b 1d f4 cb 12 00    	sbb    0x12cbf4,%ebx
  10af26:	2b 4d 10             	sub    0x10(%ebp),%ecx
  10af29:	1b 5d 14             	sbb    0x14(%ebp),%ebx
  10af2c:	39 4d f0             	cmp    %ecx,-0x10(%ebp)
  10af2f:	19 d8                	sbb    %ebx,%eax
  10af31:	7c 1f                	jl     10af52 <z_add_timeout+0x10e>
  10af33:	b9 01 00 00 00       	mov    $0x1,%ecx
  10af38:	31 db                	xor    %ebx,%ebx
  10af3a:	eb 16                	jmp    10af52 <z_add_timeout+0x10e>
  10af3c:	e8 1d fe ff ff       	call   10ad5e <elapsed>
  10af41:	8b 4d 10             	mov    0x10(%ebp),%ecx
  10af44:	83 c1 01             	add    $0x1,%ecx
  10af47:	8b 5d 14             	mov    0x14(%ebp),%ebx
  10af4a:	83 d3 00             	adc    $0x0,%ebx
  10af4d:	99                   	cltd
  10af4e:	01 c1                	add    %eax,%ecx
  10af50:	11 d3                	adc    %edx,%ebx
  10af52:	a1 5c b5 11 00       	mov    0x11b55c,%eax
  10af57:	89 4f 0c             	mov    %ecx,0xc(%edi)
  10af5a:	89 5f 10             	mov    %ebx,0x10(%edi)
  10af5d:	3d 5c b5 11 00       	cmp    $0x11b55c,%eax
  10af62:	74 03                	je     10af67 <z_add_timeout+0x123>
  10af64:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10af67:	a1 60 b5 11 00       	mov    0x11b560,%eax
  10af6c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10af6f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  10af73:	74 52                	je     10afc7 <z_add_timeout+0x183>
  10af75:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10af78:	8b 57 10             	mov    0x10(%edi),%edx
  10af7b:	89 d6                	mov    %edx,%esi
  10af7d:	8b 48 0c             	mov    0xc(%eax),%ecx
  10af80:	8b 58 10             	mov    0x10(%eax),%ebx
  10af83:	8b 47 0c             	mov    0xc(%edi),%eax
  10af86:	39 c8                	cmp    %ecx,%eax
  10af88:	19 de                	sbb    %ebx,%esi
  10af8a:	7d 1f                	jge    10afab <z_add_timeout+0x167>
  10af8c:	29 c1                	sub    %eax,%ecx
  10af8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10af91:	19 d3                	sbb    %edx,%ebx
  10af93:	89 58 10             	mov    %ebx,0x10(%eax)
  10af96:	89 48 0c             	mov    %ecx,0xc(%eax)
  10af99:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10af9c:	8b 40 04             	mov    0x4(%eax),%eax
  10af9f:	89 47 04             	mov    %eax,0x4(%edi)
  10afa2:	89 1f                	mov    %ebx,(%edi)
  10afa4:	89 38                	mov    %edi,(%eax)
  10afa6:	89 7b 04             	mov    %edi,0x4(%ebx)
  10afa9:	eb 30                	jmp    10afdb <z_add_timeout+0x197>
  10afab:	29 c8                	sub    %ecx,%eax
  10afad:	19 da                	sbb    %ebx,%edx
  10afaf:	89 47 0c             	mov    %eax,0xc(%edi)
  10afb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10afb5:	89 57 10             	mov    %edx,0x10(%edi)
  10afb8:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  10afbb:	74 0a                	je     10afc7 <z_add_timeout+0x183>
  10afbd:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10afc0:	8b 00                	mov    (%eax),%eax
  10afc2:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10afc5:	eb a8                	jmp    10af6f <z_add_timeout+0x12b>
  10afc7:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10afca:	c7 07 5c b5 11 00    	movl   $0x11b55c,(%edi)
  10afd0:	89 47 04             	mov    %eax,0x4(%edi)
  10afd3:	89 38                	mov    %edi,(%eax)
  10afd5:	89 3d 60 b5 11 00    	mov    %edi,0x11b560
  10afdb:	a1 5c b5 11 00       	mov    0x11b55c,%eax
  10afe0:	3d 5c b5 11 00       	cmp    $0x11b55c,%eax
  10afe5:	74 1c                	je     10b003 <z_add_timeout+0x1bf>
  10afe7:	39 c7                	cmp    %eax,%edi
  10afe9:	75 18                	jne    10b003 <z_add_timeout+0x1bf>
  10afeb:	83 3d 08 cd 12 00 00 	cmpl   $0x0,0x12cd08
  10aff2:	75 0f                	jne    10b003 <z_add_timeout+0x1bf>
  10aff4:	e8 e9 fd ff ff       	call   10ade2 <next_timeout>
  10aff9:	6a 00                	push   $0x0
  10affb:	50                   	push   %eax
  10affc:	e8 2f b3 ff ff       	call   106330 <sys_clock_set_timeout>
  10b001:	5b                   	pop    %ebx
  10b002:	5e                   	pop    %esi
  10b003:	68 0c cd 12 00       	push   $0x12cd0c
  10b008:	e8 03 fd ff ff       	call   10ad10 <z_spin_unlock_valid>
  10b00d:	59                   	pop    %ecx
  10b00e:	84 c0                	test   %al,%al
  10b010:	75 37                	jne    10b049 <z_add_timeout+0x205>
  10b012:	68 31 01 00 00       	push   $0x131
  10b017:	68 61 13 11 00       	push   $0x111361
  10b01c:	68 e8 13 11 00       	push   $0x1113e8
  10b021:	68 ee 10 11 00       	push   $0x1110ee
  10b026:	e8 b2 65 ff ff       	call   1015dd <assert_print>
  10b02b:	83 c4 10             	add    $0x10,%esp
  10b02e:	68 0c cd 12 00       	push   $0x12cd0c
  10b033:	68 ff 13 11 00       	push   $0x1113ff
  10b038:	e8 a0 65 ff ff       	call   1015dd <assert_print>
  10b03d:	58                   	pop    %eax
  10b03e:	5a                   	pop    %edx
  10b03f:	68 31 01 00 00       	push   $0x131
  10b044:	e9 9d fe ff ff       	jmp    10aee6 <z_add_timeout+0xa2>
  10b049:	0f ba 65 e8 09       	btl    $0x9,-0x18(%ebp)
  10b04e:	73 01                	jae    10b051 <z_add_timeout+0x20d>
  10b050:	fb                   	sti
  10b051:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10b054:	5b                   	pop    %ebx
  10b055:	5e                   	pop    %esi
  10b056:	5f                   	pop    %edi
  10b057:	5d                   	pop    %ebp
  10b058:	c3                   	ret

0010b059 <z_abort_timeout>:
  10b059:	55                   	push   %ebp
  10b05a:	89 e5                	mov    %esp,%ebp
  10b05c:	56                   	push   %esi
  10b05d:	53                   	push   %ebx
  10b05e:	9c                   	pushf
  10b05f:	fa                   	cli
  10b060:	5e                   	pop    %esi
  10b061:	68 0c cd 12 00       	push   $0x12cd0c
  10b066:	e8 84 fc ff ff       	call   10acef <z_spin_lock_valid>
  10b06b:	5a                   	pop    %edx
  10b06c:	84 c0                	test   %al,%al
  10b06e:	75 34                	jne    10b0a4 <z_abort_timeout+0x4b>
  10b070:	68 88 00 00 00       	push   $0x88
  10b075:	68 61 13 11 00       	push   $0x111361
  10b07a:	68 8e 13 11 00       	push   $0x11138e
  10b07f:	68 ee 10 11 00       	push   $0x1110ee
  10b084:	e8 54 65 ff ff       	call   1015dd <assert_print>
  10b089:	83 c4 10             	add    $0x10,%esp
  10b08c:	68 0c cd 12 00       	push   $0x12cd0c
  10b091:	68 a3 13 11 00       	push   $0x1113a3
  10b096:	e8 42 65 ff ff       	call   1015dd <assert_print>
  10b09b:	5b                   	pop    %ebx
  10b09c:	5e                   	pop    %esi
  10b09d:	68 88 00 00 00       	push   $0x88
  10b0a2:	eb 60                	jmp    10b104 <z_abort_timeout+0xab>
  10b0a4:	68 0c cd 12 00       	push   $0x12cd0c
  10b0a9:	e8 99 fc ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10b0ae:	8b 45 08             	mov    0x8(%ebp),%eax
  10b0b1:	59                   	pop    %ecx
  10b0b2:	bb ea ff ff ff       	mov    $0xffffffea,%ebx
  10b0b7:	83 38 00             	cmpl   $0x0,(%eax)
  10b0ba:	74 07                	je     10b0c3 <z_abort_timeout+0x6a>
  10b0bc:	e8 ae fc ff ff       	call   10ad6f <remove_timeout>
  10b0c1:	31 db                	xor    %ebx,%ebx
  10b0c3:	68 0c cd 12 00       	push   $0x12cd0c
  10b0c8:	e8 43 fc ff ff       	call   10ad10 <z_spin_unlock_valid>
  10b0cd:	5a                   	pop    %edx
  10b0ce:	84 c0                	test   %al,%al
  10b0d0:	75 3e                	jne    10b110 <z_abort_timeout+0xb7>
  10b0d2:	68 31 01 00 00       	push   $0x131
  10b0d7:	68 61 13 11 00       	push   $0x111361
  10b0dc:	68 e8 13 11 00       	push   $0x1113e8
  10b0e1:	68 ee 10 11 00       	push   $0x1110ee
  10b0e6:	e8 f2 64 ff ff       	call   1015dd <assert_print>
  10b0eb:	83 c4 10             	add    $0x10,%esp
  10b0ee:	68 0c cd 12 00       	push   $0x12cd0c
  10b0f3:	68 ff 13 11 00       	push   $0x1113ff
  10b0f8:	e8 e0 64 ff ff       	call   1015dd <assert_print>
  10b0fd:	59                   	pop    %ecx
  10b0fe:	5b                   	pop    %ebx
  10b0ff:	68 31 01 00 00       	push   $0x131
  10b104:	68 61 13 11 00       	push   $0x111361
  10b109:	e8 c0 64 ff ff       	call   1015ce <assert_post_action>
  10b10e:	58                   	pop    %eax
  10b10f:	5a                   	pop    %edx
  10b110:	0f ba e6 09          	bt     $0x9,%esi
  10b114:	73 01                	jae    10b117 <z_abort_timeout+0xbe>
  10b116:	fb                   	sti
  10b117:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10b11a:	89 d8                	mov    %ebx,%eax
  10b11c:	5b                   	pop    %ebx
  10b11d:	5e                   	pop    %esi
  10b11e:	5d                   	pop    %ebp
  10b11f:	c3                   	ret

0010b120 <z_timeout_remaining>:
  10b120:	55                   	push   %ebp
  10b121:	89 e5                	mov    %esp,%ebp
  10b123:	57                   	push   %edi
  10b124:	56                   	push   %esi
  10b125:	53                   	push   %ebx
  10b126:	51                   	push   %ecx
  10b127:	8d 4d 08             	lea    0x8(%ebp),%ecx
  10b12a:	57                   	push   %edi
  10b12b:	8b 19                	mov    (%ecx),%ebx
  10b12d:	9c                   	pushf
  10b12e:	fa                   	cli
  10b12f:	8f 45 ec             	pop    -0x14(%ebp)
  10b132:	68 0c cd 12 00       	push   $0x12cd0c
  10b137:	e8 b3 fb ff ff       	call   10acef <z_spin_lock_valid>
  10b13c:	5a                   	pop    %edx
  10b13d:	84 c0                	test   %al,%al
  10b13f:	75 34                	jne    10b175 <z_timeout_remaining+0x55>
  10b141:	68 88 00 00 00       	push   $0x88
  10b146:	68 61 13 11 00       	push   $0x111361
  10b14b:	68 8e 13 11 00       	push   $0x11138e
  10b150:	68 ee 10 11 00       	push   $0x1110ee
  10b155:	e8 83 64 ff ff       	call   1015dd <assert_print>
  10b15a:	83 c4 10             	add    $0x10,%esp
  10b15d:	68 0c cd 12 00       	push   $0x12cd0c
  10b162:	68 a3 13 11 00       	push   $0x1113a3
  10b167:	e8 71 64 ff ff       	call   1015dd <assert_print>
  10b16c:	5b                   	pop    %ebx
  10b16d:	5e                   	pop    %esi
  10b16e:	68 88 00 00 00       	push   $0x88
  10b173:	eb 6a                	jmp    10b1df <z_timeout_remaining+0xbf>
  10b175:	68 0c cd 12 00       	push   $0x12cd0c
  10b17a:	31 f6                	xor    %esi,%esi
  10b17c:	e8 c6 fb ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10b181:	31 ff                	xor    %edi,%edi
  10b183:	59                   	pop    %ecx
  10b184:	83 3b 00             	cmpl   $0x0,(%ebx)
  10b187:	74 15                	je     10b19e <z_timeout_remaining+0x7e>
  10b189:	89 d8                	mov    %ebx,%eax
  10b18b:	e8 15 fc ff ff       	call   10ada5 <timeout_rem>
  10b190:	89 d7                	mov    %edx,%edi
  10b192:	89 c6                	mov    %eax,%esi
  10b194:	e8 c5 fb ff ff       	call   10ad5e <elapsed>
  10b199:	99                   	cltd
  10b19a:	29 c6                	sub    %eax,%esi
  10b19c:	19 d7                	sbb    %edx,%edi
  10b19e:	68 0c cd 12 00       	push   $0x12cd0c
  10b1a3:	e8 68 fb ff ff       	call   10ad10 <z_spin_unlock_valid>
  10b1a8:	5a                   	pop    %edx
  10b1a9:	84 c0                	test   %al,%al
  10b1ab:	75 3e                	jne    10b1eb <z_timeout_remaining+0xcb>
  10b1ad:	68 31 01 00 00       	push   $0x131
  10b1b2:	68 61 13 11 00       	push   $0x111361
  10b1b7:	68 e8 13 11 00       	push   $0x1113e8
  10b1bc:	68 ee 10 11 00       	push   $0x1110ee
  10b1c1:	e8 17 64 ff ff       	call   1015dd <assert_print>
  10b1c6:	83 c4 10             	add    $0x10,%esp
  10b1c9:	68 0c cd 12 00       	push   $0x12cd0c
  10b1ce:	68 ff 13 11 00       	push   $0x1113ff
  10b1d3:	e8 05 64 ff ff       	call   1015dd <assert_print>
  10b1d8:	59                   	pop    %ecx
  10b1d9:	5b                   	pop    %ebx
  10b1da:	68 31 01 00 00       	push   $0x131
  10b1df:	68 61 13 11 00       	push   $0x111361
  10b1e4:	e8 e5 63 ff ff       	call   1015ce <assert_post_action>
  10b1e9:	58                   	pop    %eax
  10b1ea:	5a                   	pop    %edx
  10b1eb:	0f ba 65 ec 09       	btl    $0x9,-0x14(%ebp)
  10b1f0:	73 01                	jae    10b1f3 <z_timeout_remaining+0xd3>
  10b1f2:	fb                   	sti
  10b1f3:	8d 65 f0             	lea    -0x10(%ebp),%esp
  10b1f6:	89 f0                	mov    %esi,%eax
  10b1f8:	89 fa                	mov    %edi,%edx
  10b1fa:	59                   	pop    %ecx
  10b1fb:	5b                   	pop    %ebx
  10b1fc:	5e                   	pop    %esi
  10b1fd:	5f                   	pop    %edi
  10b1fe:	5d                   	pop    %ebp
  10b1ff:	c3                   	ret

0010b200 <z_timeout_expires>:
  10b200:	55                   	push   %ebp
  10b201:	89 e5                	mov    %esp,%ebp
  10b203:	57                   	push   %edi
  10b204:	56                   	push   %esi
  10b205:	53                   	push   %ebx
  10b206:	51                   	push   %ecx
  10b207:	8d 4d 08             	lea    0x8(%ebp),%ecx
  10b20a:	57                   	push   %edi
  10b20b:	8b 19                	mov    (%ecx),%ebx
  10b20d:	9c                   	pushf
  10b20e:	fa                   	cli
  10b20f:	8f 45 ec             	pop    -0x14(%ebp)
  10b212:	68 0c cd 12 00       	push   $0x12cd0c
  10b217:	e8 d3 fa ff ff       	call   10acef <z_spin_lock_valid>
  10b21c:	5a                   	pop    %edx
  10b21d:	84 c0                	test   %al,%al
  10b21f:	75 34                	jne    10b255 <z_timeout_expires+0x55>
  10b221:	68 88 00 00 00       	push   $0x88
  10b226:	68 61 13 11 00       	push   $0x111361
  10b22b:	68 8e 13 11 00       	push   $0x11138e
  10b230:	68 ee 10 11 00       	push   $0x1110ee
  10b235:	e8 a3 63 ff ff       	call   1015dd <assert_print>
  10b23a:	83 c4 10             	add    $0x10,%esp
  10b23d:	68 0c cd 12 00       	push   $0x12cd0c
  10b242:	68 a3 13 11 00       	push   $0x1113a3
  10b247:	e8 91 63 ff ff       	call   1015dd <assert_print>
  10b24c:	5b                   	pop    %ebx
  10b24d:	5e                   	pop    %esi
  10b24e:	68 88 00 00 00       	push   $0x88
  10b253:	eb 68                	jmp    10b2bd <z_timeout_expires+0xbd>
  10b255:	68 0c cd 12 00       	push   $0x12cd0c
  10b25a:	e8 e8 fa ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10b25f:	83 3b 00             	cmpl   $0x0,(%ebx)
  10b262:	59                   	pop    %ecx
  10b263:	8b 35 f0 cb 12 00    	mov    0x12cbf0,%esi
  10b269:	8b 3d f4 cb 12 00    	mov    0x12cbf4,%edi
  10b26f:	74 0b                	je     10b27c <z_timeout_expires+0x7c>
  10b271:	89 d8                	mov    %ebx,%eax
  10b273:	e8 2d fb ff ff       	call   10ada5 <timeout_rem>
  10b278:	01 c6                	add    %eax,%esi
  10b27a:	11 d7                	adc    %edx,%edi
  10b27c:	68 0c cd 12 00       	push   $0x12cd0c
  10b281:	e8 8a fa ff ff       	call   10ad10 <z_spin_unlock_valid>
  10b286:	5a                   	pop    %edx
  10b287:	84 c0                	test   %al,%al
  10b289:	75 3e                	jne    10b2c9 <z_timeout_expires+0xc9>
  10b28b:	68 31 01 00 00       	push   $0x131
  10b290:	68 61 13 11 00       	push   $0x111361
  10b295:	68 e8 13 11 00       	push   $0x1113e8
  10b29a:	68 ee 10 11 00       	push   $0x1110ee
  10b29f:	e8 39 63 ff ff       	call   1015dd <assert_print>
  10b2a4:	83 c4 10             	add    $0x10,%esp
  10b2a7:	68 0c cd 12 00       	push   $0x12cd0c
  10b2ac:	68 ff 13 11 00       	push   $0x1113ff
  10b2b1:	e8 27 63 ff ff       	call   1015dd <assert_print>
  10b2b6:	59                   	pop    %ecx
  10b2b7:	5b                   	pop    %ebx
  10b2b8:	68 31 01 00 00       	push   $0x131
  10b2bd:	68 61 13 11 00       	push   $0x111361
  10b2c2:	e8 07 63 ff ff       	call   1015ce <assert_post_action>
  10b2c7:	58                   	pop    %eax
  10b2c8:	5a                   	pop    %edx
  10b2c9:	0f ba 65 ec 09       	btl    $0x9,-0x14(%ebp)
  10b2ce:	73 01                	jae    10b2d1 <z_timeout_expires+0xd1>
  10b2d0:	fb                   	sti
  10b2d1:	8d 65 f0             	lea    -0x10(%ebp),%esp
  10b2d4:	89 f0                	mov    %esi,%eax
  10b2d6:	89 fa                	mov    %edi,%edx
  10b2d8:	59                   	pop    %ecx
  10b2d9:	5b                   	pop    %ebx
  10b2da:	5e                   	pop    %esi
  10b2db:	5f                   	pop    %edi
  10b2dc:	5d                   	pop    %ebp
  10b2dd:	c3                   	ret

0010b2de <sys_clock_announce>:
  10b2de:	55                   	push   %ebp
  10b2df:	89 e5                	mov    %esp,%ebp
  10b2e1:	57                   	push   %edi
  10b2e2:	56                   	push   %esi
  10b2e3:	53                   	push   %ebx
  10b2e4:	83 ec 0c             	sub    $0xc,%esp
  10b2e7:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10b2ea:	9c                   	pushf
  10b2eb:	fa                   	cli
  10b2ec:	58                   	pop    %eax
  10b2ed:	68 0c cd 12 00       	push   $0x12cd0c
  10b2f2:	89 c7                	mov    %eax,%edi
  10b2f4:	e8 f6 f9 ff ff       	call   10acef <z_spin_lock_valid>
  10b2f9:	5a                   	pop    %edx
  10b2fa:	84 c0                	test   %al,%al
  10b2fc:	75 37                	jne    10b335 <sys_clock_announce+0x57>
  10b2fe:	68 88 00 00 00       	push   $0x88
  10b303:	68 61 13 11 00       	push   $0x111361
  10b308:	68 8e 13 11 00       	push   $0x11138e
  10b30d:	68 ee 10 11 00       	push   $0x1110ee
  10b312:	e8 c6 62 ff ff       	call   1015dd <assert_print>
  10b317:	83 c4 10             	add    $0x10,%esp
  10b31a:	68 0c cd 12 00       	push   $0x12cd0c
  10b31f:	68 a3 13 11 00       	push   $0x1113a3
  10b324:	e8 b4 62 ff ff       	call   1015dd <assert_print>
  10b329:	5b                   	pop    %ebx
  10b32a:	5e                   	pop    %esi
  10b32b:	68 88 00 00 00       	push   $0x88
  10b330:	e9 bf 00 00 00       	jmp    10b3f4 <sys_clock_announce+0x116>
  10b335:	68 0c cd 12 00       	push   $0x12cd0c
  10b33a:	e8 08 fa ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10b33f:	59                   	pop    %ecx
  10b340:	89 1d 08 cd 12 00    	mov    %ebx,0x12cd08
  10b346:	8b 1d 5c b5 11 00    	mov    0x11b55c,%ebx
  10b34c:	81 fb 5c b5 11 00    	cmp    $0x11b55c,%ebx
  10b352:	75 02                	jne    10b356 <sys_clock_announce+0x78>
  10b354:	31 db                	xor    %ebx,%ebx
  10b356:	a1 f0 cb 12 00       	mov    0x12cbf0,%eax
  10b35b:	8b 15 f4 cb 12 00    	mov    0x12cbf4,%edx
  10b361:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10b364:	89 55 f0             	mov    %edx,-0x10(%ebp)
  10b367:	a1 08 cd 12 00       	mov    0x12cd08,%eax
  10b36c:	85 db                	test   %ebx,%ebx
  10b36e:	0f 84 f7 00 00 00    	je     10b46b <sys_clock_announce+0x18d>
  10b374:	8b 4b 0c             	mov    0xc(%ebx),%ecx
  10b377:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  10b37a:	89 c1                	mov    %eax,%ecx
  10b37c:	c1 f9 1f             	sar    $0x1f,%ecx
  10b37f:	8b 75 e8             	mov    -0x18(%ebp),%esi
  10b382:	39 f0                	cmp    %esi,%eax
  10b384:	89 ce                	mov    %ecx,%esi
  10b386:	1b 73 10             	sbb    0x10(%ebx),%esi
  10b389:	0f 8c d6 00 00 00    	jl     10b465 <sys_clock_announce+0x187>
  10b38f:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10b392:	99                   	cltd
  10b393:	03 45 ec             	add    -0x14(%ebp),%eax
  10b396:	13 55 f0             	adc    -0x10(%ebp),%edx
  10b399:	a3 f0 cb 12 00       	mov    %eax,0x12cbf0
  10b39e:	31 c0                	xor    %eax,%eax
  10b3a0:	89 15 f4 cb 12 00    	mov    %edx,0x12cbf4
  10b3a6:	89 43 0c             	mov    %eax,0xc(%ebx)
  10b3a9:	89 43 10             	mov    %eax,0x10(%ebx)
  10b3ac:	89 d8                	mov    %ebx,%eax
  10b3ae:	e8 bc f9 ff ff       	call   10ad6f <remove_timeout>
  10b3b3:	68 0c cd 12 00       	push   $0x12cd0c
  10b3b8:	e8 53 f9 ff ff       	call   10ad10 <z_spin_unlock_valid>
  10b3bd:	5a                   	pop    %edx
  10b3be:	84 c0                	test   %al,%al
  10b3c0:	75 3e                	jne    10b400 <sys_clock_announce+0x122>
  10b3c2:	68 31 01 00 00       	push   $0x131
  10b3c7:	68 61 13 11 00       	push   $0x111361
  10b3cc:	68 e8 13 11 00       	push   $0x1113e8
  10b3d1:	68 ee 10 11 00       	push   $0x1110ee
  10b3d6:	e8 02 62 ff ff       	call   1015dd <assert_print>
  10b3db:	83 c4 10             	add    $0x10,%esp
  10b3de:	68 0c cd 12 00       	push   $0x12cd0c
  10b3e3:	68 ff 13 11 00       	push   $0x1113ff
  10b3e8:	e8 f0 61 ff ff       	call   1015dd <assert_print>
  10b3ed:	5e                   	pop    %esi
  10b3ee:	5f                   	pop    %edi
  10b3ef:	68 31 01 00 00       	push   $0x131
  10b3f4:	68 61 13 11 00       	push   $0x111361
  10b3f9:	e8 d0 61 ff ff       	call   1015ce <assert_post_action>
  10b3fe:	59                   	pop    %ecx
  10b3ff:	5b                   	pop    %ebx
  10b400:	0f ba e7 09          	bt     $0x9,%edi
  10b404:	73 01                	jae    10b407 <sys_clock_announce+0x129>
  10b406:	fb                   	sti
  10b407:	53                   	push   %ebx
  10b408:	ff 53 08             	call   *0x8(%ebx)
  10b40b:	9c                   	pushf
  10b40c:	fa                   	cli
  10b40d:	58                   	pop    %eax
  10b40e:	c7 04 24 0c cd 12 00 	movl   $0x12cd0c,(%esp)
  10b415:	89 c7                	mov    %eax,%edi
  10b417:	e8 d3 f8 ff ff       	call   10acef <z_spin_lock_valid>
  10b41c:	5a                   	pop    %edx
  10b41d:	84 c0                	test   %al,%al
  10b41f:	0f 84 d9 fe ff ff    	je     10b2fe <sys_clock_announce+0x20>
  10b425:	68 0c cd 12 00       	push   $0x12cd0c
  10b42a:	e8 18 f9 ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10b42f:	a1 08 cd 12 00       	mov    0x12cd08,%eax
  10b434:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10b437:	29 c8                	sub    %ecx,%eax
  10b439:	8b 1d 5c b5 11 00    	mov    0x11b55c,%ebx
  10b43f:	5e                   	pop    %esi
  10b440:	81 fb 5c b5 11 00    	cmp    $0x11b55c,%ebx
  10b446:	a3 08 cd 12 00       	mov    %eax,0x12cd08
  10b44b:	0f 85 05 ff ff ff    	jne    10b356 <sys_clock_announce+0x78>
  10b451:	8b 0d f0 cb 12 00    	mov    0x12cbf0,%ecx
  10b457:	8b 1d f4 cb 12 00    	mov    0x12cbf4,%ebx
  10b45d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10b460:	89 5d f0             	mov    %ebx,-0x10(%ebp)
  10b463:	eb 06                	jmp    10b46b <sys_clock_announce+0x18d>
  10b465:	29 43 0c             	sub    %eax,0xc(%ebx)
  10b468:	19 4b 10             	sbb    %ecx,0x10(%ebx)
  10b46b:	99                   	cltd
  10b46c:	03 45 ec             	add    -0x14(%ebp),%eax
  10b46f:	13 55 f0             	adc    -0x10(%ebp),%edx
  10b472:	a3 f0 cb 12 00       	mov    %eax,0x12cbf0
  10b477:	31 c0                	xor    %eax,%eax
  10b479:	89 15 f4 cb 12 00    	mov    %edx,0x12cbf4
  10b47f:	a3 08 cd 12 00       	mov    %eax,0x12cd08
  10b484:	e8 59 f9 ff ff       	call   10ade2 <next_timeout>
  10b489:	6a 00                	push   $0x0
  10b48b:	50                   	push   %eax
  10b48c:	e8 9f ae ff ff       	call   106330 <sys_clock_set_timeout>
  10b491:	5a                   	pop    %edx
  10b492:	59                   	pop    %ecx
  10b493:	68 0c cd 12 00       	push   $0x12cd0c
  10b498:	e8 73 f8 ff ff       	call   10ad10 <z_spin_unlock_valid>
  10b49d:	5b                   	pop    %ebx
  10b49e:	84 c0                	test   %al,%al
  10b4a0:	0f 84 1c ff ff ff    	je     10b3c2 <sys_clock_announce+0xe4>
  10b4a6:	0f ba e7 09          	bt     $0x9,%edi
  10b4aa:	73 01                	jae    10b4ad <sys_clock_announce+0x1cf>
  10b4ac:	fb                   	sti
  10b4ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10b4b0:	5b                   	pop    %ebx
  10b4b1:	5e                   	pop    %esi
  10b4b2:	5f                   	pop    %edi
  10b4b3:	5d                   	pop    %ebp
  10b4b4:	e9 4d f7 ff ff       	jmp    10ac06 <z_time_slice>

0010b4b9 <sys_clock_tick_get>:
  10b4b9:	55                   	push   %ebp
  10b4ba:	89 e5                	mov    %esp,%ebp
  10b4bc:	57                   	push   %edi
  10b4bd:	56                   	push   %esi
  10b4be:	53                   	push   %ebx
  10b4bf:	51                   	push   %ecx
  10b4c0:	9c                   	pushf
  10b4c1:	fa                   	cli
  10b4c2:	5b                   	pop    %ebx
  10b4c3:	68 0c cd 12 00       	push   $0x12cd0c
  10b4c8:	e8 22 f8 ff ff       	call   10acef <z_spin_lock_valid>
  10b4cd:	5e                   	pop    %esi
  10b4ce:	84 c0                	test   %al,%al
  10b4d0:	75 34                	jne    10b506 <sys_clock_tick_get+0x4d>
  10b4d2:	68 88 00 00 00       	push   $0x88
  10b4d7:	68 61 13 11 00       	push   $0x111361
  10b4dc:	68 8e 13 11 00       	push   $0x11138e
  10b4e1:	68 ee 10 11 00       	push   $0x1110ee
  10b4e6:	e8 f2 60 ff ff       	call   1015dd <assert_print>
  10b4eb:	83 c4 10             	add    $0x10,%esp
  10b4ee:	68 0c cd 12 00       	push   $0x12cd0c
  10b4f3:	68 a3 13 11 00       	push   $0x1113a3
  10b4f8:	e8 e0 60 ff ff       	call   1015dd <assert_print>
  10b4fd:	59                   	pop    %ecx
  10b4fe:	5b                   	pop    %ebx
  10b4ff:	68 88 00 00 00       	push   $0x88
  10b504:	eb 64                	jmp    10b56a <sys_clock_tick_get+0xb1>
  10b506:	68 0c cd 12 00       	push   $0x12cd0c
  10b50b:	e8 37 f8 ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10b510:	5e                   	pop    %esi
  10b511:	e8 48 f8 ff ff       	call   10ad5e <elapsed>
  10b516:	89 c6                	mov    %eax,%esi
  10b518:	89 c7                	mov    %eax,%edi
  10b51a:	c1 ff 1f             	sar    $0x1f,%edi
  10b51d:	03 35 f0 cb 12 00    	add    0x12cbf0,%esi
  10b523:	13 3d f4 cb 12 00    	adc    0x12cbf4,%edi
  10b529:	68 0c cd 12 00       	push   $0x12cd0c
  10b52e:	e8 dd f7 ff ff       	call   10ad10 <z_spin_unlock_valid>
  10b533:	5a                   	pop    %edx
  10b534:	84 c0                	test   %al,%al
  10b536:	75 3e                	jne    10b576 <sys_clock_tick_get+0xbd>
  10b538:	68 31 01 00 00       	push   $0x131
  10b53d:	68 61 13 11 00       	push   $0x111361
  10b542:	68 e8 13 11 00       	push   $0x1113e8
  10b547:	68 ee 10 11 00       	push   $0x1110ee
  10b54c:	e8 8c 60 ff ff       	call   1015dd <assert_print>
  10b551:	83 c4 10             	add    $0x10,%esp
  10b554:	68 0c cd 12 00       	push   $0x12cd0c
  10b559:	68 ff 13 11 00       	push   $0x1113ff
  10b55e:	e8 7a 60 ff ff       	call   1015dd <assert_print>
  10b563:	59                   	pop    %ecx
  10b564:	5b                   	pop    %ebx
  10b565:	68 31 01 00 00       	push   $0x131
  10b56a:	68 61 13 11 00       	push   $0x111361
  10b56f:	e8 5a 60 ff ff       	call   1015ce <assert_post_action>
  10b574:	58                   	pop    %eax
  10b575:	5a                   	pop    %edx
  10b576:	0f ba e3 09          	bt     $0x9,%ebx
  10b57a:	73 01                	jae    10b57d <sys_clock_tick_get+0xc4>
  10b57c:	fb                   	sti
  10b57d:	8d 65 f0             	lea    -0x10(%ebp),%esp
  10b580:	89 f0                	mov    %esi,%eax
  10b582:	89 fa                	mov    %edi,%edx
  10b584:	59                   	pop    %ecx
  10b585:	5b                   	pop    %ebx
  10b586:	5e                   	pop    %esi
  10b587:	5f                   	pop    %edi
  10b588:	5d                   	pop    %ebp
  10b589:	c3                   	ret

0010b58a <sys_clock_tick_get_32>:
  10b58a:	55                   	push   %ebp
  10b58b:	89 e5                	mov    %esp,%ebp
  10b58d:	e8 27 ff ff ff       	call   10b4b9 <sys_clock_tick_get>
  10b592:	5d                   	pop    %ebp
  10b593:	c3                   	ret

0010b594 <z_mrsh_k_uptime_ticks>:
  10b594:	55                   	push   %ebp
  10b595:	89 e5                	mov    %esp,%ebp
  10b597:	57                   	push   %edi
  10b598:	56                   	push   %esi
  10b599:	53                   	push   %ebx
  10b59a:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10b59f:	8b 55 20             	mov    0x20(%ebp),%edx
  10b5a2:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10b5a5:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10b5ab:	e8 09 ff ff ff       	call   10b4b9 <sys_clock_tick_get>
  10b5b0:	83 fb f7             	cmp    $0xfffffff7,%ebx
  10b5b3:	76 2c                	jbe    10b5e1 <z_mrsh_k_uptime_ticks+0x4d>
  10b5b5:	68 c7 12 11 00       	push   $0x1112c7
  10b5ba:	6a 08                	push   $0x8
  10b5bc:	53                   	push   %ebx
  10b5bd:	68 f4 0b 11 00       	push   $0x110bf4
  10b5c2:	6a 45                	push   $0x45
  10b5c4:	68 7c 12 11 00       	push   $0x11127c
  10b5c9:	e8 2a 6f ff ff       	call   1024f8 <z_log_minimal_printk>
  10b5ce:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10b5d3:	83 c4 18             	add    $0x18,%esp
  10b5d6:	ff b0 88 00 00 00    	push   0x88(%eax)
  10b5dc:	e8 e5 8b ff ff       	call   1041c6 <arch_syscall_oops>
  10b5e1:	6a 01                	push   $0x1
  10b5e3:	89 c6                	mov    %eax,%esi
  10b5e5:	6a 08                	push   $0x8
  10b5e7:	89 d7                	mov    %edx,%edi
  10b5e9:	53                   	push   %ebx
  10b5ea:	e8 a7 81 ff ff       	call   103796 <arch_buffer_validate>
  10b5ef:	83 c4 0c             	add    $0xc,%esp
  10b5f2:	85 c0                	test   %eax,%eax
  10b5f4:	75 bf                	jne    10b5b5 <z_mrsh_k_uptime_ticks+0x21>
  10b5f6:	89 33                	mov    %esi,(%ebx)
  10b5f8:	89 7b 04             	mov    %edi,0x4(%ebx)
  10b5fb:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10b600:	31 d2                	xor    %edx,%edx
  10b602:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10b608:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10b60b:	31 c0                	xor    %eax,%eax
  10b60d:	5b                   	pop    %ebx
  10b60e:	5e                   	pop    %esi
  10b60f:	5f                   	pop    %edi
  10b610:	5d                   	pop    %ebp
  10b611:	c3                   	ret

0010b612 <sys_timepoint_calc>:
  10b612:	55                   	push   %ebp
  10b613:	89 e5                	mov    %esp,%ebp
  10b615:	57                   	push   %edi
  10b616:	56                   	push   %esi
  10b617:	8b 7d 10             	mov    0x10(%ebp),%edi
  10b61a:	8b 75 0c             	mov    0xc(%ebp),%esi
  10b61d:	83 ff ff             	cmp    $0xffffffff,%edi
  10b620:	75 0a                	jne    10b62c <sys_timepoint_calc+0x1a>
  10b622:	83 c8 ff             	or     $0xffffffff,%eax
  10b625:	83 fe ff             	cmp    $0xffffffff,%esi
  10b628:	89 c2                	mov    %eax,%edx
  10b62a:	74 23                	je     10b64f <sys_timepoint_calc+0x3d>
  10b62c:	89 f9                	mov    %edi,%ecx
  10b62e:	31 c0                	xor    %eax,%eax
  10b630:	31 d2                	xor    %edx,%edx
  10b632:	09 f1                	or     %esi,%ecx
  10b634:	74 19                	je     10b64f <sys_timepoint_calc+0x3d>
  10b636:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  10b63b:	83 ca ff             	or     $0xffffffff,%edx
  10b63e:	29 f0                	sub    %esi,%eax
  10b640:	19 fa                	sbb    %edi,%edx
  10b642:	85 d2                	test   %edx,%edx
  10b644:	79 09                	jns    10b64f <sys_timepoint_calc+0x3d>
  10b646:	e8 6e fe ff ff       	call   10b4b9 <sys_clock_tick_get>
  10b64b:	01 f0                	add    %esi,%eax
  10b64d:	11 fa                	adc    %edi,%edx
  10b64f:	8b 7d 08             	mov    0x8(%ebp),%edi
  10b652:	89 07                	mov    %eax,(%edi)
  10b654:	89 57 04             	mov    %edx,0x4(%edi)
  10b657:	5e                   	pop    %esi
  10b658:	89 f8                	mov    %edi,%eax
  10b65a:	5f                   	pop    %edi
  10b65b:	5d                   	pop    %ebp
  10b65c:	c2 04 00             	ret    $0x4

0010b65f <sys_timepoint_timeout>:
  10b65f:	55                   	push   %ebp
  10b660:	89 e5                	mov    %esp,%ebp
  10b662:	57                   	push   %edi
  10b663:	56                   	push   %esi
  10b664:	53                   	push   %ebx
  10b665:	8b 7d 10             	mov    0x10(%ebp),%edi
  10b668:	8b 75 0c             	mov    0xc(%ebp),%esi
  10b66b:	83 ff ff             	cmp    $0xffffffff,%edi
  10b66e:	75 0a                	jne    10b67a <sys_timepoint_timeout+0x1b>
  10b670:	83 c9 ff             	or     $0xffffffff,%ecx
  10b673:	83 fe ff             	cmp    $0xffffffff,%esi
  10b676:	89 cb                	mov    %ecx,%ebx
  10b678:	74 29                	je     10b6a3 <sys_timepoint_timeout+0x44>
  10b67a:	89 f8                	mov    %edi,%eax
  10b67c:	31 c9                	xor    %ecx,%ecx
  10b67e:	31 db                	xor    %ebx,%ebx
  10b680:	09 f0                	or     %esi,%eax
  10b682:	74 1f                	je     10b6a3 <sys_timepoint_timeout+0x44>
  10b684:	e8 30 fe ff ff       	call   10b4b9 <sys_clock_tick_get>
  10b689:	b9 00 00 00 00       	mov    $0x0,%ecx
  10b68e:	89 d3                	mov    %edx,%ebx
  10b690:	39 f0                	cmp    %esi,%eax
  10b692:	19 fb                	sbb    %edi,%ebx
  10b694:	bb 00 00 00 00       	mov    $0x0,%ebx
  10b699:	73 08                	jae    10b6a3 <sys_timepoint_timeout+0x44>
  10b69b:	89 f1                	mov    %esi,%ecx
  10b69d:	89 fb                	mov    %edi,%ebx
  10b69f:	29 c1                	sub    %eax,%ecx
  10b6a1:	19 d3                	sbb    %edx,%ebx
  10b6a3:	8b 45 08             	mov    0x8(%ebp),%eax
  10b6a6:	89 08                	mov    %ecx,(%eax)
  10b6a8:	89 58 04             	mov    %ebx,0x4(%eax)
  10b6ab:	5b                   	pop    %ebx
  10b6ac:	5e                   	pop    %esi
  10b6ad:	5f                   	pop    %edi
  10b6ae:	5d                   	pop    %ebp
  10b6af:	c2 04 00             	ret    $0x4

0010b6b2 <frame_mapped_set>:
  10b6b2:	55                   	push   %ebp
  10b6b3:	89 e5                	mov    %esp,%ebp
  10b6b5:	53                   	push   %ebx
  10b6b6:	89 c3                	mov    %eax,%ebx
  10b6b8:	8b 00                	mov    (%eax),%eax
  10b6ba:	a8 01                	test   $0x1,%al
  10b6bc:	74 39                	je     10b6f7 <frame_mapped_set+0x45>
  10b6be:	68 bf 01 00 00       	push   $0x1bf
  10b6c3:	81 eb 80 4a 12 00    	sub    $0x124a80,%ebx
  10b6c9:	c1 e3 0a             	shl    $0xa,%ebx
  10b6cc:	68 8f 2c 11 00       	push   $0x112c8f
  10b6d1:	68 af 2c 11 00       	push   $0x112caf
  10b6d6:	68 ee 10 11 00       	push   $0x1110ee
  10b6db:	e8 fd 5e ff ff       	call   1015dd <assert_print>
  10b6e0:	83 c4 10             	add    $0x10,%esp
  10b6e3:	53                   	push   %ebx
  10b6e4:	68 cd 2c 11 00       	push   $0x112ccd
  10b6e9:	e8 ef 5e ff ff       	call   1015dd <assert_print>
  10b6ee:	58                   	pop    %eax
  10b6ef:	5a                   	pop    %edx
  10b6f0:	68 bf 01 00 00       	push   $0x1bf
  10b6f5:	eb 3b                	jmp    10b732 <frame_mapped_set+0x80>
  10b6f7:	a8 02                	test   $0x2,%al
  10b6f9:	74 43                	je     10b73e <frame_mapped_set+0x8c>
  10b6fb:	68 c1 01 00 00       	push   $0x1c1
  10b700:	81 eb 80 4a 12 00    	sub    $0x124a80,%ebx
  10b706:	c1 e3 0a             	shl    $0xa,%ebx
  10b709:	68 8f 2c 11 00       	push   $0x112c8f
  10b70e:	68 10 2d 11 00       	push   $0x112d10
  10b713:	68 ee 10 11 00       	push   $0x1110ee
  10b718:	e8 c0 5e ff ff       	call   1015dd <assert_print>
  10b71d:	83 c4 10             	add    $0x10,%esp
  10b720:	53                   	push   %ebx
  10b721:	68 32 2d 11 00       	push   $0x112d32
  10b726:	e8 b2 5e ff ff       	call   1015dd <assert_print>
  10b72b:	59                   	pop    %ecx
  10b72c:	5b                   	pop    %ebx
  10b72d:	68 c1 01 00 00       	push   $0x1c1
  10b732:	68 8f 2c 11 00       	push   $0x112c8f
  10b737:	e8 92 5e ff ff       	call   1015ce <assert_post_action>
  10b73c:	58                   	pop    %eax
  10b73d:	5a                   	pop    %edx
  10b73e:	a8 08                	test   $0x8,%al
  10b740:	74 46                	je     10b788 <frame_mapped_set+0xd6>
  10b742:	a8 04                	test   $0x4,%al
  10b744:	75 42                	jne    10b788 <frame_mapped_set+0xd6>
  10b746:	68 c9 01 00 00       	push   $0x1c9
  10b74b:	68 8f 2c 11 00       	push   $0x112c8f
  10b750:	68 6d 2d 11 00       	push   $0x112d6d
  10b755:	68 ee 10 11 00       	push   $0x1110ee
  10b75a:	e8 7e 5e ff ff       	call   1015dd <assert_print>
  10b75f:	8b 03                	mov    (%ebx),%eax
  10b761:	83 c4 10             	add    $0x10,%esp
  10b764:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10b769:	81 eb 80 4a 12 00    	sub    $0x124a80,%ebx
  10b76f:	c1 e3 0a             	shl    $0xa,%ebx
  10b772:	50                   	push   %eax
  10b773:	53                   	push   %ebx
  10b774:	68 af 2d 11 00       	push   $0x112daf
  10b779:	e8 5f 5e ff ff       	call   1015dd <assert_print>
  10b77e:	83 c4 0c             	add    $0xc,%esp
  10b781:	68 c9 01 00 00       	push   $0x1c9
  10b786:	eb aa                	jmp    10b732 <frame_mapped_set+0x80>
  10b788:	25 ff 0f 00 00       	and    $0xfff,%eax
  10b78d:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  10b793:	09 d0                	or     %edx,%eax
  10b795:	83 c8 08             	or     $0x8,%eax
  10b798:	89 03                	mov    %eax,(%ebx)
  10b79a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10b79d:	c9                   	leave
  10b79e:	c3                   	ret

0010b79f <k_mem_assert_phys_aligned>:
  10b79f:	a9 ff 0f 00 00       	test   $0xfff,%eax
  10b7a4:	74 40                	je     10b7e6 <k_mem_assert_phys_aligned+0x47>
  10b7a6:	55                   	push   %ebp
  10b7a7:	89 e5                	mov    %esp,%ebp
  10b7a9:	53                   	push   %ebx
  10b7aa:	68 00 01 00 00       	push   $0x100
  10b7af:	89 c3                	mov    %eax,%ebx
  10b7b1:	68 e7 2d 11 00       	push   $0x112de7
  10b7b6:	68 0f 2e 11 00       	push   $0x112e0f
  10b7bb:	68 ee 10 11 00       	push   $0x1110ee
  10b7c0:	e8 18 5e ff ff       	call   1015dd <assert_print>
  10b7c5:	83 c4 10             	add    $0x10,%esp
  10b7c8:	53                   	push   %ebx
  10b7c9:	68 23 2e 11 00       	push   $0x112e23
  10b7ce:	e8 0a 5e ff ff       	call   1015dd <assert_print>
  10b7d3:	58                   	pop    %eax
  10b7d4:	5a                   	pop    %edx
  10b7d5:	68 00 01 00 00       	push   $0x100
  10b7da:	68 e7 2d 11 00       	push   $0x112de7
  10b7df:	e8 ea 5d ff ff       	call   1015ce <assert_post_action>
  10b7e4:	59                   	pop    %ecx
  10b7e5:	5b                   	pop    %ebx
  10b7e6:	c3                   	ret

0010b7e7 <k_mem_phys_to_page_frame>:
  10b7e7:	55                   	push   %ebp
  10b7e8:	89 e5                	mov    %esp,%ebp
  10b7ea:	53                   	push   %ebx
  10b7eb:	89 c3                	mov    %eax,%ebx
  10b7ed:	e8 ad ff ff ff       	call   10b79f <k_mem_assert_phys_aligned>
  10b7f2:	81 fb ff ff ff 01    	cmp    $0x1ffffff,%ebx
  10b7f8:	76 3a                	jbe    10b834 <k_mem_phys_to_page_frame+0x4d>
  10b7fa:	68 1e 01 00 00       	push   $0x11e
  10b7ff:	68 e7 2d 11 00       	push   $0x112de7
  10b804:	68 50 2e 11 00       	push   $0x112e50
  10b809:	68 ee 10 11 00       	push   $0x1110ee
  10b80e:	e8 ca 5d ff ff       	call   1015dd <assert_print>
  10b813:	83 c4 10             	add    $0x10,%esp
  10b816:	53                   	push   %ebx
  10b817:	68 6a 2e 11 00       	push   $0x112e6a
  10b81c:	e8 bc 5d ff ff       	call   1015dd <assert_print>
  10b821:	58                   	pop    %eax
  10b822:	5a                   	pop    %edx
  10b823:	68 1e 01 00 00       	push   $0x11e
  10b828:	68 e7 2d 11 00       	push   $0x112de7
  10b82d:	e8 9c 5d ff ff       	call   1015ce <assert_post_action>
  10b832:	59                   	pop    %ecx
  10b833:	5b                   	pop    %ebx
  10b834:	c1 eb 0c             	shr    $0xc,%ebx
  10b837:	8d 04 9d 80 4a 12 00 	lea    0x124a80(,%ebx,4),%eax
  10b83e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10b841:	c9                   	leave
  10b842:	c3                   	ret

0010b843 <virt_region_free>:
  10b843:	55                   	push   %ebp
  10b844:	89 e5                	mov    %esp,%ebp
  10b846:	56                   	push   %esi
  10b847:	53                   	push   %ebx
  10b848:	89 c6                	mov    %eax,%esi
  10b84a:	80 3d 31 cd 12 00 00 	cmpb   $0x0,0x12cd31
  10b851:	89 d3                	mov    %edx,%ebx
  10b853:	75 2b                	jne    10b880 <virt_region_free+0x3d>
  10b855:	b8 00 00 80 00       	mov    $0x800000,%eax
  10b85a:	2d 00 90 15 00       	sub    $0x159000,%eax
  10b85f:	c1 e8 0c             	shr    $0xc,%eax
  10b862:	50                   	push   %eax
  10b863:	b8 00 90 15 00       	mov    $0x159000,%eax
  10b868:	c1 e8 0c             	shr    $0xc,%eax
  10b86b:	50                   	push   %eax
  10b86c:	68 64 b5 11 00       	push   $0x11b564
  10b871:	e8 68 6c ff ff       	call   1024de <sys_bitarray_set_region>
  10b876:	83 c4 0c             	add    $0xc,%esp
  10b879:	c6 05 31 cd 12 00 01 	movb   $0x1,0x12cd31
  10b880:	81 fe 00 90 15 00    	cmp    $0x159000,%esi
  10b886:	72 0b                	jb     10b893 <virt_region_free+0x50>
  10b888:	8d 44 1e ff          	lea    -0x1(%esi,%ebx,1),%eax
  10b88c:	3d ff ff 7f 00       	cmp    $0x7fffff,%eax
  10b891:	76 3c                	jbe    10b8cf <virt_region_free+0x8c>
  10b893:	68 ff 00 00 00       	push   $0xff
  10b898:	68 8f 2c 11 00       	push   $0x112c8f
  10b89d:	68 8f 2e 11 00       	push   $0x112e8f
  10b8a2:	68 ee 10 11 00       	push   $0x1110ee
  10b8a7:	e8 31 5d ff ff       	call   1015dd <assert_print>
  10b8ac:	83 c4 10             	add    $0x10,%esp
  10b8af:	53                   	push   %ebx
  10b8b0:	56                   	push   %esi
  10b8b1:	68 06 2f 11 00       	push   $0x112f06
  10b8b6:	e8 22 5d ff ff       	call   1015dd <assert_print>
  10b8bb:	83 c4 0c             	add    $0xc,%esp
  10b8be:	68 ff 00 00 00       	push   $0xff
  10b8c3:	68 8f 2c 11 00       	push   $0x112c8f
  10b8c8:	e8 01 5d ff ff       	call   1015ce <assert_post_action>
  10b8cd:	58                   	pop    %eax
  10b8ce:	5a                   	pop    %edx
  10b8cf:	b8 00 00 80 00       	mov    $0x800000,%eax
  10b8d4:	29 d8                	sub    %ebx,%eax
  10b8d6:	c1 eb 0c             	shr    $0xc,%ebx
  10b8d9:	29 f0                	sub    %esi,%eax
  10b8db:	c1 e8 0c             	shr    $0xc,%eax
  10b8de:	50                   	push   %eax
  10b8df:	53                   	push   %ebx
  10b8e0:	68 64 b5 11 00       	push   $0x11b564
  10b8e5:	e8 80 6a ff ff       	call   10236a <sys_bitarray_free>
  10b8ea:	83 c4 0c             	add    $0xc,%esp
  10b8ed:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10b8f0:	5b                   	pop    %ebx
  10b8f1:	5e                   	pop    %esi
  10b8f2:	5d                   	pop    %ebp
  10b8f3:	c3                   	ret

0010b8f4 <free_page_frame_list_put>:
  10b8f4:	55                   	push   %ebp
  10b8f5:	89 e5                	mov    %esp,%ebp
  10b8f7:	53                   	push   %ebx
  10b8f8:	83 38 00             	cmpl   $0x0,(%eax)
  10b8fb:	89 c3                	mov    %eax,%ebx
  10b8fd:	74 43                	je     10b942 <free_page_frame_list_put+0x4e>
  10b8ff:	68 a3 01 00 00       	push   $0x1a3
  10b904:	81 eb 80 4a 12 00    	sub    $0x124a80,%ebx
  10b90a:	c1 e3 0a             	shl    $0xa,%ebx
  10b90d:	68 8f 2c 11 00       	push   $0x112c8f
  10b912:	68 30 2f 11 00       	push   $0x112f30
  10b917:	68 ee 10 11 00       	push   $0x1110ee
  10b91c:	e8 bc 5c ff ff       	call   1015dd <assert_print>
  10b921:	83 c4 10             	add    $0x10,%esp
  10b924:	53                   	push   %ebx
  10b925:	68 52 2f 11 00       	push   $0x112f52
  10b92a:	e8 ae 5c ff ff       	call   1015dd <assert_print>
  10b92f:	58                   	pop    %eax
  10b930:	5a                   	pop    %edx
  10b931:	68 a3 01 00 00       	push   $0x1a3
  10b936:	68 8f 2c 11 00       	push   $0x112c8f
  10b93b:	e8 8e 5c ff ff       	call   1015ce <assert_post_action>
  10b940:	59                   	pop    %ecx
  10b941:	5b                   	pop    %ebx
  10b942:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
  10b948:	8b 15 18 cd 12 00    	mov    0x12cd18,%edx
  10b94e:	85 d2                	test   %edx,%edx
  10b950:	75 0c                	jne    10b95e <free_page_frame_list_put+0x6a>
  10b952:	a3 18 cd 12 00       	mov    %eax,0x12cd18
  10b957:	a3 14 cd 12 00       	mov    %eax,0x12cd14
  10b95c:	eb 0f                	jmp    10b96d <free_page_frame_list_put+0x79>
  10b95e:	8b 02                	mov    (%edx),%eax
  10b960:	83 e0 03             	and    $0x3,%eax
  10b963:	09 d8                	or     %ebx,%eax
  10b965:	89 02                	mov    %eax,(%edx)
  10b967:	89 1d 18 cd 12 00    	mov    %ebx,0x12cd18
  10b96d:	ff 05 10 cd 12 00    	incl   0x12cd10
  10b973:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10b976:	c9                   	leave
  10b977:	c3                   	ret

0010b978 <virt_region_alloc>:
  10b978:	55                   	push   %ebp
  10b979:	89 e5                	mov    %esp,%ebp
  10b97b:	57                   	push   %edi
  10b97c:	56                   	push   %esi
  10b97d:	89 d6                	mov    %edx,%esi
  10b97f:	53                   	push   %ebx
  10b980:	89 c3                	mov    %eax,%ebx
  10b982:	83 ec 0c             	sub    $0xc,%esp
  10b985:	80 3d 31 cd 12 00 00 	cmpb   $0x0,0x12cd31
  10b98c:	75 2b                	jne    10b9b9 <virt_region_alloc+0x41>
  10b98e:	b8 00 00 80 00       	mov    $0x800000,%eax
  10b993:	2d 00 90 15 00       	sub    $0x159000,%eax
  10b998:	c1 e8 0c             	shr    $0xc,%eax
  10b99b:	50                   	push   %eax
  10b99c:	b8 00 90 15 00       	mov    $0x159000,%eax
  10b9a1:	c1 e8 0c             	shr    $0xc,%eax
  10b9a4:	50                   	push   %eax
  10b9a5:	68 64 b5 11 00       	push   $0x11b564
  10b9aa:	e8 2f 6b ff ff       	call   1024de <sys_bitarray_set_region>
  10b9af:	83 c4 0c             	add    $0xc,%esp
  10b9b2:	c6 05 31 cd 12 00 01 	movb   $0x1,0x12cd31
  10b9b9:	8d 84 33 00 f0 ff ff 	lea    -0x1000(%ebx,%esi,1),%eax
  10b9c0:	8d 55 f0             	lea    -0x10(%ebp),%edx
  10b9c3:	52                   	push   %edx
  10b9c4:	89 c7                	mov    %eax,%edi
  10b9c6:	c1 e8 0c             	shr    $0xc,%eax
  10b9c9:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
  10b9cf:	50                   	push   %eax
  10b9d0:	68 64 b5 11 00       	push   $0x11b564
  10b9d5:	e8 db 67 ff ff       	call   1021b5 <sys_bitarray_alloc>
  10b9da:	83 c4 0c             	add    $0xc,%esp
  10b9dd:	85 c0                	test   %eax,%eax
  10b9df:	74 0f                	je     10b9f0 <virt_region_alloc+0x78>
  10b9e1:	53                   	push   %ebx
  10b9e2:	6a 45                	push   $0x45
  10b9e4:	68 88 2f 11 00       	push   $0x112f88
  10b9e9:	e8 0a 6b ff ff       	call   1024f8 <z_log_minimal_printk>
  10b9ee:	eb 65                	jmp    10ba55 <virt_region_alloc+0xdd>
  10b9f0:	b8 00 08 00 00       	mov    $0x800,%eax
  10b9f5:	2b 45 f0             	sub    -0x10(%ebp),%eax
  10b9f8:	c1 e0 0c             	shl    $0xc,%eax
  10b9fb:	89 c1                	mov    %eax,%ecx
  10b9fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10ba00:	29 f9                	sub    %edi,%ecx
  10ba02:	39 fb                	cmp    %edi,%ebx
  10ba04:	73 37                	jae    10ba3d <virt_region_alloc+0xc5>
  10ba06:	8d 44 31 ff          	lea    -0x1(%ecx,%esi,1),%eax
  10ba0a:	31 d2                	xor    %edx,%edx
  10ba0c:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10ba0f:	f7 f6                	div    %esi
  10ba11:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10ba14:	8b 75 e8             	mov    -0x18(%ebp),%esi
  10ba17:	29 d6                	sub    %edx,%esi
  10ba19:	29 c7                	sub    %eax,%edi
  10ba1b:	89 c8                	mov    %ecx,%eax
  10ba1d:	8d 14 37             	lea    (%edi,%esi,1),%edx
  10ba20:	e8 1e fe ff ff       	call   10b843 <virt_region_free>
  10ba25:	8d 04 1e             	lea    (%esi,%ebx,1),%eax
  10ba28:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  10ba2b:	75 04                	jne    10ba31 <virt_region_alloc+0xb9>
  10ba2d:	89 f1                	mov    %esi,%ecx
  10ba2f:	eb 0c                	jmp    10ba3d <virt_region_alloc+0xc5>
  10ba31:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10ba34:	29 c2                	sub    %eax,%edx
  10ba36:	e8 08 fe ff ff       	call   10b843 <virt_region_free>
  10ba3b:	eb f0                	jmp    10ba2d <virt_region_alloc+0xb5>
  10ba3d:	89 c8                	mov    %ecx,%eax
  10ba3f:	81 f9 00 90 15 00    	cmp    $0x159000,%ecx
  10ba45:	73 13                	jae    10ba5a <virt_region_alloc+0xe2>
  10ba47:	ff 75 f0             	push   -0x10(%ebp)
  10ba4a:	53                   	push   %ebx
  10ba4b:	68 64 b5 11 00       	push   $0x11b564
  10ba50:	e8 15 69 ff ff       	call   10236a <sys_bitarray_free>
  10ba55:	83 c4 0c             	add    $0xc,%esp
  10ba58:	31 c0                	xor    %eax,%eax
  10ba5a:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10ba5d:	5b                   	pop    %ebx
  10ba5e:	5e                   	pop    %esi
  10ba5f:	5f                   	pop    %edi
  10ba60:	5d                   	pop    %ebp
  10ba61:	c3                   	ret

0010ba62 <k_mem_map_phys_guard>:
  10ba62:	55                   	push   %ebp
  10ba63:	89 e5                	mov    %esp,%ebp
  10ba65:	57                   	push   %edi
  10ba66:	56                   	push   %esi
  10ba67:	53                   	push   %ebx
  10ba68:	83 ec 14             	sub    $0x14,%esp
  10ba6b:	8b 45 14             	mov    0x14(%ebp),%eax
  10ba6e:	8b 7d 10             	mov    0x10(%ebp),%edi
  10ba71:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10ba74:	89 f8                	mov    %edi,%eax
  10ba76:	25 20 00 01 00       	and    $0x10020,%eax
  10ba7b:	8b 75 0c             	mov    0xc(%ebp),%esi
  10ba7e:	3d 20 00 01 00       	cmp    $0x10020,%eax
  10ba83:	75 2f                	jne    10bab4 <k_mem_map_phys_guard+0x52>
  10ba85:	68 42 02 00 00       	push   $0x242
  10ba8a:	68 8f 2c 11 00       	push   $0x112c8f
  10ba8f:	68 4c 30 11 00       	push   $0x11304c
  10ba94:	68 ee 10 11 00       	push   $0x1110ee
  10ba99:	e8 3f 5b ff ff       	call   1015dd <assert_print>
  10ba9e:	83 c4 10             	add    $0x10,%esp
  10baa1:	68 91 30 11 00       	push   $0x113091
  10baa6:	e8 32 5b ff ff       	call   1015dd <assert_print>
  10baab:	c7 04 24 42 02 00 00 	movl   $0x242,(%esp)
  10bab2:	eb 3c                	jmp    10baf0 <k_mem_map_phys_guard+0x8e>
  10bab4:	f7 c6 ff 0f 00 00    	test   $0xfff,%esi
  10baba:	74 40                	je     10bafc <k_mem_map_phys_guard+0x9a>
  10babc:	68 45 02 00 00       	push   $0x245
  10bac1:	68 8f 2c 11 00       	push   $0x112c8f
  10bac6:	68 cd 30 11 00       	push   $0x1130cd
  10bacb:	68 ee 10 11 00       	push   $0x1110ee
  10bad0:	e8 08 5b ff ff       	call   1015dd <assert_print>
  10bad5:	83 c4 10             	add    $0x10,%esp
  10bad8:	68 24 0c 11 00       	push   $0x110c24
  10badd:	56                   	push   %esi
  10bade:	68 e1 30 11 00       	push   $0x1130e1
  10bae3:	e8 f5 5a ff ff       	call   1015dd <assert_print>
  10bae8:	83 c4 0c             	add    $0xc,%esp
  10baeb:	68 45 02 00 00       	push   $0x245
  10baf0:	68 8f 2c 11 00       	push   $0x112c8f
  10baf5:	e8 d4 5a ff ff       	call   1015ce <assert_post_action>
  10bafa:	58                   	pop    %eax
  10bafb:	5a                   	pop    %edx
  10bafc:	85 f6                	test   %esi,%esi
  10bafe:	75 2f                	jne    10bb2f <k_mem_map_phys_guard+0xcd>
  10bb00:	68 47 02 00 00       	push   $0x247
  10bb05:	68 8f 2c 11 00       	push   $0x112c8f
  10bb0a:	68 03 31 11 00       	push   $0x113103
  10bb0f:	68 ee 10 11 00       	push   $0x1110ee
  10bb14:	e8 c4 5a ff ff       	call   1015dd <assert_print>
  10bb19:	83 c4 10             	add    $0x10,%esp
  10bb1c:	68 0d 31 11 00       	push   $0x11310d
  10bb21:	e8 b7 5a ff ff       	call   1015dd <assert_print>
  10bb26:	c7 04 24 47 02 00 00 	movl   $0x247,(%esp)
  10bb2d:	eb c1                	jmp    10baf0 <k_mem_map_phys_guard+0x8e>
  10bb2f:	80 7d e8 00          	cmpb   $0x0,-0x18(%ebp)
  10bb33:	74 40                	je     10bb75 <k_mem_map_phys_guard+0x113>
  10bb35:	80 3d 32 cd 12 00 00 	cmpb   $0x0,0x12cd32
  10bb3c:	75 37                	jne    10bb75 <k_mem_map_phys_guard+0x113>
  10bb3e:	68 48 02 00 00       	push   $0x248
  10bb43:	68 8f 2c 11 00       	push   $0x112c8f
  10bb48:	68 29 31 11 00       	push   $0x113129
  10bb4d:	68 ee 10 11 00       	push   $0x1110ee
  10bb52:	e8 86 5a ff ff       	call   1015dd <assert_print>
  10bb57:	83 c4 10             	add    $0x10,%esp
  10bb5a:	68 24 0c 11 00       	push   $0x110c24
  10bb5f:	68 d8 2f 11 00       	push   $0x112fd8
  10bb64:	e8 74 5a ff ff       	call   1015dd <assert_print>
  10bb69:	5f                   	pop    %edi
  10bb6a:	58                   	pop    %eax
  10bb6b:	68 48 02 00 00       	push   $0x248
  10bb70:	e9 7b ff ff ff       	jmp    10baf0 <k_mem_map_phys_guard+0x8e>
  10bb75:	f7 c7 07 00 00 00    	test   $0x7,%edi
  10bb7b:	74 37                	je     10bbb4 <k_mem_map_phys_guard+0x152>
  10bb7d:	68 4a 02 00 00       	push   $0x24a
  10bb82:	68 8f 2c 11 00       	push   $0x112c8f
  10bb87:	68 5a 31 11 00       	push   $0x11315a
  10bb8c:	68 ee 10 11 00       	push   $0x1110ee
  10bb91:	e8 47 5a ff ff       	call   1015dd <assert_print>
  10bb96:	83 c4 10             	add    $0x10,%esp
  10bb99:	68 24 0c 11 00       	push   $0x110c24
  10bb9e:	68 7d 31 11 00       	push   $0x11317d
  10bba3:	e8 35 5a ff ff       	call   1015dd <assert_print>
  10bba8:	5b                   	pop    %ebx
  10bba9:	5e                   	pop    %esi
  10bbaa:	68 4a 02 00 00       	push   $0x24a
  10bbaf:	e9 3c ff ff ff       	jmp    10baf0 <k_mem_map_phys_guard+0x8e>
  10bbb4:	89 f0                	mov    %esi,%eax
  10bbb6:	05 00 20 00 00       	add    $0x2000,%eax
  10bbbb:	72 4b                	jb     10bc08 <k_mem_map_phys_guard+0x1a6>
  10bbbd:	9c                   	pushf
  10bbbe:	fa                   	cli
  10bbbf:	8f 45 e4             	pop    -0x1c(%ebp)
  10bbc2:	68 1c cd 12 00       	push   $0x12cd1c
  10bbc7:	e8 23 f1 ff ff       	call   10acef <z_spin_lock_valid>
  10bbcc:	59                   	pop    %ecx
  10bbcd:	84 c0                	test   %al,%al
  10bbcf:	75 53                	jne    10bc24 <k_mem_map_phys_guard+0x1c2>
  10bbd1:	68 88 00 00 00       	push   $0x88
  10bbd6:	68 61 13 11 00       	push   $0x111361
  10bbdb:	68 8e 13 11 00       	push   $0x11138e
  10bbe0:	68 ee 10 11 00       	push   $0x1110ee
  10bbe5:	e8 f3 59 ff ff       	call   1015dd <assert_print>
  10bbea:	83 c4 10             	add    $0x10,%esp
  10bbed:	68 1c cd 12 00       	push   $0x12cd1c
  10bbf2:	68 a3 13 11 00       	push   $0x1113a3
  10bbf7:	e8 e1 59 ff ff       	call   1015dd <assert_print>
  10bbfc:	58                   	pop    %eax
  10bbfd:	5a                   	pop    %edx
  10bbfe:	68 88 00 00 00       	push   $0x88
  10bc03:	e9 98 01 00 00       	jmp    10bda0 <k_mem_map_phys_guard+0x33e>
  10bc08:	68 24 0c 11 00       	push   $0x110c24
  10bc0d:	31 db                	xor    %ebx,%ebx
  10bc0f:	56                   	push   %esi
  10bc10:	6a 45                	push   $0x45
  10bc12:	68 ab 31 11 00       	push   $0x1131ab
  10bc17:	e8 dc 68 ff ff       	call   1024f8 <z_log_minimal_printk>
  10bc1c:	83 c4 10             	add    $0x10,%esp
  10bc1f:	e9 8e 01 00 00       	jmp    10bdb2 <k_mem_map_phys_guard+0x350>
  10bc24:	68 1c cd 12 00       	push   $0x12cd1c
  10bc29:	e8 19 f1 ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10bc2e:	58                   	pop    %eax
  10bc2f:	ba 00 10 00 00       	mov    $0x1000,%edx
  10bc34:	8d 86 00 20 00 00    	lea    0x2000(%esi),%eax
  10bc3a:	e8 39 fd ff ff       	call   10b978 <virt_region_alloc>
  10bc3f:	89 c3                	mov    %eax,%ebx
  10bc41:	85 c0                	test   %eax,%eax
  10bc43:	75 07                	jne    10bc4c <k_mem_map_phys_guard+0x1ea>
  10bc45:	31 db                	xor    %ebx,%ebx
  10bc47:	e9 13 01 00 00       	jmp    10bd5f <k_mem_map_phys_guard+0x2fd>
  10bc4c:	68 00 10 00 00       	push   $0x1000
  10bc51:	50                   	push   %eax
  10bc52:	e8 93 7a ff ff       	call   1036ea <arch_mem_unmap>
  10bc57:	58                   	pop    %eax
  10bc58:	8d 84 33 00 10 00 00 	lea    0x1000(%ebx,%esi,1),%eax
  10bc5f:	5a                   	pop    %edx
  10bc60:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10bc63:	68 00 10 00 00       	push   $0x1000
  10bc68:	81 c3 00 10 00 00    	add    $0x1000,%ebx
  10bc6e:	50                   	push   %eax
  10bc6f:	e8 76 7a ff ff       	call   1036ea <arch_mem_unmap>
  10bc74:	59                   	pop    %ecx
  10bc75:	58                   	pop    %eax
  10bc76:	89 5d f0             	mov    %ebx,-0x10(%ebp)
  10bc79:	80 7d e8 00          	cmpb   $0x0,-0x18(%ebp)
  10bc7d:	0f 84 c0 00 00 00    	je     10bd43 <k_mem_map_phys_guard+0x2e1>
  10bc83:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10bc86:	39 4d f0             	cmp    %ecx,-0x10(%ebp)
  10bc89:	0f 83 c2 00 00 00    	jae    10bd51 <k_mem_map_phys_guard+0x2ef>
  10bc8f:	89 f8                	mov    %edi,%eax
  10bc91:	25 00 00 02 00       	and    $0x20000,%eax
  10bc96:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10bc99:	a1 14 cd 12 00       	mov    0x12cd14,%eax
  10bc9e:	85 c0                	test   %eax,%eax
  10bca0:	74 a3                	je     10bc45 <k_mem_map_phys_guard+0x1e3>
  10bca2:	8b 10                	mov    (%eax),%edx
  10bca4:	83 e2 fc             	and    $0xfffffffc,%edx
  10bca7:	3b 05 18 cd 12 00    	cmp    0x12cd18,%eax
  10bcad:	89 15 14 cd 12 00    	mov    %edx,0x12cd14
  10bcb3:	75 06                	jne    10bcbb <k_mem_map_phys_guard+0x259>
  10bcb5:	89 15 18 cd 12 00    	mov    %edx,0x12cd18
  10bcbb:	89 c2                	mov    %eax,%edx
  10bcbd:	ff 0d 10 cd 12 00    	decl   0x12cd10
  10bcc3:	81 ea 80 4a 12 00    	sub    $0x124a80,%edx
  10bcc9:	c1 e2 0a             	shl    $0xa,%edx
  10bccc:	f6 00 01             	testb  $0x1,(%eax)
  10bccf:	75 39                	jne    10bd0a <k_mem_map_phys_guard+0x2a8>
  10bcd1:	89 55 f0             	mov    %edx,-0x10(%ebp)
  10bcd4:	68 98 01 00 00       	push   $0x198
  10bcd9:	68 8f 2c 11 00       	push   $0x112c8f
  10bcde:	68 b0 2c 11 00       	push   $0x112cb0
  10bce3:	68 ee 10 11 00       	push   $0x1110ee
  10bce8:	e8 f0 58 ff ff       	call   1015dd <assert_print>
  10bced:	83 c4 10             	add    $0x10,%esp
  10bcf0:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10bcf3:	52                   	push   %edx
  10bcf4:	68 d0 31 11 00       	push   $0x1131d0
  10bcf9:	e8 df 58 ff ff       	call   1015dd <assert_print>
  10bcfe:	5b                   	pop    %ebx
  10bcff:	5e                   	pop    %esi
  10bd00:	68 98 01 00 00       	push   $0x198
  10bd05:	e9 e6 fd ff ff       	jmp    10baf0 <k_mem_map_phys_guard+0x8e>
  10bd0a:	31 c9                	xor    %ecx,%ecx
  10bd0c:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10bd0f:	89 08                	mov    %ecx,(%eax)
  10bd11:	57                   	push   %edi
  10bd12:	68 00 10 00 00       	push   $0x1000
  10bd17:	52                   	push   %edx
  10bd18:	ff 75 f0             	push   -0x10(%ebp)
  10bd1b:	e8 07 79 ff ff       	call   103627 <arch_mem_map>
  10bd20:	83 c4 10             	add    $0x10,%esp
  10bd23:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10bd26:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
  10bd2a:	74 03                	je     10bd2f <k_mem_map_phys_guard+0x2cd>
  10bd2c:	83 08 04             	orl    $0x4,(%eax)
  10bd2f:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10bd32:	e8 7b f9 ff ff       	call   10b6b2 <frame_mapped_set>
  10bd37:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
  10bd3e:	e9 40 ff ff ff       	jmp    10bc83 <k_mem_map_phys_guard+0x221>
  10bd43:	57                   	push   %edi
  10bd44:	56                   	push   %esi
  10bd45:	ff 75 08             	push   0x8(%ebp)
  10bd48:	53                   	push   %ebx
  10bd49:	e8 d9 78 ff ff       	call   103627 <arch_mem_map>
  10bd4e:	83 c4 10             	add    $0x10,%esp
  10bd51:	0f ba e7 10          	bt     $0x10,%edi
  10bd55:	72 08                	jb     10bd5f <k_mem_map_phys_guard+0x2fd>
  10bd57:	31 c0                	xor    %eax,%eax
  10bd59:	89 df                	mov    %ebx,%edi
  10bd5b:	89 f1                	mov    %esi,%ecx
  10bd5d:	f3 aa                	rep stos %al,%es:(%edi)
  10bd5f:	68 1c cd 12 00       	push   $0x12cd1c
  10bd64:	e8 a7 ef ff ff       	call   10ad10 <z_spin_unlock_valid>
  10bd69:	59                   	pop    %ecx
  10bd6a:	84 c0                	test   %al,%al
  10bd6c:	75 3c                	jne    10bdaa <k_mem_map_phys_guard+0x348>
  10bd6e:	68 31 01 00 00       	push   $0x131
  10bd73:	68 61 13 11 00       	push   $0x111361
  10bd78:	68 e8 13 11 00       	push   $0x1113e8
  10bd7d:	68 ee 10 11 00       	push   $0x1110ee
  10bd82:	e8 56 58 ff ff       	call   1015dd <assert_print>
  10bd87:	83 c4 10             	add    $0x10,%esp
  10bd8a:	68 1c cd 12 00       	push   $0x12cd1c
  10bd8f:	68 ff 13 11 00       	push   $0x1113ff
  10bd94:	e8 44 58 ff ff       	call   1015dd <assert_print>
  10bd99:	58                   	pop    %eax
  10bd9a:	5a                   	pop    %edx
  10bd9b:	68 31 01 00 00       	push   $0x131
  10bda0:	68 61 13 11 00       	push   $0x111361
  10bda5:	e9 4b fd ff ff       	jmp    10baf5 <k_mem_map_phys_guard+0x93>
  10bdaa:	0f ba 65 e4 09       	btl    $0x9,-0x1c(%ebp)
  10bdaf:	73 01                	jae    10bdb2 <k_mem_map_phys_guard+0x350>
  10bdb1:	fb                   	sti
  10bdb2:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10bdb5:	89 d8                	mov    %ebx,%eax
  10bdb7:	5b                   	pop    %ebx
  10bdb8:	5e                   	pop    %esi
  10bdb9:	5f                   	pop    %edi
  10bdba:	5d                   	pop    %ebp
  10bdbb:	c3                   	ret

0010bdbc <k_mem_unmap_phys_guard>:
  10bdbc:	55                   	push   %ebp
  10bdbd:	89 e5                	mov    %esp,%ebp
  10bdbf:	57                   	push   %edi
  10bdc0:	56                   	push   %esi
  10bdc1:	53                   	push   %ebx
  10bdc2:	83 ec 14             	sub    $0x14,%esp
  10bdc5:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10bdc8:	8b 45 10             	mov    0x10(%ebp),%eax
  10bdcb:	8b 7d 0c             	mov    0xc(%ebp),%edi
  10bdce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10bdd1:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
  10bdd7:	77 26                	ja     10bdff <k_mem_unmap_phys_guard+0x43>
  10bdd9:	68 97 02 00 00       	push   $0x297
  10bdde:	68 8f 2c 11 00       	push   $0x112c8f
  10bde3:	68 fe 31 11 00       	push   $0x1131fe
  10bde8:	68 ee 10 11 00       	push   $0x1110ee
  10bded:	e8 eb 57 ff ff       	call   1015dd <assert_print>
  10bdf2:	83 c4 10             	add    $0x10,%esp
  10bdf5:	68 97 02 00 00       	push   $0x297
  10bdfa:	e9 1f 02 00 00       	jmp    10c01e <k_mem_unmap_phys_guard+0x262>
  10bdff:	8d 87 00 20 00 00    	lea    0x2000(%edi),%eax
  10be05:	8d b3 00 f0 ff ff    	lea    -0x1000(%ebx),%esi
  10be0b:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10be0e:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
  10be14:	74 3a                	je     10be50 <k_mem_unmap_phys_guard+0x94>
  10be16:	68 27 01 00 00       	push   $0x127
  10be1b:	68 e7 2d 11 00       	push   $0x112de7
  10be20:	68 1d 32 11 00       	push   $0x11321d
  10be25:	68 ee 10 11 00       	push   $0x1110ee
  10be2a:	e8 ae 57 ff ff       	call   1015dd <assert_print>
  10be2f:	83 c4 10             	add    $0x10,%esp
  10be32:	56                   	push   %esi
  10be33:	68 3c 32 11 00       	push   $0x11323c
  10be38:	e8 a0 57 ff ff       	call   1015dd <assert_print>
  10be3d:	58                   	pop    %eax
  10be3e:	5a                   	pop    %edx
  10be3f:	68 27 01 00 00       	push   $0x127
  10be44:	68 e7 2d 11 00       	push   $0x112de7
  10be49:	e8 80 57 ff ff       	call   1015ce <assert_post_action>
  10be4e:	5e                   	pop    %esi
  10be4f:	5f                   	pop    %edi
  10be50:	f7 45 ec ff 0f 00 00 	testl  $0xfff,-0x14(%ebp)
  10be57:	74 32                	je     10be8b <k_mem_unmap_phys_guard+0xcf>
  10be59:	68 29 01 00 00       	push   $0x129
  10be5e:	68 e7 2d 11 00       	push   $0x112de7
  10be63:	68 cd 30 11 00       	push   $0x1130cd
  10be68:	68 ee 10 11 00       	push   $0x1110ee
  10be6d:	e8 6b 57 ff ff       	call   1015dd <assert_print>
  10be72:	83 c4 10             	add    $0x10,%esp
  10be75:	ff 75 ec             	push   -0x14(%ebp)
  10be78:	68 50 32 11 00       	push   $0x113250
  10be7d:	e8 5b 57 ff ff       	call   1015dd <assert_print>
  10be82:	59                   	pop    %ecx
  10be83:	5b                   	pop    %ebx
  10be84:	68 29 01 00 00       	push   $0x129
  10be89:	eb b9                	jmp    10be44 <k_mem_unmap_phys_guard+0x88>
  10be8b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  10be8f:	74 45                	je     10bed6 <k_mem_unmap_phys_guard+0x11a>
  10be91:	89 f2                	mov    %esi,%edx
  10be93:	8d 87 ff 1f 00 00    	lea    0x1fff(%edi),%eax
  10be99:	f7 d2                	not    %edx
  10be9b:	39 d0                	cmp    %edx,%eax
  10be9d:	72 3f                	jb     10bede <k_mem_unmap_phys_guard+0x122>
  10be9f:	68 2b 01 00 00       	push   $0x12b
  10bea4:	68 e7 2d 11 00       	push   $0x112de7
  10bea9:	68 65 32 11 00       	push   $0x113265
  10beae:	68 ee 10 11 00       	push   $0x1110ee
  10beb3:	e8 25 57 ff ff       	call   1015dd <assert_print>
  10beb8:	83 c4 10             	add    $0x10,%esp
  10bebb:	ff 75 ec             	push   -0x14(%ebp)
  10bebe:	56                   	push   %esi
  10bebf:	68 bc 32 11 00       	push   $0x1132bc
  10bec4:	e8 14 57 ff ff       	call   1015dd <assert_print>
  10bec9:	83 c4 0c             	add    $0xc,%esp
  10becc:	68 2b 01 00 00       	push   $0x12b
  10bed1:	e9 6e ff ff ff       	jmp    10be44 <k_mem_unmap_phys_guard+0x88>
  10bed6:	81 fe ff ff 7f 00    	cmp    $0x7fffff,%esi
  10bedc:	eb 09                	jmp    10bee7 <k_mem_unmap_phys_guard+0x12b>
  10bede:	01 f0                	add    %esi,%eax
  10bee0:	09 f0                	or     %esi,%eax
  10bee2:	3d ff ff 7f 00       	cmp    $0x7fffff,%eax
  10bee7:	76 37                	jbe    10bf20 <k_mem_unmap_phys_guard+0x164>
  10bee9:	68 2d 01 00 00       	push   $0x12d
  10beee:	68 e7 2d 11 00       	push   $0x112de7
  10bef3:	68 e6 32 11 00       	push   $0x1132e6
  10bef8:	68 ee 10 11 00       	push   $0x1110ee
  10befd:	e8 db 56 ff ff       	call   1015dd <assert_print>
  10bf02:	83 c4 10             	add    $0x10,%esp
  10bf05:	ff 75 ec             	push   -0x14(%ebp)
  10bf08:	56                   	push   %esi
  10bf09:	68 06 2f 11 00       	push   $0x112f06
  10bf0e:	e8 ca 56 ff ff       	call   1015dd <assert_print>
  10bf13:	83 c4 0c             	add    $0xc,%esp
  10bf16:	68 2d 01 00 00       	push   $0x12d
  10bf1b:	e9 24 ff ff ff       	jmp    10be44 <k_mem_unmap_phys_guard+0x88>
  10bf20:	9c                   	pushf
  10bf21:	fa                   	cli
  10bf22:	8f 45 e0             	pop    -0x20(%ebp)
  10bf25:	68 1c cd 12 00       	push   $0x12cd1c
  10bf2a:	e8 c0 ed ff ff       	call   10acef <z_spin_lock_valid>
  10bf2f:	5a                   	pop    %edx
  10bf30:	84 c0                	test   %al,%al
  10bf32:	75 37                	jne    10bf6b <k_mem_unmap_phys_guard+0x1af>
  10bf34:	68 88 00 00 00       	push   $0x88
  10bf39:	68 61 13 11 00       	push   $0x111361
  10bf3e:	68 8e 13 11 00       	push   $0x11138e
  10bf43:	68 ee 10 11 00       	push   $0x1110ee
  10bf48:	e8 90 56 ff ff       	call   1015dd <assert_print>
  10bf4d:	83 c4 10             	add    $0x10,%esp
  10bf50:	68 1c cd 12 00       	push   $0x12cd1c
  10bf55:	68 a3 13 11 00       	push   $0x1113a3
  10bf5a:	e8 7e 56 ff ff       	call   1015dd <assert_print>
  10bf5f:	5b                   	pop    %ebx
  10bf60:	5e                   	pop    %esi
  10bf61:	68 88 00 00 00       	push   $0x88
  10bf66:	e9 b9 01 00 00       	jmp    10c124 <k_mem_unmap_phys_guard+0x368>
  10bf6b:	68 1c cd 12 00       	push   $0x12cd1c
  10bf70:	e8 d2 ed ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10bf75:	31 c9                	xor    %ecx,%ecx
  10bf77:	89 0c 24             	mov    %ecx,(%esp)
  10bf7a:	56                   	push   %esi
  10bf7b:	e8 ec 7b ff ff       	call   103b6c <arch_page_phys_get>
  10bf80:	5a                   	pop    %edx
  10bf81:	59                   	pop    %ecx
  10bf82:	85 c0                	test   %eax,%eax
  10bf84:	0f 84 59 01 00 00    	je     10c0e3 <k_mem_unmap_phys_guard+0x327>
  10bf8a:	8d 04 3b             	lea    (%ebx,%edi,1),%eax
  10bf8d:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10bf90:	6a 00                	push   $0x0
  10bf92:	50                   	push   %eax
  10bf93:	e8 d4 7b ff ff       	call   103b6c <arch_page_phys_get>
  10bf98:	59                   	pop    %ecx
  10bf99:	85 c0                	test   %eax,%eax
  10bf9b:	5a                   	pop    %edx
  10bf9c:	0f 84 41 01 00 00    	je     10c0e3 <k_mem_unmap_phys_guard+0x327>
  10bfa2:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
  10bfa6:	75 27                	jne    10bfcf <k_mem_unmap_phys_guard+0x213>
  10bfa8:	e9 23 01 00 00       	jmp    10c0d0 <k_mem_unmap_phys_guard+0x314>
  10bfad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10bfb0:	68 00 10 00 00       	push   $0x1000
  10bfb5:	53                   	push   %ebx
  10bfb6:	e8 2f 77 ff ff       	call   1036ea <arch_mem_unmap>
  10bfbb:	58                   	pop    %eax
  10bfbc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10bfbf:	31 c9                	xor    %ecx,%ecx
  10bfc1:	5a                   	pop    %edx
  10bfc2:	89 08                	mov    %ecx,(%eax)
  10bfc4:	81 c3 00 10 00 00    	add    $0x1000,%ebx
  10bfca:	e8 25 f9 ff ff       	call   10b8f4 <free_page_frame_list_put>
  10bfcf:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10bfd2:	39 c3                	cmp    %eax,%ebx
  10bfd4:	0f 83 ff 00 00 00    	jae    10c0d9 <k_mem_unmap_phys_guard+0x31d>
  10bfda:	8d 45 f0             	lea    -0x10(%ebp),%eax
  10bfdd:	50                   	push   %eax
  10bfde:	53                   	push   %ebx
  10bfdf:	e8 88 7b ff ff       	call   103b6c <arch_page_phys_get>
  10bfe4:	5f                   	pop    %edi
  10bfe5:	85 c0                	test   %eax,%eax
  10bfe7:	5a                   	pop    %edx
  10bfe8:	74 3e                	je     10c028 <k_mem_unmap_phys_guard+0x26c>
  10bfea:	68 da 02 00 00       	push   $0x2da
  10bfef:	68 8f 2c 11 00       	push   $0x112c8f
  10bff4:	68 ca 1a 11 00       	push   $0x111aca
  10bff9:	68 ee 10 11 00       	push   $0x1110ee
  10bffe:	e8 da 55 ff ff       	call   1015dd <assert_print>
  10c003:	83 c4 10             	add    $0x10,%esp
  10c006:	53                   	push   %ebx
  10c007:	68 0c 0c 11 00       	push   $0x110c0c
  10c00c:	68 13 34 11 00       	push   $0x113413
  10c011:	e8 c7 55 ff ff       	call   1015dd <assert_print>
  10c016:	83 c4 0c             	add    $0xc,%esp
  10c019:	68 da 02 00 00       	push   $0x2da
  10c01e:	68 8f 2c 11 00       	push   $0x112c8f
  10c023:	e9 21 fe ff ff       	jmp    10be49 <k_mem_unmap_phys_guard+0x8d>
  10c028:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10c02b:	89 f8                	mov    %edi,%eax
  10c02d:	e8 6d f7 ff ff       	call   10b79f <k_mem_assert_phys_aligned>
  10c032:	81 ff ff ff ff 01    	cmp    $0x1ffffff,%edi
  10c038:	76 38                	jbe    10c072 <k_mem_unmap_phys_guard+0x2b6>
  10c03a:	68 e2 02 00 00       	push   $0x2e2
  10c03f:	68 8f 2c 11 00       	push   $0x112c8f
  10c044:	68 50 2e 11 00       	push   $0x112e50
  10c049:	68 ee 10 11 00       	push   $0x1110ee
  10c04e:	e8 8a 55 ff ff       	call   1015dd <assert_print>
  10c053:	83 c4 10             	add    $0x10,%esp
  10c056:	ff 75 f0             	push   -0x10(%ebp)
  10c059:	68 0c 0c 11 00       	push   $0x110c0c
  10c05e:	68 3d 34 11 00       	push   $0x11343d
  10c063:	e8 75 55 ff ff       	call   1015dd <assert_print>
  10c068:	83 c4 0c             	add    $0xc,%esp
  10c06b:	68 e2 02 00 00       	push   $0x2e2
  10c070:	eb ac                	jmp    10c01e <k_mem_unmap_phys_guard+0x262>
  10c072:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10c075:	89 f8                	mov    %edi,%eax
  10c077:	e8 23 f7 ff ff       	call   10b79f <k_mem_assert_phys_aligned>
  10c07c:	81 ff ff ff ff 01    	cmp    $0x1ffffff,%edi
  10c082:	77 5f                	ja     10c0e3 <k_mem_unmap_phys_guard+0x327>
  10c084:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10c087:	e8 5b f7 ff ff       	call   10b7e7 <k_mem_phys_to_page_frame>
  10c08c:	f6 00 08             	testb  $0x8,(%eax)
  10c08f:	0f 85 18 ff ff ff    	jne    10bfad <k_mem_unmap_phys_guard+0x1f1>
  10c095:	68 ef 02 00 00       	push   $0x2ef
  10c09a:	68 8f 2c 11 00       	push   $0x112c8f
  10c09f:	68 5d 34 11 00       	push   $0x11345d
  10c0a4:	68 ee 10 11 00       	push   $0x1110ee
  10c0a9:	e8 2f 55 ff ff       	call   1015dd <assert_print>
  10c0ae:	83 c4 10             	add    $0x10,%esp
  10c0b1:	ff 75 f0             	push   -0x10(%ebp)
  10c0b4:	68 0c 0c 11 00       	push   $0x110c0c
  10c0b9:	68 7c 34 11 00       	push   $0x11347c
  10c0be:	e8 1a 55 ff ff       	call   1015dd <assert_print>
  10c0c3:	83 c4 0c             	add    $0xc,%esp
  10c0c6:	68 ef 02 00 00       	push   $0x2ef
  10c0cb:	e9 4e ff ff ff       	jmp    10c01e <k_mem_unmap_phys_guard+0x262>
  10c0d0:	57                   	push   %edi
  10c0d1:	53                   	push   %ebx
  10c0d2:	e8 13 76 ff ff       	call   1036ea <arch_mem_unmap>
  10c0d7:	5b                   	pop    %ebx
  10c0d8:	5f                   	pop    %edi
  10c0d9:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10c0dc:	89 f0                	mov    %esi,%eax
  10c0de:	e8 60 f7 ff ff       	call   10b843 <virt_region_free>
  10c0e3:	68 1c cd 12 00       	push   $0x12cd1c
  10c0e8:	e8 23 ec ff ff       	call   10ad10 <z_spin_unlock_valid>
  10c0ed:	59                   	pop    %ecx
  10c0ee:	84 c0                	test   %al,%al
  10c0f0:	75 3c                	jne    10c12e <k_mem_unmap_phys_guard+0x372>
  10c0f2:	68 31 01 00 00       	push   $0x131
  10c0f7:	68 61 13 11 00       	push   $0x111361
  10c0fc:	68 e8 13 11 00       	push   $0x1113e8
  10c101:	68 ee 10 11 00       	push   $0x1110ee
  10c106:	e8 d2 54 ff ff       	call   1015dd <assert_print>
  10c10b:	83 c4 10             	add    $0x10,%esp
  10c10e:	68 1c cd 12 00       	push   $0x12cd1c
  10c113:	68 ff 13 11 00       	push   $0x1113ff
  10c118:	e8 c0 54 ff ff       	call   1015dd <assert_print>
  10c11d:	58                   	pop    %eax
  10c11e:	5a                   	pop    %edx
  10c11f:	68 31 01 00 00       	push   $0x131
  10c124:	68 61 13 11 00       	push   $0x111361
  10c129:	e9 1b fd ff ff       	jmp    10be49 <k_mem_unmap_phys_guard+0x8d>
  10c12e:	0f ba 65 e0 09       	btl    $0x9,-0x20(%ebp)
  10c133:	73 01                	jae    10c136 <k_mem_unmap_phys_guard+0x37a>
  10c135:	fb                   	sti
  10c136:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10c139:	5b                   	pop    %ebx
  10c13a:	5e                   	pop    %esi
  10c13b:	5f                   	pop    %edi
  10c13c:	5d                   	pop    %ebp
  10c13d:	c3                   	ret

0010c13e <arch_virt_region_align>:
  10c13e:	b8 00 10 00 00       	mov    $0x1000,%eax
  10c143:	c3                   	ret

0010c144 <k_mem_region_align>:
  10c144:	55                   	push   %ebp
  10c145:	31 d2                	xor    %edx,%edx
  10c147:	89 e5                	mov    %esp,%ebp
  10c149:	53                   	push   %ebx
  10c14a:	8b 4d 18             	mov    0x18(%ebp),%ecx
  10c14d:	8b 45 10             	mov    0x10(%ebp),%eax
  10c150:	f7 f1                	div    %ecx
  10c152:	0f af c1             	imul   %ecx,%eax
  10c155:	89 d3                	mov    %edx,%ebx
  10c157:	8b 55 08             	mov    0x8(%ebp),%edx
  10c15a:	89 02                	mov    %eax,(%edx)
  10c15c:	8b 45 14             	mov    0x14(%ebp),%eax
  10c15f:	01 c8                	add    %ecx,%eax
  10c161:	31 d2                	xor    %edx,%edx
  10c163:	8d 44 18 ff          	lea    -0x1(%eax,%ebx,1),%eax
  10c167:	f7 f1                	div    %ecx
  10c169:	0f af c1             	imul   %ecx,%eax
  10c16c:	8b 55 0c             	mov    0xc(%ebp),%edx
  10c16f:	89 02                	mov    %eax,(%edx)
  10c171:	89 d8                	mov    %ebx,%eax
  10c173:	5b                   	pop    %ebx
  10c174:	5d                   	pop    %ebp
  10c175:	c3                   	ret

0010c176 <k_mem_map_phys_bare>:
  10c176:	55                   	push   %ebp
  10c177:	89 e5                	mov    %esp,%ebp
  10c179:	57                   	push   %edi
  10c17a:	56                   	push   %esi
  10c17b:	53                   	push   %ebx
  10c17c:	83 ec 10             	sub    $0x10,%esp
  10c17f:	f6 45 14 40          	testb  $0x40,0x14(%ebp)
  10c183:	8b 5d 10             	mov    0x10(%ebp),%ebx
  10c186:	74 2f                	je     10c1b7 <k_mem_map_phys_bare+0x41>
  10c188:	68 4d 03 00 00       	push   $0x34d
  10c18d:	68 8f 2c 11 00       	push   $0x112c8f
  10c192:	68 a3 34 11 00       	push   $0x1134a3
  10c197:	68 ee 10 11 00       	push   $0x1110ee
  10c19c:	e8 3c 54 ff ff       	call   1015dd <assert_print>
  10c1a1:	83 c4 10             	add    $0x10,%esp
  10c1a4:	68 bb 34 11 00       	push   $0x1134bb
  10c1a9:	e8 2f 54 ff ff       	call   1015dd <assert_print>
  10c1ae:	c7 04 24 4d 03 00 00 	movl   $0x34d,(%esp)
  10c1b5:	eb 53                	jmp    10c20a <k_mem_map_phys_bare+0x94>
  10c1b7:	68 00 10 00 00       	push   $0x1000
  10c1bc:	8d 45 f0             	lea    -0x10(%ebp),%eax
  10c1bf:	53                   	push   %ebx
  10c1c0:	ff 75 0c             	push   0xc(%ebp)
  10c1c3:	50                   	push   %eax
  10c1c4:	8d 45 ec             	lea    -0x14(%ebp),%eax
  10c1c7:	50                   	push   %eax
  10c1c8:	e8 77 ff ff ff       	call   10c144 <k_mem_region_align>
  10c1cd:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10c1d0:	83 c4 14             	add    $0x14,%esp
  10c1d3:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10c1d6:	85 ff                	test   %edi,%edi
  10c1d8:	75 3c                	jne    10c216 <k_mem_map_phys_bare+0xa0>
  10c1da:	68 52 03 00 00       	push   $0x352
  10c1df:	68 8f 2c 11 00       	push   $0x112c8f
  10c1e4:	68 db 34 11 00       	push   $0x1134db
  10c1e9:	68 ee 10 11 00       	push   $0x1110ee
  10c1ee:	e8 ea 53 ff ff       	call   1015dd <assert_print>
  10c1f3:	83 c4 10             	add    $0x10,%esp
  10c1f6:	ff 75 ec             	push   -0x14(%ebp)
  10c1f9:	68 ee 34 11 00       	push   $0x1134ee
  10c1fe:	e8 da 53 ff ff       	call   1015dd <assert_print>
  10c203:	59                   	pop    %ecx
  10c204:	5b                   	pop    %ebx
  10c205:	68 52 03 00 00       	push   $0x352
  10c20a:	68 8f 2c 11 00       	push   $0x112c8f
  10c20f:	e8 ba 53 ff ff       	call   1015ce <assert_post_action>
  10c214:	58                   	pop    %eax
  10c215:	5a                   	pop    %edx
  10c216:	8b 75 ec             	mov    -0x14(%ebp),%esi
  10c219:	8d 44 37 ff          	lea    -0x1(%edi,%esi,1),%eax
  10c21d:	39 c6                	cmp    %eax,%esi
  10c21f:	72 32                	jb     10c253 <k_mem_map_phys_bare+0xdd>
  10c221:	68 53 03 00 00       	push   $0x353
  10c226:	68 8f 2c 11 00       	push   $0x112c8f
  10c22b:	68 0a 35 11 00       	push   $0x11350a
  10c230:	68 ee 10 11 00       	push   $0x1110ee
  10c235:	e8 a3 53 ff ff       	call   1015dd <assert_print>
  10c23a:	83 c4 10             	add    $0x10,%esp
  10c23d:	57                   	push   %edi
  10c23e:	56                   	push   %esi
  10c23f:	68 3d 35 11 00       	push   $0x11353d
  10c244:	e8 94 53 ff ff       	call   1015dd <assert_print>
  10c249:	83 c4 0c             	add    $0xc,%esp
  10c24c:	68 53 03 00 00       	push   $0x353
  10c251:	eb b7                	jmp    10c20a <k_mem_map_phys_bare+0x94>
  10c253:	57                   	push   %edi
  10c254:	56                   	push   %esi
  10c255:	e8 e4 fe ff ff       	call   10c13e <arch_virt_region_align>
  10c25a:	59                   	pop    %ecx
  10c25b:	5e                   	pop    %esi
  10c25c:	89 c6                	mov    %eax,%esi
  10c25e:	9c                   	pushf
  10c25f:	fa                   	cli
  10c260:	8f 45 e4             	pop    -0x1c(%ebp)
  10c263:	68 1c cd 12 00       	push   $0x12cd1c
  10c268:	e8 82 ea ff ff       	call   10acef <z_spin_lock_valid>
  10c26d:	5f                   	pop    %edi
  10c26e:	84 c0                	test   %al,%al
  10c270:	75 37                	jne    10c2a9 <k_mem_map_phys_bare+0x133>
  10c272:	68 88 00 00 00       	push   $0x88
  10c277:	68 61 13 11 00       	push   $0x111361
  10c27c:	68 8e 13 11 00       	push   $0x11138e
  10c281:	68 ee 10 11 00       	push   $0x1110ee
  10c286:	e8 52 53 ff ff       	call   1015dd <assert_print>
  10c28b:	83 c4 10             	add    $0x10,%esp
  10c28e:	68 1c cd 12 00       	push   $0x12cd1c
  10c293:	68 a3 13 11 00       	push   $0x1113a3
  10c298:	e8 40 53 ff ff       	call   1015dd <assert_print>
  10c29d:	58                   	pop    %eax
  10c29e:	5a                   	pop    %edx
  10c29f:	68 88 00 00 00       	push   $0x88
  10c2a4:	e9 c5 00 00 00       	jmp    10c36e <k_mem_map_phys_bare+0x1f8>
  10c2a9:	68 1c cd 12 00       	push   $0x12cd1c
  10c2ae:	e8 94 ea ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10c2b3:	5f                   	pop    %edi
  10c2b4:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10c2b7:	89 f2                	mov    %esi,%edx
  10c2b9:	89 f8                	mov    %edi,%eax
  10c2bb:	e8 b8 f6 ff ff       	call   10b978 <virt_region_alloc>
  10c2c0:	89 c6                	mov    %eax,%esi
  10c2c2:	85 c0                	test   %eax,%eax
  10c2c4:	75 1a                	jne    10c2e0 <k_mem_map_phys_bare+0x16a>
  10c2c6:	ff 75 14             	push   0x14(%ebp)
  10c2c9:	53                   	push   %ebx
  10c2ca:	ff 75 0c             	push   0xc(%ebp)
  10c2cd:	6a 45                	push   $0x45
  10c2cf:	68 70 35 11 00       	push   $0x113570
  10c2d4:	e8 1f 62 ff ff       	call   1024f8 <z_log_minimal_printk>
  10c2d9:	83 c4 14             	add    $0x14,%esp
  10c2dc:	6a 04                	push   $0x4
  10c2de:	cd 20                	int    $0x20
  10c2e0:	8d 44 18 ff          	lea    -0x1(%eax,%ebx,1),%eax
  10c2e4:	39 c6                	cmp    %eax,%esi
  10c2e6:	72 35                	jb     10c31d <k_mem_map_phys_bare+0x1a7>
  10c2e8:	68 80 03 00 00       	push   $0x380
  10c2ed:	68 8f 2c 11 00       	push   $0x112c8f
  10c2f2:	68 a8 35 11 00       	push   $0x1135a8
  10c2f7:	68 ee 10 11 00       	push   $0x1110ee
  10c2fc:	e8 dc 52 ff ff       	call   1015dd <assert_print>
  10c301:	83 c4 10             	add    $0x10,%esp
  10c304:	53                   	push   %ebx
  10c305:	56                   	push   %esi
  10c306:	68 e3 35 11 00       	push   $0x1135e3
  10c30b:	e8 cd 52 ff ff       	call   1015dd <assert_print>
  10c310:	83 c4 0c             	add    $0xc,%esp
  10c313:	68 80 03 00 00       	push   $0x380
  10c318:	e9 ed fe ff ff       	jmp    10c20a <k_mem_map_phys_bare+0x94>
  10c31d:	ff 75 14             	push   0x14(%ebp)
  10c320:	57                   	push   %edi
  10c321:	ff 75 ec             	push   -0x14(%ebp)
  10c324:	56                   	push   %esi
  10c325:	e8 fd 72 ff ff       	call   103627 <arch_mem_map>
  10c32a:	83 c4 10             	add    $0x10,%esp
  10c32d:	68 1c cd 12 00       	push   $0x12cd1c
  10c332:	e8 d9 e9 ff ff       	call   10ad10 <z_spin_unlock_valid>
  10c337:	59                   	pop    %ecx
  10c338:	84 c0                	test   %al,%al
  10c33a:	75 3c                	jne    10c378 <k_mem_map_phys_bare+0x202>
  10c33c:	68 31 01 00 00       	push   $0x131
  10c341:	68 61 13 11 00       	push   $0x111361
  10c346:	68 e8 13 11 00       	push   $0x1113e8
  10c34b:	68 ee 10 11 00       	push   $0x1110ee
  10c350:	e8 88 52 ff ff       	call   1015dd <assert_print>
  10c355:	83 c4 10             	add    $0x10,%esp
  10c358:	68 1c cd 12 00       	push   $0x12cd1c
  10c35d:	68 ff 13 11 00       	push   $0x1113ff
  10c362:	e8 76 52 ff ff       	call   1015dd <assert_print>
  10c367:	58                   	pop    %eax
  10c368:	5a                   	pop    %edx
  10c369:	68 31 01 00 00       	push   $0x131
  10c36e:	68 61 13 11 00       	push   $0x111361
  10c373:	e9 97 fe ff ff       	jmp    10c20f <k_mem_map_phys_bare+0x99>
  10c378:	0f ba 65 e4 09       	btl    $0x9,-0x1c(%ebp)
  10c37d:	73 01                	jae    10c380 <k_mem_map_phys_bare+0x20a>
  10c37f:	fb                   	sti
  10c380:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10c383:	01 c6                	add    %eax,%esi
  10c385:	8b 45 08             	mov    0x8(%ebp),%eax
  10c388:	89 30                	mov    %esi,(%eax)
  10c38a:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10c38d:	5b                   	pop    %ebx
  10c38e:	5e                   	pop    %esi
  10c38f:	5f                   	pop    %edi
  10c390:	5d                   	pop    %ebp
  10c391:	c3                   	ret

0010c392 <z_mem_manage_init>:
  10c392:	55                   	push   %ebp
  10c393:	89 e5                	mov    %esp,%ebp
  10c395:	57                   	push   %edi
  10c396:	56                   	push   %esi
  10c397:	53                   	push   %ebx
  10c398:	9c                   	pushf
  10c399:	fa                   	cli
  10c39a:	5e                   	pop    %esi
  10c39b:	68 1c cd 12 00       	push   $0x12cd1c
  10c3a0:	e8 4a e9 ff ff       	call   10acef <z_spin_lock_valid>
  10c3a5:	59                   	pop    %ecx
  10c3a6:	84 c0                	test   %al,%al
  10c3a8:	75 37                	jne    10c3e1 <z_mem_manage_init+0x4f>
  10c3aa:	68 88 00 00 00       	push   $0x88
  10c3af:	68 61 13 11 00       	push   $0x111361
  10c3b4:	68 8e 13 11 00       	push   $0x11138e
  10c3b9:	68 ee 10 11 00       	push   $0x1110ee
  10c3be:	e8 1a 52 ff ff       	call   1015dd <assert_print>
  10c3c3:	83 c4 10             	add    $0x10,%esp
  10c3c6:	68 1c cd 12 00       	push   $0x12cd1c
  10c3cb:	68 a3 13 11 00       	push   $0x1113a3
  10c3d0:	e8 08 52 ff ff       	call   1015dd <assert_print>
  10c3d5:	58                   	pop    %eax
  10c3d6:	5a                   	pop    %edx
  10c3d7:	68 88 00 00 00       	push   $0x88
  10c3dc:	e9 a8 00 00 00       	jmp    10c489 <z_mem_manage_init+0xf7>
  10c3e1:	68 1c cd 12 00       	push   $0x12cd1c
  10c3e6:	e8 5c e9 ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10c3eb:	58                   	pop    %eax
  10c3ec:	31 c0                	xor    %eax,%eax
  10c3ee:	a3 14 cd 12 00       	mov    %eax,0x12cd14
  10c3f3:	a3 18 cd 12 00       	mov    %eax,0x12cd18
  10c3f8:	e8 3c 77 ff ff       	call   103b39 <arch_reserved_pages_update>
  10c3fd:	bb 00 00 10 00       	mov    $0x100000,%ebx
  10c402:	81 fb 00 90 15 00    	cmp    $0x159000,%ebx
  10c408:	73 1b                	jae    10c425 <z_mem_manage_init+0x93>
  10c40a:	89 d8                	mov    %ebx,%eax
  10c40c:	e8 d6 f3 ff ff       	call   10b7e7 <k_mem_phys_to_page_frame>
  10c411:	89 da                	mov    %ebx,%edx
  10c413:	89 c7                	mov    %eax,%edi
  10c415:	81 c3 00 10 00 00    	add    $0x1000,%ebx
  10c41b:	e8 92 f2 ff ff       	call   10b6b2 <frame_mapped_set>
  10c420:	83 0f 04             	orl    $0x4,(%edi)
  10c423:	eb dd                	jmp    10c402 <z_mem_manage_init+0x70>
  10c425:	bb 80 4a 12 00       	mov    $0x124a80,%ebx
  10c42a:	83 3b 00             	cmpl   $0x0,(%ebx)
  10c42d:	75 07                	jne    10c436 <z_mem_manage_init+0xa4>
  10c42f:	89 d8                	mov    %ebx,%eax
  10c431:	e8 be f4 ff ff       	call   10b8f4 <free_page_frame_list_put>
  10c436:	83 c3 04             	add    $0x4,%ebx
  10c439:	81 fb 80 ca 12 00    	cmp    $0x12ca80,%ebx
  10c43f:	75 e9                	jne    10c42a <z_mem_manage_init+0x98>
  10c441:	c6 05 32 cd 12 00 01 	movb   $0x1,0x12cd32
  10c448:	68 1c cd 12 00       	push   $0x12cd1c
  10c44d:	e8 be e8 ff ff       	call   10ad10 <z_spin_unlock_valid>
  10c452:	5f                   	pop    %edi
  10c453:	84 c0                	test   %al,%al
  10c455:	75 3e                	jne    10c495 <z_mem_manage_init+0x103>
  10c457:	68 31 01 00 00       	push   $0x131
  10c45c:	68 61 13 11 00       	push   $0x111361
  10c461:	68 e8 13 11 00       	push   $0x1113e8
  10c466:	68 ee 10 11 00       	push   $0x1110ee
  10c46b:	e8 6d 51 ff ff       	call   1015dd <assert_print>
  10c470:	83 c4 10             	add    $0x10,%esp
  10c473:	68 1c cd 12 00       	push   $0x12cd1c
  10c478:	68 ff 13 11 00       	push   $0x1113ff
  10c47d:	e8 5b 51 ff ff       	call   1015dd <assert_print>
  10c482:	59                   	pop    %ecx
  10c483:	5b                   	pop    %ebx
  10c484:	68 31 01 00 00       	push   $0x131
  10c489:	68 61 13 11 00       	push   $0x111361
  10c48e:	e8 3b 51 ff ff       	call   1015ce <assert_post_action>
  10c493:	58                   	pop    %eax
  10c494:	5a                   	pop    %edx
  10c495:	0f ba e6 09          	bt     $0x9,%esi
  10c499:	73 01                	jae    10c49c <z_mem_manage_init+0x10a>
  10c49b:	fb                   	sti
  10c49c:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10c49f:	5b                   	pop    %ebx
  10c4a0:	5e                   	pop    %esi
  10c4a1:	5f                   	pop    %edi
  10c4a2:	5d                   	pop    %ebp
  10c4a3:	c3                   	ret

0010c4a4 <z_mem_manage_boot_finish>:
  10c4a4:	c3                   	ret

0010c4a5 <k_free>:
  10c4a5:	55                   	push   %ebp
  10c4a6:	89 e5                	mov    %esp,%ebp
  10c4a8:	8b 45 08             	mov    0x8(%ebp),%eax
  10c4ab:	85 c0                	test   %eax,%eax
  10c4ad:	74 0e                	je     10c4bd <k_free+0x18>
  10c4af:	8d 50 fc             	lea    -0x4(%eax),%edx
  10c4b2:	52                   	push   %edx
  10c4b3:	ff 70 fc             	push   -0x4(%eax)
  10c4b6:	e8 ec 17 00 00       	call   10dca7 <k_heap_free>
  10c4bb:	58                   	pop    %eax
  10c4bc:	5a                   	pop    %edx
  10c4bd:	c9                   	leave
  10c4be:	c3                   	ret

0010c4bf <z_thread_aligned_alloc>:
  10c4bf:	55                   	push   %ebp
  10c4c0:	89 e5                	mov    %esp,%ebp
  10c4c2:	56                   	push   %esi
  10c4c3:	53                   	push   %ebx
  10c4c4:	8b 75 08             	mov    0x8(%ebp),%esi
  10c4c7:	e8 6f ba ff ff       	call   107f3b <k_is_in_isr>
  10c4cc:	84 c0                	test   %al,%al
  10c4ce:	75 75                	jne    10c545 <z_thread_aligned_alloc+0x86>
  10c4d0:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10c4d5:	8b 98 8c 00 00 00    	mov    0x8c(%eax),%ebx
  10c4db:	85 db                	test   %ebx,%ebx
  10c4dd:	74 68                	je     10c547 <z_thread_aligned_alloc+0x88>
  10c4df:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c4e2:	83 c0 04             	add    $0x4,%eax
  10c4e5:	72 5e                	jb     10c545 <z_thread_aligned_alloc+0x86>
  10c4e7:	6a 00                	push   $0x0
  10c4e9:	6a 00                	push   $0x0
  10c4eb:	50                   	push   %eax
  10c4ec:	89 f0                	mov    %esi,%eax
  10c4ee:	83 c8 04             	or     $0x4,%eax
  10c4f1:	50                   	push   %eax
  10c4f2:	53                   	push   %ebx
  10c4f3:	e8 11 16 00 00       	call   10db09 <k_heap_aligned_alloc>
  10c4f8:	83 c4 14             	add    $0x14,%esp
  10c4fb:	85 c0                	test   %eax,%eax
  10c4fd:	74 46                	je     10c545 <z_thread_aligned_alloc+0x86>
  10c4ff:	89 18                	mov    %ebx,(%eax)
  10c501:	85 f6                	test   %esi,%esi
  10c503:	8d 58 04             	lea    0x4(%eax),%ebx
  10c506:	74 3f                	je     10c547 <z_thread_aligned_alloc+0x88>
  10c508:	8d 46 ff             	lea    -0x1(%esi),%eax
  10c50b:	85 c3                	test   %eax,%ebx
  10c50d:	74 38                	je     10c547 <z_thread_aligned_alloc+0x88>
  10c50f:	6a 25                	push   $0x25
  10c511:	68 12 36 11 00       	push   $0x113612
  10c516:	68 36 36 11 00       	push   $0x113636
  10c51b:	68 ee 10 11 00       	push   $0x1110ee
  10c520:	e8 b8 50 ff ff       	call   1015dd <assert_print>
  10c525:	83 c4 10             	add    $0x10,%esp
  10c528:	56                   	push   %esi
  10c529:	53                   	push   %ebx
  10c52a:	68 68 36 11 00       	push   $0x113668
  10c52f:	e8 a9 50 ff ff       	call   1015dd <assert_print>
  10c534:	83 c4 0c             	add    $0xc,%esp
  10c537:	6a 25                	push   $0x25
  10c539:	68 12 36 11 00       	push   $0x113612
  10c53e:	e8 8b 50 ff ff       	call   1015ce <assert_post_action>
  10c543:	58                   	pop    %eax
  10c544:	5a                   	pop    %edx
  10c545:	31 db                	xor    %ebx,%ebx
  10c547:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10c54a:	89 d8                	mov    %ebx,%eax
  10c54c:	5b                   	pop    %ebx
  10c54d:	5e                   	pop    %esi
  10c54e:	5d                   	pop    %ebp
  10c54f:	c3                   	ret

0010c550 <z_impl_k_futex_wake>:
  10c550:	55                   	push   %ebp
  10c551:	89 e5                	mov    %esp,%ebp
  10c553:	57                   	push   %edi
  10c554:	56                   	push   %esi
  10c555:	53                   	push   %ebx
  10c556:	83 ec 08             	sub    $0x8,%esp
  10c559:	8a 45 0c             	mov    0xc(%ebp),%al
  10c55c:	88 45 f3             	mov    %al,-0xd(%ebp)
  10c55f:	ff 75 08             	push   0x8(%ebp)
  10c562:	e8 ce 0e 00 00       	call   10d435 <k_object_find>
  10c567:	5b                   	pop    %ebx
  10c568:	85 c0                	test   %eax,%eax
  10c56a:	0f 84 9a 00 00 00    	je     10c60a <z_impl_k_futex_wake+0xba>
  10c570:	80 78 07 0f          	cmpb   $0xf,0x7(%eax)
  10c574:	0f 85 90 00 00 00    	jne    10c60a <z_impl_k_futex_wake+0xba>
  10c57a:	8b 78 09             	mov    0x9(%eax),%edi
  10c57d:	85 ff                	test   %edi,%edi
  10c57f:	0f 84 85 00 00 00    	je     10c60a <z_impl_k_futex_wake+0xba>
  10c585:	8d 77 10             	lea    0x10(%edi),%esi
  10c588:	9c                   	pushf
  10c589:	fa                   	cli
  10c58a:	8f 45 ec             	pop    -0x14(%ebp)
  10c58d:	56                   	push   %esi
  10c58e:	e8 5c e7 ff ff       	call   10acef <z_spin_lock_valid>
  10c593:	5a                   	pop    %edx
  10c594:	84 c0                	test   %al,%al
  10c596:	75 3a                	jne    10c5d2 <z_impl_k_futex_wake+0x82>
  10c598:	68 88 00 00 00       	push   $0x88
  10c59d:	68 61 13 11 00       	push   $0x111361
  10c5a2:	68 8e 13 11 00       	push   $0x11138e
  10c5a7:	68 ee 10 11 00       	push   $0x1110ee
  10c5ac:	e8 2c 50 ff ff       	call   1015dd <assert_print>
  10c5b1:	83 c4 10             	add    $0x10,%esp
  10c5b4:	56                   	push   %esi
  10c5b5:	68 a3 13 11 00       	push   $0x1113a3
  10c5ba:	e8 1e 50 ff ff       	call   1015dd <assert_print>
  10c5bf:	5b                   	pop    %ebx
  10c5c0:	5e                   	pop    %esi
  10c5c1:	68 88 00 00 00       	push   $0x88
  10c5c6:	68 61 13 11 00       	push   $0x111361
  10c5cb:	e8 fe 4f ff ff       	call   1015ce <assert_post_action>
  10c5d0:	5f                   	pop    %edi
  10c5d1:	58                   	pop    %eax
  10c5d2:	56                   	push   %esi
  10c5d3:	31 db                	xor    %ebx,%ebx
  10c5d5:	e8 6d e7 ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10c5da:	59                   	pop    %ecx
  10c5db:	57                   	push   %edi
  10c5dc:	e8 70 d0 ff ff       	call   109651 <z_unpend_first_thread>
  10c5e1:	5a                   	pop    %edx
  10c5e2:	85 c0                	test   %eax,%eax
  10c5e4:	74 15                	je     10c5fb <z_impl_k_futex_wake+0xab>
  10c5e6:	8b 50 2c             	mov    0x2c(%eax),%edx
  10c5e9:	31 c9                	xor    %ecx,%ecx
  10c5eb:	43                   	inc    %ebx
  10c5ec:	89 0a                	mov    %ecx,(%edx)
  10c5ee:	50                   	push   %eax
  10c5ef:	e8 10 cc ff ff       	call   109204 <z_ready_thread>
  10c5f4:	58                   	pop    %eax
  10c5f5:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
  10c5f9:	75 e0                	jne    10c5db <z_impl_k_futex_wake+0x8b>
  10c5fb:	ff 75 ec             	push   -0x14(%ebp)
  10c5fe:	56                   	push   %esi
  10c5ff:	e8 a9 d3 ff ff       	call   1099ad <z_reschedule>
  10c604:	58                   	pop    %eax
  10c605:	89 d8                	mov    %ebx,%eax
  10c607:	5a                   	pop    %edx
  10c608:	eb 05                	jmp    10c60f <z_impl_k_futex_wake+0xbf>
  10c60a:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
  10c60f:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10c612:	5b                   	pop    %ebx
  10c613:	5e                   	pop    %esi
  10c614:	5f                   	pop    %edi
  10c615:	5d                   	pop    %ebp
  10c616:	c3                   	ret

0010c617 <z_mrsh_k_futex_wake>:
  10c617:	55                   	push   %ebp
  10c618:	89 e5                	mov    %esp,%ebp
  10c61a:	56                   	push   %esi
  10c61b:	53                   	push   %ebx
  10c61c:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10c621:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10c624:	8b 55 20             	mov    0x20(%ebp),%edx
  10c627:	83 fb fb             	cmp    $0xfffffffb,%ebx
  10c62a:	0f b6 75 0c          	movzbl 0xc(%ebp),%esi
  10c62e:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10c634:	76 23                	jbe    10c659 <z_mrsh_k_futex_wake+0x42>
  10c636:	68 c7 12 11 00       	push   $0x1112c7
  10c63b:	6a 04                	push   $0x4
  10c63d:	53                   	push   %ebx
  10c63e:	68 50 0c 11 00       	push   $0x110c50
  10c643:	6a 45                	push   $0x45
  10c645:	68 7c 12 11 00       	push   $0x11127c
  10c64a:	e8 a9 5e ff ff       	call   1024f8 <z_log_minimal_printk>
  10c64f:	83 c4 18             	add    $0x18,%esp
  10c652:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
  10c657:	eb 1a                	jmp    10c673 <z_mrsh_k_futex_wake+0x5c>
  10c659:	6a 01                	push   $0x1
  10c65b:	6a 04                	push   $0x4
  10c65d:	53                   	push   %ebx
  10c65e:	e8 33 71 ff ff       	call   103796 <arch_buffer_validate>
  10c663:	83 c4 0c             	add    $0xc,%esp
  10c666:	85 c0                	test   %eax,%eax
  10c668:	75 cc                	jne    10c636 <z_mrsh_k_futex_wake+0x1f>
  10c66a:	56                   	push   %esi
  10c66b:	53                   	push   %ebx
  10c66c:	e8 df fe ff ff       	call   10c550 <z_impl_k_futex_wake>
  10c671:	5b                   	pop    %ebx
  10c672:	5e                   	pop    %esi
  10c673:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  10c679:	31 c9                	xor    %ecx,%ecx
  10c67b:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  10c681:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10c684:	5b                   	pop    %ebx
  10c685:	5e                   	pop    %esi
  10c686:	5d                   	pop    %ebp
  10c687:	c3                   	ret

0010c688 <z_impl_k_futex_wait>:
  10c688:	55                   	push   %ebp
  10c689:	89 e5                	mov    %esp,%ebp
  10c68b:	57                   	push   %edi
  10c68c:	56                   	push   %esi
  10c68d:	53                   	push   %ebx
  10c68e:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10c691:	53                   	push   %ebx
  10c692:	e8 9e 0d 00 00       	call   10d435 <k_object_find>
  10c697:	59                   	pop    %ecx
  10c698:	85 c0                	test   %eax,%eax
  10c69a:	0f 84 83 00 00 00    	je     10c723 <z_impl_k_futex_wait+0x9b>
  10c6a0:	80 78 07 0f          	cmpb   $0xf,0x7(%eax)
  10c6a4:	75 7d                	jne    10c723 <z_impl_k_futex_wait+0x9b>
  10c6a6:	8b 70 09             	mov    0x9(%eax),%esi
  10c6a9:	85 f6                	test   %esi,%esi
  10c6ab:	74 76                	je     10c723 <z_impl_k_futex_wait+0x9b>
  10c6ad:	8b 03                	mov    (%ebx),%eax
  10c6af:	39 45 0c             	cmp    %eax,0xc(%ebp)
  10c6b2:	75 76                	jne    10c72a <z_impl_k_futex_wait+0xa2>
  10c6b4:	8d 5e 10             	lea    0x10(%esi),%ebx
  10c6b7:	9c                   	pushf
  10c6b8:	fa                   	cli
  10c6b9:	5f                   	pop    %edi
  10c6ba:	53                   	push   %ebx
  10c6bb:	e8 2f e6 ff ff       	call   10acef <z_spin_lock_valid>
  10c6c0:	5a                   	pop    %edx
  10c6c1:	84 c0                	test   %al,%al
  10c6c3:	75 3a                	jne    10c6ff <z_impl_k_futex_wait+0x77>
  10c6c5:	68 88 00 00 00       	push   $0x88
  10c6ca:	68 61 13 11 00       	push   $0x111361
  10c6cf:	68 8e 13 11 00       	push   $0x11138e
  10c6d4:	68 ee 10 11 00       	push   $0x1110ee
  10c6d9:	e8 ff 4e ff ff       	call   1015dd <assert_print>
  10c6de:	83 c4 10             	add    $0x10,%esp
  10c6e1:	53                   	push   %ebx
  10c6e2:	68 a3 13 11 00       	push   $0x1113a3
  10c6e7:	e8 f1 4e ff ff       	call   1015dd <assert_print>
  10c6ec:	5a                   	pop    %edx
  10c6ed:	59                   	pop    %ecx
  10c6ee:	68 88 00 00 00       	push   $0x88
  10c6f3:	68 61 13 11 00       	push   $0x111361
  10c6f8:	e8 d1 4e ff ff       	call   1015ce <assert_post_action>
  10c6fd:	5b                   	pop    %ebx
  10c6fe:	5e                   	pop    %esi
  10c6ff:	53                   	push   %ebx
  10c700:	e8 42 e6 ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10c705:	58                   	pop    %eax
  10c706:	ff 75 14             	push   0x14(%ebp)
  10c709:	ff 75 10             	push   0x10(%ebp)
  10c70c:	56                   	push   %esi
  10c70d:	57                   	push   %edi
  10c70e:	53                   	push   %ebx
  10c70f:	e8 e2 cd ff ff       	call   1094f6 <z_pend_curr>
  10c714:	83 c4 14             	add    $0x14,%esp
  10c717:	83 f8 f5             	cmp    $0xfffffff5,%eax
  10c71a:	75 13                	jne    10c72f <z_impl_k_futex_wait+0xa7>
  10c71c:	b8 8c ff ff ff       	mov    $0xffffff8c,%eax
  10c721:	eb 0c                	jmp    10c72f <z_impl_k_futex_wait+0xa7>
  10c723:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
  10c728:	eb 05                	jmp    10c72f <z_impl_k_futex_wait+0xa7>
  10c72a:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  10c72f:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10c732:	5b                   	pop    %ebx
  10c733:	5e                   	pop    %esi
  10c734:	5f                   	pop    %edi
  10c735:	5d                   	pop    %ebp
  10c736:	c3                   	ret

0010c737 <z_mrsh_k_futex_wait>:
  10c737:	55                   	push   %ebp
  10c738:	89 e5                	mov    %esp,%ebp
  10c73a:	57                   	push   %edi
  10c73b:	56                   	push   %esi
  10c73c:	53                   	push   %ebx
  10c73d:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10c742:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10c745:	8b 55 20             	mov    0x20(%ebp),%edx
  10c748:	8b 75 10             	mov    0x10(%ebp),%esi
  10c74b:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10c751:	8b 7d 14             	mov    0x14(%ebp),%edi
  10c754:	83 fb fb             	cmp    $0xfffffffb,%ebx
  10c757:	76 23                	jbe    10c77c <z_mrsh_k_futex_wait+0x45>
  10c759:	68 c7 12 11 00       	push   $0x1112c7
  10c75e:	6a 04                	push   $0x4
  10c760:	53                   	push   %ebx
  10c761:	68 3c 0c 11 00       	push   $0x110c3c
  10c766:	6a 45                	push   $0x45
  10c768:	68 7c 12 11 00       	push   $0x11127c
  10c76d:	e8 86 5d ff ff       	call   1024f8 <z_log_minimal_printk>
  10c772:	83 c4 18             	add    $0x18,%esp
  10c775:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
  10c77a:	eb 1f                	jmp    10c79b <z_mrsh_k_futex_wait+0x64>
  10c77c:	6a 01                	push   $0x1
  10c77e:	6a 04                	push   $0x4
  10c780:	53                   	push   %ebx
  10c781:	e8 10 70 ff ff       	call   103796 <arch_buffer_validate>
  10c786:	83 c4 0c             	add    $0xc,%esp
  10c789:	85 c0                	test   %eax,%eax
  10c78b:	75 cc                	jne    10c759 <z_mrsh_k_futex_wait+0x22>
  10c78d:	57                   	push   %edi
  10c78e:	56                   	push   %esi
  10c78f:	ff 75 0c             	push   0xc(%ebp)
  10c792:	53                   	push   %ebx
  10c793:	e8 f0 fe ff ff       	call   10c688 <z_impl_k_futex_wait>
  10c798:	83 c4 10             	add    $0x10,%esp
  10c79b:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  10c7a1:	31 c9                	xor    %ecx,%ecx
  10c7a3:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  10c7a9:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10c7ac:	5b                   	pop    %ebx
  10c7ad:	5e                   	pop    %esi
  10c7ae:	5f                   	pop    %edi
  10c7af:	5d                   	pop    %ebp
  10c7b0:	c3                   	ret

0010c7b1 <check_add_partition>:
  10c7b1:	55                   	push   %ebp
  10c7b2:	89 e5                	mov    %esp,%ebp
  10c7b4:	57                   	push   %edi
  10c7b5:	56                   	push   %esi
  10c7b6:	53                   	push   %ebx
  10c7b7:	83 ec 10             	sub    $0x10,%esp
  10c7ba:	85 d2                	test   %edx,%edx
  10c7bc:	75 10                	jne    10c7ce <check_add_partition+0x1d>
  10c7be:	6a 45                	push   $0x45
  10c7c0:	68 90 36 11 00       	push   $0x113690
  10c7c5:	e8 2e 5d ff ff       	call   1024f8 <z_log_minimal_printk>
  10c7ca:	5a                   	pop    %edx
  10c7cb:	59                   	pop    %ecx
  10c7cc:	eb 1a                	jmp    10c7e8 <check_add_partition+0x37>
  10c7ce:	8b 7a 04             	mov    0x4(%edx),%edi
  10c7d1:	8b 0a                	mov    (%edx),%ecx
  10c7d3:	85 ff                	test   %edi,%edi
  10c7d5:	75 15                	jne    10c7ec <check_add_partition+0x3b>
  10c7d7:	51                   	push   %ecx
  10c7d8:	52                   	push   %edx
  10c7d9:	6a 45                	push   $0x45
  10c7db:	68 b3 36 11 00       	push   $0x1136b3
  10c7e0:	e8 13 5d ff ff       	call   1024f8 <z_log_minimal_printk>
  10c7e5:	83 c4 10             	add    $0x10,%esp
  10c7e8:	31 c0                	xor    %eax,%eax
  10c7ea:	eb 78                	jmp    10c864 <check_add_partition+0xb3>
  10c7ec:	8d 34 0f             	lea    (%edi,%ecx,1),%esi
  10c7ef:	89 75 e8             	mov    %esi,-0x18(%ebp)
  10c7f2:	39 f1                	cmp    %esi,%ecx
  10c7f4:	73 17                	jae    10c80d <check_add_partition+0x5c>
  10c7f6:	0f b6 98 48 01 00 00 	movzbl 0x148(%eax),%ebx
  10c7fd:	83 c0 40             	add    $0x40,%eax
  10c800:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
  10c803:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10c806:	31 c0                	xor    %eax,%eax
  10c808:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10c80b:	eb 25                	jmp    10c832 <check_add_partition+0x81>
  10c80d:	57                   	push   %edi
  10c80e:	51                   	push   %ecx
  10c80f:	52                   	push   %edx
  10c810:	6a 45                	push   $0x45
  10c812:	68 e3 36 11 00       	push   $0x1136e3
  10c817:	e8 dc 5c ff ff       	call   1024f8 <z_log_minimal_printk>
  10c81c:	83 c4 14             	add    $0x14,%esp
  10c81f:	eb c7                	jmp    10c7e8 <check_add_partition+0x37>
  10c821:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10c824:	8b 70 04             	mov    0x4(%eax),%esi
  10c827:	85 f6                	test   %esi,%esi
  10c829:	75 11                	jne    10c83c <check_add_partition+0x8b>
  10c82b:	ff 45 ec             	incl   -0x14(%ebp)
  10c82e:	83 45 f0 10          	addl   $0x10,-0x10(%ebp)
  10c832:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10c835:	39 75 ec             	cmp    %esi,-0x14(%ebp)
  10c838:	7c e7                	jl     10c821 <check_add_partition+0x70>
  10c83a:	eb 26                	jmp    10c862 <check_add_partition+0xb1>
  10c83c:	8b 18                	mov    (%eax),%ebx
  10c83e:	8d 04 1e             	lea    (%esi,%ebx,1),%eax
  10c841:	39 c1                	cmp    %eax,%ecx
  10c843:	73 e6                	jae    10c82b <check_add_partition+0x7a>
  10c845:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10c848:	39 c3                	cmp    %eax,%ebx
  10c84a:	73 df                	jae    10c82b <check_add_partition+0x7a>
  10c84c:	56                   	push   %esi
  10c84d:	53                   	push   %ebx
  10c84e:	57                   	push   %edi
  10c84f:	51                   	push   %ecx
  10c850:	52                   	push   %edx
  10c851:	6a 45                	push   $0x45
  10c853:	68 27 37 11 00       	push   $0x113727
  10c858:	e8 9b 5c ff ff       	call   1024f8 <z_log_minimal_printk>
  10c85d:	83 c4 1c             	add    $0x1c,%esp
  10c860:	eb 86                	jmp    10c7e8 <check_add_partition+0x37>
  10c862:	b0 01                	mov    $0x1,%al
  10c864:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10c867:	5b                   	pop    %ebx
  10c868:	5e                   	pop    %esi
  10c869:	5f                   	pop    %edi
  10c86a:	5d                   	pop    %ebp
  10c86b:	c3                   	ret

0010c86c <add_thread_locked>:
  10c86c:	55                   	push   %ebp
  10c86d:	85 c0                	test   %eax,%eax
  10c86f:	89 e5                	mov    %esp,%ebp
  10c871:	56                   	push   %esi
  10c872:	53                   	push   %ebx
  10c873:	75 23                	jne    10c898 <add_thread_locked+0x2c>
  10c875:	68 08 01 00 00       	push   $0x108
  10c87a:	68 73 37 11 00       	push   $0x113773
  10c87f:	68 9a 37 11 00       	push   $0x11379a
  10c884:	68 ee 10 11 00       	push   $0x1110ee
  10c889:	e8 4f 4d ff ff       	call   1015dd <assert_print>
  10c88e:	83 c4 10             	add    $0x10,%esp
  10c891:	68 08 01 00 00       	push   $0x108
  10c896:	eb 25                	jmp    10c8bd <add_thread_locked+0x51>
  10c898:	85 d2                	test   %edx,%edx
  10c89a:	75 2d                	jne    10c8c9 <add_thread_locked+0x5d>
  10c89c:	68 09 01 00 00       	push   $0x109
  10c8a1:	68 73 37 11 00       	push   $0x113773
  10c8a6:	68 b0 37 11 00       	push   $0x1137b0
  10c8ab:	68 ee 10 11 00       	push   $0x1110ee
  10c8b0:	e8 28 4d ff ff       	call   1015dd <assert_print>
  10c8b5:	83 c4 10             	add    $0x10,%esp
  10c8b8:	68 09 01 00 00       	push   $0x109
  10c8bd:	68 73 37 11 00       	push   $0x113773
  10c8c2:	e8 07 4d ff ff       	call   1015ce <assert_post_action>
  10c8c7:	59                   	pop    %ecx
  10c8c8:	5b                   	pop    %ebx
  10c8c9:	8b 98 44 01 00 00    	mov    0x144(%eax),%ebx
  10c8cf:	8d 4a 78             	lea    0x78(%edx),%ecx
  10c8d2:	8d b0 40 01 00 00    	lea    0x140(%eax),%esi
  10c8d8:	89 5a 7c             	mov    %ebx,0x7c(%edx)
  10c8db:	89 72 78             	mov    %esi,0x78(%edx)
  10c8de:	89 0b                	mov    %ecx,(%ebx)
  10c8e0:	89 88 44 01 00 00    	mov    %ecx,0x144(%eax)
  10c8e6:	89 82 80 00 00 00    	mov    %eax,0x80(%edx)
  10c8ec:	52                   	push   %edx
  10c8ed:	e8 70 71 ff ff       	call   103a62 <arch_mem_domain_thread_add>
  10c8f2:	5a                   	pop    %edx
  10c8f3:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10c8f6:	5b                   	pop    %ebx
  10c8f7:	5e                   	pop    %esi
  10c8f8:	5d                   	pop    %ebp
  10c8f9:	c3                   	ret

0010c8fa <remove_thread_locked>:
  10c8fa:	55                   	push   %ebp
  10c8fb:	85 c0                	test   %eax,%eax
  10c8fd:	89 e5                	mov    %esp,%ebp
  10c8ff:	75 2d                	jne    10c92e <remove_thread_locked+0x34>
  10c901:	68 1b 01 00 00       	push   $0x11b
  10c906:	68 73 37 11 00       	push   $0x113773
  10c90b:	68 b0 37 11 00       	push   $0x1137b0
  10c910:	68 ee 10 11 00       	push   $0x1110ee
  10c915:	e8 c3 4c ff ff       	call   1015dd <assert_print>
  10c91a:	83 c4 10             	add    $0x10,%esp
  10c91d:	68 1b 01 00 00       	push   $0x11b
  10c922:	68 73 37 11 00       	push   $0x113773
  10c927:	e8 a2 4c ff ff       	call   1015ce <assert_post_action>
  10c92c:	58                   	pop    %eax
  10c92d:	5a                   	pop    %edx
  10c92e:	8b 48 7c             	mov    0x7c(%eax),%ecx
  10c931:	8b 50 78             	mov    0x78(%eax),%edx
  10c934:	89 11                	mov    %edx,(%ecx)
  10c936:	89 4a 04             	mov    %ecx,0x4(%edx)
  10c939:	31 d2                	xor    %edx,%edx
  10c93b:	89 50 78             	mov    %edx,0x78(%eax)
  10c93e:	89 50 7c             	mov    %edx,0x7c(%eax)
  10c941:	50                   	push   %eax
  10c942:	e8 a9 70 ff ff       	call   1039f0 <arch_mem_domain_thread_remove>
  10c947:	59                   	pop    %ecx
  10c948:	c9                   	leave
  10c949:	c3                   	ret

0010c94a <k_mem_domain_init>:
  10c94a:	55                   	push   %ebp
  10c94b:	89 e5                	mov    %esp,%ebp
  10c94d:	57                   	push   %edi
  10c94e:	56                   	push   %esi
  10c94f:	53                   	push   %ebx
  10c950:	83 ec 14             	sub    $0x14,%esp
  10c953:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10c956:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c959:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10c95c:	8b 75 10             	mov    0x10(%ebp),%esi
  10c95f:	85 db                	test   %ebx,%ebx
  10c961:	0f 84 bf 01 00 00    	je     10cb26 <k_mem_domain_init+0x1dc>
  10c967:	80 7d ec 00          	cmpb   $0x0,-0x14(%ebp)
  10c96b:	74 17                	je     10c984 <k_mem_domain_init+0x3a>
  10c96d:	85 f6                	test   %esi,%esi
  10c96f:	75 13                	jne    10c984 <k_mem_domain_init+0x3a>
  10c971:	6a 45                	push   $0x45
  10c973:	68 c6 37 11 00       	push   $0x1137c6
  10c978:	e8 7b 5b ff ff       	call   1024f8 <z_log_minimal_printk>
  10c97d:	5b                   	pop    %ebx
  10c97e:	5e                   	pop    %esi
  10c97f:	e9 a2 01 00 00       	jmp    10cb26 <k_mem_domain_init+0x1dc>
  10c984:	0f b6 05 33 cd 12 00 	movzbl 0x12cd33,%eax
  10c98b:	3a 45 ec             	cmp    -0x14(%ebp),%al
  10c98e:	73 1a                	jae    10c9aa <k_mem_domain_init+0x60>
  10c990:	50                   	push   %eax
  10c991:	0f b6 5d ec          	movzbl -0x14(%ebp),%ebx
  10c995:	53                   	push   %ebx
  10c996:	6a 45                	push   $0x45
  10c998:	68 f8 37 11 00       	push   $0x1137f8
  10c99d:	e8 56 5b ff ff       	call   1024f8 <z_log_minimal_printk>
  10c9a2:	83 c4 10             	add    $0x10,%esp
  10c9a5:	e9 7c 01 00 00       	jmp    10cb26 <k_mem_domain_init+0x1dc>
  10c9aa:	9c                   	pushf
  10c9ab:	fa                   	cli
  10c9ac:	8f 45 e0             	pop    -0x20(%ebp)
  10c9af:	68 20 cd 12 00       	push   $0x12cd20
  10c9b4:	e8 36 e3 ff ff       	call   10acef <z_spin_lock_valid>
  10c9b9:	59                   	pop    %ecx
  10c9ba:	84 c0                	test   %al,%al
  10c9bc:	75 37                	jne    10c9f5 <k_mem_domain_init+0xab>
  10c9be:	68 88 00 00 00       	push   $0x88
  10c9c3:	68 61 13 11 00       	push   $0x111361
  10c9c8:	68 8e 13 11 00       	push   $0x11138e
  10c9cd:	68 ee 10 11 00       	push   $0x1110ee
  10c9d2:	e8 06 4c ff ff       	call   1015dd <assert_print>
  10c9d7:	83 c4 10             	add    $0x10,%esp
  10c9da:	68 20 cd 12 00       	push   $0x12cd20
  10c9df:	68 a3 13 11 00       	push   $0x1113a3
  10c9e4:	e8 f4 4b ff ff       	call   1015dd <assert_print>
  10c9e9:	58                   	pop    %eax
  10c9ea:	5a                   	pop    %edx
  10c9eb:	68 88 00 00 00       	push   $0x88
  10c9f0:	e9 1b 01 00 00       	jmp    10cb10 <k_mem_domain_init+0x1c6>
  10c9f5:	68 20 cd 12 00       	push   $0x12cd20
  10c9fa:	e8 48 e3 ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10c9ff:	8d 53 40             	lea    0x40(%ebx),%edx
  10ca02:	31 c0                	xor    %eax,%eax
  10ca04:	89 d7                	mov    %edx,%edi
  10ca06:	b9 40 00 00 00       	mov    $0x40,%ecx
  10ca0b:	c6 83 48 01 00 00 00 	movb   $0x0,0x148(%ebx)
  10ca12:	f3 ab                	rep stos %eax,%es:(%edi)
  10ca14:	8d 83 40 01 00 00    	lea    0x140(%ebx),%eax
  10ca1a:	89 83 40 01 00 00    	mov    %eax,0x140(%ebx)
  10ca20:	89 83 44 01 00 00    	mov    %eax,0x144(%ebx)
  10ca26:	89 1c 24             	mov    %ebx,(%esp)
  10ca29:	e8 72 6e ff ff       	call   1038a0 <arch_mem_domain_init>
  10ca2e:	5f                   	pop    %edi
  10ca2f:	85 c0                	test   %eax,%eax
  10ca31:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10ca34:	74 1a                	je     10ca50 <k_mem_domain_init+0x106>
  10ca36:	50                   	push   %eax
  10ca37:	53                   	push   %ebx
  10ca38:	6a 45                	push   $0x45
  10ca3a:	68 37 38 11 00       	push   $0x113837
  10ca3f:	e8 b4 5a ff ff       	call   1024f8 <z_log_minimal_printk>
  10ca44:	83 c4 10             	add    $0x10,%esp
  10ca47:	c7 45 f0 f4 ff ff ff 	movl   $0xfffffff4,-0x10(%ebp)
  10ca4e:	eb 7f                	jmp    10cacf <k_mem_domain_init+0x185>
  10ca50:	80 7d ec 00          	cmpb   $0x0,-0x14(%ebp)
  10ca54:	74 79                	je     10cacf <k_mem_domain_init+0x185>
  10ca56:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
  10ca5a:	31 c9                	xor    %ecx,%ecx
  10ca5c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10ca5f:	89 75 e8             	mov    %esi,-0x18(%ebp)
  10ca62:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10ca65:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10ca68:	8b 10                	mov    (%eax),%edx
  10ca6a:	89 d8                	mov    %ebx,%eax
  10ca6c:	e8 40 fd ff ff       	call   10c7b1 <check_add_partition>
  10ca71:	84 c0                	test   %al,%al
  10ca73:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10ca76:	75 1d                	jne    10ca95 <k_mem_domain_init+0x14b>
  10ca78:	ff 30                	push   (%eax)
  10ca7a:	ff 75 ec             	push   -0x14(%ebp)
  10ca7d:	6a 45                	push   $0x45
  10ca7f:	68 7e 38 11 00       	push   $0x11387e
  10ca84:	e8 6f 5a ff ff       	call   1024f8 <z_log_minimal_printk>
  10ca89:	83 c4 10             	add    $0x10,%esp
  10ca8c:	c7 45 f0 ea ff ff ff 	movl   $0xffffffea,-0x10(%ebp)
  10ca93:	eb 3a                	jmp    10cacf <k_mem_domain_init+0x185>
  10ca95:	8b 30                	mov    (%eax),%esi
  10ca97:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10ca9a:	c1 e0 04             	shl    $0x4,%eax
  10ca9d:	b9 04 00 00 00       	mov    $0x4,%ecx
  10caa2:	8d 7c 03 40          	lea    0x40(%ebx,%eax,1),%edi
  10caa6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
  10caa8:	fe 83 48 01 00 00    	incb   0x148(%ebx)
  10caae:	ff 75 ec             	push   -0x14(%ebp)
  10cab1:	53                   	push   %ebx
  10cab2:	e8 72 6f ff ff       	call   103a29 <arch_mem_domain_partition_add>
  10cab7:	5f                   	pop    %edi
  10cab8:	85 c0                	test   %eax,%eax
  10caba:	5a                   	pop    %edx
  10cabb:	74 03                	je     10cac0 <k_mem_domain_init+0x176>
  10cabd:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10cac0:	ff 45 ec             	incl   -0x14(%ebp)
  10cac3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  10cac6:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
  10caca:	39 55 ec             	cmp    %edx,-0x14(%ebp)
  10cacd:	72 96                	jb     10ca65 <k_mem_domain_init+0x11b>
  10cacf:	68 20 cd 12 00       	push   $0x12cd20
  10cad4:	e8 37 e2 ff ff       	call   10ad10 <z_spin_unlock_valid>
  10cad9:	5e                   	pop    %esi
  10cada:	84 c0                	test   %al,%al
  10cadc:	75 3e                	jne    10cb1c <k_mem_domain_init+0x1d2>
  10cade:	68 31 01 00 00       	push   $0x131
  10cae3:	68 61 13 11 00       	push   $0x111361
  10cae8:	68 e8 13 11 00       	push   $0x1113e8
  10caed:	68 ee 10 11 00       	push   $0x1110ee
  10caf2:	e8 e6 4a ff ff       	call   1015dd <assert_print>
  10caf7:	83 c4 10             	add    $0x10,%esp
  10cafa:	68 20 cd 12 00       	push   $0x12cd20
  10caff:	68 ff 13 11 00       	push   $0x1113ff
  10cb04:	e8 d4 4a ff ff       	call   1015dd <assert_print>
  10cb09:	59                   	pop    %ecx
  10cb0a:	5b                   	pop    %ebx
  10cb0b:	68 31 01 00 00       	push   $0x131
  10cb10:	68 61 13 11 00       	push   $0x111361
  10cb15:	e8 b4 4a ff ff       	call   1015ce <assert_post_action>
  10cb1a:	58                   	pop    %eax
  10cb1b:	5a                   	pop    %edx
  10cb1c:	0f ba 65 e0 09       	btl    $0x9,-0x20(%ebp)
  10cb21:	73 0a                	jae    10cb2d <k_mem_domain_init+0x1e3>
  10cb23:	fb                   	sti
  10cb24:	eb 07                	jmp    10cb2d <k_mem_domain_init+0x1e3>
  10cb26:	c7 45 f0 ea ff ff ff 	movl   $0xffffffea,-0x10(%ebp)
  10cb2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10cb30:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10cb33:	5b                   	pop    %ebx
  10cb34:	5e                   	pop    %esi
  10cb35:	5f                   	pop    %edi
  10cb36:	5d                   	pop    %ebp
  10cb37:	c3                   	ret

0010cb38 <k_mem_domain_add_partition>:
  10cb38:	55                   	push   %ebp
  10cb39:	89 e5                	mov    %esp,%ebp
  10cb3b:	57                   	push   %edi
  10cb3c:	56                   	push   %esi
  10cb3d:	53                   	push   %ebx
  10cb3e:	53                   	push   %ebx
  10cb3f:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10cb42:	8b 75 0c             	mov    0xc(%ebp),%esi
  10cb45:	85 db                	test   %ebx,%ebx
  10cb47:	0f 84 2a 01 00 00    	je     10cc77 <k_mem_domain_add_partition+0x13f>
  10cb4d:	89 f2                	mov    %esi,%edx
  10cb4f:	89 d8                	mov    %ebx,%eax
  10cb51:	e8 5b fc ff ff       	call   10c7b1 <check_add_partition>
  10cb56:	84 c0                	test   %al,%al
  10cb58:	75 15                	jne    10cb6f <k_mem_domain_add_partition+0x37>
  10cb5a:	56                   	push   %esi
  10cb5b:	6a 45                	push   $0x45
  10cb5d:	68 a3 38 11 00       	push   $0x1138a3
  10cb62:	e8 91 59 ff ff       	call   1024f8 <z_log_minimal_printk>
  10cb67:	83 c4 0c             	add    $0xc,%esp
  10cb6a:	e9 08 01 00 00       	jmp    10cc77 <k_mem_domain_add_partition+0x13f>
  10cb6f:	9c                   	pushf
  10cb70:	fa                   	cli
  10cb71:	8f 45 f0             	pop    -0x10(%ebp)
  10cb74:	68 20 cd 12 00       	push   $0x12cd20
  10cb79:	e8 71 e1 ff ff       	call   10acef <z_spin_lock_valid>
  10cb7e:	59                   	pop    %ecx
  10cb7f:	84 c0                	test   %al,%al
  10cb81:	75 37                	jne    10cbba <k_mem_domain_add_partition+0x82>
  10cb83:	68 88 00 00 00       	push   $0x88
  10cb88:	68 61 13 11 00       	push   $0x111361
  10cb8d:	68 8e 13 11 00       	push   $0x11138e
  10cb92:	68 ee 10 11 00       	push   $0x1110ee
  10cb97:	e8 41 4a ff ff       	call   1015dd <assert_print>
  10cb9c:	83 c4 10             	add    $0x10,%esp
  10cb9f:	68 20 cd 12 00       	push   $0x12cd20
  10cba4:	68 a3 13 11 00       	push   $0x1113a3
  10cba9:	e8 2f 4a ff ff       	call   1015dd <assert_print>
  10cbae:	58                   	pop    %eax
  10cbaf:	5a                   	pop    %edx
  10cbb0:	68 88 00 00 00       	push   $0x88
  10cbb5:	e9 a7 00 00 00       	jmp    10cc61 <k_mem_domain_add_partition+0x129>
  10cbba:	68 20 cd 12 00       	push   $0x12cd20
  10cbbf:	e8 83 e1 ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10cbc4:	0f b6 05 33 cd 12 00 	movzbl 0x12cd33,%eax
  10cbcb:	5f                   	pop    %edi
  10cbcc:	31 ff                	xor    %edi,%edi
  10cbce:	39 f8                	cmp    %edi,%eax
  10cbd0:	7e 0f                	jle    10cbe1 <k_mem_domain_add_partition+0xa9>
  10cbd2:	89 f9                	mov    %edi,%ecx
  10cbd4:	c1 e1 04             	shl    $0x4,%ecx
  10cbd7:	83 7c 0b 44 00       	cmpl   $0x0,0x44(%ebx,%ecx,1)
  10cbdc:	74 18                	je     10cbf6 <k_mem_domain_add_partition+0xbe>
  10cbde:	47                   	inc    %edi
  10cbdf:	eb ed                	jmp    10cbce <k_mem_domain_add_partition+0x96>
  10cbe1:	6a 45                	push   $0x45
  10cbe3:	68 bd 38 11 00       	push   $0x1138bd
  10cbe8:	e8 0b 59 ff ff       	call   1024f8 <z_log_minimal_printk>
  10cbed:	59                   	pop    %ecx
  10cbee:	5b                   	pop    %ebx
  10cbef:	bb e4 ff ff ff       	mov    $0xffffffe4,%ebx
  10cbf4:	eb 2a                	jmp    10cc20 <k_mem_domain_add_partition+0xe8>
  10cbf6:	01 d9                	add    %ebx,%ecx
  10cbf8:	8b 06                	mov    (%esi),%eax
  10cbfa:	89 41 40             	mov    %eax,0x40(%ecx)
  10cbfd:	8b 46 04             	mov    0x4(%esi),%eax
  10cc00:	89 41 44             	mov    %eax,0x44(%ecx)
  10cc03:	8b 56 0c             	mov    0xc(%esi),%edx
  10cc06:	8b 46 08             	mov    0x8(%esi),%eax
  10cc09:	89 41 48             	mov    %eax,0x48(%ecx)
  10cc0c:	89 51 4c             	mov    %edx,0x4c(%ecx)
  10cc0f:	fe 83 48 01 00 00    	incb   0x148(%ebx)
  10cc15:	57                   	push   %edi
  10cc16:	53                   	push   %ebx
  10cc17:	e8 0d 6e ff ff       	call   103a29 <arch_mem_domain_partition_add>
  10cc1c:	5f                   	pop    %edi
  10cc1d:	89 c3                	mov    %eax,%ebx
  10cc1f:	5a                   	pop    %edx
  10cc20:	68 20 cd 12 00       	push   $0x12cd20
  10cc25:	e8 e6 e0 ff ff       	call   10ad10 <z_spin_unlock_valid>
  10cc2a:	5e                   	pop    %esi
  10cc2b:	84 c0                	test   %al,%al
  10cc2d:	75 3e                	jne    10cc6d <k_mem_domain_add_partition+0x135>
  10cc2f:	68 31 01 00 00       	push   $0x131
  10cc34:	68 61 13 11 00       	push   $0x111361
  10cc39:	68 e8 13 11 00       	push   $0x1113e8
  10cc3e:	68 ee 10 11 00       	push   $0x1110ee
  10cc43:	e8 95 49 ff ff       	call   1015dd <assert_print>
  10cc48:	83 c4 10             	add    $0x10,%esp
  10cc4b:	68 20 cd 12 00       	push   $0x12cd20
  10cc50:	68 ff 13 11 00       	push   $0x1113ff
  10cc55:	e8 83 49 ff ff       	call   1015dd <assert_print>
  10cc5a:	59                   	pop    %ecx
  10cc5b:	5b                   	pop    %ebx
  10cc5c:	68 31 01 00 00       	push   $0x131
  10cc61:	68 61 13 11 00       	push   $0x111361
  10cc66:	e8 63 49 ff ff       	call   1015ce <assert_post_action>
  10cc6b:	58                   	pop    %eax
  10cc6c:	5a                   	pop    %edx
  10cc6d:	0f ba 65 f0 09       	btl    $0x9,-0x10(%ebp)
  10cc72:	73 08                	jae    10cc7c <k_mem_domain_add_partition+0x144>
  10cc74:	fb                   	sti
  10cc75:	eb 05                	jmp    10cc7c <k_mem_domain_add_partition+0x144>
  10cc77:	bb ea ff ff ff       	mov    $0xffffffea,%ebx
  10cc7c:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10cc7f:	89 d8                	mov    %ebx,%eax
  10cc81:	5b                   	pop    %ebx
  10cc82:	5e                   	pop    %esi
  10cc83:	5f                   	pop    %edi
  10cc84:	5d                   	pop    %ebp
  10cc85:	c3                   	ret

0010cc86 <init_mem_domain_module>:
  10cc86:	55                   	push   %ebp
  10cc87:	89 e5                	mov    %esp,%ebp
  10cc89:	e8 52 6e ff ff       	call   103ae0 <arch_mem_domain_max_partitions_get>
  10cc8e:	a2 33 cd 12 00       	mov    %al,0x12cd33
  10cc93:	3c 10                	cmp    $0x10,%al
  10cc95:	76 2f                	jbe    10ccc6 <init_mem_domain_module+0x40>
  10cc97:	68 61 01 00 00       	push   $0x161
  10cc9c:	68 73 37 11 00       	push   $0x113773
  10cca1:	68 e4 38 11 00       	push   $0x1138e4
  10cca6:	68 ee 10 11 00       	push   $0x1110ee
  10ccab:	e8 2d 49 ff ff       	call   1015dd <assert_print>
  10ccb0:	83 c4 10             	add    $0x10,%esp
  10ccb3:	68 4a 23 11 00       	push   $0x11234a
  10ccb8:	e8 20 49 ff ff       	call   1015dd <assert_print>
  10ccbd:	c7 04 24 61 01 00 00 	movl   $0x161,(%esp)
  10ccc4:	eb 42                	jmp    10cd08 <init_mem_domain_module+0x82>
  10ccc6:	6a 00                	push   $0x0
  10ccc8:	6a 00                	push   $0x0
  10ccca:	68 80 ca 12 00       	push   $0x12ca80
  10cccf:	e8 76 fc ff ff       	call   10c94a <k_mem_domain_init>
  10ccd4:	83 c4 0c             	add    $0xc,%esp
  10ccd7:	85 c0                	test   %eax,%eax
  10ccd9:	74 39                	je     10cd14 <init_mem_domain_module+0x8e>
  10ccdb:	68 64 01 00 00       	push   $0x164
  10cce0:	68 73 37 11 00       	push   $0x113773
  10cce5:	68 ca 1a 11 00       	push   $0x111aca
  10ccea:	68 ee 10 11 00       	push   $0x1110ee
  10ccef:	e8 e9 48 ff ff       	call   1015dd <assert_print>
  10ccf4:	83 c4 10             	add    $0x10,%esp
  10ccf7:	68 f9 38 11 00       	push   $0x1138f9
  10ccfc:	e8 dc 48 ff ff       	call   1015dd <assert_print>
  10cd01:	c7 04 24 64 01 00 00 	movl   $0x164,(%esp)
  10cd08:	68 73 37 11 00       	push   $0x113773
  10cd0d:	e8 bc 48 ff ff       	call   1015ce <assert_post_action>
  10cd12:	58                   	pop    %eax
  10cd13:	5a                   	pop    %edx
  10cd14:	68 7c b5 11 00       	push   $0x11b57c
  10cd19:	68 80 ca 12 00       	push   $0x12ca80
  10cd1e:	e8 15 fe ff ff       	call   10cb38 <k_mem_domain_add_partition>
  10cd23:	5a                   	pop    %edx
  10cd24:	85 c0                	test   %eax,%eax
  10cd26:	59                   	pop    %ecx
  10cd27:	74 2f                	je     10cd58 <init_mem_domain_module+0xd2>
  10cd29:	68 69 01 00 00       	push   $0x169
  10cd2e:	68 73 37 11 00       	push   $0x113773
  10cd33:	68 ca 1a 11 00       	push   $0x111aca
  10cd38:	68 ee 10 11 00       	push   $0x1110ee
  10cd3d:	e8 9b 48 ff ff       	call   1015dd <assert_print>
  10cd42:	83 c4 10             	add    $0x10,%esp
  10cd45:	68 1d 39 11 00       	push   $0x11391d
  10cd4a:	e8 8e 48 ff ff       	call   1015dd <assert_print>
  10cd4f:	c7 04 24 69 01 00 00 	movl   $0x169,(%esp)
  10cd56:	eb b0                	jmp    10cd08 <init_mem_domain_module+0x82>
  10cd58:	31 c0                	xor    %eax,%eax
  10cd5a:	c9                   	leave
  10cd5b:	c3                   	ret

0010cd5c <z_mem_domain_init_thread>:
  10cd5c:	55                   	push   %ebp
  10cd5d:	89 e5                	mov    %esp,%ebp
  10cd5f:	53                   	push   %ebx
  10cd60:	9c                   	pushf
  10cd61:	fa                   	cli
  10cd62:	5b                   	pop    %ebx
  10cd63:	68 20 cd 12 00       	push   $0x12cd20
  10cd68:	e8 82 df ff ff       	call   10acef <z_spin_lock_valid>
  10cd6d:	59                   	pop    %ecx
  10cd6e:	84 c0                	test   %al,%al
  10cd70:	75 37                	jne    10cda9 <z_mem_domain_init_thread+0x4d>
  10cd72:	68 88 00 00 00       	push   $0x88
  10cd77:	68 61 13 11 00       	push   $0x111361
  10cd7c:	68 8e 13 11 00       	push   $0x11138e
  10cd81:	68 ee 10 11 00       	push   $0x1110ee
  10cd86:	e8 52 48 ff ff       	call   1015dd <assert_print>
  10cd8b:	83 c4 10             	add    $0x10,%esp
  10cd8e:	68 20 cd 12 00       	push   $0x12cd20
  10cd93:	68 a3 13 11 00       	push   $0x1113a3
  10cd98:	e8 40 48 ff ff       	call   1015dd <assert_print>
  10cd9d:	58                   	pop    %eax
  10cd9e:	5a                   	pop    %edx
  10cd9f:	68 88 00 00 00       	push   $0x88
  10cda4:	e9 90 00 00 00       	jmp    10ce39 <z_mem_domain_init_thread+0xdd>
  10cda9:	68 20 cd 12 00       	push   $0x12cd20
  10cdae:	e8 94 df ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10cdb3:	58                   	pop    %eax
  10cdb4:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10cdb9:	8b 55 08             	mov    0x8(%ebp),%edx
  10cdbc:	8b 80 80 00 00 00    	mov    0x80(%eax),%eax
  10cdc2:	e8 a5 fa ff ff       	call   10c86c <add_thread_locked>
  10cdc7:	85 c0                	test   %eax,%eax
  10cdc9:	74 2d                	je     10cdf8 <z_mem_domain_init_thread+0x9c>
  10cdcb:	68 2f 01 00 00       	push   $0x12f
  10cdd0:	68 73 37 11 00       	push   $0x113773
  10cdd5:	68 ca 1a 11 00       	push   $0x111aca
  10cdda:	68 ee 10 11 00       	push   $0x1110ee
  10cddf:	e8 f9 47 ff ff       	call   1015dd <assert_print>
  10cde4:	83 c4 10             	add    $0x10,%esp
  10cde7:	68 2f 01 00 00       	push   $0x12f
  10cdec:	68 73 37 11 00       	push   $0x113773
  10cdf1:	e8 d8 47 ff ff       	call   1015ce <assert_post_action>
  10cdf6:	5b                   	pop    %ebx
  10cdf7:	58                   	pop    %eax
  10cdf8:	68 20 cd 12 00       	push   $0x12cd20
  10cdfd:	e8 0e df ff ff       	call   10ad10 <z_spin_unlock_valid>
  10ce02:	59                   	pop    %ecx
  10ce03:	84 c0                	test   %al,%al
  10ce05:	75 39                	jne    10ce40 <z_mem_domain_init_thread+0xe4>
  10ce07:	68 31 01 00 00       	push   $0x131
  10ce0c:	68 61 13 11 00       	push   $0x111361
  10ce11:	68 e8 13 11 00       	push   $0x1113e8
  10ce16:	68 ee 10 11 00       	push   $0x1110ee
  10ce1b:	e8 bd 47 ff ff       	call   1015dd <assert_print>
  10ce20:	83 c4 10             	add    $0x10,%esp
  10ce23:	68 20 cd 12 00       	push   $0x12cd20
  10ce28:	68 ff 13 11 00       	push   $0x1113ff
  10ce2d:	e8 ab 47 ff ff       	call   1015dd <assert_print>
  10ce32:	58                   	pop    %eax
  10ce33:	5a                   	pop    %edx
  10ce34:	68 31 01 00 00       	push   $0x131
  10ce39:	68 61 13 11 00       	push   $0x111361
  10ce3e:	eb b1                	jmp    10cdf1 <z_mem_domain_init_thread+0x95>
  10ce40:	0f ba e3 09          	bt     $0x9,%ebx
  10ce44:	73 01                	jae    10ce47 <z_mem_domain_init_thread+0xeb>
  10ce46:	fb                   	sti
  10ce47:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10ce4a:	c9                   	leave
  10ce4b:	c3                   	ret

0010ce4c <z_mem_domain_exit_thread>:
  10ce4c:	55                   	push   %ebp
  10ce4d:	89 e5                	mov    %esp,%ebp
  10ce4f:	53                   	push   %ebx
  10ce50:	9c                   	pushf
  10ce51:	fa                   	cli
  10ce52:	5b                   	pop    %ebx
  10ce53:	68 20 cd 12 00       	push   $0x12cd20
  10ce58:	e8 92 de ff ff       	call   10acef <z_spin_lock_valid>
  10ce5d:	59                   	pop    %ecx
  10ce5e:	84 c0                	test   %al,%al
  10ce60:	75 37                	jne    10ce99 <z_mem_domain_exit_thread+0x4d>
  10ce62:	68 88 00 00 00       	push   $0x88
  10ce67:	68 61 13 11 00       	push   $0x111361
  10ce6c:	68 8e 13 11 00       	push   $0x11138e
  10ce71:	68 ee 10 11 00       	push   $0x1110ee
  10ce76:	e8 62 47 ff ff       	call   1015dd <assert_print>
  10ce7b:	83 c4 10             	add    $0x10,%esp
  10ce7e:	68 20 cd 12 00       	push   $0x12cd20
  10ce83:	68 a3 13 11 00       	push   $0x1113a3
  10ce88:	e8 50 47 ff ff       	call   1015dd <assert_print>
  10ce8d:	58                   	pop    %eax
  10ce8e:	5a                   	pop    %edx
  10ce8f:	68 88 00 00 00       	push   $0x88
  10ce94:	e9 85 00 00 00       	jmp    10cf1e <z_mem_domain_exit_thread+0xd2>
  10ce99:	68 20 cd 12 00       	push   $0x12cd20
  10ce9e:	e8 a4 de ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10cea3:	58                   	pop    %eax
  10cea4:	8b 45 08             	mov    0x8(%ebp),%eax
  10cea7:	e8 4e fa ff ff       	call   10c8fa <remove_thread_locked>
  10ceac:	85 c0                	test   %eax,%eax
  10ceae:	74 2d                	je     10cedd <z_mem_domain_exit_thread+0x91>
  10ceb0:	68 3d 01 00 00       	push   $0x13d
  10ceb5:	68 73 37 11 00       	push   $0x113773
  10ceba:	68 ca 1a 11 00       	push   $0x111aca
  10cebf:	68 ee 10 11 00       	push   $0x1110ee
  10cec4:	e8 14 47 ff ff       	call   1015dd <assert_print>
  10cec9:	83 c4 10             	add    $0x10,%esp
  10cecc:	68 3d 01 00 00       	push   $0x13d
  10ced1:	68 73 37 11 00       	push   $0x113773
  10ced6:	e8 f3 46 ff ff       	call   1015ce <assert_post_action>
  10cedb:	5b                   	pop    %ebx
  10cedc:	58                   	pop    %eax
  10cedd:	68 20 cd 12 00       	push   $0x12cd20
  10cee2:	e8 29 de ff ff       	call   10ad10 <z_spin_unlock_valid>
  10cee7:	59                   	pop    %ecx
  10cee8:	84 c0                	test   %al,%al
  10ceea:	75 39                	jne    10cf25 <z_mem_domain_exit_thread+0xd9>
  10ceec:	68 31 01 00 00       	push   $0x131
  10cef1:	68 61 13 11 00       	push   $0x111361
  10cef6:	68 e8 13 11 00       	push   $0x1113e8
  10cefb:	68 ee 10 11 00       	push   $0x1110ee
  10cf00:	e8 d8 46 ff ff       	call   1015dd <assert_print>
  10cf05:	83 c4 10             	add    $0x10,%esp
  10cf08:	68 20 cd 12 00       	push   $0x12cd20
  10cf0d:	68 ff 13 11 00       	push   $0x1113ff
  10cf12:	e8 c6 46 ff ff       	call   1015dd <assert_print>
  10cf17:	58                   	pop    %eax
  10cf18:	5a                   	pop    %edx
  10cf19:	68 31 01 00 00       	push   $0x131
  10cf1e:	68 61 13 11 00       	push   $0x111361
  10cf23:	eb b1                	jmp    10ced6 <z_mem_domain_exit_thread+0x8a>
  10cf25:	0f ba e3 09          	bt     $0x9,%ebx
  10cf29:	73 01                	jae    10cf2c <z_mem_domain_exit_thread+0xe0>
  10cf2b:	fb                   	sti
  10cf2c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10cf2f:	c9                   	leave
  10cf30:	c3                   	ret

0010cf31 <wordlist_cb>:
  10cf31:	55                   	push   %ebp
  10cf32:	89 e5                	mov    %esp,%ebp
  10cf34:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10cf37:	8b 45 08             	mov    0x8(%ebp),%eax
  10cf3a:	8b 11                	mov    (%ecx),%edx
  10cf3c:	0f a3 50 04          	bt     %edx,0x4(%eax)
  10cf40:	19 d2                	sbb    %edx,%edx
  10cf42:	85 d2                	test   %edx,%edx
  10cf44:	74 0e                	je     10cf54 <wordlist_cb+0x23>
  10cf46:	8b 51 08             	mov    0x8(%ecx),%edx
  10cf49:	39 10                	cmp    %edx,(%eax)
  10cf4b:	74 07                	je     10cf54 <wordlist_cb+0x23>
  10cf4d:	8b 51 04             	mov    0x4(%ecx),%edx
  10cf50:	0f ab 50 04          	bts    %edx,0x4(%eax)
  10cf54:	5d                   	pop    %ebp
  10cf55:	c3                   	ret

0010cf56 <app_shmem_bss_zero>:
  10cf56:	ba b0 00 11 00       	mov    $0x1100b0,%edx
  10cf5b:	31 c0                	xor    %eax,%eax
  10cf5d:	81 fa c8 00 11 00    	cmp    $0x1100c8,%edx
  10cf63:	72 03                	jb     10cf68 <app_shmem_bss_zero+0x12>
  10cf65:	31 c0                	xor    %eax,%eax
  10cf67:	c3                   	ret
  10cf68:	55                   	push   %ebp
  10cf69:	89 e5                	mov    %esp,%ebp
  10cf6b:	57                   	push   %edi
  10cf6c:	8b 4a 04             	mov    0x4(%edx),%ecx
  10cf6f:	8b 3a                	mov    (%edx),%edi
  10cf71:	83 c2 08             	add    $0x8,%edx
  10cf74:	f3 aa                	rep stos %al,%es:(%edi)
  10cf76:	81 fa c8 00 11 00    	cmp    $0x1100c8,%edx
  10cf7c:	72 ee                	jb     10cf6c <app_shmem_bss_zero+0x16>
  10cf7e:	5f                   	pop    %edi
  10cf7f:	31 c0                	xor    %eax,%eax
  10cf81:	5d                   	pop    %ebp
  10cf82:	c3                   	ret

0010cf83 <dynamic_object_create>:
  10cf83:	55                   	push   %ebp
  10cf84:	89 e5                	mov    %esp,%ebp
  10cf86:	57                   	push   %edi
  10cf87:	56                   	push   %esi
  10cf88:	89 c7                	mov    %eax,%edi
  10cf8a:	53                   	push   %ebx
  10cf8b:	89 ce                	mov    %ecx,%esi
  10cf8d:	53                   	push   %ebx
  10cf8e:	6a 1c                	push   $0x1c
  10cf90:	52                   	push   %edx
  10cf91:	89 55 f0             	mov    %edx,-0x10(%ebp)
  10cf94:	e8 26 f5 ff ff       	call   10c4bf <z_thread_aligned_alloc>
  10cf99:	5a                   	pop    %edx
  10cf9a:	59                   	pop    %ecx
  10cf9b:	85 c0                	test   %eax,%eax
  10cf9d:	74 15                	je     10cfb4 <dynamic_object_create+0x31>
  10cf9f:	89 c3                	mov    %eax,%ebx
  10cfa1:	83 ff 0b             	cmp    $0xb,%edi
  10cfa4:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10cfa7:	75 39                	jne    10cfe2 <dynamic_object_create+0x5f>
  10cfa9:	85 f6                	test   %esi,%esi
  10cfab:	75 0e                	jne    10cfbb <dynamic_object_create+0x38>
  10cfad:	53                   	push   %ebx
  10cfae:	e8 f2 f4 ff ff       	call   10c4a5 <k_free>
  10cfb3:	59                   	pop    %ecx
  10cfb4:	31 c0                	xor    %eax,%eax
  10cfb6:	e9 28 01 00 00       	jmp    10d0e3 <dynamic_object_create+0x160>
  10cfbb:	81 c6 ff 1f 00 00    	add    $0x1fff,%esi
  10cfc1:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
  10cfc7:	56                   	push   %esi
  10cfc8:	68 00 10 00 00       	push   $0x1000
  10cfcd:	e8 ed f4 ff ff       	call   10c4bf <z_thread_aligned_alloc>
  10cfd2:	59                   	pop    %ecx
  10cfd3:	85 c0                	test   %eax,%eax
  10cfd5:	5a                   	pop    %edx
  10cfd6:	89 43 18             	mov    %eax,0x18(%ebx)
  10cfd9:	74 d2                	je     10cfad <dynamic_object_create+0x2a>
  10cfdb:	89 03                	mov    %eax,(%ebx)
  10cfdd:	89 73 09             	mov    %esi,0x9(%ebx)
  10cfe0:	eb 2c                	jmp    10d00e <dynamic_object_create+0x8b>
  10cfe2:	8d 4f ff             	lea    -0x1(%edi),%ecx
  10cfe5:	b8 14 00 00 00       	mov    $0x14,%eax
  10cfea:	83 f9 0f             	cmp    $0xf,%ecx
  10cfed:	77 07                	ja     10cff6 <dynamic_object_create+0x73>
  10cfef:	0f b6 87 63 0c 11 00 	movzbl 0x110c63(%edi),%eax
  10cff6:	01 c6                	add    %eax,%esi
  10cff8:	56                   	push   %esi
  10cff9:	52                   	push   %edx
  10cffa:	e8 c0 f4 ff ff       	call   10c4bf <z_thread_aligned_alloc>
  10cfff:	5e                   	pop    %esi
  10d000:	85 c0                	test   %eax,%eax
  10d002:	5a                   	pop    %edx
  10d003:	89 43 18             	mov    %eax,0x18(%ebx)
  10d006:	75 04                	jne    10d00c <dynamic_object_create+0x89>
  10d008:	6a 00                	push   $0x0
  10d00a:	eb a2                	jmp    10cfae <dynamic_object_create+0x2b>
  10d00c:	89 03                	mov    %eax,(%ebx)
  10d00e:	89 f8                	mov    %edi,%eax
  10d010:	c6 43 08 00          	movb   $0x0,0x8(%ebx)
  10d014:	88 43 07             	mov    %al,0x7(%ebx)
  10d017:	66 c7 43 04 00 00    	movw   $0x0,0x4(%ebx)
  10d01d:	c6 43 06 00          	movb   $0x0,0x6(%ebx)
  10d021:	9c                   	pushf
  10d022:	fa                   	cli
  10d023:	5e                   	pop    %esi
  10d024:	68 28 cd 12 00       	push   $0x12cd28
  10d029:	e8 c1 dc ff ff       	call   10acef <z_spin_lock_valid>
  10d02e:	59                   	pop    %ecx
  10d02f:	84 c0                	test   %al,%al
  10d031:	75 34                	jne    10d067 <dynamic_object_create+0xe4>
  10d033:	68 88 00 00 00       	push   $0x88
  10d038:	68 61 13 11 00       	push   $0x111361
  10d03d:	68 8e 13 11 00       	push   $0x11138e
  10d042:	68 ee 10 11 00       	push   $0x1110ee
  10d047:	e8 91 45 ff ff       	call   1015dd <assert_print>
  10d04c:	83 c4 10             	add    $0x10,%esp
  10d04f:	68 28 cd 12 00       	push   $0x12cd28
  10d054:	68 a3 13 11 00       	push   $0x1113a3
  10d059:	e8 7f 45 ff ff       	call   1015dd <assert_print>
  10d05e:	58                   	pop    %eax
  10d05f:	5a                   	pop    %edx
  10d060:	68 88 00 00 00       	push   $0x88
  10d065:	eb 67                	jmp    10d0ce <dynamic_object_create+0x14b>
  10d067:	68 28 cd 12 00       	push   $0x12cd28
  10d06c:	e8 d6 dc ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10d071:	8b 15 78 b5 11 00    	mov    0x11b578,%edx
  10d077:	8d 43 10             	lea    0x10(%ebx),%eax
  10d07a:	c7 43 10 74 b5 11 00 	movl   $0x11b574,0x10(%ebx)
  10d081:	89 53 14             	mov    %edx,0x14(%ebx)
  10d084:	89 02                	mov    %eax,(%edx)
  10d086:	a3 78 b5 11 00       	mov    %eax,0x11b578
  10d08b:	c7 04 24 28 cd 12 00 	movl   $0x12cd28,(%esp)
  10d092:	e8 79 dc ff ff       	call   10ad10 <z_spin_unlock_valid>
  10d097:	5f                   	pop    %edi
  10d098:	84 c0                	test   %al,%al
  10d09a:	75 3e                	jne    10d0da <dynamic_object_create+0x157>
  10d09c:	68 31 01 00 00       	push   $0x131
  10d0a1:	68 61 13 11 00       	push   $0x111361
  10d0a6:	68 e8 13 11 00       	push   $0x1113e8
  10d0ab:	68 ee 10 11 00       	push   $0x1110ee
  10d0b0:	e8 28 45 ff ff       	call   1015dd <assert_print>
  10d0b5:	83 c4 10             	add    $0x10,%esp
  10d0b8:	68 28 cd 12 00       	push   $0x12cd28
  10d0bd:	68 ff 13 11 00       	push   $0x1113ff
  10d0c2:	e8 16 45 ff ff       	call   1015dd <assert_print>
  10d0c7:	59                   	pop    %ecx
  10d0c8:	5b                   	pop    %ebx
  10d0c9:	68 31 01 00 00       	push   $0x131
  10d0ce:	68 61 13 11 00       	push   $0x111361
  10d0d3:	e8 f6 44 ff ff       	call   1015ce <assert_post_action>
  10d0d8:	58                   	pop    %eax
  10d0d9:	5a                   	pop    %edx
  10d0da:	0f ba e6 09          	bt     $0x9,%esi
  10d0de:	73 01                	jae    10d0e1 <dynamic_object_create+0x15e>
  10d0e0:	fb                   	sti
  10d0e1:	89 d8                	mov    %ebx,%eax
  10d0e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10d0e6:	5b                   	pop    %ebx
  10d0e7:	5e                   	pop    %esi
  10d0e8:	5f                   	pop    %edi
  10d0e9:	5d                   	pop    %ebp
  10d0ea:	c3                   	ret

0010d0eb <unref_check>:
  10d0eb:	55                   	push   %ebp
  10d0ec:	89 e5                	mov    %esp,%ebp
  10d0ee:	57                   	push   %edi
  10d0ef:	56                   	push   %esi
  10d0f0:	89 d6                	mov    %edx,%esi
  10d0f2:	53                   	push   %ebx
  10d0f3:	89 c3                	mov    %eax,%ebx
  10d0f5:	9c                   	pushf
  10d0f6:	fa                   	cli
  10d0f7:	5f                   	pop    %edi
  10d0f8:	68 24 cd 12 00       	push   $0x12cd24
  10d0fd:	e8 ed db ff ff       	call   10acef <z_spin_lock_valid>
  10d102:	5a                   	pop    %edx
  10d103:	84 c0                	test   %al,%al
  10d105:	75 37                	jne    10d13e <unref_check+0x53>
  10d107:	68 88 00 00 00       	push   $0x88
  10d10c:	68 61 13 11 00       	push   $0x111361
  10d111:	68 8e 13 11 00       	push   $0x11138e
  10d116:	68 ee 10 11 00       	push   $0x1110ee
  10d11b:	e8 bd 44 ff ff       	call   1015dd <assert_print>
  10d120:	83 c4 10             	add    $0x10,%esp
  10d123:	68 24 cd 12 00       	push   $0x12cd24
  10d128:	68 a3 13 11 00       	push   $0x1113a3
  10d12d:	e8 ab 44 ff ff       	call   1015dd <assert_print>
  10d132:	5b                   	pop    %ebx
  10d133:	5e                   	pop    %esi
  10d134:	68 88 00 00 00       	push   $0x88
  10d139:	e9 ee 00 00 00       	jmp    10d22c <unref_check+0x141>
  10d13e:	68 24 cd 12 00       	push   $0x12cd24
  10d143:	e8 ff db ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10d148:	59                   	pop    %ecx
  10d149:	0f b3 73 04          	btr    %esi,0x4(%ebx)
  10d14d:	f6 43 08 04          	testb  $0x4,0x8(%ebx)
  10d151:	0f 84 94 00 00 00    	je     10d1eb <unref_check+0x100>
  10d157:	f6 c3 03             	test   $0x3,%bl
  10d15a:	75 2a                	jne    10d186 <unref_check+0x9b>
  10d15c:	80 7b 04 00          	cmpb   $0x0,0x4(%ebx)
  10d160:	0f 85 85 00 00 00    	jne    10d1eb <unref_check+0x100>
  10d166:	80 7b 05 00          	cmpb   $0x0,0x5(%ebx)
  10d16a:	75 7f                	jne    10d1eb <unref_check+0x100>
  10d16c:	80 7b 06 00          	cmpb   $0x0,0x6(%ebx)
  10d170:	75 79                	jne    10d1eb <unref_check+0x100>
  10d172:	8a 43 07             	mov    0x7(%ebx),%al
  10d175:	3c 02                	cmp    $0x2,%al
  10d177:	74 46                	je     10d1bf <unref_check+0xd4>
  10d179:	3c 08                	cmp    $0x8,%al
  10d17b:	75 4a                	jne    10d1c7 <unref_check+0xdc>
  10d17d:	ff 33                	push   (%ebx)
  10d17f:	e8 ba 19 00 00       	call   10eb3e <k_stack_cleanup>
  10d184:	eb 40                	jmp    10d1c6 <unref_check+0xdb>
  10d186:	68 28 02 00 00       	push   $0x228
  10d18b:	68 48 39 11 00       	push   $0x113948
  10d190:	68 6e 39 11 00       	push   $0x11396e
  10d195:	68 ee 10 11 00       	push   $0x1110ee
  10d19a:	e8 3e 44 ff ff       	call   1015dd <assert_print>
  10d19f:	83 c4 10             	add    $0x10,%esp
  10d1a2:	68 a4 39 11 00       	push   $0x1139a4
  10d1a7:	e8 31 44 ff ff       	call   1015dd <assert_print>
  10d1ac:	c7 04 24 28 02 00 00 	movl   $0x228,(%esp)
  10d1b3:	68 48 39 11 00       	push   $0x113948
  10d1b8:	e8 11 44 ff ff       	call   1015ce <assert_post_action>
  10d1bd:	58                   	pop    %eax
  10d1be:	5a                   	pop    %edx
  10d1bf:	ff 33                	push   (%ebx)
  10d1c1:	e8 14 0d 00 00       	call   10deda <k_msgq_cleanup>
  10d1c6:	58                   	pop    %eax
  10d1c7:	8b 43 10             	mov    0x10(%ebx),%eax
  10d1ca:	8b 53 14             	mov    0x14(%ebx),%edx
  10d1cd:	31 f6                	xor    %esi,%esi
  10d1cf:	89 02                	mov    %eax,(%edx)
  10d1d1:	89 50 04             	mov    %edx,0x4(%eax)
  10d1d4:	89 73 10             	mov    %esi,0x10(%ebx)
  10d1d7:	89 73 14             	mov    %esi,0x14(%ebx)
  10d1da:	ff 73 18             	push   0x18(%ebx)
  10d1dd:	e8 c3 f2 ff ff       	call   10c4a5 <k_free>
  10d1e2:	89 1c 24             	mov    %ebx,(%esp)
  10d1e5:	e8 bb f2 ff ff       	call   10c4a5 <k_free>
  10d1ea:	58                   	pop    %eax
  10d1eb:	68 24 cd 12 00       	push   $0x12cd24
  10d1f0:	e8 1b db ff ff       	call   10ad10 <z_spin_unlock_valid>
  10d1f5:	59                   	pop    %ecx
  10d1f6:	84 c0                	test   %al,%al
  10d1f8:	75 39                	jne    10d233 <unref_check+0x148>
  10d1fa:	68 31 01 00 00       	push   $0x131
  10d1ff:	68 61 13 11 00       	push   $0x111361
  10d204:	68 e8 13 11 00       	push   $0x1113e8
  10d209:	68 ee 10 11 00       	push   $0x1110ee
  10d20e:	e8 ca 43 ff ff       	call   1015dd <assert_print>
  10d213:	83 c4 10             	add    $0x10,%esp
  10d216:	68 24 cd 12 00       	push   $0x12cd24
  10d21b:	68 ff 13 11 00       	push   $0x1113ff
  10d220:	e8 b8 43 ff ff       	call   1015dd <assert_print>
  10d225:	58                   	pop    %eax
  10d226:	5a                   	pop    %edx
  10d227:	68 31 01 00 00       	push   $0x131
  10d22c:	68 61 13 11 00       	push   $0x111361
  10d231:	eb 85                	jmp    10d1b8 <unref_check+0xcd>
  10d233:	0f ba e7 09          	bt     $0x9,%edi
  10d237:	73 01                	jae    10d23a <unref_check+0x14f>
  10d239:	fb                   	sti
  10d23a:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10d23d:	5b                   	pop    %ebx
  10d23e:	5e                   	pop    %esi
  10d23f:	5f                   	pop    %edi
  10d240:	5d                   	pop    %ebp
  10d241:	c3                   	ret

0010d242 <clear_perms_cb>:
  10d242:	55                   	push   %ebp
  10d243:	89 e5                	mov    %esp,%ebp
  10d245:	8b 55 0c             	mov    0xc(%ebp),%edx
  10d248:	8b 45 08             	mov    0x8(%ebp),%eax
  10d24b:	5d                   	pop    %ebp
  10d24c:	e9 9a fe ff ff       	jmp    10d0eb <unref_check>

0010d251 <user_copy>:
  10d251:	55                   	push   %ebp
  10d252:	89 e5                	mov    %esp,%ebp
  10d254:	57                   	push   %edi
  10d255:	56                   	push   %esi
  10d256:	89 d6                	mov    %edx,%esi
  10d258:	53                   	push   %ebx
  10d259:	53                   	push   %ebx
  10d25a:	89 c3                	mov    %eax,%ebx
  10d25c:	80 7d 08 00          	cmpb   $0x0,0x8(%ebp)
  10d260:	74 34                	je     10d296 <user_copy+0x45>
  10d262:	01 c8                	add    %ecx,%eax
  10d264:	73 09                	jae    10d26f <user_copy+0x1e>
  10d266:	68 c7 12 11 00       	push   $0x1112c7
  10d26b:	51                   	push   %ecx
  10d26c:	53                   	push   %ebx
  10d26d:	eb 34                	jmp    10d2a3 <user_copy+0x52>
  10d26f:	85 c9                	test   %ecx,%ecx
  10d271:	74 0b                	je     10d27e <user_copy+0x2d>
  10d273:	89 d8                	mov    %ebx,%eax
  10d275:	8d 51 ff             	lea    -0x1(%ecx),%edx
  10d278:	f7 d0                	not    %eax
  10d27a:	39 c2                	cmp    %eax,%edx
  10d27c:	73 e8                	jae    10d266 <user_copy+0x15>
  10d27e:	6a 01                	push   $0x1
  10d280:	51                   	push   %ecx
  10d281:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10d284:	53                   	push   %ebx
  10d285:	e8 0c 65 ff ff       	call   103796 <arch_buffer_validate>
  10d28a:	83 c4 0c             	add    $0xc,%esp
  10d28d:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10d290:	85 c0                	test   %eax,%eax
  10d292:	74 4f                	je     10d2e3 <user_copy+0x92>
  10d294:	eb d0                	jmp    10d266 <user_copy+0x15>
  10d296:	89 d0                	mov    %edx,%eax
  10d298:	01 c8                	add    %ecx,%eax
  10d29a:	73 22                	jae    10d2be <user_copy+0x6d>
  10d29c:	68 cc 3b 11 00       	push   $0x113bcc
  10d2a1:	51                   	push   %ecx
  10d2a2:	56                   	push   %esi
  10d2a3:	68 74 0c 11 00       	push   $0x110c74
  10d2a8:	6a 45                	push   $0x45
  10d2aa:	68 7c 12 11 00       	push   $0x11127c
  10d2af:	e8 44 52 ff ff       	call   1024f8 <z_log_minimal_printk>
  10d2b4:	83 c4 18             	add    $0x18,%esp
  10d2b7:	b8 0e 00 00 00       	mov    $0xe,%eax
  10d2bc:	eb 2b                	jmp    10d2e9 <user_copy+0x98>
  10d2be:	85 c9                	test   %ecx,%ecx
  10d2c0:	74 0b                	je     10d2cd <user_copy+0x7c>
  10d2c2:	89 f0                	mov    %esi,%eax
  10d2c4:	8d 51 ff             	lea    -0x1(%ecx),%edx
  10d2c7:	f7 d0                	not    %eax
  10d2c9:	39 c2                	cmp    %eax,%edx
  10d2cb:	73 cf                	jae    10d29c <user_copy+0x4b>
  10d2cd:	6a 00                	push   $0x0
  10d2cf:	51                   	push   %ecx
  10d2d0:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10d2d3:	56                   	push   %esi
  10d2d4:	e8 bd 64 ff ff       	call   103796 <arch_buffer_validate>
  10d2d9:	83 c4 0c             	add    $0xc,%esp
  10d2dc:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10d2df:	85 c0                	test   %eax,%eax
  10d2e1:	75 b9                	jne    10d29c <user_copy+0x4b>
  10d2e3:	89 df                	mov    %ebx,%edi
  10d2e5:	31 c0                	xor    %eax,%eax
  10d2e7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
  10d2e9:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10d2ec:	5b                   	pop    %ebx
  10d2ed:	5e                   	pop    %esi
  10d2ee:	5f                   	pop    %edi
  10d2ef:	5d                   	pop    %ebp
  10d2f0:	c3                   	ret

0010d2f1 <z_mrsh_device_get_by_dt_nodelabel>:
  10d2f1:	55                   	push   %ebp
  10d2f2:	89 e5                	mov    %esp,%ebp
  10d2f4:	6a 45                	push   $0x45
  10d2f6:	68 b9 39 11 00       	push   $0x1139b9
  10d2fb:	e8 f8 51 ff ff       	call   1024f8 <z_log_minimal_printk>
  10d300:	58                   	pop    %eax
  10d301:	5a                   	pop    %edx
  10d302:	ff 75 20             	push   0x20(%ebp)
  10d305:	e8 bc 6e ff ff       	call   1041c6 <arch_syscall_oops>

0010d30a <handler_bad_syscall>:
  10d30a:	55                   	push   %ebp
  10d30b:	89 e5                	mov    %esp,%ebp
  10d30d:	ff 75 08             	push   0x8(%ebp)
  10d310:	6a 45                	push   $0x45
  10d312:	68 d8 39 11 00       	push   $0x1139d8
  10d317:	e8 dc 51 ff ff       	call   1024f8 <z_log_minimal_printk>
  10d31c:	83 c4 0c             	add    $0xc,%esp
  10d31f:	ff 75 20             	push   0x20(%ebp)
  10d322:	e8 9f 6e ff ff       	call   1041c6 <arch_syscall_oops>

0010d327 <dyn_object_find>:
  10d327:	55                   	push   %ebp
  10d328:	89 e5                	mov    %esp,%ebp
  10d32a:	57                   	push   %edi
  10d32b:	56                   	push   %esi
  10d32c:	89 c6                	mov    %eax,%esi
  10d32e:	53                   	push   %ebx
  10d32f:	9c                   	pushf
  10d330:	fa                   	cli
  10d331:	5f                   	pop    %edi
  10d332:	68 28 cd 12 00       	push   $0x12cd28
  10d337:	e8 b3 d9 ff ff       	call   10acef <z_spin_lock_valid>
  10d33c:	59                   	pop    %ecx
  10d33d:	84 c0                	test   %al,%al
  10d33f:	75 37                	jne    10d378 <dyn_object_find+0x51>
  10d341:	68 88 00 00 00       	push   $0x88
  10d346:	68 61 13 11 00       	push   $0x111361
  10d34b:	68 8e 13 11 00       	push   $0x11138e
  10d350:	68 ee 10 11 00       	push   $0x1110ee
  10d355:	e8 83 42 ff ff       	call   1015dd <assert_print>
  10d35a:	83 c4 10             	add    $0x10,%esp
  10d35d:	68 28 cd 12 00       	push   $0x12cd28
  10d362:	68 a3 13 11 00       	push   $0x1113a3
  10d367:	e8 71 42 ff ff       	call   1015dd <assert_print>
  10d36c:	58                   	pop    %eax
  10d36d:	5a                   	pop    %edx
  10d36e:	68 88 00 00 00       	push   $0x88
  10d373:	e9 87 00 00 00       	jmp    10d3ff <dyn_object_find+0xd8>
  10d378:	68 28 cd 12 00       	push   $0x12cd28
  10d37d:	e8 c5 d9 ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10d382:	8b 1d 74 b5 11 00    	mov    0x11b574,%ebx
  10d388:	58                   	pop    %eax
  10d389:	85 db                	test   %ebx,%ebx
  10d38b:	74 0d                	je     10d39a <dyn_object_find+0x73>
  10d38d:	81 fb 74 b5 11 00    	cmp    $0x11b574,%ebx
  10d393:	74 05                	je     10d39a <dyn_object_find+0x73>
  10d395:	83 eb 10             	sub    $0x10,%ebx
  10d398:	eb 02                	jmp    10d39c <dyn_object_find+0x75>
  10d39a:	31 db                	xor    %ebx,%ebx
  10d39c:	a1 78 b5 11 00       	mov    0x11b578,%eax
  10d3a1:	85 db                	test   %ebx,%ebx
  10d3a3:	74 19                	je     10d3be <dyn_object_find+0x97>
  10d3a5:	39 33                	cmp    %esi,(%ebx)
  10d3a7:	74 15                	je     10d3be <dyn_object_find+0x97>
  10d3a9:	8d 53 10             	lea    0x10(%ebx),%edx
  10d3ac:	39 d0                	cmp    %edx,%eax
  10d3ae:	74 0c                	je     10d3bc <dyn_object_find+0x95>
  10d3b0:	8b 5b 10             	mov    0x10(%ebx),%ebx
  10d3b3:	85 db                	test   %ebx,%ebx
  10d3b5:	74 07                	je     10d3be <dyn_object_find+0x97>
  10d3b7:	83 eb 10             	sub    $0x10,%ebx
  10d3ba:	eb e9                	jmp    10d3a5 <dyn_object_find+0x7e>
  10d3bc:	31 db                	xor    %ebx,%ebx
  10d3be:	68 28 cd 12 00       	push   $0x12cd28
  10d3c3:	e8 48 d9 ff ff       	call   10ad10 <z_spin_unlock_valid>
  10d3c8:	5e                   	pop    %esi
  10d3c9:	84 c0                	test   %al,%al
  10d3cb:	75 3e                	jne    10d40b <dyn_object_find+0xe4>
  10d3cd:	68 31 01 00 00       	push   $0x131
  10d3d2:	68 61 13 11 00       	push   $0x111361
  10d3d7:	68 e8 13 11 00       	push   $0x1113e8
  10d3dc:	68 ee 10 11 00       	push   $0x1110ee
  10d3e1:	e8 f7 41 ff ff       	call   1015dd <assert_print>
  10d3e6:	83 c4 10             	add    $0x10,%esp
  10d3e9:	68 28 cd 12 00       	push   $0x12cd28
  10d3ee:	68 ff 13 11 00       	push   $0x1113ff
  10d3f3:	e8 e5 41 ff ff       	call   1015dd <assert_print>
  10d3f8:	59                   	pop    %ecx
  10d3f9:	5b                   	pop    %ebx
  10d3fa:	68 31 01 00 00       	push   $0x131
  10d3ff:	68 61 13 11 00       	push   $0x111361
  10d404:	e8 c5 41 ff ff       	call   1015ce <assert_post_action>
  10d409:	58                   	pop    %eax
  10d40a:	5a                   	pop    %edx
  10d40b:	0f ba e7 09          	bt     $0x9,%edi
  10d40f:	73 01                	jae    10d412 <dyn_object_find+0xeb>
  10d411:	fb                   	sti
  10d412:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10d415:	89 d8                	mov    %ebx,%eax
  10d417:	5b                   	pop    %ebx
  10d418:	5e                   	pop    %esi
  10d419:	5f                   	pop    %edi
  10d41a:	5d                   	pop    %ebp
  10d41b:	c3                   	ret

0010d41c <otype_to_str>:
  10d41c:	55                   	push   %ebp
  10d41d:	b8 4a 30 11 00       	mov    $0x11304a,%eax
  10d422:	89 e5                	mov    %esp,%ebp
  10d424:	8b 55 08             	mov    0x8(%ebp),%edx
  10d427:	83 fa 62             	cmp    $0x62,%edx
  10d42a:	77 07                	ja     10d433 <otype_to_str+0x17>
  10d42c:	8b 04 95 c0 02 11 00 	mov    0x1102c0(,%edx,4),%eax
  10d433:	5d                   	pop    %ebp
  10d434:	c3                   	ret

0010d435 <k_object_find>:
  10d435:	55                   	push   %ebp
  10d436:	89 e5                	mov    %esp,%ebp
  10d438:	53                   	push   %ebx
  10d439:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10d43c:	53                   	push   %ebx
  10d43d:	e8 41 23 00 00       	call   10f783 <z_object_gperf_find>
  10d442:	5a                   	pop    %edx
  10d443:	85 c0                	test   %eax,%eax
  10d445:	75 0b                	jne    10d452 <k_object_find+0x1d>
  10d447:	89 d8                	mov    %ebx,%eax
  10d449:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10d44c:	c9                   	leave
  10d44d:	e9 d5 fe ff ff       	jmp    10d327 <dyn_object_find>
  10d452:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10d455:	c9                   	leave
  10d456:	c3                   	ret

0010d457 <thread_index_get>:
  10d457:	55                   	push   %ebp
  10d458:	89 e5                	mov    %esp,%ebp
  10d45a:	50                   	push   %eax
  10d45b:	e8 d5 ff ff ff       	call   10d435 <k_object_find>
  10d460:	5a                   	pop    %edx
  10d461:	85 c0                	test   %eax,%eax
  10d463:	74 05                	je     10d46a <thread_index_get+0x13>
  10d465:	8b 40 09             	mov    0x9(%eax),%eax
  10d468:	eb 03                	jmp    10d46d <thread_index_get+0x16>
  10d46a:	83 c8 ff             	or     $0xffffffff,%eax
  10d46d:	c9                   	leave
  10d46e:	c3                   	ret

0010d46f <k_object_wordlist_foreach>:
  10d46f:	55                   	push   %ebp
  10d470:	89 e5                	mov    %esp,%ebp
  10d472:	57                   	push   %edi
  10d473:	56                   	push   %esi
  10d474:	53                   	push   %ebx
  10d475:	83 ec 08             	sub    $0x8,%esp
  10d478:	8b 75 0c             	mov    0xc(%ebp),%esi
  10d47b:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10d47e:	56                   	push   %esi
  10d47f:	53                   	push   %ebx
  10d480:	e8 47 23 00 00       	call   10f7cc <z_object_gperf_wordlist_foreach>
  10d485:	58                   	pop    %eax
  10d486:	5a                   	pop    %edx
  10d487:	9c                   	pushf
  10d488:	fa                   	cli
  10d489:	8f 45 ec             	pop    -0x14(%ebp)
  10d48c:	68 28 cd 12 00       	push   $0x12cd28
  10d491:	e8 59 d8 ff ff       	call   10acef <z_spin_lock_valid>
  10d496:	59                   	pop    %ecx
  10d497:	84 c0                	test   %al,%al
  10d499:	75 37                	jne    10d4d2 <k_object_wordlist_foreach+0x63>
  10d49b:	68 88 00 00 00       	push   $0x88
  10d4a0:	68 61 13 11 00       	push   $0x111361
  10d4a5:	68 8e 13 11 00       	push   $0x11138e
  10d4aa:	68 ee 10 11 00       	push   $0x1110ee
  10d4af:	e8 29 41 ff ff       	call   1015dd <assert_print>
  10d4b4:	83 c4 10             	add    $0x10,%esp
  10d4b7:	68 28 cd 12 00       	push   $0x12cd28
  10d4bc:	68 a3 13 11 00       	push   $0x1113a3
  10d4c1:	e8 17 41 ff ff       	call   1015dd <assert_print>
  10d4c6:	5b                   	pop    %ebx
  10d4c7:	5e                   	pop    %esi
  10d4c8:	68 88 00 00 00       	push   $0x88
  10d4cd:	e9 a2 00 00 00       	jmp    10d574 <k_object_wordlist_foreach+0x105>
  10d4d2:	68 28 cd 12 00       	push   $0x12cd28
  10d4d7:	e8 6b d8 ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10d4dc:	8b 15 74 b5 11 00    	mov    0x11b574,%edx
  10d4e2:	59                   	pop    %ecx
  10d4e3:	85 d2                	test   %edx,%edx
  10d4e5:	74 4c                	je     10d533 <k_object_wordlist_foreach+0xc4>
  10d4e7:	81 fa 74 b5 11 00    	cmp    $0x11b574,%edx
  10d4ed:	74 44                	je     10d533 <k_object_wordlist_foreach+0xc4>
  10d4ef:	31 ff                	xor    %edi,%edi
  10d4f1:	39 15 78 b5 11 00    	cmp    %edx,0x11b578
  10d4f7:	0f 84 8d 00 00 00    	je     10d58a <k_object_wordlist_foreach+0x11b>
  10d4fd:	8b 3a                	mov    (%edx),%edi
  10d4ff:	85 ff                	test   %edi,%edi
  10d501:	0f 84 83 00 00 00    	je     10d58a <k_object_wordlist_foreach+0x11b>
  10d507:	83 ef 10             	sub    $0x10,%edi
  10d50a:	eb 7e                	jmp    10d58a <k_object_wordlist_foreach+0x11b>
  10d50c:	8b 57 10             	mov    0x10(%edi),%edx
  10d50f:	85 d2                	test   %edx,%edx
  10d511:	74 1a                	je     10d52d <k_object_wordlist_foreach+0xbe>
  10d513:	8d 42 f0             	lea    -0x10(%edx),%eax
  10d516:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10d519:	56                   	push   %esi
  10d51a:	57                   	push   %edi
  10d51b:	ff d3                	call   *%ebx
  10d51d:	59                   	pop    %ecx
  10d51e:	5f                   	pop    %edi
  10d51f:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10d522:	8d 57 10             	lea    0x10(%edi),%edx
  10d525:	39 15 78 b5 11 00    	cmp    %edx,0x11b578
  10d52b:	75 df                	jne    10d50c <k_object_wordlist_foreach+0x9d>
  10d52d:	56                   	push   %esi
  10d52e:	57                   	push   %edi
  10d52f:	ff d3                	call   *%ebx
  10d531:	58                   	pop    %eax
  10d532:	5a                   	pop    %edx
  10d533:	68 28 cd 12 00       	push   $0x12cd28
  10d538:	e8 d3 d7 ff ff       	call   10ad10 <z_spin_unlock_valid>
  10d53d:	5a                   	pop    %edx
  10d53e:	84 c0                	test   %al,%al
  10d540:	75 3e                	jne    10d580 <k_object_wordlist_foreach+0x111>
  10d542:	68 31 01 00 00       	push   $0x131
  10d547:	68 61 13 11 00       	push   $0x111361
  10d54c:	68 e8 13 11 00       	push   $0x1113e8
  10d551:	68 ee 10 11 00       	push   $0x1110ee
  10d556:	e8 82 40 ff ff       	call   1015dd <assert_print>
  10d55b:	83 c4 10             	add    $0x10,%esp
  10d55e:	68 28 cd 12 00       	push   $0x12cd28
  10d563:	68 ff 13 11 00       	push   $0x1113ff
  10d568:	e8 70 40 ff ff       	call   1015dd <assert_print>
  10d56d:	5e                   	pop    %esi
  10d56e:	5f                   	pop    %edi
  10d56f:	68 31 01 00 00       	push   $0x131
  10d574:	68 61 13 11 00       	push   $0x111361
  10d579:	e8 50 40 ff ff       	call   1015ce <assert_post_action>
  10d57e:	59                   	pop    %ecx
  10d57f:	5b                   	pop    %ebx
  10d580:	0f ba 65 ec 09       	btl    $0x9,-0x14(%ebp)
  10d585:	73 12                	jae    10d599 <k_object_wordlist_foreach+0x12a>
  10d587:	fb                   	sti
  10d588:	eb 0f                	jmp    10d599 <k_object_wordlist_foreach+0x12a>
  10d58a:	56                   	push   %esi
  10d58b:	83 ea 10             	sub    $0x10,%edx
  10d58e:	52                   	push   %edx
  10d58f:	ff d3                	call   *%ebx
  10d591:	58                   	pop    %eax
  10d592:	85 ff                	test   %edi,%edi
  10d594:	5a                   	pop    %edx
  10d595:	75 8b                	jne    10d522 <k_object_wordlist_foreach+0xb3>
  10d597:	eb 9a                	jmp    10d533 <k_object_wordlist_foreach+0xc4>
  10d599:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10d59c:	5b                   	pop    %ebx
  10d59d:	5e                   	pop    %esi
  10d59e:	5f                   	pop    %edi
  10d59f:	5d                   	pop    %ebp
  10d5a0:	c3                   	ret

0010d5a1 <thread_idx_free>:
  10d5a1:	55                   	push   %ebp
  10d5a2:	89 e5                	mov    %esp,%ebp
  10d5a4:	53                   	push   %ebx
  10d5a5:	50                   	push   %eax
  10d5a6:	89 c3                	mov    %eax,%ebx
  10d5a8:	68 42 d2 10 00       	push   $0x10d242
  10d5ad:	e8 bd fe ff ff       	call   10d46f <k_object_wordlist_foreach>
  10d5b2:	58                   	pop    %eax
  10d5b3:	89 d9                	mov    %ebx,%ecx
  10d5b5:	5a                   	pop    %edx
  10d5b6:	89 da                	mov    %ebx,%edx
  10d5b8:	c1 ea 03             	shr    $0x3,%edx
  10d5bb:	83 e1 07             	and    $0x7,%ecx
  10d5be:	b8 01 00 00 00       	mov    $0x1,%eax
  10d5c3:	d3 e0                	shl    %cl,%eax
  10d5c5:	08 82 20 30 12 00    	or     %al,0x123020(%edx)
  10d5cb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10d5ce:	c9                   	leave
  10d5cf:	c3                   	ret

0010d5d0 <k_thread_perms_inherit>:
  10d5d0:	55                   	push   %ebp
  10d5d1:	89 e5                	mov    %esp,%ebp
  10d5d3:	83 ec 0c             	sub    $0xc,%esp
  10d5d6:	8b 45 08             	mov    0x8(%ebp),%eax
  10d5d9:	e8 79 fe ff ff       	call   10d457 <thread_index_get>
  10d5de:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10d5e1:	8b 45 0c             	mov    0xc(%ebp),%eax
  10d5e4:	e8 6e fe ff ff       	call   10d457 <thread_index_get>
  10d5e9:	8b 55 08             	mov    0x8(%ebp),%edx
  10d5ec:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
  10d5f0:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10d5f3:	89 55 fc             	mov    %edx,-0x4(%ebp)
  10d5f6:	74 13                	je     10d60b <k_thread_perms_inherit+0x3b>
  10d5f8:	40                   	inc    %eax
  10d5f9:	74 10                	je     10d60b <k_thread_perms_inherit+0x3b>
  10d5fb:	8d 45 f4             	lea    -0xc(%ebp),%eax
  10d5fe:	50                   	push   %eax
  10d5ff:	68 31 cf 10 00       	push   $0x10cf31
  10d604:	e8 66 fe ff ff       	call   10d46f <k_object_wordlist_foreach>
  10d609:	58                   	pop    %eax
  10d60a:	5a                   	pop    %edx
  10d60b:	c9                   	leave
  10d60c:	c3                   	ret

0010d60d <k_thread_perms_set>:
  10d60d:	55                   	push   %ebp
  10d60e:	89 e5                	mov    %esp,%ebp
  10d610:	53                   	push   %ebx
  10d611:	8b 45 0c             	mov    0xc(%ebp),%eax
  10d614:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10d617:	e8 3b fe ff ff       	call   10d457 <thread_index_get>
  10d61c:	83 f8 ff             	cmp    $0xffffffff,%eax
  10d61f:	74 04                	je     10d625 <k_thread_perms_set+0x18>
  10d621:	0f ab 43 04          	bts    %eax,0x4(%ebx)
  10d625:	5b                   	pop    %ebx
  10d626:	5d                   	pop    %ebp
  10d627:	c3                   	ret

0010d628 <z_object_alloc>:
  10d628:	55                   	push   %ebp
  10d629:	89 e5                	mov    %esp,%ebp
  10d62b:	57                   	push   %edi
  10d62c:	56                   	push   %esi
  10d62d:	53                   	push   %ebx
  10d62e:	89 c3                	mov    %eax,%ebx
  10d630:	48                   	dec    %eax
  10d631:	51                   	push   %ecx
  10d632:	83 f8 61             	cmp    $0x61,%eax
  10d635:	89 55 f0             	mov    %edx,-0x10(%ebp)
  10d638:	76 0d                	jbe    10d647 <z_object_alloc+0x1f>
  10d63a:	53                   	push   %ebx
  10d63b:	6a 45                	push   $0x45
  10d63d:	68 fc 39 11 00       	push   $0x1139fc
  10d642:	e9 b2 00 00 00       	jmp    10d6f9 <z_object_alloc+0xd1>
  10d647:	83 fb 0c             	cmp    $0xc,%ebx
  10d64a:	0f 84 99 00 00 00    	je     10d6e9 <z_object_alloc+0xc1>
  10d650:	77 0a                	ja     10d65c <z_object_alloc+0x34>
  10d652:	83 fb 09             	cmp    $0x9,%ebx
  10d655:	74 13                	je     10d66a <z_object_alloc+0x42>
  10d657:	e9 a7 00 00 00       	jmp    10d703 <z_object_alloc+0xdb>
  10d65c:	8d 43 f2             	lea    -0xe(%ebx),%eax
  10d65f:	83 f8 01             	cmp    $0x1,%eax
  10d662:	0f 87 9b 00 00 00    	ja     10d703 <z_object_alloc+0xdb>
  10d668:	eb 7f                	jmp    10d6e9 <z_object_alloc+0xc1>
  10d66a:	a0 20 30 12 00       	mov    0x123020,%al
  10d66f:	84 c0                	test   %al,%al
  10d671:	74 0d                	je     10d680 <z_object_alloc+0x58>
  10d673:	0f b6 c8             	movzbl %al,%ecx
  10d676:	0f bc c9             	bsf    %ecx,%ecx
  10d679:	31 f6                	xor    %esi,%esi
  10d67b:	41                   	inc    %ecx
  10d67c:	31 ff                	xor    %edi,%edi
  10d67e:	eb 36                	jmp    10d6b6 <z_object_alloc+0x8e>
  10d680:	a0 21 30 12 00       	mov    0x123021,%al
  10d685:	84 c0                	test   %al,%al
  10d687:	74 13                	je     10d69c <z_object_alloc+0x74>
  10d689:	0f b6 c8             	movzbl %al,%ecx
  10d68c:	0f bc c9             	bsf    %ecx,%ecx
  10d68f:	be 08 00 00 00       	mov    $0x8,%esi
  10d694:	41                   	inc    %ecx
  10d695:	bf 01 00 00 00       	mov    $0x1,%edi
  10d69a:	eb 1a                	jmp    10d6b6 <z_object_alloc+0x8e>
  10d69c:	a0 22 30 12 00       	mov    0x123022,%al
  10d6a1:	84 c0                	test   %al,%al
  10d6a3:	74 32                	je     10d6d7 <z_object_alloc+0xaf>
  10d6a5:	0f b6 c8             	movzbl %al,%ecx
  10d6a8:	0f bc c9             	bsf    %ecx,%ecx
  10d6ab:	be 10 00 00 00       	mov    $0x10,%esi
  10d6b0:	41                   	inc    %ecx
  10d6b1:	bf 02 00 00 00       	mov    $0x2,%edi
  10d6b6:	49                   	dec    %ecx
  10d6b7:	ba fe ff ff ff       	mov    $0xfffffffe,%edx
  10d6bc:	d3 c2                	rol    %cl,%edx
  10d6be:	21 c2                	and    %eax,%edx
  10d6c0:	01 ce                	add    %ecx,%esi
  10d6c2:	88 97 20 30 12 00    	mov    %dl,0x123020(%edi)
  10d6c8:	56                   	push   %esi
  10d6c9:	68 42 d2 10 00       	push   $0x10d242
  10d6ce:	e8 9c fd ff ff       	call   10d46f <k_object_wordlist_foreach>
  10d6d3:	5f                   	pop    %edi
  10d6d4:	58                   	pop    %eax
  10d6d5:	eb 2e                	jmp    10d705 <z_object_alloc+0xdd>
  10d6d7:	6a 45                	push   $0x45
  10d6d9:	68 1e 3a 11 00       	push   $0x113a1e
  10d6de:	e8 15 4e ff ff       	call   1024f8 <z_log_minimal_printk>
  10d6e3:	59                   	pop    %ecx
  10d6e4:	5b                   	pop    %ebx
  10d6e5:	31 c0                	xor    %eax,%eax
  10d6e7:	eb 5b                	jmp    10d744 <z_object_alloc+0x11c>
  10d6e9:	53                   	push   %ebx
  10d6ea:	e8 2d fd ff ff       	call   10d41c <otype_to_str>
  10d6ef:	89 04 24             	mov    %eax,(%esp)
  10d6f2:	6a 45                	push   $0x45
  10d6f4:	68 3e 3a 11 00       	push   $0x113a3e
  10d6f9:	e8 fa 4d ff ff       	call   1024f8 <z_log_minimal_printk>
  10d6fe:	83 c4 0c             	add    $0xc,%esp
  10d701:	eb e2                	jmp    10d6e5 <z_object_alloc+0xbd>
  10d703:	31 f6                	xor    %esi,%esi
  10d705:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10d708:	ba 04 00 00 00       	mov    $0x4,%edx
  10d70d:	89 d8                	mov    %ebx,%eax
  10d70f:	e8 6f f8 ff ff       	call   10cf83 <dynamic_object_create>
  10d714:	89 c7                	mov    %eax,%edi
  10d716:	85 c0                	test   %eax,%eax
  10d718:	75 0e                	jne    10d728 <z_object_alloc+0x100>
  10d71a:	83 fb 09             	cmp    $0x9,%ebx
  10d71d:	75 c6                	jne    10d6e5 <z_object_alloc+0xbd>
  10d71f:	89 f0                	mov    %esi,%eax
  10d721:	e8 7b fe ff ff       	call   10d5a1 <thread_idx_free>
  10d726:	eb bd                	jmp    10d6e5 <z_object_alloc+0xbd>
  10d728:	83 fb 09             	cmp    $0x9,%ebx
  10d72b:	75 03                	jne    10d730 <z_object_alloc+0x108>
  10d72d:	89 70 09             	mov    %esi,0x9(%eax)
  10d730:	ff 35 a8 48 12 00    	push   0x1248a8
  10d736:	57                   	push   %edi
  10d737:	e8 d1 fe ff ff       	call   10d60d <k_thread_perms_set>
  10d73c:	58                   	pop    %eax
  10d73d:	8b 07                	mov    (%edi),%eax
  10d73f:	5a                   	pop    %edx
  10d740:	80 4f 08 04          	orb    $0x4,0x8(%edi)
  10d744:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10d747:	5b                   	pop    %ebx
  10d748:	5e                   	pop    %esi
  10d749:	5f                   	pop    %edi
  10d74a:	5d                   	pop    %ebp
  10d74b:	c3                   	ret

0010d74c <z_impl_k_object_alloc>:
  10d74c:	55                   	push   %ebp
  10d74d:	31 d2                	xor    %edx,%edx
  10d74f:	89 e5                	mov    %esp,%ebp
  10d751:	8b 45 08             	mov    0x8(%ebp),%eax
  10d754:	5d                   	pop    %ebp
  10d755:	e9 ce fe ff ff       	jmp    10d628 <z_object_alloc>

0010d75a <z_impl_k_object_alloc_size>:
  10d75a:	55                   	push   %ebp
  10d75b:	89 e5                	mov    %esp,%ebp
  10d75d:	8b 55 0c             	mov    0xc(%ebp),%edx
  10d760:	8b 45 08             	mov    0x8(%ebp),%eax
  10d763:	5d                   	pop    %ebp
  10d764:	e9 bf fe ff ff       	jmp    10d628 <z_object_alloc>

0010d769 <k_thread_perms_clear>:
  10d769:	55                   	push   %ebp
  10d76a:	89 e5                	mov    %esp,%ebp
  10d76c:	53                   	push   %ebx
  10d76d:	8b 45 0c             	mov    0xc(%ebp),%eax
  10d770:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10d773:	e8 df fc ff ff       	call   10d457 <thread_index_get>
  10d778:	83 f8 ff             	cmp    $0xffffffff,%eax
  10d77b:	74 0f                	je     10d78c <k_thread_perms_clear+0x23>
  10d77d:	89 c2                	mov    %eax,%edx
  10d77f:	0f b3 43 04          	btr    %eax,0x4(%ebx)
  10d783:	89 d8                	mov    %ebx,%eax
  10d785:	5b                   	pop    %ebx
  10d786:	5d                   	pop    %ebp
  10d787:	e9 5f f9 ff ff       	jmp    10d0eb <unref_check>
  10d78c:	5b                   	pop    %ebx
  10d78d:	5d                   	pop    %ebp
  10d78e:	c3                   	ret

0010d78f <k_thread_perms_all_clear>:
  10d78f:	55                   	push   %ebp
  10d790:	89 e5                	mov    %esp,%ebp
  10d792:	8b 45 08             	mov    0x8(%ebp),%eax
  10d795:	e8 bd fc ff ff       	call   10d457 <thread_index_get>
  10d79a:	83 f8 ff             	cmp    $0xffffffff,%eax
  10d79d:	74 0d                	je     10d7ac <k_thread_perms_all_clear+0x1d>
  10d79f:	50                   	push   %eax
  10d7a0:	68 42 d2 10 00       	push   $0x10d242
  10d7a5:	e8 c5 fc ff ff       	call   10d46f <k_object_wordlist_foreach>
  10d7aa:	58                   	pop    %eax
  10d7ab:	5a                   	pop    %edx
  10d7ac:	c9                   	leave
  10d7ad:	c3                   	ret

0010d7ae <k_object_dump_error>:
  10d7ae:	55                   	push   %ebp
  10d7af:	89 e5                	mov    %esp,%ebp
  10d7b1:	56                   	push   %esi
  10d7b2:	53                   	push   %ebx
  10d7b3:	8b 45 08             	mov    0x8(%ebp),%eax
  10d7b6:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10d7b9:	8b 5d 10             	mov    0x10(%ebp),%ebx
  10d7bc:	8b 55 14             	mov    0x14(%ebp),%edx
  10d7bf:	83 f8 f7             	cmp    $0xfffffff7,%eax
  10d7c2:	0f 84 9b 00 00 00    	je     10d863 <k_object_dump_error+0xb5>
  10d7c8:	83 f8 f8             	cmp    $0xfffffff8,%eax
  10d7cb:	7d 28                	jge    10d7f5 <k_object_dump_error+0x47>
  10d7cd:	83 f8 90             	cmp    $0xffffff90,%eax
  10d7d0:	0f 84 ea 00 00 00    	je     10d8c0 <k_object_dump_error+0x112>
  10d7d6:	83 f8 ea             	cmp    $0xffffffea,%eax
  10d7d9:	0f 85 07 01 00 00    	jne    10d8e6 <k_object_dump_error+0x138>
  10d7df:	89 4d 10             	mov    %ecx,0x10(%ebp)
  10d7e2:	c7 45 0c 45 00 00 00 	movl   $0x45,0xc(%ebp)
  10d7e9:	c7 45 08 1a 3b 11 00 	movl   $0x113b1a,0x8(%ebp)
  10d7f0:	e9 c0 00 00 00       	jmp    10d8b5 <k_object_dump_error+0x107>
  10d7f5:	40                   	inc    %eax
  10d7f6:	0f 85 ea 00 00 00    	jne    10d8e6 <k_object_dump_error+0x138>
  10d7fc:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10d801:	e8 51 fc ff ff       	call   10d457 <thread_index_get>
  10d806:	8b 33                	mov    (%ebx),%esi
  10d808:	89 c1                	mov    %eax,%ecx
  10d80a:	0f b6 43 07          	movzbl 0x7(%ebx),%eax
  10d80e:	50                   	push   %eax
  10d80f:	e8 08 fc ff ff       	call   10d41c <otype_to_str>
  10d814:	89 34 24             	mov    %esi,(%esp)
  10d817:	50                   	push   %eax
  10d818:	51                   	push   %ecx
  10d819:	ff 35 a8 48 12 00    	push   0x1248a8
  10d81f:	6a 45                	push   $0x45
  10d821:	68 ca 3a 11 00       	push   $0x113aca
  10d826:	e8 cd 4c ff ff       	call   1024f8 <z_log_minimal_printk>
  10d82b:	83 c4 18             	add    $0x18,%esp
  10d82e:	8c c8                	mov    %cs,%eax
  10d830:	68 00 3b 11 00       	push   $0x113b00
  10d835:	83 c3 04             	add    $0x4,%ebx
  10d838:	6a 45                	push   $0x45
  10d83a:	68 12 3b 11 00       	push   $0x113b12
  10d83f:	e8 b4 4c ff ff       	call   1024f8 <z_log_minimal_printk>
  10d844:	c7 45 10 03 00 00 00 	movl   $0x3,0x10(%ebp)
  10d84b:	89 5d 0c             	mov    %ebx,0xc(%ebp)
  10d84e:	c7 45 08 01 00 00 00 	movl   $0x1,0x8(%ebp)
  10d855:	83 c4 0c             	add    $0xc,%esp
  10d858:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10d85b:	5b                   	pop    %ebx
  10d85c:	5e                   	pop    %esi
  10d85d:	5d                   	pop    %ebp
  10d85e:	e9 a8 4c ff ff       	jmp    10250b <z_log_minimal_hexdump_print>
  10d863:	52                   	push   %edx
  10d864:	e8 b3 fb ff ff       	call   10d41c <otype_to_str>
  10d869:	89 04 24             	mov    %eax,(%esp)
  10d86c:	51                   	push   %ecx
  10d86d:	6a 45                	push   $0x45
  10d86f:	68 68 3a 11 00       	push   $0x113a68
  10d874:	e8 7f 4c ff ff       	call   1024f8 <z_log_minimal_printk>
  10d879:	83 c4 10             	add    $0x10,%esp
  10d87c:	85 db                	test   %ebx,%ebx
  10d87e:	75 19                	jne    10d899 <k_object_dump_error+0xeb>
  10d880:	c7 45 0c 45 00 00 00 	movl   $0x45,0xc(%ebp)
  10d887:	c7 45 08 82 3a 11 00 	movl   $0x113a82,0x8(%ebp)
  10d88e:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10d891:	5b                   	pop    %ebx
  10d892:	5e                   	pop    %esi
  10d893:	5d                   	pop    %ebp
  10d894:	e9 5f 4c ff ff       	jmp    1024f8 <z_log_minimal_printk>
  10d899:	0f b6 43 07          	movzbl 0x7(%ebx),%eax
  10d89d:	50                   	push   %eax
  10d89e:	e8 79 fb ff ff       	call   10d41c <otype_to_str>
  10d8a3:	59                   	pop    %ecx
  10d8a4:	89 45 10             	mov    %eax,0x10(%ebp)
  10d8a7:	c7 45 0c 45 00 00 00 	movl   $0x45,0xc(%ebp)
  10d8ae:	c7 45 08 ac 3a 11 00 	movl   $0x113aac,0x8(%ebp)
  10d8b5:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10d8b8:	5b                   	pop    %ebx
  10d8b9:	5e                   	pop    %esi
  10d8ba:	5d                   	pop    %ebp
  10d8bb:	e9 38 4c ff ff       	jmp    1024f8 <z_log_minimal_printk>
  10d8c0:	52                   	push   %edx
  10d8c1:	e8 56 fb ff ff       	call   10d41c <otype_to_str>
  10d8c6:	5a                   	pop    %edx
  10d8c7:	89 45 14             	mov    %eax,0x14(%ebp)
  10d8ca:	89 4d 10             	mov    %ecx,0x10(%ebp)
  10d8cd:	c7 45 0c 45 00 00 00 	movl   $0x45,0xc(%ebp)
  10d8d4:	c7 45 08 3d 3b 11 00 	movl   $0x113b3d,0x8(%ebp)
  10d8db:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10d8de:	5b                   	pop    %ebx
  10d8df:	5e                   	pop    %esi
  10d8e0:	5d                   	pop    %ebp
  10d8e1:	e9 12 4c ff ff       	jmp    1024f8 <z_log_minimal_printk>
  10d8e6:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10d8e9:	5b                   	pop    %ebx
  10d8ea:	5e                   	pop    %esi
  10d8eb:	5d                   	pop    %ebp
  10d8ec:	c3                   	ret

0010d8ed <z_impl_k_object_access_grant>:
  10d8ed:	55                   	push   %ebp
  10d8ee:	89 e5                	mov    %esp,%ebp
  10d8f0:	53                   	push   %ebx
  10d8f1:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  10d8f4:	ff 75 08             	push   0x8(%ebp)
  10d8f7:	e8 39 fb ff ff       	call   10d435 <k_object_find>
  10d8fc:	5a                   	pop    %edx
  10d8fd:	85 c0                	test   %eax,%eax
  10d8ff:	74 0f                	je     10d910 <z_impl_k_object_access_grant+0x23>
  10d901:	89 5d 0c             	mov    %ebx,0xc(%ebp)
  10d904:	89 45 08             	mov    %eax,0x8(%ebp)
  10d907:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10d90a:	c9                   	leave
  10d90b:	e9 fd fc ff ff       	jmp    10d60d <k_thread_perms_set>
  10d910:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10d913:	c9                   	leave
  10d914:	c3                   	ret

0010d915 <k_object_access_all_grant>:
  10d915:	55                   	push   %ebp
  10d916:	89 e5                	mov    %esp,%ebp
  10d918:	ff 75 08             	push   0x8(%ebp)
  10d91b:	e8 15 fb ff ff       	call   10d435 <k_object_find>
  10d920:	5a                   	pop    %edx
  10d921:	85 c0                	test   %eax,%eax
  10d923:	74 04                	je     10d929 <k_object_access_all_grant+0x14>
  10d925:	80 48 08 02          	orb    $0x2,0x8(%eax)
  10d929:	c9                   	leave
  10d92a:	c3                   	ret

0010d92b <k_object_validate>:
  10d92b:	55                   	push   %ebp
  10d92c:	89 e5                	mov    %esp,%ebp
  10d92e:	56                   	push   %esi
  10d92f:	53                   	push   %ebx
  10d930:	8b 75 08             	mov    0x8(%ebp),%esi
  10d933:	8b 45 0c             	mov    0xc(%ebp),%eax
  10d936:	8b 5d 10             	mov    0x10(%ebp),%ebx
  10d939:	85 f6                	test   %esi,%esi
  10d93b:	74 56                	je     10d993 <k_object_validate+0x68>
  10d93d:	85 c0                	test   %eax,%eax
  10d93f:	74 08                	je     10d949 <k_object_validate+0x1e>
  10d941:	0f b6 56 07          	movzbl 0x7(%esi),%edx
  10d945:	39 c2                	cmp    %eax,%edx
  10d947:	75 4a                	jne    10d993 <k_object_validate+0x68>
  10d949:	f6 46 08 02          	testb  $0x2,0x8(%esi)
  10d94d:	74 06                	je     10d955 <k_object_validate+0x2a>
  10d94f:	85 db                	test   %ebx,%ebx
  10d951:	74 22                	je     10d975 <k_object_validate+0x4a>
  10d953:	eb 2d                	jmp    10d982 <k_object_validate+0x57>
  10d955:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10d95a:	e8 f8 fa ff ff       	call   10d457 <thread_index_get>
  10d95f:	83 f8 ff             	cmp    $0xffffffff,%eax
  10d962:	75 05                	jne    10d969 <k_object_validate+0x3e>
  10d964:	83 cb ff             	or     $0xffffffff,%ebx
  10d967:	eb 33                	jmp    10d99c <k_object_validate+0x71>
  10d969:	0f a3 46 04          	bt     %eax,0x4(%esi)
  10d96d:	19 c0                	sbb    %eax,%eax
  10d96f:	85 c0                	test   %eax,%eax
  10d971:	75 dc                	jne    10d94f <k_object_validate+0x24>
  10d973:	eb ef                	jmp    10d964 <k_object_validate+0x39>
  10d975:	f6 46 08 01          	testb  $0x1,0x8(%esi)
  10d979:	75 21                	jne    10d99c <k_object_validate+0x71>
  10d97b:	bb ea ff ff ff       	mov    $0xffffffea,%ebx
  10d980:	eb 1a                	jmp    10d99c <k_object_validate+0x71>
  10d982:	43                   	inc    %ebx
  10d983:	75 15                	jne    10d99a <k_object_validate+0x6f>
  10d985:	8a 5e 08             	mov    0x8(%esi),%bl
  10d988:	c1 e3 1f             	shl    $0x1f,%ebx
  10d98b:	c1 fb 1f             	sar    $0x1f,%ebx
  10d98e:	83 e3 90             	and    $0xffffff90,%ebx
  10d991:	eb 09                	jmp    10d99c <k_object_validate+0x71>
  10d993:	bb f7 ff ff ff       	mov    $0xfffffff7,%ebx
  10d998:	eb 02                	jmp    10d99c <k_object_validate+0x71>
  10d99a:	31 db                	xor    %ebx,%ebx
  10d99c:	89 d8                	mov    %ebx,%eax
  10d99e:	5b                   	pop    %ebx
  10d99f:	5e                   	pop    %esi
  10d9a0:	5d                   	pop    %ebp
  10d9a1:	c3                   	ret

0010d9a2 <k_object_init>:
  10d9a2:	55                   	push   %ebp
  10d9a3:	89 e5                	mov    %esp,%ebp
  10d9a5:	ff 75 08             	push   0x8(%ebp)
  10d9a8:	e8 88 fa ff ff       	call   10d435 <k_object_find>
  10d9ad:	5a                   	pop    %edx
  10d9ae:	85 c0                	test   %eax,%eax
  10d9b0:	74 04                	je     10d9b6 <k_object_init+0x14>
  10d9b2:	80 48 08 01          	orb    $0x1,0x8(%eax)
  10d9b6:	c9                   	leave
  10d9b7:	c3                   	ret

0010d9b8 <k_object_uninit>:
  10d9b8:	55                   	push   %ebp
  10d9b9:	89 e5                	mov    %esp,%ebp
  10d9bb:	ff 75 08             	push   0x8(%ebp)
  10d9be:	e8 72 fa ff ff       	call   10d435 <k_object_find>
  10d9c3:	5a                   	pop    %edx
  10d9c4:	85 c0                	test   %eax,%eax
  10d9c6:	74 04                	je     10d9cc <k_object_uninit+0x14>
  10d9c8:	80 60 08 fe          	andb   $0xfe,0x8(%eax)
  10d9cc:	c9                   	leave
  10d9cd:	c3                   	ret

0010d9ce <k_usermode_from_copy>:
  10d9ce:	55                   	push   %ebp
  10d9cf:	31 d2                	xor    %edx,%edx
  10d9d1:	89 e5                	mov    %esp,%ebp
  10d9d3:	8b 45 08             	mov    0x8(%ebp),%eax
  10d9d6:	8b 4d 10             	mov    0x10(%ebp),%ecx
  10d9d9:	89 55 08             	mov    %edx,0x8(%ebp)
  10d9dc:	8b 55 0c             	mov    0xc(%ebp),%edx
  10d9df:	5d                   	pop    %ebp
  10d9e0:	e9 6c f8 ff ff       	jmp    10d251 <user_copy>

0010d9e5 <k_usermode_to_copy>:
  10d9e5:	55                   	push   %ebp
  10d9e6:	89 e5                	mov    %esp,%ebp
  10d9e8:	8b 45 08             	mov    0x8(%ebp),%eax
  10d9eb:	8b 4d 10             	mov    0x10(%ebp),%ecx
  10d9ee:	c7 45 08 01 00 00 00 	movl   $0x1,0x8(%ebp)
  10d9f5:	8b 55 0c             	mov    0xc(%ebp),%edx
  10d9f8:	5d                   	pop    %ebp
  10d9f9:	e9 53 f8 ff ff       	jmp    10d251 <user_copy>

0010d9fe <k_usermode_string_copy>:
  10d9fe:	55                   	push   %ebp
  10d9ff:	89 e5                	mov    %esp,%ebp
  10da01:	57                   	push   %edi
  10da02:	56                   	push   %esi
  10da03:	53                   	push   %ebx
  10da04:	8d 45 f0             	lea    -0x10(%ebp),%eax
  10da07:	51                   	push   %ecx
  10da08:	8b 75 08             	mov    0x8(%ebp),%esi
  10da0b:	8b 7d 0c             	mov    0xc(%ebp),%edi
  10da0e:	8b 5d 10             	mov    0x10(%ebp),%ebx
  10da11:	50                   	push   %eax
  10da12:	53                   	push   %ebx
  10da13:	57                   	push   %edi
  10da14:	e8 76 65 ff ff       	call   103f8f <arch_user_string_nlen>
  10da19:	83 c4 0c             	add    $0xc,%esp
  10da1c:	89 c2                	mov    %eax,%edx
  10da1e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  10da22:	b8 0e 00 00 00       	mov    $0xe,%eax
  10da27:	75 43                	jne    10da6c <k_usermode_string_copy+0x6e>
  10da29:	39 da                	cmp    %ebx,%edx
  10da2b:	75 13                	jne    10da40 <k_usermode_string_copy+0x42>
  10da2d:	52                   	push   %edx
  10da2e:	57                   	push   %edi
  10da2f:	6a 45                	push   $0x45
  10da31:	68 4f 3b 11 00       	push   $0x113b4f
  10da36:	e8 bd 4a ff ff       	call   1024f8 <z_log_minimal_printk>
  10da3b:	83 c4 10             	add    $0x10,%esp
  10da3e:	eb 27                	jmp    10da67 <k_usermode_string_copy+0x69>
  10da40:	83 c2 01             	add    $0x1,%edx
  10da43:	89 d3                	mov    %edx,%ebx
  10da45:	72 12                	jb     10da59 <k_usermode_string_copy+0x5b>
  10da47:	52                   	push   %edx
  10da48:	57                   	push   %edi
  10da49:	56                   	push   %esi
  10da4a:	e8 7f ff ff ff       	call   10d9ce <k_usermode_from_copy>
  10da4f:	83 c4 0c             	add    $0xc,%esp
  10da52:	c6 44 1e ff 00       	movb   $0x0,-0x1(%esi,%ebx,1)
  10da57:	eb 13                	jmp    10da6c <k_usermode_string_copy+0x6e>
  10da59:	6a 45                	push   $0x45
  10da5b:	68 6d 3b 11 00       	push   $0x113b6d
  10da60:	e8 93 4a ff ff       	call   1024f8 <z_log_minimal_printk>
  10da65:	58                   	pop    %eax
  10da66:	5a                   	pop    %edx
  10da67:	b8 16 00 00 00       	mov    $0x16,%eax
  10da6c:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10da6f:	5b                   	pop    %ebx
  10da70:	5e                   	pop    %esi
  10da71:	5f                   	pop    %edi
  10da72:	5d                   	pop    %ebp
  10da73:	c3                   	ret

0010da74 <boot_banner>:
  10da74:	55                   	push   %ebp
  10da75:	89 e5                	mov    %esp,%ebp
  10da77:	68 5c 40 11 00       	push   $0x11405c
  10da7c:	e8 e7 3a ff ff       	call   101568 <printk>
  10da81:	58                   	pop    %eax
  10da82:	c9                   	leave
  10da83:	c3                   	ret

0010da84 <k_heap_init>:
  10da84:	55                   	push   %ebp
  10da85:	b9 04 00 00 00       	mov    $0x4,%ecx
  10da8a:	89 e5                	mov    %esp,%ebp
  10da8c:	57                   	push   %edi
  10da8d:	31 c0                	xor    %eax,%eax
  10da8f:	8b 55 08             	mov    0x8(%ebp),%edx
  10da92:	8d 7a 0c             	lea    0xc(%edx),%edi
  10da95:	f3 ab                	rep stos %eax,%es:(%edi)
  10da97:	c7 42 10 d3 7e 10 00 	movl   $0x107ed3,0x10(%edx)
  10da9e:	5f                   	pop    %edi
  10da9f:	5d                   	pop    %ebp
  10daa0:	e9 8b 37 ff ff       	jmp    101230 <sys_heap_init>

0010daa5 <statics_init>:
  10daa5:	55                   	push   %ebp
  10daa6:	89 e5                	mov    %esp,%ebp
  10daa8:	53                   	push   %ebx
  10daa9:	bb 08 d0 11 00       	mov    $0x11d008,%ebx
  10daae:	81 fb 08 d0 11 00    	cmp    $0x11d008,%ebx
  10dab4:	76 36                	jbe    10daec <statics_init+0x47>
  10dab6:	6a 19                	push   $0x19
  10dab8:	68 8a 40 11 00       	push   $0x11408a
  10dabd:	68 ac 40 11 00       	push   $0x1140ac
  10dac2:	68 ee 10 11 00       	push   $0x1110ee
  10dac7:	e8 11 3b ff ff       	call   1015dd <assert_print>
  10dacc:	83 c4 10             	add    $0x10,%esp
  10dacf:	68 b8 20 11 00       	push   $0x1120b8
  10dad4:	e8 04 3b ff ff       	call   1015dd <assert_print>
  10dad9:	c7 04 24 19 00 00 00 	movl   $0x19,(%esp)
  10dae0:	68 8a 40 11 00       	push   $0x11408a
  10dae5:	e8 e4 3a ff ff       	call   1015ce <assert_post_action>
  10daea:	58                   	pop    %eax
  10daeb:	5a                   	pop    %edx
  10daec:	73 14                	jae    10db02 <statics_init+0x5d>
  10daee:	ff 73 08             	push   0x8(%ebx)
  10daf1:	ff 73 04             	push   0x4(%ebx)
  10daf4:	53                   	push   %ebx
  10daf5:	83 c3 20             	add    $0x20,%ebx
  10daf8:	e8 87 ff ff ff       	call   10da84 <k_heap_init>
  10dafd:	83 c4 0c             	add    $0xc,%esp
  10db00:	eb ac                	jmp    10daae <statics_init+0x9>
  10db02:	31 c0                	xor    %eax,%eax
  10db04:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10db07:	c9                   	leave
  10db08:	c3                   	ret

0010db09 <k_heap_aligned_alloc>:
  10db09:	8d 4c 24 04          	lea    0x4(%esp),%ecx
  10db0d:	83 e4 f8             	and    $0xfffffff8,%esp
  10db10:	ff 71 fc             	push   -0x4(%ecx)
  10db13:	55                   	push   %ebp
  10db14:	89 e5                	mov    %esp,%ebp
  10db16:	57                   	push   %edi
  10db17:	56                   	push   %esi
  10db18:	53                   	push   %ebx
  10db19:	51                   	push   %ecx
  10db1a:	83 ec 20             	sub    $0x20,%esp
  10db1d:	8b 41 04             	mov    0x4(%ecx),%eax
  10db20:	8b 51 10             	mov    0x10(%ecx),%edx
  10db23:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10db26:	8b 41 08             	mov    0x8(%ecx),%eax
  10db29:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10db2c:	8b 41 0c             	mov    0xc(%ecx),%eax
  10db2f:	8b 39                	mov    (%ecx),%edi
  10db31:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10db34:	89 55 e0             	mov    %edx,-0x20(%ebp)
  10db37:	52                   	push   %edx
  10db38:	8d 4d e8             	lea    -0x18(%ebp),%ecx
  10db3b:	50                   	push   %eax
  10db3c:	51                   	push   %ecx
  10db3d:	e8 d0 da ff ff       	call   10b612 <sys_timepoint_calc>
  10db42:	8d 5f 1c             	lea    0x1c(%edi),%ebx
  10db45:	58                   	pop    %eax
  10db46:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10db49:	5a                   	pop    %edx
  10db4a:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10db4d:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10db50:	89 55 dc             	mov    %edx,-0x24(%ebp)
  10db53:	9c                   	pushf
  10db54:	fa                   	cli
  10db55:	5e                   	pop    %esi
  10db56:	53                   	push   %ebx
  10db57:	e8 93 d1 ff ff       	call   10acef <z_spin_lock_valid>
  10db5c:	59                   	pop    %ecx
  10db5d:	84 c0                	test   %al,%al
  10db5f:	74 56                	je     10dbb7 <k_heap_aligned_alloc+0xae>
  10db61:	53                   	push   %ebx
  10db62:	e8 e0 d1 ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10db67:	83 3d a0 48 12 00 00 	cmpl   $0x0,0x1248a0
  10db6e:	58                   	pop    %eax
  10db6f:	0f 84 bf 00 00 00    	je     10dc34 <k_heap_aligned_alloc+0x12b>
  10db75:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10db78:	0b 45 e4             	or     -0x1c(%ebp),%eax
  10db7b:	0f 84 b3 00 00 00    	je     10dc34 <k_heap_aligned_alloc+0x12b>
  10db81:	6a 4b                	push   $0x4b
  10db83:	68 8a 40 11 00       	push   $0x11408a
  10db88:	68 c5 40 11 00       	push   $0x1140c5
  10db8d:	68 ee 10 11 00       	push   $0x1110ee
  10db92:	e8 46 3a ff ff       	call   1015dd <assert_print>
  10db97:	83 c4 10             	add    $0x10,%esp
  10db9a:	68 4a 23 11 00       	push   $0x11234a
  10db9f:	e8 39 3a ff ff       	call   1015dd <assert_print>
  10dba4:	c7 04 24 4b 00 00 00 	movl   $0x4b,(%esp)
  10dbab:	68 8a 40 11 00       	push   $0x11408a
  10dbb0:	e8 19 3a ff ff       	call   1015ce <assert_post_action>
  10dbb5:	5b                   	pop    %ebx
  10dbb6:	5e                   	pop    %esi
  10dbb7:	68 88 00 00 00       	push   $0x88
  10dbbc:	68 61 13 11 00       	push   $0x111361
  10dbc1:	68 8e 13 11 00       	push   $0x11138e
  10dbc6:	68 ee 10 11 00       	push   $0x1110ee
  10dbcb:	e8 0d 3a ff ff       	call   1015dd <assert_print>
  10dbd0:	83 c4 10             	add    $0x10,%esp
  10dbd3:	53                   	push   %ebx
  10dbd4:	68 a3 13 11 00       	push   $0x1113a3
  10dbd9:	e8 ff 39 ff ff       	call   1015dd <assert_print>
  10dbde:	5b                   	pop    %ebx
  10dbdf:	5e                   	pop    %esi
  10dbe0:	68 88 00 00 00       	push   $0x88
  10dbe5:	e9 9e 00 00 00       	jmp    10dc88 <k_heap_aligned_alloc+0x17f>
  10dbea:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10dbed:	0b 45 e4             	or     -0x1c(%ebp),%eax
  10dbf0:	74 57                	je     10dc49 <k_heap_aligned_alloc+0x140>
  10dbf2:	ff 75 dc             	push   -0x24(%ebp)
  10dbf5:	ff 75 d8             	push   -0x28(%ebp)
  10dbf8:	8d 45 e8             	lea    -0x18(%ebp),%eax
  10dbfb:	50                   	push   %eax
  10dbfc:	e8 5e da ff ff       	call   10b65f <sys_timepoint_timeout>
  10dc01:	58                   	pop    %eax
  10dc02:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10dc05:	5a                   	pop    %edx
  10dc06:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10dc09:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10dc0c:	89 55 e0             	mov    %edx,-0x20(%ebp)
  10dc0f:	52                   	push   %edx
  10dc10:	50                   	push   %eax
  10dc11:	8d 47 0c             	lea    0xc(%edi),%eax
  10dc14:	50                   	push   %eax
  10dc15:	56                   	push   %esi
  10dc16:	53                   	push   %ebx
  10dc17:	e8 da b8 ff ff       	call   1094f6 <z_pend_curr>
  10dc1c:	83 c4 14             	add    $0x14,%esp
  10dc1f:	9c                   	pushf
  10dc20:	fa                   	cli
  10dc21:	5e                   	pop    %esi
  10dc22:	53                   	push   %ebx
  10dc23:	e8 c7 d0 ff ff       	call   10acef <z_spin_lock_valid>
  10dc28:	59                   	pop    %ecx
  10dc29:	84 c0                	test   %al,%al
  10dc2b:	74 8a                	je     10dbb7 <k_heap_aligned_alloc+0xae>
  10dc2d:	53                   	push   %ebx
  10dc2e:	e8 14 d1 ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10dc33:	59                   	pop    %ecx
  10dc34:	ff 75 d0             	push   -0x30(%ebp)
  10dc37:	ff 75 d4             	push   -0x2c(%ebp)
  10dc3a:	57                   	push   %edi
  10dc3b:	e8 65 34 ff ff       	call   1010a5 <sys_heap_aligned_alloc>
  10dc40:	83 c4 0c             	add    $0xc,%esp
  10dc43:	89 c2                	mov    %eax,%edx
  10dc45:	85 c0                	test   %eax,%eax
  10dc47:	74 a1                	je     10dbea <k_heap_aligned_alloc+0xe1>
  10dc49:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  10dc4c:	53                   	push   %ebx
  10dc4d:	e8 be d0 ff ff       	call   10ad10 <z_spin_unlock_valid>
  10dc52:	5f                   	pop    %edi
  10dc53:	84 c0                	test   %al,%al
  10dc55:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  10dc58:	75 38                	jne    10dc92 <k_heap_aligned_alloc+0x189>
  10dc5a:	68 31 01 00 00       	push   $0x131
  10dc5f:	68 61 13 11 00       	push   $0x111361
  10dc64:	68 e8 13 11 00       	push   $0x1113e8
  10dc69:	68 ee 10 11 00       	push   $0x1110ee
  10dc6e:	e8 6a 39 ff ff       	call   1015dd <assert_print>
  10dc73:	83 c4 10             	add    $0x10,%esp
  10dc76:	53                   	push   %ebx
  10dc77:	68 ff 13 11 00       	push   $0x1113ff
  10dc7c:	e8 5c 39 ff ff       	call   1015dd <assert_print>
  10dc81:	58                   	pop    %eax
  10dc82:	5a                   	pop    %edx
  10dc83:	68 31 01 00 00       	push   $0x131
  10dc88:	68 61 13 11 00       	push   $0x111361
  10dc8d:	e9 1e ff ff ff       	jmp    10dbb0 <k_heap_aligned_alloc+0xa7>
  10dc92:	0f ba e6 09          	bt     $0x9,%esi
  10dc96:	73 01                	jae    10dc99 <k_heap_aligned_alloc+0x190>
  10dc98:	fb                   	sti
  10dc99:	8d 65 f0             	lea    -0x10(%ebp),%esp
  10dc9c:	89 d0                	mov    %edx,%eax
  10dc9e:	59                   	pop    %ecx
  10dc9f:	5b                   	pop    %ebx
  10dca0:	5e                   	pop    %esi
  10dca1:	5f                   	pop    %edi
  10dca2:	5d                   	pop    %ebp
  10dca3:	8d 61 fc             	lea    -0x4(%ecx),%esp
  10dca6:	c3                   	ret

0010dca7 <k_heap_free>:
  10dca7:	55                   	push   %ebp
  10dca8:	89 e5                	mov    %esp,%ebp
  10dcaa:	57                   	push   %edi
  10dcab:	56                   	push   %esi
  10dcac:	53                   	push   %ebx
  10dcad:	57                   	push   %edi
  10dcae:	8b 75 08             	mov    0x8(%ebp),%esi
  10dcb1:	8b 45 0c             	mov    0xc(%ebp),%eax
  10dcb4:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10dcb7:	8d 5e 1c             	lea    0x1c(%esi),%ebx
  10dcba:	9c                   	pushf
  10dcbb:	fa                   	cli
  10dcbc:	5f                   	pop    %edi
  10dcbd:	53                   	push   %ebx
  10dcbe:	e8 2c d0 ff ff       	call   10acef <z_spin_lock_valid>
  10dcc3:	5a                   	pop    %edx
  10dcc4:	84 c0                	test   %al,%al
  10dcc6:	75 30                	jne    10dcf8 <k_heap_free+0x51>
  10dcc8:	68 88 00 00 00       	push   $0x88
  10dccd:	68 61 13 11 00       	push   $0x111361
  10dcd2:	68 8e 13 11 00       	push   $0x11138e
  10dcd7:	68 ee 10 11 00       	push   $0x1110ee
  10dcdc:	e8 fc 38 ff ff       	call   1015dd <assert_print>
  10dce1:	83 c4 10             	add    $0x10,%esp
  10dce4:	53                   	push   %ebx
  10dce5:	68 a3 13 11 00       	push   $0x1113a3
  10dcea:	e8 ee 38 ff ff       	call   1015dd <assert_print>
  10dcef:	5b                   	pop    %ebx
  10dcf0:	5e                   	pop    %esi
  10dcf1:	68 88 00 00 00       	push   $0x88
  10dcf6:	eb 6b                	jmp    10dd63 <k_heap_free+0xbc>
  10dcf8:	53                   	push   %ebx
  10dcf9:	e8 49 d0 ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10dcfe:	58                   	pop    %eax
  10dcff:	ff 75 f0             	push   -0x10(%ebp)
  10dd02:	56                   	push   %esi
  10dd03:	e8 39 32 ff ff       	call   100f41 <sys_heap_free>
  10dd08:	58                   	pop    %eax
  10dd09:	83 c6 0c             	add    $0xc,%esi
  10dd0c:	5a                   	pop    %edx
  10dd0d:	56                   	push   %esi
  10dd0e:	e8 1a c2 ff ff       	call   109f2d <z_unpend_all>
  10dd13:	59                   	pop    %ecx
  10dd14:	85 c0                	test   %eax,%eax
  10dd16:	74 12                	je     10dd2a <k_heap_free+0x83>
  10dd18:	89 7d 0c             	mov    %edi,0xc(%ebp)
  10dd1b:	89 5d 08             	mov    %ebx,0x8(%ebp)
  10dd1e:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10dd21:	5b                   	pop    %ebx
  10dd22:	5e                   	pop    %esi
  10dd23:	5f                   	pop    %edi
  10dd24:	5d                   	pop    %ebp
  10dd25:	e9 83 bc ff ff       	jmp    1099ad <z_reschedule>
  10dd2a:	53                   	push   %ebx
  10dd2b:	e8 e0 cf ff ff       	call   10ad10 <z_spin_unlock_valid>
  10dd30:	5e                   	pop    %esi
  10dd31:	84 c0                	test   %al,%al
  10dd33:	75 3a                	jne    10dd6f <k_heap_free+0xc8>
  10dd35:	68 31 01 00 00       	push   $0x131
  10dd3a:	68 61 13 11 00       	push   $0x111361
  10dd3f:	68 e8 13 11 00       	push   $0x1113e8
  10dd44:	68 ee 10 11 00       	push   $0x1110ee
  10dd49:	e8 8f 38 ff ff       	call   1015dd <assert_print>
  10dd4e:	83 c4 10             	add    $0x10,%esp
  10dd51:	53                   	push   %ebx
  10dd52:	68 ff 13 11 00       	push   $0x1113ff
  10dd57:	e8 81 38 ff ff       	call   1015dd <assert_print>
  10dd5c:	59                   	pop    %ecx
  10dd5d:	5b                   	pop    %ebx
  10dd5e:	68 31 01 00 00       	push   $0x131
  10dd63:	68 61 13 11 00       	push   $0x111361
  10dd68:	e8 61 38 ff ff       	call   1015ce <assert_post_action>
  10dd6d:	58                   	pop    %eax
  10dd6e:	5a                   	pop    %edx
  10dd6f:	0f ba e7 09          	bt     $0x9,%edi
  10dd73:	73 01                	jae    10dd76 <k_heap_free+0xcf>
  10dd75:	fb                   	sti
  10dd76:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10dd79:	5b                   	pop    %ebx
  10dd7a:	5e                   	pop    %esi
  10dd7b:	5f                   	pop    %edi
  10dd7c:	5d                   	pop    %ebp
  10dd7d:	c3                   	ret

0010dd7e <k_object_validation_check.constprop.0>:
  10dd7e:	55                   	push   %ebp
  10dd7f:	89 e5                	mov    %esp,%ebp
  10dd81:	57                   	push   %edi
  10dd82:	56                   	push   %esi
  10dd83:	89 d7                	mov    %edx,%edi
  10dd85:	56                   	push   %esi
  10dd86:	89 c6                	mov    %eax,%esi
  10dd88:	51                   	push   %ecx
  10dd89:	6a 02                	push   $0x2
  10dd8b:	50                   	push   %eax
  10dd8c:	e8 9a fb ff ff       	call   10d92b <k_object_validate>
  10dd91:	83 c4 0c             	add    $0xc,%esp
  10dd94:	85 c0                	test   %eax,%eax
  10dd96:	74 13                	je     10ddab <k_object_validation_check.constprop.0+0x2d>
  10dd98:	6a 02                	push   $0x2
  10dd9a:	56                   	push   %esi
  10dd9b:	57                   	push   %edi
  10dd9c:	50                   	push   %eax
  10dd9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10dda0:	e8 09 fa ff ff       	call   10d7ae <k_object_dump_error>
  10dda5:	83 c4 10             	add    $0x10,%esp
  10dda8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10ddab:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10ddae:	5e                   	pop    %esi
  10ddaf:	5f                   	pop    %edi
  10ddb0:	5d                   	pop    %ebp
  10ddb1:	c3                   	ret

0010ddb2 <k_msgq_init>:
  10ddb2:	55                   	push   %ebp
  10ddb3:	89 e5                	mov    %esp,%ebp
  10ddb5:	57                   	push   %edi
  10ddb6:	53                   	push   %ebx
  10ddb7:	8b 55 08             	mov    0x8(%ebp),%edx
  10ddba:	8b 5d 14             	mov    0x14(%ebp),%ebx
  10ddbd:	8b 45 10             	mov    0x10(%ebp),%eax
  10ddc0:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10ddc3:	89 42 14             	mov    %eax,0x14(%edx)
  10ddc6:	89 4a 1c             	mov    %ecx,0x1c(%edx)
  10ddc9:	0f af c3             	imul   %ebx,%eax
  10ddcc:	01 c8                	add    %ecx,%eax
  10ddce:	89 4a 24             	mov    %ecx,0x24(%edx)
  10ddd1:	89 42 20             	mov    %eax,0x20(%edx)
  10ddd4:	31 c0                	xor    %eax,%eax
  10ddd6:	89 4a 28             	mov    %ecx,0x28(%edx)
  10ddd9:	89 42 2c             	mov    %eax,0x2c(%edx)
  10dddc:	b9 04 00 00 00       	mov    $0x4,%ecx
  10dde1:	31 c0                	xor    %eax,%eax
  10dde3:	89 d7                	mov    %edx,%edi
  10dde5:	89 5a 18             	mov    %ebx,0x18(%edx)
  10dde8:	c6 42 30 00          	movb   $0x0,0x30(%edx)
  10ddec:	f3 ab                	rep stos %eax,%es:(%edi)
  10ddee:	31 c9                	xor    %ecx,%ecx
  10ddf0:	c7 42 04 d3 7e 10 00 	movl   $0x107ed3,0x4(%edx)
  10ddf7:	89 4a 10             	mov    %ecx,0x10(%edx)
  10ddfa:	5b                   	pop    %ebx
  10ddfb:	5f                   	pop    %edi
  10ddfc:	5d                   	pop    %ebp
  10ddfd:	e9 a0 fb ff ff       	jmp    10d9a2 <k_object_init>

0010de02 <z_impl_k_msgq_alloc_init>:
  10de02:	55                   	push   %ebp
  10de03:	b9 ea ff ff ff       	mov    $0xffffffea,%ecx
  10de08:	89 e5                	mov    %esp,%ebp
  10de0a:	57                   	push   %edi
  10de0b:	56                   	push   %esi
  10de0c:	53                   	push   %ebx
  10de0d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  10de10:	8b 75 10             	mov    0x10(%ebp),%esi
  10de13:	89 d8                	mov    %ebx,%eax
  10de15:	8b 7d 08             	mov    0x8(%ebp),%edi
  10de18:	f7 e6                	mul    %esi
  10de1a:	70 25                	jo     10de41 <z_impl_k_msgq_alloc_init+0x3f>
  10de1c:	50                   	push   %eax
  10de1d:	6a 00                	push   $0x0
  10de1f:	e8 9b e6 ff ff       	call   10c4bf <z_thread_aligned_alloc>
  10de24:	5a                   	pop    %edx
  10de25:	85 c0                	test   %eax,%eax
  10de27:	59                   	pop    %ecx
  10de28:	b9 f4 ff ff ff       	mov    $0xfffffff4,%ecx
  10de2d:	74 12                	je     10de41 <z_impl_k_msgq_alloc_init+0x3f>
  10de2f:	56                   	push   %esi
  10de30:	53                   	push   %ebx
  10de31:	50                   	push   %eax
  10de32:	57                   	push   %edi
  10de33:	e8 7a ff ff ff       	call   10ddb2 <k_msgq_init>
  10de38:	83 c4 10             	add    $0x10,%esp
  10de3b:	c6 47 30 01          	movb   $0x1,0x30(%edi)
  10de3f:	31 c9                	xor    %ecx,%ecx
  10de41:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10de44:	89 c8                	mov    %ecx,%eax
  10de46:	5b                   	pop    %ebx
  10de47:	5e                   	pop    %esi
  10de48:	5f                   	pop    %edi
  10de49:	5d                   	pop    %ebp
  10de4a:	c3                   	ret

0010de4b <z_vrfy_k_msgq_alloc_init>:
  10de4b:	55                   	push   %ebp
  10de4c:	89 e5                	mov    %esp,%ebp
  10de4e:	57                   	push   %edi
  10de4f:	56                   	push   %esi
  10de50:	53                   	push   %ebx
  10de51:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10de54:	8b 75 0c             	mov    0xc(%ebp),%esi
  10de57:	8b 7d 10             	mov    0x10(%ebp),%edi
  10de5a:	53                   	push   %ebx
  10de5b:	e8 d5 f5 ff ff       	call   10d435 <k_object_find>
  10de60:	5a                   	pop    %edx
  10de61:	83 c9 ff             	or     $0xffffffff,%ecx
  10de64:	89 da                	mov    %ebx,%edx
  10de66:	e8 13 ff ff ff       	call   10dd7e <k_object_validation_check.constprop.0>
  10de6b:	85 c0                	test   %eax,%eax
  10de6d:	75 15                	jne    10de84 <z_vrfy_k_msgq_alloc_init+0x39>
  10de6f:	89 7d 10             	mov    %edi,0x10(%ebp)
  10de72:	89 75 0c             	mov    %esi,0xc(%ebp)
  10de75:	89 5d 08             	mov    %ebx,0x8(%ebp)
  10de78:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10de7b:	5b                   	pop    %ebx
  10de7c:	5e                   	pop    %esi
  10de7d:	5f                   	pop    %edi
  10de7e:	5d                   	pop    %ebp
  10de7f:	e9 7e ff ff ff       	jmp    10de02 <z_impl_k_msgq_alloc_init>
  10de84:	68 38 0d 11 00       	push   $0x110d38
  10de89:	6a 45                	push   $0x45
  10de8b:	68 dd 1f 11 00       	push   $0x111fdd
  10de90:	e8 63 46 ff ff       	call   1024f8 <z_log_minimal_printk>
  10de95:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10de9a:	83 c4 0c             	add    $0xc,%esp
  10de9d:	ff b0 88 00 00 00    	push   0x88(%eax)
  10dea3:	e8 1e 63 ff ff       	call   1041c6 <arch_syscall_oops>

0010dea8 <z_mrsh_k_msgq_alloc_init>:
  10dea8:	55                   	push   %ebp
  10dea9:	89 e5                	mov    %esp,%ebp
  10deab:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10deb0:	8b 55 20             	mov    0x20(%ebp),%edx
  10deb3:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10deb9:	ff 75 10             	push   0x10(%ebp)
  10debc:	ff 75 0c             	push   0xc(%ebp)
  10debf:	ff 75 08             	push   0x8(%ebp)
  10dec2:	e8 84 ff ff ff       	call   10de4b <z_vrfy_k_msgq_alloc_init>
  10dec7:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  10decd:	31 c9                	xor    %ecx,%ecx
  10decf:	83 c4 0c             	add    $0xc,%esp
  10ded2:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  10ded8:	c9                   	leave
  10ded9:	c3                   	ret

0010deda <k_msgq_cleanup>:
  10deda:	55                   	push   %ebp
  10dedb:	89 e5                	mov    %esp,%ebp
  10dedd:	53                   	push   %ebx
  10dede:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10dee1:	6a 00                	push   $0x0
  10dee3:	53                   	push   %ebx
  10dee4:	e8 d0 39 ff ff       	call   1018b9 <z_rb_get_minmax>
  10dee9:	5a                   	pop    %edx
  10deea:	89 c2                	mov    %eax,%edx
  10deec:	59                   	pop    %ecx
  10deed:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
  10def2:	85 d2                	test   %edx,%edx
  10def4:	75 19                	jne    10df0f <k_msgq_cleanup+0x35>
  10def6:	f6 43 30 01          	testb  $0x1,0x30(%ebx)
  10defa:	75 04                	jne    10df00 <k_msgq_cleanup+0x26>
  10defc:	31 c0                	xor    %eax,%eax
  10defe:	eb 0f                	jmp    10df0f <k_msgq_cleanup+0x35>
  10df00:	ff 73 1c             	push   0x1c(%ebx)
  10df03:	e8 9d e5 ff ff       	call   10c4a5 <k_free>
  10df08:	58                   	pop    %eax
  10df09:	80 63 30 fe          	andb   $0xfe,0x30(%ebx)
  10df0d:	eb ed                	jmp    10defc <k_msgq_cleanup+0x22>
  10df0f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10df12:	c9                   	leave
  10df13:	c3                   	ret

0010df14 <z_impl_k_msgq_put>:
  10df14:	55                   	push   %ebp
  10df15:	89 e5                	mov    %esp,%ebp
  10df17:	57                   	push   %edi
  10df18:	56                   	push   %esi
  10df19:	53                   	push   %ebx
  10df1a:	83 ec 0c             	sub    $0xc,%esp
  10df1d:	8b 45 10             	mov    0x10(%ebp),%eax
  10df20:	8b 55 14             	mov    0x14(%ebp),%edx
  10df23:	83 3d a0 48 12 00 00 	cmpl   $0x0,0x1248a0
  10df2a:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10df2d:	8b 75 0c             	mov    0xc(%ebp),%esi
  10df30:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10df33:	89 d7                	mov    %edx,%edi
  10df35:	74 33                	je     10df6a <z_impl_k_msgq_put+0x56>
  10df37:	09 d0                	or     %edx,%eax
  10df39:	74 2f                	je     10df6a <z_impl_k_msgq_put+0x56>
  10df3b:	6a 7e                	push   $0x7e
  10df3d:	68 0b 41 11 00       	push   $0x11410b
  10df42:	68 c5 40 11 00       	push   $0x1140c5
  10df47:	68 ee 10 11 00       	push   $0x1110ee
  10df4c:	e8 8c 36 ff ff       	call   1015dd <assert_print>
  10df51:	83 c4 10             	add    $0x10,%esp
  10df54:	68 4a 23 11 00       	push   $0x11234a
  10df59:	e8 7f 36 ff ff       	call   1015dd <assert_print>
  10df5e:	c7 04 24 7e 00 00 00 	movl   $0x7e,(%esp)
  10df65:	e9 cc 00 00 00       	jmp    10e036 <z_impl_k_msgq_put+0x122>
  10df6a:	8d 43 10             	lea    0x10(%ebx),%eax
  10df6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10df70:	9c                   	pushf
  10df71:	fa                   	cli
  10df72:	8f 45 ec             	pop    -0x14(%ebp)
  10df75:	ff 75 f0             	push   -0x10(%ebp)
  10df78:	e8 72 cd ff ff       	call   10acef <z_spin_lock_valid>
  10df7d:	5a                   	pop    %edx
  10df7e:	84 c0                	test   %al,%al
  10df80:	75 3c                	jne    10dfbe <z_impl_k_msgq_put+0xaa>
  10df82:	68 88 00 00 00       	push   $0x88
  10df87:	68 61 13 11 00       	push   $0x111361
  10df8c:	68 8e 13 11 00       	push   $0x11138e
  10df91:	68 ee 10 11 00       	push   $0x1110ee
  10df96:	e8 42 36 ff ff       	call   1015dd <assert_print>
  10df9b:	83 c4 10             	add    $0x10,%esp
  10df9e:	ff 75 f0             	push   -0x10(%ebp)
  10dfa1:	68 a3 13 11 00       	push   $0x1113a3
  10dfa6:	e8 32 36 ff ff       	call   1015dd <assert_print>
  10dfab:	5f                   	pop    %edi
  10dfac:	58                   	pop    %eax
  10dfad:	68 88 00 00 00       	push   $0x88
  10dfb2:	68 61 13 11 00       	push   $0x111361
  10dfb7:	e8 12 36 ff ff       	call   1015ce <assert_post_action>
  10dfbc:	5b                   	pop    %ebx
  10dfbd:	5e                   	pop    %esi
  10dfbe:	ff 75 f0             	push   -0x10(%ebp)
  10dfc1:	e8 81 cd ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10dfc6:	8b 43 18             	mov    0x18(%ebx),%eax
  10dfc9:	39 43 2c             	cmp    %eax,0x2c(%ebx)
  10dfcc:	59                   	pop    %ecx
  10dfcd:	0f 83 8f 00 00 00    	jae    10e062 <z_impl_k_msgq_put+0x14e>
  10dfd3:	53                   	push   %ebx
  10dfd4:	e8 78 b6 ff ff       	call   109651 <z_unpend_first_thread>
  10dfd9:	5a                   	pop    %edx
  10dfda:	85 c0                	test   %eax,%eax
  10dfdc:	74 2a                	je     10e008 <z_impl_k_msgq_put+0xf4>
  10dfde:	8b 78 14             	mov    0x14(%eax),%edi
  10dfe1:	8b 4b 14             	mov    0x14(%ebx),%ecx
  10dfe4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
  10dfe6:	8b 50 2c             	mov    0x2c(%eax),%edx
  10dfe9:	31 db                	xor    %ebx,%ebx
  10dfeb:	89 1a                	mov    %ebx,(%edx)
  10dfed:	50                   	push   %eax
  10dfee:	e8 11 b2 ff ff       	call   109204 <z_ready_thread>
  10dff3:	5e                   	pop    %esi
  10dff4:	ff 75 ec             	push   -0x14(%ebp)
  10dff7:	ff 75 f0             	push   -0x10(%ebp)
  10dffa:	e8 ae b9 ff ff       	call   1099ad <z_reschedule>
  10dfff:	31 d2                	xor    %edx,%edx
  10e001:	5f                   	pop    %edi
  10e002:	58                   	pop    %eax
  10e003:	e9 d6 00 00 00       	jmp    10e0de <z_impl_k_msgq_put+0x1ca>
  10e008:	8b 43 28             	mov    0x28(%ebx),%eax
  10e00b:	3b 43 1c             	cmp    0x1c(%ebx),%eax
  10e00e:	72 05                	jb     10e015 <z_impl_k_msgq_put+0x101>
  10e010:	3b 43 20             	cmp    0x20(%ebx),%eax
  10e013:	72 2b                	jb     10e040 <z_impl_k_msgq_put+0x12c>
  10e015:	68 98 00 00 00       	push   $0x98
  10e01a:	68 0b 41 11 00       	push   $0x11410b
  10e01f:	68 2d 41 11 00       	push   $0x11412d
  10e024:	68 ee 10 11 00       	push   $0x1110ee
  10e029:	e8 af 35 ff ff       	call   1015dd <assert_print>
  10e02e:	83 c4 10             	add    $0x10,%esp
  10e031:	68 98 00 00 00       	push   $0x98
  10e036:	68 0b 41 11 00       	push   $0x11410b
  10e03b:	e9 77 ff ff ff       	jmp    10dfb7 <z_impl_k_msgq_put+0xa3>
  10e040:	89 c7                	mov    %eax,%edi
  10e042:	8b 4b 14             	mov    0x14(%ebx),%ecx
  10e045:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
  10e047:	8b 43 14             	mov    0x14(%ebx),%eax
  10e04a:	03 43 28             	add    0x28(%ebx),%eax
  10e04d:	3b 43 20             	cmp    0x20(%ebx),%eax
  10e050:	89 43 28             	mov    %eax,0x28(%ebx)
  10e053:	75 06                	jne    10e05b <z_impl_k_msgq_put+0x147>
  10e055:	8b 43 1c             	mov    0x1c(%ebx),%eax
  10e058:	89 43 28             	mov    %eax,0x28(%ebx)
  10e05b:	ff 43 2c             	incl   0x2c(%ebx)
  10e05e:	31 d2                	xor    %edx,%edx
  10e060:	eb 2c                	jmp    10e08e <z_impl_k_msgq_put+0x17a>
  10e062:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10e065:	ba dd ff ff ff       	mov    $0xffffffdd,%edx
  10e06a:	09 f8                	or     %edi,%eax
  10e06c:	74 20                	je     10e08e <z_impl_k_msgq_put+0x17a>
  10e06e:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10e073:	89 70 14             	mov    %esi,0x14(%eax)
  10e076:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10e079:	57                   	push   %edi
  10e07a:	50                   	push   %eax
  10e07b:	53                   	push   %ebx
  10e07c:	ff 75 ec             	push   -0x14(%ebp)
  10e07f:	ff 75 f0             	push   -0x10(%ebp)
  10e082:	e8 6f b4 ff ff       	call   1094f6 <z_pend_curr>
  10e087:	83 c4 14             	add    $0x14,%esp
  10e08a:	89 c2                	mov    %eax,%edx
  10e08c:	eb 50                	jmp    10e0de <z_impl_k_msgq_put+0x1ca>
  10e08e:	89 55 e8             	mov    %edx,-0x18(%ebp)
  10e091:	ff 75 f0             	push   -0x10(%ebp)
  10e094:	e8 77 cc ff ff       	call   10ad10 <z_spin_unlock_valid>
  10e099:	8b 55 e8             	mov    -0x18(%ebp),%edx
  10e09c:	59                   	pop    %ecx
  10e09d:	84 c0                	test   %al,%al
  10e09f:	75 35                	jne    10e0d6 <z_impl_k_msgq_put+0x1c2>
  10e0a1:	68 31 01 00 00       	push   $0x131
  10e0a6:	68 61 13 11 00       	push   $0x111361
  10e0ab:	68 e8 13 11 00       	push   $0x1113e8
  10e0b0:	68 ee 10 11 00       	push   $0x1110ee
  10e0b5:	e8 23 35 ff ff       	call   1015dd <assert_print>
  10e0ba:	83 c4 10             	add    $0x10,%esp
  10e0bd:	ff 75 f0             	push   -0x10(%ebp)
  10e0c0:	68 ff 13 11 00       	push   $0x1113ff
  10e0c5:	e8 13 35 ff ff       	call   1015dd <assert_print>
  10e0ca:	58                   	pop    %eax
  10e0cb:	5a                   	pop    %edx
  10e0cc:	68 31 01 00 00       	push   $0x131
  10e0d1:	e9 dc fe ff ff       	jmp    10dfb2 <z_impl_k_msgq_put+0x9e>
  10e0d6:	0f ba 65 ec 09       	btl    $0x9,-0x14(%ebp)
  10e0db:	73 01                	jae    10e0de <z_impl_k_msgq_put+0x1ca>
  10e0dd:	fb                   	sti
  10e0de:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10e0e1:	89 d0                	mov    %edx,%eax
  10e0e3:	5b                   	pop    %ebx
  10e0e4:	5e                   	pop    %esi
  10e0e5:	5f                   	pop    %edi
  10e0e6:	5d                   	pop    %ebp
  10e0e7:	c3                   	ret

0010e0e8 <z_mrsh_k_msgq_put>:
  10e0e8:	55                   	push   %ebp
  10e0e9:	89 e5                	mov    %esp,%ebp
  10e0eb:	57                   	push   %edi
  10e0ec:	56                   	push   %esi
  10e0ed:	53                   	push   %ebx
  10e0ee:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10e0f3:	8b 55 20             	mov    0x20(%ebp),%edx
  10e0f6:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  10e0f9:	8b 75 10             	mov    0x10(%ebp),%esi
  10e0fc:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10e102:	8b 7d 14             	mov    0x14(%ebp),%edi
  10e105:	ff 75 08             	push   0x8(%ebp)
  10e108:	e8 28 f3 ff ff       	call   10d435 <k_object_find>
  10e10d:	31 c9                	xor    %ecx,%ecx
  10e10f:	5a                   	pop    %edx
  10e110:	8b 55 08             	mov    0x8(%ebp),%edx
  10e113:	e8 66 fc ff ff       	call   10dd7e <k_object_validation_check.constprop.0>
  10e118:	85 c0                	test   %eax,%eax
  10e11a:	75 0e                	jne    10e12a <z_mrsh_k_msgq_put+0x42>
  10e11c:	8b 45 08             	mov    0x8(%ebp),%eax
  10e11f:	89 d9                	mov    %ebx,%ecx
  10e121:	8b 40 14             	mov    0x14(%eax),%eax
  10e124:	01 c1                	add    %eax,%ecx
  10e126:	73 18                	jae    10e140 <z_mrsh_k_msgq_put+0x58>
  10e128:	eb 35                	jmp    10e15f <z_mrsh_k_msgq_put+0x77>
  10e12a:	68 24 0d 11 00       	push   $0x110d24
  10e12f:	6a 45                	push   $0x45
  10e131:	68 dd 1f 11 00       	push   $0x111fdd
  10e136:	e8 bd 43 ff ff       	call   1024f8 <z_log_minimal_printk>
  10e13b:	83 c4 0c             	add    $0xc,%esp
  10e13e:	eb 3f                	jmp    10e17f <z_mrsh_k_msgq_put+0x97>
  10e140:	85 c0                	test   %eax,%eax
  10e142:	74 0b                	je     10e14f <z_mrsh_k_msgq_put+0x67>
  10e144:	89 da                	mov    %ebx,%edx
  10e146:	8d 48 ff             	lea    -0x1(%eax),%ecx
  10e149:	f7 d2                	not    %edx
  10e14b:	39 d1                	cmp    %edx,%ecx
  10e14d:	73 10                	jae    10e15f <z_mrsh_k_msgq_put+0x77>
  10e14f:	6a 00                	push   $0x0
  10e151:	50                   	push   %eax
  10e152:	53                   	push   %ebx
  10e153:	e8 3e 56 ff ff       	call   103796 <arch_buffer_validate>
  10e158:	83 c4 0c             	add    $0xc,%esp
  10e15b:	85 c0                	test   %eax,%eax
  10e15d:	74 30                	je     10e18f <z_mrsh_k_msgq_put+0xa7>
  10e15f:	68 cc 3b 11 00       	push   $0x113bcc
  10e164:	8b 45 08             	mov    0x8(%ebp),%eax
  10e167:	ff 70 14             	push   0x14(%eax)
  10e16a:	53                   	push   %ebx
  10e16b:	68 24 0d 11 00       	push   $0x110d24
  10e170:	6a 45                	push   $0x45
  10e172:	68 7c 12 11 00       	push   $0x11127c
  10e177:	e8 7c 43 ff ff       	call   1024f8 <z_log_minimal_printk>
  10e17c:	83 c4 18             	add    $0x18,%esp
  10e17f:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10e184:	ff b0 88 00 00 00    	push   0x88(%eax)
  10e18a:	e8 37 60 ff ff       	call   1041c6 <arch_syscall_oops>
  10e18f:	57                   	push   %edi
  10e190:	56                   	push   %esi
  10e191:	53                   	push   %ebx
  10e192:	ff 75 08             	push   0x8(%ebp)
  10e195:	e8 7a fd ff ff       	call   10df14 <z_impl_k_msgq_put>
  10e19a:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  10e1a0:	31 c9                	xor    %ecx,%ecx
  10e1a2:	83 c4 10             	add    $0x10,%esp
  10e1a5:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  10e1ab:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10e1ae:	5b                   	pop    %ebx
  10e1af:	5e                   	pop    %esi
  10e1b0:	5f                   	pop    %edi
  10e1b1:	5d                   	pop    %ebp
  10e1b2:	c3                   	ret

0010e1b3 <z_mrsh_k_msgq_get_attrs>:
  10e1b3:	55                   	push   %ebp
  10e1b4:	89 e5                	mov    %esp,%ebp
  10e1b6:	56                   	push   %esi
  10e1b7:	53                   	push   %ebx
  10e1b8:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10e1bd:	8b 55 20             	mov    0x20(%ebp),%edx
  10e1c0:	8b 75 08             	mov    0x8(%ebp),%esi
  10e1c3:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  10e1c6:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10e1cc:	56                   	push   %esi
  10e1cd:	e8 63 f2 ff ff       	call   10d435 <k_object_find>
  10e1d2:	59                   	pop    %ecx
  10e1d3:	89 f2                	mov    %esi,%edx
  10e1d5:	31 c9                	xor    %ecx,%ecx
  10e1d7:	e8 a2 fb ff ff       	call   10dd7e <k_object_validation_check.constprop.0>
  10e1dc:	85 c0                	test   %eax,%eax
  10e1de:	75 07                	jne    10e1e7 <z_mrsh_k_msgq_get_attrs+0x34>
  10e1e0:	83 fb f3             	cmp    $0xfffffff3,%ebx
  10e1e3:	76 18                	jbe    10e1fd <z_mrsh_k_msgq_get_attrs+0x4a>
  10e1e5:	eb 27                	jmp    10e20e <z_mrsh_k_msgq_get_attrs+0x5b>
  10e1e7:	68 0c 0d 11 00       	push   $0x110d0c
  10e1ec:	6a 45                	push   $0x45
  10e1ee:	68 dd 1f 11 00       	push   $0x111fdd
  10e1f3:	e8 00 43 ff ff       	call   1024f8 <z_log_minimal_printk>
  10e1f8:	83 c4 0c             	add    $0xc,%esp
  10e1fb:	eb 2d                	jmp    10e22a <z_mrsh_k_msgq_get_attrs+0x77>
  10e1fd:	6a 01                	push   $0x1
  10e1ff:	6a 0c                	push   $0xc
  10e201:	53                   	push   %ebx
  10e202:	e8 8f 55 ff ff       	call   103796 <arch_buffer_validate>
  10e207:	83 c4 0c             	add    $0xc,%esp
  10e20a:	85 c0                	test   %eax,%eax
  10e20c:	74 2c                	je     10e23a <z_mrsh_k_msgq_get_attrs+0x87>
  10e20e:	68 c7 12 11 00       	push   $0x1112c7
  10e213:	6a 0c                	push   $0xc
  10e215:	53                   	push   %ebx
  10e216:	68 0c 0d 11 00       	push   $0x110d0c
  10e21b:	6a 45                	push   $0x45
  10e21d:	68 7c 12 11 00       	push   $0x11127c
  10e222:	e8 d1 42 ff ff       	call   1024f8 <z_log_minimal_printk>
  10e227:	83 c4 18             	add    $0x18,%esp
  10e22a:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10e22f:	ff b0 88 00 00 00    	push   0x88(%eax)
  10e235:	e8 8c 5f ff ff       	call   1041c6 <arch_syscall_oops>
  10e23a:	8b 46 14             	mov    0x14(%esi),%eax
  10e23d:	31 d2                	xor    %edx,%edx
  10e23f:	89 03                	mov    %eax,(%ebx)
  10e241:	8b 46 18             	mov    0x18(%esi),%eax
  10e244:	89 43 04             	mov    %eax,0x4(%ebx)
  10e247:	8b 46 2c             	mov    0x2c(%esi),%eax
  10e24a:	89 43 08             	mov    %eax,0x8(%ebx)
  10e24d:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10e252:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10e258:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10e25b:	31 c0                	xor    %eax,%eax
  10e25d:	5b                   	pop    %ebx
  10e25e:	5e                   	pop    %esi
  10e25f:	5d                   	pop    %ebp
  10e260:	c3                   	ret

0010e261 <z_impl_k_msgq_get>:
  10e261:	55                   	push   %ebp
  10e262:	89 e5                	mov    %esp,%ebp
  10e264:	57                   	push   %edi
  10e265:	56                   	push   %esi
  10e266:	53                   	push   %ebx
  10e267:	83 ec 0c             	sub    $0xc,%esp
  10e26a:	8b 45 10             	mov    0x10(%ebp),%eax
  10e26d:	8b 55 14             	mov    0x14(%ebp),%edx
  10e270:	83 3d a0 48 12 00 00 	cmpl   $0x0,0x1248a0
  10e277:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10e27a:	89 c6                	mov    %eax,%esi
  10e27c:	89 d7                	mov    %edx,%edi
  10e27e:	74 36                	je     10e2b6 <z_impl_k_msgq_get+0x55>
  10e280:	09 d0                	or     %edx,%eax
  10e282:	74 32                	je     10e2b6 <z_impl_k_msgq_get+0x55>
  10e284:	68 da 00 00 00       	push   $0xda
  10e289:	68 0b 41 11 00       	push   $0x11410b
  10e28e:	68 c5 40 11 00       	push   $0x1140c5
  10e293:	68 ee 10 11 00       	push   $0x1110ee
  10e298:	e8 40 33 ff ff       	call   1015dd <assert_print>
  10e29d:	83 c4 10             	add    $0x10,%esp
  10e2a0:	68 4a 23 11 00       	push   $0x11234a
  10e2a5:	e8 33 33 ff ff       	call   1015dd <assert_print>
  10e2aa:	c7 04 24 da 00 00 00 	movl   $0xda,(%esp)
  10e2b1:	e9 c8 00 00 00       	jmp    10e37e <z_impl_k_msgq_get+0x11d>
  10e2b6:	8d 43 10             	lea    0x10(%ebx),%eax
  10e2b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10e2bc:	9c                   	pushf
  10e2bd:	fa                   	cli
  10e2be:	8f 45 ec             	pop    -0x14(%ebp)
  10e2c1:	ff 75 f0             	push   -0x10(%ebp)
  10e2c4:	e8 26 ca ff ff       	call   10acef <z_spin_lock_valid>
  10e2c9:	5a                   	pop    %edx
  10e2ca:	84 c0                	test   %al,%al
  10e2cc:	75 3c                	jne    10e30a <z_impl_k_msgq_get+0xa9>
  10e2ce:	68 88 00 00 00       	push   $0x88
  10e2d3:	68 61 13 11 00       	push   $0x111361
  10e2d8:	68 8e 13 11 00       	push   $0x11138e
  10e2dd:	68 ee 10 11 00       	push   $0x1110ee
  10e2e2:	e8 f6 32 ff ff       	call   1015dd <assert_print>
  10e2e7:	83 c4 10             	add    $0x10,%esp
  10e2ea:	ff 75 f0             	push   -0x10(%ebp)
  10e2ed:	68 a3 13 11 00       	push   $0x1113a3
  10e2f2:	e8 e6 32 ff ff       	call   1015dd <assert_print>
  10e2f7:	5f                   	pop    %edi
  10e2f8:	58                   	pop    %eax
  10e2f9:	68 88 00 00 00       	push   $0x88
  10e2fe:	68 61 13 11 00       	push   $0x111361
  10e303:	e8 c6 32 ff ff       	call   1015ce <assert_post_action>
  10e308:	5b                   	pop    %ebx
  10e309:	5e                   	pop    %esi
  10e30a:	ff 75 f0             	push   -0x10(%ebp)
  10e30d:	e8 35 ca ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10e312:	83 7b 2c 00          	cmpl   $0x0,0x2c(%ebx)
  10e316:	59                   	pop    %ecx
  10e317:	0f 84 ab 00 00 00    	je     10e3c8 <z_impl_k_msgq_get+0x167>
  10e31d:	8b 73 24             	mov    0x24(%ebx),%esi
  10e320:	8b 4b 14             	mov    0x14(%ebx),%ecx
  10e323:	8b 7d 0c             	mov    0xc(%ebp),%edi
  10e326:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
  10e328:	8b 43 14             	mov    0x14(%ebx),%eax
  10e32b:	03 43 24             	add    0x24(%ebx),%eax
  10e32e:	3b 43 20             	cmp    0x20(%ebx),%eax
  10e331:	89 43 24             	mov    %eax,0x24(%ebx)
  10e334:	75 06                	jne    10e33c <z_impl_k_msgq_get+0xdb>
  10e336:	8b 43 1c             	mov    0x1c(%ebx),%eax
  10e339:	89 43 24             	mov    %eax,0x24(%ebx)
  10e33c:	ff 4b 2c             	decl   0x2c(%ebx)
  10e33f:	53                   	push   %ebx
  10e340:	e8 0c b3 ff ff       	call   109651 <z_unpend_first_thread>
  10e345:	5a                   	pop    %edx
  10e346:	85 c0                	test   %eax,%eax
  10e348:	89 c2                	mov    %eax,%edx
  10e34a:	0f 84 a3 00 00 00    	je     10e3f3 <z_impl_k_msgq_get+0x192>
  10e350:	8b 43 28             	mov    0x28(%ebx),%eax
  10e353:	3b 43 1c             	cmp    0x1c(%ebx),%eax
  10e356:	72 05                	jb     10e35d <z_impl_k_msgq_get+0xfc>
  10e358:	3b 43 20             	cmp    0x20(%ebx),%eax
  10e35b:	72 2b                	jb     10e388 <z_impl_k_msgq_get+0x127>
  10e35d:	68 f3 00 00 00       	push   $0xf3
  10e362:	68 0b 41 11 00       	push   $0x11410b
  10e367:	68 2d 41 11 00       	push   $0x11412d
  10e36c:	68 ee 10 11 00       	push   $0x1110ee
  10e371:	e8 67 32 ff ff       	call   1015dd <assert_print>
  10e376:	83 c4 10             	add    $0x10,%esp
  10e379:	68 f3 00 00 00       	push   $0xf3
  10e37e:	68 0b 41 11 00       	push   $0x11410b
  10e383:	e9 7b ff ff ff       	jmp    10e303 <z_impl_k_msgq_get+0xa2>
  10e388:	8b 72 14             	mov    0x14(%edx),%esi
  10e38b:	89 c7                	mov    %eax,%edi
  10e38d:	8b 4b 14             	mov    0x14(%ebx),%ecx
  10e390:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
  10e392:	8b 43 14             	mov    0x14(%ebx),%eax
  10e395:	03 43 28             	add    0x28(%ebx),%eax
  10e398:	3b 43 20             	cmp    0x20(%ebx),%eax
  10e39b:	89 43 28             	mov    %eax,0x28(%ebx)
  10e39e:	75 06                	jne    10e3a6 <z_impl_k_msgq_get+0x145>
  10e3a0:	8b 43 1c             	mov    0x1c(%ebx),%eax
  10e3a3:	89 43 28             	mov    %eax,0x28(%ebx)
  10e3a6:	ff 43 2c             	incl   0x2c(%ebx)
  10e3a9:	31 db                	xor    %ebx,%ebx
  10e3ab:	8b 42 2c             	mov    0x2c(%edx),%eax
  10e3ae:	89 18                	mov    %ebx,(%eax)
  10e3b0:	52                   	push   %edx
  10e3b1:	e8 4e ae ff ff       	call   109204 <z_ready_thread>
  10e3b6:	5e                   	pop    %esi
  10e3b7:	ff 75 ec             	push   -0x14(%ebp)
  10e3ba:	ff 75 f0             	push   -0x10(%ebp)
  10e3bd:	e8 eb b5 ff ff       	call   1099ad <z_reschedule>
  10e3c2:	31 d2                	xor    %edx,%edx
  10e3c4:	5f                   	pop    %edi
  10e3c5:	58                   	pop    %eax
  10e3c6:	eb 7d                	jmp    10e445 <z_impl_k_msgq_get+0x1e4>
  10e3c8:	89 f8                	mov    %edi,%eax
  10e3ca:	ba dd ff ff ff       	mov    $0xffffffdd,%edx
  10e3cf:	09 f0                	or     %esi,%eax
  10e3d1:	74 22                	je     10e3f5 <z_impl_k_msgq_get+0x194>
  10e3d3:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10e3d8:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10e3db:	89 48 14             	mov    %ecx,0x14(%eax)
  10e3de:	57                   	push   %edi
  10e3df:	56                   	push   %esi
  10e3e0:	53                   	push   %ebx
  10e3e1:	ff 75 ec             	push   -0x14(%ebp)
  10e3e4:	ff 75 f0             	push   -0x10(%ebp)
  10e3e7:	e8 0a b1 ff ff       	call   1094f6 <z_pend_curr>
  10e3ec:	83 c4 14             	add    $0x14,%esp
  10e3ef:	89 c2                	mov    %eax,%edx
  10e3f1:	eb 52                	jmp    10e445 <z_impl_k_msgq_get+0x1e4>
  10e3f3:	31 d2                	xor    %edx,%edx
  10e3f5:	89 55 e8             	mov    %edx,-0x18(%ebp)
  10e3f8:	ff 75 f0             	push   -0x10(%ebp)
  10e3fb:	e8 10 c9 ff ff       	call   10ad10 <z_spin_unlock_valid>
  10e400:	8b 55 e8             	mov    -0x18(%ebp),%edx
  10e403:	59                   	pop    %ecx
  10e404:	84 c0                	test   %al,%al
  10e406:	75 35                	jne    10e43d <z_impl_k_msgq_get+0x1dc>
  10e408:	68 31 01 00 00       	push   $0x131
  10e40d:	68 61 13 11 00       	push   $0x111361
  10e412:	68 e8 13 11 00       	push   $0x1113e8
  10e417:	68 ee 10 11 00       	push   $0x1110ee
  10e41c:	e8 bc 31 ff ff       	call   1015dd <assert_print>
  10e421:	83 c4 10             	add    $0x10,%esp
  10e424:	ff 75 f0             	push   -0x10(%ebp)
  10e427:	68 ff 13 11 00       	push   $0x1113ff
  10e42c:	e8 ac 31 ff ff       	call   1015dd <assert_print>
  10e431:	58                   	pop    %eax
  10e432:	5a                   	pop    %edx
  10e433:	68 31 01 00 00       	push   $0x131
  10e438:	e9 c1 fe ff ff       	jmp    10e2fe <z_impl_k_msgq_get+0x9d>
  10e43d:	0f ba 65 ec 09       	btl    $0x9,-0x14(%ebp)
  10e442:	73 01                	jae    10e445 <z_impl_k_msgq_get+0x1e4>
  10e444:	fb                   	sti
  10e445:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10e448:	89 d0                	mov    %edx,%eax
  10e44a:	5b                   	pop    %ebx
  10e44b:	5e                   	pop    %esi
  10e44c:	5f                   	pop    %edi
  10e44d:	5d                   	pop    %ebp
  10e44e:	c3                   	ret

0010e44f <z_mrsh_k_msgq_get>:
  10e44f:	55                   	push   %ebp
  10e450:	89 e5                	mov    %esp,%ebp
  10e452:	57                   	push   %edi
  10e453:	56                   	push   %esi
  10e454:	53                   	push   %ebx
  10e455:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10e45a:	8b 55 20             	mov    0x20(%ebp),%edx
  10e45d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  10e460:	8b 75 10             	mov    0x10(%ebp),%esi
  10e463:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10e469:	8b 7d 14             	mov    0x14(%ebp),%edi
  10e46c:	ff 75 08             	push   0x8(%ebp)
  10e46f:	e8 c1 ef ff ff       	call   10d435 <k_object_find>
  10e474:	31 c9                	xor    %ecx,%ecx
  10e476:	5a                   	pop    %edx
  10e477:	8b 55 08             	mov    0x8(%ebp),%edx
  10e47a:	e8 ff f8 ff ff       	call   10dd7e <k_object_validation_check.constprop.0>
  10e47f:	85 c0                	test   %eax,%eax
  10e481:	75 0e                	jne    10e491 <z_mrsh_k_msgq_get+0x42>
  10e483:	8b 45 08             	mov    0x8(%ebp),%eax
  10e486:	89 d9                	mov    %ebx,%ecx
  10e488:	8b 40 14             	mov    0x14(%eax),%eax
  10e48b:	01 c1                	add    %eax,%ecx
  10e48d:	73 18                	jae    10e4a7 <z_mrsh_k_msgq_get+0x58>
  10e48f:	eb 35                	jmp    10e4c6 <z_mrsh_k_msgq_get+0x77>
  10e491:	68 f8 0c 11 00       	push   $0x110cf8
  10e496:	6a 45                	push   $0x45
  10e498:	68 dd 1f 11 00       	push   $0x111fdd
  10e49d:	e8 56 40 ff ff       	call   1024f8 <z_log_minimal_printk>
  10e4a2:	83 c4 0c             	add    $0xc,%esp
  10e4a5:	eb 3f                	jmp    10e4e6 <z_mrsh_k_msgq_get+0x97>
  10e4a7:	85 c0                	test   %eax,%eax
  10e4a9:	74 0b                	je     10e4b6 <z_mrsh_k_msgq_get+0x67>
  10e4ab:	89 da                	mov    %ebx,%edx
  10e4ad:	8d 48 ff             	lea    -0x1(%eax),%ecx
  10e4b0:	f7 d2                	not    %edx
  10e4b2:	39 d1                	cmp    %edx,%ecx
  10e4b4:	73 10                	jae    10e4c6 <z_mrsh_k_msgq_get+0x77>
  10e4b6:	6a 01                	push   $0x1
  10e4b8:	50                   	push   %eax
  10e4b9:	53                   	push   %ebx
  10e4ba:	e8 d7 52 ff ff       	call   103796 <arch_buffer_validate>
  10e4bf:	83 c4 0c             	add    $0xc,%esp
  10e4c2:	85 c0                	test   %eax,%eax
  10e4c4:	74 30                	je     10e4f6 <z_mrsh_k_msgq_get+0xa7>
  10e4c6:	68 c7 12 11 00       	push   $0x1112c7
  10e4cb:	8b 45 08             	mov    0x8(%ebp),%eax
  10e4ce:	ff 70 14             	push   0x14(%eax)
  10e4d1:	53                   	push   %ebx
  10e4d2:	68 f8 0c 11 00       	push   $0x110cf8
  10e4d7:	6a 45                	push   $0x45
  10e4d9:	68 7c 12 11 00       	push   $0x11127c
  10e4de:	e8 15 40 ff ff       	call   1024f8 <z_log_minimal_printk>
  10e4e3:	83 c4 18             	add    $0x18,%esp
  10e4e6:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10e4eb:	ff b0 88 00 00 00    	push   0x88(%eax)
  10e4f1:	e8 d0 5c ff ff       	call   1041c6 <arch_syscall_oops>
  10e4f6:	57                   	push   %edi
  10e4f7:	56                   	push   %esi
  10e4f8:	53                   	push   %ebx
  10e4f9:	ff 75 08             	push   0x8(%ebp)
  10e4fc:	e8 60 fd ff ff       	call   10e261 <z_impl_k_msgq_get>
  10e501:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  10e507:	31 c9                	xor    %ecx,%ecx
  10e509:	83 c4 10             	add    $0x10,%esp
  10e50c:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  10e512:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10e515:	5b                   	pop    %ebx
  10e516:	5e                   	pop    %esi
  10e517:	5f                   	pop    %edi
  10e518:	5d                   	pop    %ebp
  10e519:	c3                   	ret

0010e51a <z_impl_k_msgq_peek>:
  10e51a:	55                   	push   %ebp
  10e51b:	89 e5                	mov    %esp,%ebp
  10e51d:	57                   	push   %edi
  10e51e:	56                   	push   %esi
  10e51f:	53                   	push   %ebx
  10e520:	51                   	push   %ecx
  10e521:	8b 7d 08             	mov    0x8(%ebp),%edi
  10e524:	8d 5f 10             	lea    0x10(%edi),%ebx
  10e527:	9c                   	pushf
  10e528:	fa                   	cli
  10e529:	8f 45 f0             	pop    -0x10(%ebp)
  10e52c:	53                   	push   %ebx
  10e52d:	e8 bd c7 ff ff       	call   10acef <z_spin_lock_valid>
  10e532:	5e                   	pop    %esi
  10e533:	84 c0                	test   %al,%al
  10e535:	75 30                	jne    10e567 <z_impl_k_msgq_peek+0x4d>
  10e537:	68 88 00 00 00       	push   $0x88
  10e53c:	68 61 13 11 00       	push   $0x111361
  10e541:	68 8e 13 11 00       	push   $0x11138e
  10e546:	68 ee 10 11 00       	push   $0x1110ee
  10e54b:	e8 8d 30 ff ff       	call   1015dd <assert_print>
  10e550:	83 c4 10             	add    $0x10,%esp
  10e553:	53                   	push   %ebx
  10e554:	68 a3 13 11 00       	push   $0x1113a3
  10e559:	e8 7f 30 ff ff       	call   1015dd <assert_print>
  10e55e:	58                   	pop    %eax
  10e55f:	5a                   	pop    %edx
  10e560:	68 88 00 00 00       	push   $0x88
  10e565:	eb 58                	jmp    10e5bf <z_impl_k_msgq_peek+0xa5>
  10e567:	53                   	push   %ebx
  10e568:	be dd ff ff ff       	mov    $0xffffffdd,%esi
  10e56d:	e8 d5 c7 ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10e572:	58                   	pop    %eax
  10e573:	83 7f 2c 00          	cmpl   $0x0,0x2c(%edi)
  10e577:	74 0d                	je     10e586 <z_impl_k_msgq_peek+0x6c>
  10e579:	8b 77 24             	mov    0x24(%edi),%esi
  10e57c:	8b 4f 14             	mov    0x14(%edi),%ecx
  10e57f:	8b 7d 0c             	mov    0xc(%ebp),%edi
  10e582:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
  10e584:	31 f6                	xor    %esi,%esi
  10e586:	53                   	push   %ebx
  10e587:	e8 84 c7 ff ff       	call   10ad10 <z_spin_unlock_valid>
  10e58c:	5f                   	pop    %edi
  10e58d:	84 c0                	test   %al,%al
  10e58f:	75 3a                	jne    10e5cb <z_impl_k_msgq_peek+0xb1>
  10e591:	68 31 01 00 00       	push   $0x131
  10e596:	68 61 13 11 00       	push   $0x111361
  10e59b:	68 e8 13 11 00       	push   $0x1113e8
  10e5a0:	68 ee 10 11 00       	push   $0x1110ee
  10e5a5:	e8 33 30 ff ff       	call   1015dd <assert_print>
  10e5aa:	83 c4 10             	add    $0x10,%esp
  10e5ad:	53                   	push   %ebx
  10e5ae:	68 ff 13 11 00       	push   $0x1113ff
  10e5b3:	e8 25 30 ff ff       	call   1015dd <assert_print>
  10e5b8:	59                   	pop    %ecx
  10e5b9:	5b                   	pop    %ebx
  10e5ba:	68 31 01 00 00       	push   $0x131
  10e5bf:	68 61 13 11 00       	push   $0x111361
  10e5c4:	e8 05 30 ff ff       	call   1015ce <assert_post_action>
  10e5c9:	58                   	pop    %eax
  10e5ca:	5a                   	pop    %edx
  10e5cb:	0f ba 65 f0 09       	btl    $0x9,-0x10(%ebp)
  10e5d0:	73 01                	jae    10e5d3 <z_impl_k_msgq_peek+0xb9>
  10e5d2:	fb                   	sti
  10e5d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10e5d6:	89 f0                	mov    %esi,%eax
  10e5d8:	5b                   	pop    %ebx
  10e5d9:	5e                   	pop    %esi
  10e5da:	5f                   	pop    %edi
  10e5db:	5d                   	pop    %ebp
  10e5dc:	c3                   	ret

0010e5dd <z_mrsh_k_msgq_peek>:
  10e5dd:	55                   	push   %ebp
  10e5de:	89 e5                	mov    %esp,%ebp
  10e5e0:	56                   	push   %esi
  10e5e1:	53                   	push   %ebx
  10e5e2:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10e5e7:	8b 55 20             	mov    0x20(%ebp),%edx
  10e5ea:	8b 75 08             	mov    0x8(%ebp),%esi
  10e5ed:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  10e5f0:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10e5f6:	56                   	push   %esi
  10e5f7:	e8 39 ee ff ff       	call   10d435 <k_object_find>
  10e5fc:	5a                   	pop    %edx
  10e5fd:	31 c9                	xor    %ecx,%ecx
  10e5ff:	89 f2                	mov    %esi,%edx
  10e601:	e8 78 f7 ff ff       	call   10dd7e <k_object_validation_check.constprop.0>
  10e606:	85 c0                	test   %eax,%eax
  10e608:	75 0b                	jne    10e615 <z_mrsh_k_msgq_peek+0x38>
  10e60a:	8b 46 14             	mov    0x14(%esi),%eax
  10e60d:	89 d9                	mov    %ebx,%ecx
  10e60f:	01 c1                	add    %eax,%ecx
  10e611:	73 18                	jae    10e62b <z_mrsh_k_msgq_peek+0x4e>
  10e613:	eb 35                	jmp    10e64a <z_mrsh_k_msgq_peek+0x6d>
  10e615:	68 e4 0c 11 00       	push   $0x110ce4
  10e61a:	6a 45                	push   $0x45
  10e61c:	68 dd 1f 11 00       	push   $0x111fdd
  10e621:	e8 d2 3e ff ff       	call   1024f8 <z_log_minimal_printk>
  10e626:	83 c4 0c             	add    $0xc,%esp
  10e629:	eb 3c                	jmp    10e667 <z_mrsh_k_msgq_peek+0x8a>
  10e62b:	85 c0                	test   %eax,%eax
  10e62d:	74 0b                	je     10e63a <z_mrsh_k_msgq_peek+0x5d>
  10e62f:	89 da                	mov    %ebx,%edx
  10e631:	8d 48 ff             	lea    -0x1(%eax),%ecx
  10e634:	f7 d2                	not    %edx
  10e636:	39 d1                	cmp    %edx,%ecx
  10e638:	73 10                	jae    10e64a <z_mrsh_k_msgq_peek+0x6d>
  10e63a:	6a 01                	push   $0x1
  10e63c:	50                   	push   %eax
  10e63d:	53                   	push   %ebx
  10e63e:	e8 53 51 ff ff       	call   103796 <arch_buffer_validate>
  10e643:	83 c4 0c             	add    $0xc,%esp
  10e646:	85 c0                	test   %eax,%eax
  10e648:	74 2d                	je     10e677 <z_mrsh_k_msgq_peek+0x9a>
  10e64a:	68 c7 12 11 00       	push   $0x1112c7
  10e64f:	ff 76 14             	push   0x14(%esi)
  10e652:	53                   	push   %ebx
  10e653:	68 e4 0c 11 00       	push   $0x110ce4
  10e658:	6a 45                	push   $0x45
  10e65a:	68 7c 12 11 00       	push   $0x11127c
  10e65f:	e8 94 3e ff ff       	call   1024f8 <z_log_minimal_printk>
  10e664:	83 c4 18             	add    $0x18,%esp
  10e667:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10e66c:	ff b0 88 00 00 00    	push   0x88(%eax)
  10e672:	e8 4f 5b ff ff       	call   1041c6 <arch_syscall_oops>
  10e677:	53                   	push   %ebx
  10e678:	31 db                	xor    %ebx,%ebx
  10e67a:	56                   	push   %esi
  10e67b:	e8 9a fe ff ff       	call   10e51a <z_impl_k_msgq_peek>
  10e680:	5a                   	pop    %edx
  10e681:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  10e687:	59                   	pop    %ecx
  10e688:	89 9a 88 00 00 00    	mov    %ebx,0x88(%edx)
  10e68e:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10e691:	5b                   	pop    %ebx
  10e692:	5e                   	pop    %esi
  10e693:	5d                   	pop    %ebp
  10e694:	c3                   	ret

0010e695 <z_impl_k_msgq_peek_at>:
  10e695:	55                   	push   %ebp
  10e696:	89 e5                	mov    %esp,%ebp
  10e698:	57                   	push   %edi
  10e699:	56                   	push   %esi
  10e69a:	53                   	push   %ebx
  10e69b:	51                   	push   %ecx
  10e69c:	8b 55 08             	mov    0x8(%ebp),%edx
  10e69f:	8b 7d 10             	mov    0x10(%ebp),%edi
  10e6a2:	8d 5a 10             	lea    0x10(%edx),%ebx
  10e6a5:	9c                   	pushf
  10e6a6:	fa                   	cli
  10e6a7:	8f 45 f0             	pop    -0x10(%ebp)
  10e6aa:	53                   	push   %ebx
  10e6ab:	e8 3f c6 ff ff       	call   10acef <z_spin_lock_valid>
  10e6b0:	5e                   	pop    %esi
  10e6b1:	84 c0                	test   %al,%al
  10e6b3:	8b 55 08             	mov    0x8(%ebp),%edx
  10e6b6:	75 30                	jne    10e6e8 <z_impl_k_msgq_peek_at+0x53>
  10e6b8:	68 88 00 00 00       	push   $0x88
  10e6bd:	68 61 13 11 00       	push   $0x111361
  10e6c2:	68 8e 13 11 00       	push   $0x11138e
  10e6c7:	68 ee 10 11 00       	push   $0x1110ee
  10e6cc:	e8 0c 2f ff ff       	call   1015dd <assert_print>
  10e6d1:	83 c4 10             	add    $0x10,%esp
  10e6d4:	53                   	push   %ebx
  10e6d5:	68 a3 13 11 00       	push   $0x1113a3
  10e6da:	e8 fe 2e ff ff       	call   1015dd <assert_print>
  10e6df:	58                   	pop    %eax
  10e6e0:	5a                   	pop    %edx
  10e6e1:	68 88 00 00 00       	push   $0x88
  10e6e6:	eb 70                	jmp    10e758 <z_impl_k_msgq_peek_at+0xc3>
  10e6e8:	89 55 08             	mov    %edx,0x8(%ebp)
  10e6eb:	53                   	push   %ebx
  10e6ec:	e8 56 c6 ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10e6f1:	8b 55 08             	mov    0x8(%ebp),%edx
  10e6f4:	58                   	pop    %eax
  10e6f5:	3b 7a 2c             	cmp    0x2c(%edx),%edi
  10e6f8:	be dd ff ff ff       	mov    $0xffffffdd,%esi
  10e6fd:	73 20                	jae    10e71f <z_impl_k_msgq_peek_at+0x8a>
  10e6ff:	8b 4a 14             	mov    0x14(%edx),%ecx
  10e702:	8b 72 24             	mov    0x24(%edx),%esi
  10e705:	0f af f9             	imul   %ecx,%edi
  10e708:	8b 42 20             	mov    0x20(%edx),%eax
  10e70b:	29 f0                	sub    %esi,%eax
  10e70d:	39 c7                	cmp    %eax,%edi
  10e70f:	72 05                	jb     10e716 <z_impl_k_msgq_peek_at+0x81>
  10e711:	29 c7                	sub    %eax,%edi
  10e713:	8b 72 1c             	mov    0x1c(%edx),%esi
  10e716:	01 fe                	add    %edi,%esi
  10e718:	8b 7d 0c             	mov    0xc(%ebp),%edi
  10e71b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
  10e71d:	31 f6                	xor    %esi,%esi
  10e71f:	53                   	push   %ebx
  10e720:	e8 eb c5 ff ff       	call   10ad10 <z_spin_unlock_valid>
  10e725:	5f                   	pop    %edi
  10e726:	84 c0                	test   %al,%al
  10e728:	75 3a                	jne    10e764 <z_impl_k_msgq_peek_at+0xcf>
  10e72a:	68 31 01 00 00       	push   $0x131
  10e72f:	68 61 13 11 00       	push   $0x111361
  10e734:	68 e8 13 11 00       	push   $0x1113e8
  10e739:	68 ee 10 11 00       	push   $0x1110ee
  10e73e:	e8 9a 2e ff ff       	call   1015dd <assert_print>
  10e743:	83 c4 10             	add    $0x10,%esp
  10e746:	53                   	push   %ebx
  10e747:	68 ff 13 11 00       	push   $0x1113ff
  10e74c:	e8 8c 2e ff ff       	call   1015dd <assert_print>
  10e751:	59                   	pop    %ecx
  10e752:	5b                   	pop    %ebx
  10e753:	68 31 01 00 00       	push   $0x131
  10e758:	68 61 13 11 00       	push   $0x111361
  10e75d:	e8 6c 2e ff ff       	call   1015ce <assert_post_action>
  10e762:	58                   	pop    %eax
  10e763:	5a                   	pop    %edx
  10e764:	0f ba 65 f0 09       	btl    $0x9,-0x10(%ebp)
  10e769:	73 01                	jae    10e76c <z_impl_k_msgq_peek_at+0xd7>
  10e76b:	fb                   	sti
  10e76c:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10e76f:	89 f0                	mov    %esi,%eax
  10e771:	5b                   	pop    %ebx
  10e772:	5e                   	pop    %esi
  10e773:	5f                   	pop    %edi
  10e774:	5d                   	pop    %ebp
  10e775:	c3                   	ret

0010e776 <z_mrsh_k_msgq_peek_at>:
  10e776:	55                   	push   %ebp
  10e777:	89 e5                	mov    %esp,%ebp
  10e779:	56                   	push   %esi
  10e77a:	53                   	push   %ebx
  10e77b:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10e780:	8b 55 20             	mov    0x20(%ebp),%edx
  10e783:	8b 75 08             	mov    0x8(%ebp),%esi
  10e786:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  10e789:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10e78f:	56                   	push   %esi
  10e790:	e8 a0 ec ff ff       	call   10d435 <k_object_find>
  10e795:	5a                   	pop    %edx
  10e796:	31 c9                	xor    %ecx,%ecx
  10e798:	89 f2                	mov    %esi,%edx
  10e79a:	e8 df f5 ff ff       	call   10dd7e <k_object_validation_check.constprop.0>
  10e79f:	85 c0                	test   %eax,%eax
  10e7a1:	75 0b                	jne    10e7ae <z_mrsh_k_msgq_peek_at+0x38>
  10e7a3:	8b 46 14             	mov    0x14(%esi),%eax
  10e7a6:	89 d9                	mov    %ebx,%ecx
  10e7a8:	01 c1                	add    %eax,%ecx
  10e7aa:	73 18                	jae    10e7c4 <z_mrsh_k_msgq_peek_at+0x4e>
  10e7ac:	eb 35                	jmp    10e7e3 <z_mrsh_k_msgq_peek_at+0x6d>
  10e7ae:	68 cc 0c 11 00       	push   $0x110ccc
  10e7b3:	6a 45                	push   $0x45
  10e7b5:	68 dd 1f 11 00       	push   $0x111fdd
  10e7ba:	e8 39 3d ff ff       	call   1024f8 <z_log_minimal_printk>
  10e7bf:	83 c4 0c             	add    $0xc,%esp
  10e7c2:	eb 3c                	jmp    10e800 <z_mrsh_k_msgq_peek_at+0x8a>
  10e7c4:	85 c0                	test   %eax,%eax
  10e7c6:	74 0b                	je     10e7d3 <z_mrsh_k_msgq_peek_at+0x5d>
  10e7c8:	89 da                	mov    %ebx,%edx
  10e7ca:	8d 48 ff             	lea    -0x1(%eax),%ecx
  10e7cd:	f7 d2                	not    %edx
  10e7cf:	39 d1                	cmp    %edx,%ecx
  10e7d1:	73 10                	jae    10e7e3 <z_mrsh_k_msgq_peek_at+0x6d>
  10e7d3:	6a 01                	push   $0x1
  10e7d5:	50                   	push   %eax
  10e7d6:	53                   	push   %ebx
  10e7d7:	e8 ba 4f ff ff       	call   103796 <arch_buffer_validate>
  10e7dc:	83 c4 0c             	add    $0xc,%esp
  10e7df:	85 c0                	test   %eax,%eax
  10e7e1:	74 2d                	je     10e810 <z_mrsh_k_msgq_peek_at+0x9a>
  10e7e3:	68 c7 12 11 00       	push   $0x1112c7
  10e7e8:	ff 76 14             	push   0x14(%esi)
  10e7eb:	53                   	push   %ebx
  10e7ec:	68 cc 0c 11 00       	push   $0x110ccc
  10e7f1:	6a 45                	push   $0x45
  10e7f3:	68 7c 12 11 00       	push   $0x11127c
  10e7f8:	e8 fb 3c ff ff       	call   1024f8 <z_log_minimal_printk>
  10e7fd:	83 c4 18             	add    $0x18,%esp
  10e800:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10e805:	ff b0 88 00 00 00    	push   0x88(%eax)
  10e80b:	e8 b6 59 ff ff       	call   1041c6 <arch_syscall_oops>
  10e810:	ff 75 10             	push   0x10(%ebp)
  10e813:	53                   	push   %ebx
  10e814:	56                   	push   %esi
  10e815:	e8 7b fe ff ff       	call   10e695 <z_impl_k_msgq_peek_at>
  10e81a:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  10e820:	31 c9                	xor    %ecx,%ecx
  10e822:	83 c4 0c             	add    $0xc,%esp
  10e825:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  10e82b:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10e82e:	5b                   	pop    %ebx
  10e82f:	5e                   	pop    %esi
  10e830:	5d                   	pop    %ebp
  10e831:	c3                   	ret

0010e832 <z_impl_k_msgq_purge>:
  10e832:	55                   	push   %ebp
  10e833:	89 e5                	mov    %esp,%ebp
  10e835:	57                   	push   %edi
  10e836:	56                   	push   %esi
  10e837:	53                   	push   %ebx
  10e838:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10e83b:	8d 73 10             	lea    0x10(%ebx),%esi
  10e83e:	9c                   	pushf
  10e83f:	fa                   	cli
  10e840:	5f                   	pop    %edi
  10e841:	56                   	push   %esi
  10e842:	e8 a8 c4 ff ff       	call   10acef <z_spin_lock_valid>
  10e847:	5a                   	pop    %edx
  10e848:	84 c0                	test   %al,%al
  10e84a:	75 3a                	jne    10e886 <z_impl_k_msgq_purge+0x54>
  10e84c:	68 88 00 00 00       	push   $0x88
  10e851:	68 61 13 11 00       	push   $0x111361
  10e856:	68 8e 13 11 00       	push   $0x11138e
  10e85b:	68 ee 10 11 00       	push   $0x1110ee
  10e860:	e8 78 2d ff ff       	call   1015dd <assert_print>
  10e865:	83 c4 10             	add    $0x10,%esp
  10e868:	56                   	push   %esi
  10e869:	68 a3 13 11 00       	push   $0x1113a3
  10e86e:	e8 6a 2d ff ff       	call   1015dd <assert_print>
  10e873:	59                   	pop    %ecx
  10e874:	5b                   	pop    %ebx
  10e875:	68 88 00 00 00       	push   $0x88
  10e87a:	68 61 13 11 00       	push   $0x111361
  10e87f:	e8 4a 2d ff ff       	call   1015ce <assert_post_action>
  10e884:	5e                   	pop    %esi
  10e885:	5f                   	pop    %edi
  10e886:	56                   	push   %esi
  10e887:	e8 bb c4 ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10e88c:	89 1c 24             	mov    %ebx,(%esp)
  10e88f:	e8 bd ad ff ff       	call   109651 <z_unpend_first_thread>
  10e894:	5a                   	pop    %edx
  10e895:	85 c0                	test   %eax,%eax
  10e897:	74 11                	je     10e8aa <z_impl_k_msgq_purge+0x78>
  10e899:	8b 50 2c             	mov    0x2c(%eax),%edx
  10e89c:	c7 02 dd ff ff ff    	movl   $0xffffffdd,(%edx)
  10e8a2:	50                   	push   %eax
  10e8a3:	e8 5c a9 ff ff       	call   109204 <z_ready_thread>
  10e8a8:	eb e2                	jmp    10e88c <z_impl_k_msgq_purge+0x5a>
  10e8aa:	31 c0                	xor    %eax,%eax
  10e8ac:	89 43 2c             	mov    %eax,0x2c(%ebx)
  10e8af:	8b 43 28             	mov    0x28(%ebx),%eax
  10e8b2:	89 43 24             	mov    %eax,0x24(%ebx)
  10e8b5:	57                   	push   %edi
  10e8b6:	56                   	push   %esi
  10e8b7:	e8 f1 b0 ff ff       	call   1099ad <z_reschedule>
  10e8bc:	5a                   	pop    %edx
  10e8bd:	59                   	pop    %ecx
  10e8be:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10e8c1:	5b                   	pop    %ebx
  10e8c2:	5e                   	pop    %esi
  10e8c3:	5f                   	pop    %edi
  10e8c4:	5d                   	pop    %ebp
  10e8c5:	c3                   	ret

0010e8c6 <z_mrsh_k_msgq_purge>:
  10e8c6:	55                   	push   %ebp
  10e8c7:	89 e5                	mov    %esp,%ebp
  10e8c9:	53                   	push   %ebx
  10e8ca:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10e8cf:	8b 55 20             	mov    0x20(%ebp),%edx
  10e8d2:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10e8d5:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10e8db:	53                   	push   %ebx
  10e8dc:	e8 54 eb ff ff       	call   10d435 <k_object_find>
  10e8e1:	59                   	pop    %ecx
  10e8e2:	89 da                	mov    %ebx,%edx
  10e8e4:	31 c9                	xor    %ecx,%ecx
  10e8e6:	e8 93 f4 ff ff       	call   10dd7e <k_object_validation_check.constprop.0>
  10e8eb:	85 c0                	test   %eax,%eax
  10e8ed:	74 24                	je     10e913 <z_mrsh_k_msgq_purge+0x4d>
  10e8ef:	68 b8 0c 11 00       	push   $0x110cb8
  10e8f4:	6a 45                	push   $0x45
  10e8f6:	68 dd 1f 11 00       	push   $0x111fdd
  10e8fb:	e8 f8 3b ff ff       	call   1024f8 <z_log_minimal_printk>
  10e900:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10e905:	83 c4 0c             	add    $0xc,%esp
  10e908:	ff b0 88 00 00 00    	push   0x88(%eax)
  10e90e:	e8 b3 58 ff ff       	call   1041c6 <arch_syscall_oops>
  10e913:	53                   	push   %ebx
  10e914:	e8 19 ff ff ff       	call   10e832 <z_impl_k_msgq_purge>
  10e919:	58                   	pop    %eax
  10e91a:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10e91f:	31 d2                	xor    %edx,%edx
  10e921:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10e927:	31 c0                	xor    %eax,%eax
  10e929:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10e92c:	c9                   	leave
  10e92d:	c3                   	ret

0010e92e <z_mrsh_k_msgq_num_free_get>:
  10e92e:	55                   	push   %ebp
  10e92f:	89 e5                	mov    %esp,%ebp
  10e931:	53                   	push   %ebx
  10e932:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10e937:	8b 55 20             	mov    0x20(%ebp),%edx
  10e93a:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10e93d:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10e943:	53                   	push   %ebx
  10e944:	e8 ec ea ff ff       	call   10d435 <k_object_find>
  10e949:	5a                   	pop    %edx
  10e94a:	31 c9                	xor    %ecx,%ecx
  10e94c:	89 da                	mov    %ebx,%edx
  10e94e:	e8 2b f4 ff ff       	call   10dd7e <k_object_validation_check.constprop.0>
  10e953:	85 c0                	test   %eax,%eax
  10e955:	74 24                	je     10e97b <z_mrsh_k_msgq_num_free_get+0x4d>
  10e957:	68 9c 0c 11 00       	push   $0x110c9c
  10e95c:	6a 45                	push   $0x45
  10e95e:	68 dd 1f 11 00       	push   $0x111fdd
  10e963:	e8 90 3b ff ff       	call   1024f8 <z_log_minimal_printk>
  10e968:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10e96d:	83 c4 0c             	add    $0xc,%esp
  10e970:	ff b0 88 00 00 00    	push   0x88(%eax)
  10e976:	e8 4b 58 ff ff       	call   1041c6 <arch_syscall_oops>
  10e97b:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  10e981:	8b 43 18             	mov    0x18(%ebx),%eax
  10e984:	31 c9                	xor    %ecx,%ecx
  10e986:	2b 43 2c             	sub    0x2c(%ebx),%eax
  10e989:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  10e98f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10e992:	c9                   	leave
  10e993:	c3                   	ret

0010e994 <z_mrsh_k_msgq_num_used_get>:
  10e994:	55                   	push   %ebp
  10e995:	89 e5                	mov    %esp,%ebp
  10e997:	53                   	push   %ebx
  10e998:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10e99d:	8b 55 20             	mov    0x20(%ebp),%edx
  10e9a0:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10e9a3:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10e9a9:	53                   	push   %ebx
  10e9aa:	e8 86 ea ff ff       	call   10d435 <k_object_find>
  10e9af:	5a                   	pop    %edx
  10e9b0:	31 c9                	xor    %ecx,%ecx
  10e9b2:	89 da                	mov    %ebx,%edx
  10e9b4:	e8 c5 f3 ff ff       	call   10dd7e <k_object_validation_check.constprop.0>
  10e9b9:	85 c0                	test   %eax,%eax
  10e9bb:	74 24                	je     10e9e1 <z_mrsh_k_msgq_num_used_get+0x4d>
  10e9bd:	68 80 0c 11 00       	push   $0x110c80
  10e9c2:	6a 45                	push   $0x45
  10e9c4:	68 dd 1f 11 00       	push   $0x111fdd
  10e9c9:	e8 2a 3b ff ff       	call   1024f8 <z_log_minimal_printk>
  10e9ce:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10e9d3:	83 c4 0c             	add    $0xc,%esp
  10e9d6:	ff b0 88 00 00 00    	push   0x88(%eax)
  10e9dc:	e8 e5 57 ff ff       	call   1041c6 <arch_syscall_oops>
  10e9e1:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  10e9e7:	31 c9                	xor    %ecx,%ecx
  10e9e9:	8b 43 2c             	mov    0x2c(%ebx),%eax
  10e9ec:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  10e9f2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10e9f5:	c9                   	leave
  10e9f6:	c3                   	ret

0010e9f7 <k_object_validation_check.constprop.0>:
  10e9f7:	55                   	push   %ebp
  10e9f8:	89 e5                	mov    %esp,%ebp
  10e9fa:	57                   	push   %edi
  10e9fb:	56                   	push   %esi
  10e9fc:	89 d7                	mov    %edx,%edi
  10e9fe:	56                   	push   %esi
  10e9ff:	89 c6                	mov    %eax,%esi
  10ea01:	51                   	push   %ecx
  10ea02:	6a 08                	push   $0x8
  10ea04:	50                   	push   %eax
  10ea05:	e8 21 ef ff ff       	call   10d92b <k_object_validate>
  10ea0a:	83 c4 0c             	add    $0xc,%esp
  10ea0d:	85 c0                	test   %eax,%eax
  10ea0f:	74 13                	je     10ea24 <k_object_validation_check.constprop.0+0x2d>
  10ea11:	6a 08                	push   $0x8
  10ea13:	56                   	push   %esi
  10ea14:	57                   	push   %edi
  10ea15:	50                   	push   %eax
  10ea16:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10ea19:	e8 90 ed ff ff       	call   10d7ae <k_object_dump_error>
  10ea1e:	83 c4 10             	add    $0x10,%esp
  10ea21:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10ea24:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10ea27:	5e                   	pop    %esi
  10ea28:	5f                   	pop    %edi
  10ea29:	5d                   	pop    %ebp
  10ea2a:	c3                   	ret

0010ea2b <k_stack_init>:
  10ea2b:	55                   	push   %ebp
  10ea2c:	31 c0                	xor    %eax,%eax
  10ea2e:	89 e5                	mov    %esp,%ebp
  10ea30:	57                   	push   %edi
  10ea31:	53                   	push   %ebx
  10ea32:	b9 04 00 00 00       	mov    $0x4,%ecx
  10ea37:	8b 55 08             	mov    0x8(%ebp),%edx
  10ea3a:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  10ea3d:	89 d7                	mov    %edx,%edi
  10ea3f:	f3 ab                	rep stos %eax,%es:(%edi)
  10ea41:	31 c0                	xor    %eax,%eax
  10ea43:	c7 42 04 d3 7e 10 00 	movl   $0x107ed3,0x4(%edx)
  10ea4a:	89 42 10             	mov    %eax,0x10(%edx)
  10ea4d:	8b 45 10             	mov    0x10(%ebp),%eax
  10ea50:	89 5a 18             	mov    %ebx,0x18(%edx)
  10ea53:	89 5a 14             	mov    %ebx,0x14(%edx)
  10ea56:	8d 04 83             	lea    (%ebx,%eax,4),%eax
  10ea59:	89 42 1c             	mov    %eax,0x1c(%edx)
  10ea5c:	5b                   	pop    %ebx
  10ea5d:	5f                   	pop    %edi
  10ea5e:	5d                   	pop    %ebp
  10ea5f:	e9 3e ef ff ff       	jmp    10d9a2 <k_object_init>

0010ea64 <z_impl_k_stack_alloc_init>:
  10ea64:	55                   	push   %ebp
  10ea65:	89 e5                	mov    %esp,%ebp
  10ea67:	56                   	push   %esi
  10ea68:	53                   	push   %ebx
  10ea69:	8b 75 0c             	mov    0xc(%ebp),%esi
  10ea6c:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10ea6f:	8d 04 b5 00 00 00 00 	lea    0x0(,%esi,4),%eax
  10ea76:	50                   	push   %eax
  10ea77:	6a 00                	push   $0x0
  10ea79:	e8 41 da ff ff       	call   10c4bf <z_thread_aligned_alloc>
  10ea7e:	5a                   	pop    %edx
  10ea7f:	85 c0                	test   %eax,%eax
  10ea81:	59                   	pop    %ecx
  10ea82:	ba f4 ff ff ff       	mov    $0xfffffff4,%edx
  10ea87:	74 11                	je     10ea9a <z_impl_k_stack_alloc_init+0x36>
  10ea89:	56                   	push   %esi
  10ea8a:	50                   	push   %eax
  10ea8b:	53                   	push   %ebx
  10ea8c:	e8 9a ff ff ff       	call   10ea2b <k_stack_init>
  10ea91:	83 c4 0c             	add    $0xc,%esp
  10ea94:	c6 43 20 01          	movb   $0x1,0x20(%ebx)
  10ea98:	31 d2                	xor    %edx,%edx
  10ea9a:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10ea9d:	89 d0                	mov    %edx,%eax
  10ea9f:	5b                   	pop    %ebx
  10eaa0:	5e                   	pop    %esi
  10eaa1:	5d                   	pop    %ebp
  10eaa2:	c3                   	ret

0010eaa3 <z_mrsh_k_stack_alloc_init>:
  10eaa3:	55                   	push   %ebp
  10eaa4:	89 e5                	mov    %esp,%ebp
  10eaa6:	56                   	push   %esi
  10eaa7:	53                   	push   %ebx
  10eaa8:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10eaad:	8b 55 20             	mov    0x20(%ebp),%edx
  10eab0:	8b 75 08             	mov    0x8(%ebp),%esi
  10eab3:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  10eab6:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10eabc:	56                   	push   %esi
  10eabd:	e8 73 e9 ff ff       	call   10d435 <k_object_find>
  10eac2:	5a                   	pop    %edx
  10eac3:	83 c9 ff             	or     $0xffffffff,%ecx
  10eac6:	89 f2                	mov    %esi,%edx
  10eac8:	e8 2a ff ff ff       	call   10e9f7 <k_object_validation_check.constprop.0>
  10eacd:	85 c0                	test   %eax,%eax
  10eacf:	75 06                	jne    10ead7 <z_mrsh_k_stack_alloc_init+0x34>
  10ead1:	85 db                	test   %ebx,%ebx
  10ead3:	75 10                	jne    10eae5 <z_mrsh_k_stack_alloc_init+0x42>
  10ead5:	eb 3b                	jmp    10eb12 <z_mrsh_k_stack_alloc_init+0x6f>
  10ead7:	68 7c 0d 11 00       	push   $0x110d7c
  10eadc:	6a 45                	push   $0x45
  10eade:	68 dd 1f 11 00       	push   $0x111fdd
  10eae3:	eb 15                	jmp    10eafa <z_mrsh_k_stack_alloc_init+0x57>
  10eae5:	b8 04 00 00 00       	mov    $0x4,%eax
  10eaea:	f7 e3                	mul    %ebx
  10eaec:	71 32                	jno    10eb20 <z_mrsh_k_stack_alloc_init+0x7d>
  10eaee:	68 7c 0d 11 00       	push   $0x110d7c
  10eaf3:	6a 45                	push   $0x45
  10eaf5:	68 a7 41 11 00       	push   $0x1141a7
  10eafa:	e8 f9 39 ff ff       	call   1024f8 <z_log_minimal_printk>
  10eaff:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10eb04:	83 c4 0c             	add    $0xc,%esp
  10eb07:	ff b0 88 00 00 00    	push   0x88(%eax)
  10eb0d:	e8 b4 56 ff ff       	call   1041c6 <arch_syscall_oops>
  10eb12:	68 7c 0d 11 00       	push   $0x110d7c
  10eb17:	6a 45                	push   $0x45
  10eb19:	68 79 41 11 00       	push   $0x114179
  10eb1e:	eb da                	jmp    10eafa <z_mrsh_k_stack_alloc_init+0x57>
  10eb20:	53                   	push   %ebx
  10eb21:	31 db                	xor    %ebx,%ebx
  10eb23:	56                   	push   %esi
  10eb24:	e8 3b ff ff ff       	call   10ea64 <z_impl_k_stack_alloc_init>
  10eb29:	5a                   	pop    %edx
  10eb2a:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  10eb30:	59                   	pop    %ecx
  10eb31:	89 9a 88 00 00 00    	mov    %ebx,0x88(%edx)
  10eb37:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10eb3a:	5b                   	pop    %ebx
  10eb3b:	5e                   	pop    %esi
  10eb3c:	5d                   	pop    %ebp
  10eb3d:	c3                   	ret

0010eb3e <k_stack_cleanup>:
  10eb3e:	55                   	push   %ebp
  10eb3f:	89 e5                	mov    %esp,%ebp
  10eb41:	53                   	push   %ebx
  10eb42:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10eb45:	6a 00                	push   $0x0
  10eb47:	53                   	push   %ebx
  10eb48:	e8 6c 2d ff ff       	call   1018b9 <z_rb_get_minmax>
  10eb4d:	59                   	pop    %ecx
  10eb4e:	5a                   	pop    %edx
  10eb4f:	89 c2                	mov    %eax,%edx
  10eb51:	85 d2                	test   %edx,%edx
  10eb53:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  10eb58:	75 1e                	jne    10eb78 <k_stack_cleanup+0x3a>
  10eb5a:	f6 43 20 01          	testb  $0x1,0x20(%ebx)
  10eb5e:	75 04                	jne    10eb64 <k_stack_cleanup+0x26>
  10eb60:	31 c0                	xor    %eax,%eax
  10eb62:	eb 14                	jmp    10eb78 <k_stack_cleanup+0x3a>
  10eb64:	ff 73 14             	push   0x14(%ebx)
  10eb67:	e8 39 d9 ff ff       	call   10c4a5 <k_free>
  10eb6c:	31 d2                	xor    %edx,%edx
  10eb6e:	58                   	pop    %eax
  10eb6f:	89 53 14             	mov    %edx,0x14(%ebx)
  10eb72:	80 63 20 fe          	andb   $0xfe,0x20(%ebx)
  10eb76:	eb e8                	jmp    10eb60 <k_stack_cleanup+0x22>
  10eb78:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10eb7b:	c9                   	leave
  10eb7c:	c3                   	ret

0010eb7d <z_impl_k_stack_push>:
  10eb7d:	55                   	push   %ebp
  10eb7e:	89 e5                	mov    %esp,%ebp
  10eb80:	57                   	push   %edi
  10eb81:	56                   	push   %esi
  10eb82:	53                   	push   %ebx
  10eb83:	8b 7d 08             	mov    0x8(%ebp),%edi
  10eb86:	8d 5f 10             	lea    0x10(%edi),%ebx
  10eb89:	9c                   	pushf
  10eb8a:	fa                   	cli
  10eb8b:	5e                   	pop    %esi
  10eb8c:	53                   	push   %ebx
  10eb8d:	e8 5d c1 ff ff       	call   10acef <z_spin_lock_valid>
  10eb92:	5a                   	pop    %edx
  10eb93:	84 c0                	test   %al,%al
  10eb95:	75 33                	jne    10ebca <z_impl_k_stack_push+0x4d>
  10eb97:	68 88 00 00 00       	push   $0x88
  10eb9c:	68 61 13 11 00       	push   $0x111361
  10eba1:	68 8e 13 11 00       	push   $0x11138e
  10eba6:	68 ee 10 11 00       	push   $0x1110ee
  10ebab:	e8 2d 2a ff ff       	call   1015dd <assert_print>
  10ebb0:	83 c4 10             	add    $0x10,%esp
  10ebb3:	53                   	push   %ebx
  10ebb4:	68 a3 13 11 00       	push   $0x1113a3
  10ebb9:	e8 1f 2a ff ff       	call   1015dd <assert_print>
  10ebbe:	5b                   	pop    %ebx
  10ebbf:	5e                   	pop    %esi
  10ebc0:	68 88 00 00 00       	push   $0x88
  10ebc5:	e9 8a 00 00 00       	jmp    10ec54 <z_impl_k_stack_push+0xd7>
  10ebca:	53                   	push   %ebx
  10ebcb:	e8 77 c1 ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10ebd0:	8b 47 1c             	mov    0x1c(%edi),%eax
  10ebd3:	59                   	pop    %ecx
  10ebd4:	39 47 18             	cmp    %eax,0x18(%edi)
  10ebd7:	74 3d                	je     10ec16 <z_impl_k_stack_push+0x99>
  10ebd9:	57                   	push   %edi
  10ebda:	e8 72 aa ff ff       	call   109651 <z_unpend_first_thread>
  10ebdf:	5a                   	pop    %edx
  10ebe0:	85 c0                	test   %eax,%eax
  10ebe2:	74 22                	je     10ec06 <z_impl_k_stack_push+0x89>
  10ebe4:	8b 50 2c             	mov    0x2c(%eax),%edx
  10ebe7:	31 c9                	xor    %ecx,%ecx
  10ebe9:	31 ff                	xor    %edi,%edi
  10ebeb:	89 0a                	mov    %ecx,(%edx)
  10ebed:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10ebf0:	89 48 14             	mov    %ecx,0x14(%eax)
  10ebf3:	50                   	push   %eax
  10ebf4:	e8 0b a6 ff ff       	call   109204 <z_ready_thread>
  10ebf9:	89 34 24             	mov    %esi,(%esp)
  10ebfc:	53                   	push   %ebx
  10ebfd:	e8 ab ad ff ff       	call   1099ad <z_reschedule>
  10ec02:	5b                   	pop    %ebx
  10ec03:	5e                   	pop    %esi
  10ec04:	eb 61                	jmp    10ec67 <z_impl_k_stack_push+0xea>
  10ec06:	8b 47 18             	mov    0x18(%edi),%eax
  10ec09:	8b 55 0c             	mov    0xc(%ebp),%edx
  10ec0c:	89 10                	mov    %edx,(%eax)
  10ec0e:	83 47 18 04          	addl   $0x4,0x18(%edi)
  10ec12:	31 ff                	xor    %edi,%edi
  10ec14:	eb 05                	jmp    10ec1b <z_impl_k_stack_push+0x9e>
  10ec16:	bf f4 ff ff ff       	mov    $0xfffffff4,%edi
  10ec1b:	53                   	push   %ebx
  10ec1c:	e8 ef c0 ff ff       	call   10ad10 <z_spin_unlock_valid>
  10ec21:	5a                   	pop    %edx
  10ec22:	84 c0                	test   %al,%al
  10ec24:	75 3a                	jne    10ec60 <z_impl_k_stack_push+0xe3>
  10ec26:	68 31 01 00 00       	push   $0x131
  10ec2b:	68 61 13 11 00       	push   $0x111361
  10ec30:	68 e8 13 11 00       	push   $0x1113e8
  10ec35:	68 ee 10 11 00       	push   $0x1110ee
  10ec3a:	e8 9e 29 ff ff       	call   1015dd <assert_print>
  10ec3f:	83 c4 10             	add    $0x10,%esp
  10ec42:	53                   	push   %ebx
  10ec43:	68 ff 13 11 00       	push   $0x1113ff
  10ec48:	e8 90 29 ff ff       	call   1015dd <assert_print>
  10ec4d:	59                   	pop    %ecx
  10ec4e:	5b                   	pop    %ebx
  10ec4f:	68 31 01 00 00       	push   $0x131
  10ec54:	68 61 13 11 00       	push   $0x111361
  10ec59:	e8 70 29 ff ff       	call   1015ce <assert_post_action>
  10ec5e:	58                   	pop    %eax
  10ec5f:	5a                   	pop    %edx
  10ec60:	0f ba e6 09          	bt     $0x9,%esi
  10ec64:	73 01                	jae    10ec67 <z_impl_k_stack_push+0xea>
  10ec66:	fb                   	sti
  10ec67:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10ec6a:	89 f8                	mov    %edi,%eax
  10ec6c:	5b                   	pop    %ebx
  10ec6d:	5e                   	pop    %esi
  10ec6e:	5f                   	pop    %edi
  10ec6f:	5d                   	pop    %ebp
  10ec70:	c3                   	ret

0010ec71 <z_mrsh_k_stack_push>:
  10ec71:	55                   	push   %ebp
  10ec72:	89 e5                	mov    %esp,%ebp
  10ec74:	53                   	push   %ebx
  10ec75:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10ec7a:	8b 55 20             	mov    0x20(%ebp),%edx
  10ec7d:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10ec80:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10ec86:	53                   	push   %ebx
  10ec87:	e8 a9 e7 ff ff       	call   10d435 <k_object_find>
  10ec8c:	5a                   	pop    %edx
  10ec8d:	31 c9                	xor    %ecx,%ecx
  10ec8f:	89 da                	mov    %ebx,%edx
  10ec91:	e8 61 fd ff ff       	call   10e9f7 <k_object_validation_check.constprop.0>
  10ec96:	85 c0                	test   %eax,%eax
  10ec98:	74 24                	je     10ecbe <z_mrsh_k_stack_push+0x4d>
  10ec9a:	68 68 0d 11 00       	push   $0x110d68
  10ec9f:	6a 45                	push   $0x45
  10eca1:	68 dd 1f 11 00       	push   $0x111fdd
  10eca6:	e8 4d 38 ff ff       	call   1024f8 <z_log_minimal_printk>
  10ecab:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10ecb0:	83 c4 0c             	add    $0xc,%esp
  10ecb3:	ff b0 88 00 00 00    	push   0x88(%eax)
  10ecb9:	e8 08 55 ff ff       	call   1041c6 <arch_syscall_oops>
  10ecbe:	ff 75 0c             	push   0xc(%ebp)
  10ecc1:	53                   	push   %ebx
  10ecc2:	e8 b6 fe ff ff       	call   10eb7d <z_impl_k_stack_push>
  10ecc7:	5a                   	pop    %edx
  10ecc8:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  10ecce:	31 db                	xor    %ebx,%ebx
  10ecd0:	59                   	pop    %ecx
  10ecd1:	89 9a 88 00 00 00    	mov    %ebx,0x88(%edx)
  10ecd7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10ecda:	c9                   	leave
  10ecdb:	c3                   	ret

0010ecdc <z_impl_k_stack_pop>:
  10ecdc:	55                   	push   %ebp
  10ecdd:	89 e5                	mov    %esp,%ebp
  10ecdf:	57                   	push   %edi
  10ece0:	56                   	push   %esi
  10ece1:	53                   	push   %ebx
  10ece2:	8b 7d 08             	mov    0x8(%ebp),%edi
  10ece5:	8d 5f 10             	lea    0x10(%edi),%ebx
  10ece8:	9c                   	pushf
  10ece9:	fa                   	cli
  10ecea:	5e                   	pop    %esi
  10eceb:	53                   	push   %ebx
  10ecec:	e8 fe bf ff ff       	call   10acef <z_spin_lock_valid>
  10ecf1:	5a                   	pop    %edx
  10ecf2:	84 c0                	test   %al,%al
  10ecf4:	75 30                	jne    10ed26 <z_impl_k_stack_pop+0x4a>
  10ecf6:	68 88 00 00 00       	push   $0x88
  10ecfb:	68 61 13 11 00       	push   $0x111361
  10ed00:	68 8e 13 11 00       	push   $0x11138e
  10ed05:	68 ee 10 11 00       	push   $0x1110ee
  10ed0a:	e8 ce 28 ff ff       	call   1015dd <assert_print>
  10ed0f:	83 c4 10             	add    $0x10,%esp
  10ed12:	53                   	push   %ebx
  10ed13:	68 a3 13 11 00       	push   $0x1113a3
  10ed18:	e8 c0 28 ff ff       	call   1015dd <assert_print>
  10ed1d:	5b                   	pop    %ebx
  10ed1e:	5e                   	pop    %esi
  10ed1f:	68 88 00 00 00       	push   $0x88
  10ed24:	eb 56                	jmp    10ed7c <z_impl_k_stack_pop+0xa0>
  10ed26:	53                   	push   %ebx
  10ed27:	e8 1b c0 ff ff       	call   10ad47 <z_spin_lock_set_owner>
  10ed2c:	8b 47 18             	mov    0x18(%edi),%eax
  10ed2f:	59                   	pop    %ecx
  10ed30:	39 47 14             	cmp    %eax,0x14(%edi)
  10ed33:	73 5c                	jae    10ed91 <z_impl_k_stack_pop+0xb5>
  10ed35:	8d 48 fc             	lea    -0x4(%eax),%ecx
  10ed38:	8b 55 0c             	mov    0xc(%ebp),%edx
  10ed3b:	89 4f 18             	mov    %ecx,0x18(%edi)
  10ed3e:	8b 40 fc             	mov    -0x4(%eax),%eax
  10ed41:	89 02                	mov    %eax,(%edx)
  10ed43:	53                   	push   %ebx
  10ed44:	e8 c7 bf ff ff       	call   10ad10 <z_spin_unlock_valid>
  10ed49:	5a                   	pop    %edx
  10ed4a:	84 c0                	test   %al,%al
  10ed4c:	75 3a                	jne    10ed88 <z_impl_k_stack_pop+0xac>
  10ed4e:	68 31 01 00 00       	push   $0x131
  10ed53:	68 61 13 11 00       	push   $0x111361
  10ed58:	68 e8 13 11 00       	push   $0x1113e8
  10ed5d:	68 ee 10 11 00       	push   $0x1110ee
  10ed62:	e8 76 28 ff ff       	call   1015dd <assert_print>
  10ed67:	83 c4 10             	add    $0x10,%esp
  10ed6a:	53                   	push   %ebx
  10ed6b:	68 ff 13 11 00       	push   $0x1113ff
  10ed70:	e8 68 28 ff ff       	call   1015dd <assert_print>
  10ed75:	5e                   	pop    %esi
  10ed76:	5f                   	pop    %edi
  10ed77:	68 31 01 00 00       	push   $0x131
  10ed7c:	68 61 13 11 00       	push   $0x111361
  10ed81:	e8 48 28 ff ff       	call   1015ce <assert_post_action>
  10ed86:	59                   	pop    %ecx
  10ed87:	5b                   	pop    %ebx
  10ed88:	0f ba e6 09          	bt     $0x9,%esi
  10ed8c:	73 47                	jae    10edd5 <z_impl_k_stack_pop+0xf9>
  10ed8e:	fb                   	sti
  10ed8f:	eb 44                	jmp    10edd5 <z_impl_k_stack_pop+0xf9>
  10ed91:	8b 45 14             	mov    0x14(%ebp),%eax
  10ed94:	0b 45 10             	or     0x10(%ebp),%eax
  10ed97:	75 19                	jne    10edb2 <z_impl_k_stack_pop+0xd6>
  10ed99:	53                   	push   %ebx
  10ed9a:	e8 71 bf ff ff       	call   10ad10 <z_spin_unlock_valid>
  10ed9f:	5a                   	pop    %edx
  10eda0:	84 c0                	test   %al,%al
  10eda2:	74 aa                	je     10ed4e <z_impl_k_stack_pop+0x72>
  10eda4:	0f ba e6 09          	bt     $0x9,%esi
  10eda8:	73 01                	jae    10edab <z_impl_k_stack_pop+0xcf>
  10edaa:	fb                   	sti
  10edab:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
  10edb0:	eb 25                	jmp    10edd7 <z_impl_k_stack_pop+0xfb>
  10edb2:	ff 75 14             	push   0x14(%ebp)
  10edb5:	ff 75 10             	push   0x10(%ebp)
  10edb8:	57                   	push   %edi
  10edb9:	56                   	push   %esi
  10edba:	53                   	push   %ebx
  10edbb:	e8 36 a7 ff ff       	call   1094f6 <z_pend_curr>
  10edc0:	83 c4 14             	add    $0x14,%esp
  10edc3:	83 f8 f5             	cmp    $0xfffffff5,%eax
  10edc6:	74 0f                	je     10edd7 <z_impl_k_stack_pop+0xfb>
  10edc8:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10edcd:	8b 55 0c             	mov    0xc(%ebp),%edx
  10edd0:	8b 40 14             	mov    0x14(%eax),%eax
  10edd3:	89 02                	mov    %eax,(%edx)
  10edd5:	31 c0                	xor    %eax,%eax
  10edd7:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10edda:	5b                   	pop    %ebx
  10eddb:	5e                   	pop    %esi
  10eddc:	5f                   	pop    %edi
  10eddd:	5d                   	pop    %ebp
  10edde:	c3                   	ret

0010eddf <z_mrsh_k_stack_pop>:
  10eddf:	55                   	push   %ebp
  10ede0:	89 e5                	mov    %esp,%ebp
  10ede2:	57                   	push   %edi
  10ede3:	56                   	push   %esi
  10ede4:	53                   	push   %ebx
  10ede5:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10edea:	8b 55 20             	mov    0x20(%ebp),%edx
  10eded:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  10edf0:	8b 75 10             	mov    0x10(%ebp),%esi
  10edf3:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10edf9:	8b 7d 14             	mov    0x14(%ebp),%edi
  10edfc:	ff 75 08             	push   0x8(%ebp)
  10edff:	e8 31 e6 ff ff       	call   10d435 <k_object_find>
  10ee04:	31 c9                	xor    %ecx,%ecx
  10ee06:	5a                   	pop    %edx
  10ee07:	8b 55 08             	mov    0x8(%ebp),%edx
  10ee0a:	e8 e8 fb ff ff       	call   10e9f7 <k_object_validation_check.constprop.0>
  10ee0f:	85 c0                	test   %eax,%eax
  10ee11:	75 07                	jne    10ee1a <z_mrsh_k_stack_pop+0x3b>
  10ee13:	83 fb fb             	cmp    $0xfffffffb,%ebx
  10ee16:	76 18                	jbe    10ee30 <z_mrsh_k_stack_pop+0x51>
  10ee18:	eb 27                	jmp    10ee41 <z_mrsh_k_stack_pop+0x62>
  10ee1a:	68 54 0d 11 00       	push   $0x110d54
  10ee1f:	6a 45                	push   $0x45
  10ee21:	68 dd 1f 11 00       	push   $0x111fdd
  10ee26:	e8 cd 36 ff ff       	call   1024f8 <z_log_minimal_printk>
  10ee2b:	83 c4 0c             	add    $0xc,%esp
  10ee2e:	eb 2d                	jmp    10ee5d <z_mrsh_k_stack_pop+0x7e>
  10ee30:	6a 01                	push   $0x1
  10ee32:	6a 04                	push   $0x4
  10ee34:	53                   	push   %ebx
  10ee35:	e8 5c 49 ff ff       	call   103796 <arch_buffer_validate>
  10ee3a:	83 c4 0c             	add    $0xc,%esp
  10ee3d:	85 c0                	test   %eax,%eax
  10ee3f:	74 2c                	je     10ee6d <z_mrsh_k_stack_pop+0x8e>
  10ee41:	68 c7 12 11 00       	push   $0x1112c7
  10ee46:	6a 04                	push   $0x4
  10ee48:	53                   	push   %ebx
  10ee49:	68 54 0d 11 00       	push   $0x110d54
  10ee4e:	6a 45                	push   $0x45
  10ee50:	68 7c 12 11 00       	push   $0x11127c
  10ee55:	e8 9e 36 ff ff       	call   1024f8 <z_log_minimal_printk>
  10ee5a:	83 c4 18             	add    $0x18,%esp
  10ee5d:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10ee62:	ff b0 88 00 00 00    	push   0x88(%eax)
  10ee68:	e8 59 53 ff ff       	call   1041c6 <arch_syscall_oops>
  10ee6d:	57                   	push   %edi
  10ee6e:	56                   	push   %esi
  10ee6f:	53                   	push   %ebx
  10ee70:	ff 75 08             	push   0x8(%ebp)
  10ee73:	e8 64 fe ff ff       	call   10ecdc <z_impl_k_stack_pop>
  10ee78:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  10ee7e:	31 c9                	xor    %ecx,%ecx
  10ee80:	83 c4 10             	add    $0x10,%esp
  10ee83:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  10ee89:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10ee8c:	5b                   	pop    %ebx
  10ee8d:	5e                   	pop    %esi
  10ee8e:	5f                   	pop    %edi
  10ee8f:	5d                   	pop    %ebp
  10ee90:	c3                   	ret

0010ee91 <validate_kernel_object.constprop.0>:
  10ee91:	55                   	push   %ebp
  10ee92:	89 e5                	mov    %esp,%ebp
  10ee94:	57                   	push   %edi
  10ee95:	56                   	push   %esi
  10ee96:	89 d7                	mov    %edx,%edi
  10ee98:	53                   	push   %ebx
  10ee99:	89 c6                	mov    %eax,%esi
  10ee9b:	50                   	push   %eax
  10ee9c:	e8 94 e5 ff ff       	call   10d435 <k_object_find>
  10eea1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10eea8:	6a 00                	push   $0x0
  10eeaa:	50                   	push   %eax
  10eeab:	89 c3                	mov    %eax,%ebx
  10eead:	e8 79 ea ff ff       	call   10d92b <k_object_validate>
  10eeb2:	83 c4 0c             	add    $0xc,%esp
  10eeb5:	85 c0                	test   %eax,%eax
  10eeb7:	74 0e                	je     10eec7 <validate_kernel_object.constprop.0+0x36>
  10eeb9:	57                   	push   %edi
  10eeba:	53                   	push   %ebx
  10eebb:	31 db                	xor    %ebx,%ebx
  10eebd:	56                   	push   %esi
  10eebe:	50                   	push   %eax
  10eebf:	e8 ea e8 ff ff       	call   10d7ae <k_object_dump_error>
  10eec4:	83 c4 10             	add    $0x10,%esp
  10eec7:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10eeca:	89 d8                	mov    %ebx,%eax
  10eecc:	5b                   	pop    %ebx
  10eecd:	5e                   	pop    %esi
  10eece:	5f                   	pop    %edi
  10eecf:	5d                   	pop    %ebp
  10eed0:	c3                   	ret

0010eed1 <z_mrsh_k_object_access_grant>:
  10eed1:	55                   	push   %ebp
  10eed2:	89 e5                	mov    %esp,%ebp
  10eed4:	56                   	push   %esi
  10eed5:	53                   	push   %ebx
  10eed6:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10eedb:	8b 55 20             	mov    0x20(%ebp),%edx
  10eede:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  10eee1:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10eee7:	53                   	push   %ebx
  10eee8:	e8 48 e5 ff ff       	call   10d435 <k_object_find>
  10eeed:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10eef4:	6a 09                	push   $0x9
  10eef6:	89 c6                	mov    %eax,%esi
  10eef8:	50                   	push   %eax
  10eef9:	e8 2d ea ff ff       	call   10d92b <k_object_validate>
  10eefe:	83 c4 0c             	add    $0xc,%esp
  10ef01:	85 c0                	test   %eax,%eax
  10ef03:	75 27                	jne    10ef2c <z_mrsh_k_object_access_grant+0x5b>
  10ef05:	31 d2                	xor    %edx,%edx
  10ef07:	8b 45 08             	mov    0x8(%ebp),%eax
  10ef0a:	e8 82 ff ff ff       	call   10ee91 <validate_kernel_object.constprop.0>
  10ef0f:	85 c0                	test   %eax,%eax
  10ef11:	75 4a                	jne    10ef5d <z_mrsh_k_object_access_grant+0x8c>
  10ef13:	ff 75 08             	push   0x8(%ebp)
  10ef16:	68 b0 0d 11 00       	push   $0x110db0
  10ef1b:	6a 45                	push   $0x45
  10ef1d:	68 08 42 11 00       	push   $0x114208
  10ef22:	e8 d1 35 ff ff       	call   1024f8 <z_log_minimal_printk>
  10ef27:	83 c4 10             	add    $0x10,%esp
  10ef2a:	eb 21                	jmp    10ef4d <z_mrsh_k_object_access_grant+0x7c>
  10ef2c:	6a 09                	push   $0x9
  10ef2e:	56                   	push   %esi
  10ef2f:	53                   	push   %ebx
  10ef30:	50                   	push   %eax
  10ef31:	e8 78 e8 ff ff       	call   10d7ae <k_object_dump_error>
  10ef36:	83 c4 10             	add    $0x10,%esp
  10ef39:	68 b0 0d 11 00       	push   $0x110db0
  10ef3e:	6a 45                	push   $0x45
  10ef40:	68 dd 1f 11 00       	push   $0x111fdd
  10ef45:	e8 ae 35 ff ff       	call   1024f8 <z_log_minimal_printk>
  10ef4a:	83 c4 0c             	add    $0xc,%esp
  10ef4d:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10ef52:	ff b0 88 00 00 00    	push   0x88(%eax)
  10ef58:	e8 69 52 ff ff       	call   1041c6 <arch_syscall_oops>
  10ef5d:	53                   	push   %ebx
  10ef5e:	50                   	push   %eax
  10ef5f:	e8 a9 e6 ff ff       	call   10d60d <k_thread_perms_set>
  10ef64:	58                   	pop    %eax
  10ef65:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10ef6a:	31 c9                	xor    %ecx,%ecx
  10ef6c:	5a                   	pop    %edx
  10ef6d:	89 88 88 00 00 00    	mov    %ecx,0x88(%eax)
  10ef73:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10ef76:	31 c0                	xor    %eax,%eax
  10ef78:	5b                   	pop    %ebx
  10ef79:	5e                   	pop    %esi
  10ef7a:	5d                   	pop    %ebp
  10ef7b:	c3                   	ret

0010ef7c <z_mrsh_k_object_release>:
  10ef7c:	55                   	push   %ebp
  10ef7d:	89 e5                	mov    %esp,%ebp
  10ef7f:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10ef84:	8b 55 20             	mov    0x20(%ebp),%edx
  10ef87:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10ef8d:	31 d2                	xor    %edx,%edx
  10ef8f:	8b 45 08             	mov    0x8(%ebp),%eax
  10ef92:	e8 fa fe ff ff       	call   10ee91 <validate_kernel_object.constprop.0>
  10ef97:	85 c0                	test   %eax,%eax
  10ef99:	75 27                	jne    10efc2 <z_mrsh_k_object_release+0x46>
  10ef9b:	ff 75 08             	push   0x8(%ebp)
  10ef9e:	68 98 0d 11 00       	push   $0x110d98
  10efa3:	6a 45                	push   $0x45
  10efa5:	68 08 42 11 00       	push   $0x114208
  10efaa:	e8 49 35 ff ff       	call   1024f8 <z_log_minimal_printk>
  10efaf:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10efb4:	83 c4 10             	add    $0x10,%esp
  10efb7:	ff b0 88 00 00 00    	push   0x88(%eax)
  10efbd:	e8 04 52 ff ff       	call   1041c6 <arch_syscall_oops>
  10efc2:	ff 35 a8 48 12 00    	push   0x1248a8
  10efc8:	50                   	push   %eax
  10efc9:	e8 9b e7 ff ff       	call   10d769 <k_thread_perms_clear>
  10efce:	58                   	pop    %eax
  10efcf:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10efd4:	31 c9                	xor    %ecx,%ecx
  10efd6:	5a                   	pop    %edx
  10efd7:	89 88 88 00 00 00    	mov    %ecx,0x88(%eax)
  10efdd:	31 c0                	xor    %eax,%eax
  10efdf:	c9                   	leave
  10efe0:	c3                   	ret

0010efe1 <z_mrsh_k_object_alloc>:
  10efe1:	55                   	push   %ebp
  10efe2:	89 e5                	mov    %esp,%ebp
  10efe4:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10efe9:	8b 55 20             	mov    0x20(%ebp),%edx
  10efec:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10eff2:	ff 75 08             	push   0x8(%ebp)
  10eff5:	e8 52 e7 ff ff       	call   10d74c <z_impl_k_object_alloc>
  10effa:	31 c9                	xor    %ecx,%ecx
  10effc:	5a                   	pop    %edx
  10effd:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  10f003:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  10f009:	c9                   	leave
  10f00a:	c3                   	ret

0010f00b <z_mrsh_k_object_alloc_size>:
  10f00b:	55                   	push   %ebp
  10f00c:	89 e5                	mov    %esp,%ebp
  10f00e:	a1 a8 48 12 00       	mov    0x1248a8,%eax
  10f013:	8b 55 20             	mov    0x20(%ebp),%edx
  10f016:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
  10f01c:	ff 75 0c             	push   0xc(%ebp)
  10f01f:	ff 75 08             	push   0x8(%ebp)
  10f022:	e8 33 e7 ff ff       	call   10d75a <z_impl_k_object_alloc_size>
  10f027:	5a                   	pop    %edx
  10f028:	8b 15 a8 48 12 00    	mov    0x1248a8,%edx
  10f02e:	59                   	pop    %ecx
  10f02f:	31 c9                	xor    %ecx,%ecx
  10f031:	89 8a 88 00 00 00    	mov    %ecx,0x88(%edx)
  10f037:	c9                   	leave
  10f038:	c3                   	ret

0010f039 <strncpy>:
  10f039:	55                   	push   %ebp
  10f03a:	89 e5                	mov    %esp,%ebp
  10f03c:	57                   	push   %edi
  10f03d:	53                   	push   %ebx
  10f03e:	8b 45 0c             	mov    0xc(%ebp),%eax
  10f041:	8b 4d 10             	mov    0x10(%ebp),%ecx
  10f044:	8b 55 08             	mov    0x8(%ebp),%edx
  10f047:	85 c9                	test   %ecx,%ecx
  10f049:	74 0c                	je     10f057 <strncpy+0x1e>
  10f04b:	42                   	inc    %edx
  10f04c:	8a 18                	mov    (%eax),%bl
  10f04e:	40                   	inc    %eax
  10f04f:	49                   	dec    %ecx
  10f050:	88 5a ff             	mov    %bl,-0x1(%edx)
  10f053:	84 db                	test   %bl,%bl
  10f055:	75 f0                	jne    10f047 <strncpy+0xe>
  10f057:	31 c0                	xor    %eax,%eax
  10f059:	89 d7                	mov    %edx,%edi
  10f05b:	f3 aa                	rep stos %al,%es:(%edi)
  10f05d:	5b                   	pop    %ebx
  10f05e:	8b 45 08             	mov    0x8(%ebp),%eax
  10f061:	5f                   	pop    %edi
  10f062:	5d                   	pop    %ebp
  10f063:	c3                   	ret

0010f064 <strnlen>:
  10f064:	55                   	push   %ebp
  10f065:	89 e5                	mov    %esp,%ebp
  10f067:	8b 55 08             	mov    0x8(%ebp),%edx
  10f06a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10f06d:	01 d1                	add    %edx,%ecx
  10f06f:	89 d0                	mov    %edx,%eax
  10f071:	39 c8                	cmp    %ecx,%eax
  10f073:	74 08                	je     10f07d <strnlen+0x19>
  10f075:	80 38 00             	cmpb   $0x0,(%eax)
  10f078:	74 03                	je     10f07d <strnlen+0x19>
  10f07a:	40                   	inc    %eax
  10f07b:	eb f4                	jmp    10f071 <strnlen+0xd>
  10f07d:	29 d0                	sub    %edx,%eax
  10f07f:	5d                   	pop    %ebp
  10f080:	c3                   	ret

0010f081 <snprintf>:
  10f081:	55                   	push   %ebp
  10f082:	31 c0                	xor    %eax,%eax
  10f084:	89 e5                	mov    %esp,%ebp
  10f086:	57                   	push   %edi
  10f087:	53                   	push   %ebx
  10f088:	b9 07 00 00 00       	mov    $0x7,%ecx
  10f08d:	83 ec 20             	sub    $0x20,%esp
  10f090:	8d 7d dc             	lea    -0x24(%ebp),%edi
  10f093:	8b 55 08             	mov    0x8(%ebp),%edx
  10f096:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  10f099:	f3 ab                	rep stos %eax,%es:(%edi)
  10f09b:	85 db                	test   %ebx,%ebx
  10f09d:	c6 45 de 02          	movb   $0x2,-0x22(%ebp)
  10f0a1:	c7 45 e0 63 f7 10 00 	movl   $0x10f763,-0x20(%ebp)
  10f0a8:	89 55 ec             	mov    %edx,-0x14(%ebp)
  10f0ab:	74 10                	je     10f0bd <snprintf+0x3c>
  10f0ad:	89 d8                	mov    %ebx,%eax
  10f0af:	81 fb 00 00 00 80    	cmp    $0x80000000,%ebx
  10f0b5:	76 05                	jbe    10f0bc <snprintf+0x3b>
  10f0b7:	b8 00 00 00 80       	mov    $0x80000000,%eax
  10f0bc:	48                   	dec    %eax
  10f0bd:	01 c2                	add    %eax,%edx
  10f0bf:	8d 45 14             	lea    0x14(%ebp),%eax
  10f0c2:	89 55 f0             	mov    %edx,-0x10(%ebp)
  10f0c5:	52                   	push   %edx
  10f0c6:	50                   	push   %eax
  10f0c7:	8d 45 dc             	lea    -0x24(%ebp),%eax
  10f0ca:	ff 75 10             	push   0x10(%ebp)
  10f0cd:	50                   	push   %eax
  10f0ce:	e8 fc 00 00 00       	call   10f1cf <__l_vfprintf>
  10f0d3:	83 c4 10             	add    $0x10,%esp
  10f0d6:	85 db                	test   %ebx,%ebx
  10f0d8:	74 06                	je     10f0e0 <snprintf+0x5f>
  10f0da:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10f0dd:	c6 02 00             	movb   $0x0,(%edx)
  10f0e0:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10f0e3:	5b                   	pop    %ebx
  10f0e4:	5f                   	pop    %edi
  10f0e5:	5d                   	pop    %ebp
  10f0e6:	c3                   	ret

0010f0e7 <__ultoa_invert>:
  10f0e7:	55                   	push   %ebp
  10f0e8:	89 e5                	mov    %esp,%ebp
  10f0ea:	57                   	push   %edi
  10f0eb:	56                   	push   %esi
  10f0ec:	89 d7                	mov    %edx,%edi
  10f0ee:	53                   	push   %ebx
  10f0ef:	89 c6                	mov    %eax,%esi
  10f0f1:	83 ec 14             	sub    $0x14,%esp
  10f0f4:	b2 37                	mov    $0x37,%dl
  10f0f6:	8b 45 08             	mov    0x8(%ebp),%eax
  10f0f9:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10f0fc:	29 c2                	sub    %eax,%edx
  10f0fe:	83 e0 1f             	and    $0x1f,%eax
  10f101:	88 55 e7             	mov    %dl,-0x19(%ebp)
  10f104:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10f107:	83 7d e8 08          	cmpl   $0x8,-0x18(%ebp)
  10f10b:	74 17                	je     10f124 <__ultoa_invert+0x3d>
  10f10d:	83 7d e8 10          	cmpl   $0x10,-0x18(%ebp)
  10f111:	75 1f                	jne    10f132 <__ultoa_invert+0x4b>
  10f113:	89 f2                	mov    %esi,%edx
  10f115:	83 e2 0f             	and    $0xf,%edx
  10f118:	0f ac fe 04          	shrd   $0x4,%edi,%esi
  10f11c:	c1 ef 04             	shr    $0x4,%edi
  10f11f:	e9 82 00 00 00       	jmp    10f1a6 <__ultoa_invert+0xbf>
  10f124:	89 f2                	mov    %esi,%edx
  10f126:	83 e2 07             	and    $0x7,%edx
  10f129:	0f ac fe 03          	shrd   $0x3,%edi,%esi
  10f12d:	c1 ef 03             	shr    $0x3,%edi
  10f130:	eb 7c                	jmp    10f1ae <__ultoa_invert+0xc7>
  10f132:	89 fa                	mov    %edi,%edx
  10f134:	89 fb                	mov    %edi,%ebx
  10f136:	89 f0                	mov    %esi,%eax
  10f138:	89 f1                	mov    %esi,%ecx
  10f13a:	0f ac d0 01          	shrd   $0x1,%edx,%eax
  10f13e:	0f ac d9 02          	shrd   $0x2,%ebx,%ecx
  10f142:	d1 ea                	shr    $1,%edx
  10f144:	c1 eb 02             	shr    $0x2,%ebx
  10f147:	01 c1                	add    %eax,%ecx
  10f149:	11 d3                	adc    %edx,%ebx
  10f14b:	89 c8                	mov    %ecx,%eax
  10f14d:	89 da                	mov    %ebx,%edx
  10f14f:	0f ac d0 04          	shrd   $0x4,%edx,%eax
  10f153:	c1 ea 04             	shr    $0x4,%edx
  10f156:	01 c8                	add    %ecx,%eax
  10f158:	11 da                	adc    %ebx,%edx
  10f15a:	89 c1                	mov    %eax,%ecx
  10f15c:	89 d3                	mov    %edx,%ebx
  10f15e:	0f ac d9 08          	shrd   $0x8,%ebx,%ecx
  10f162:	c1 eb 08             	shr    $0x8,%ebx
  10f165:	01 c1                	add    %eax,%ecx
  10f167:	11 d3                	adc    %edx,%ebx
  10f169:	89 c8                	mov    %ecx,%eax
  10f16b:	89 da                	mov    %ebx,%edx
  10f16d:	0f ac d0 10          	shrd   $0x10,%edx,%eax
  10f171:	c1 ea 10             	shr    $0x10,%edx
  10f174:	01 c8                	add    %ecx,%eax
  10f176:	11 da                	adc    %ebx,%edx
  10f178:	89 d3                	mov    %edx,%ebx
  10f17a:	89 d9                	mov    %ebx,%ecx
  10f17c:	31 db                	xor    %ebx,%ebx
  10f17e:	01 c1                	add    %eax,%ecx
  10f180:	b0 05                	mov    $0x5,%al
  10f182:	11 d3                	adc    %edx,%ebx
  10f184:	89 f2                	mov    %esi,%edx
  10f186:	0f ac d9 03          	shrd   $0x3,%ebx,%ecx
  10f18a:	0f af c1             	imul   %ecx,%eax
  10f18d:	01 c0                	add    %eax,%eax
  10f18f:	89 ce                	mov    %ecx,%esi
  10f191:	c1 eb 03             	shr    $0x3,%ebx
  10f194:	29 c2                	sub    %eax,%edx
  10f196:	89 df                	mov    %ebx,%edi
  10f198:	80 fa 09             	cmp    $0x9,%dl
  10f19b:	7e 11                	jle    10f1ae <__ultoa_invert+0xc7>
  10f19d:	83 c6 01             	add    $0x1,%esi
  10f1a0:	83 d7 00             	adc    $0x0,%edi
  10f1a3:	83 ea 0a             	sub    $0xa,%edx
  10f1a6:	80 fa 09             	cmp    $0x9,%dl
  10f1a9:	7e 03                	jle    10f1ae <__ultoa_invert+0xc7>
  10f1ab:	02 55 e7             	add    -0x19(%ebp),%dl
  10f1ae:	ff 45 ec             	incl   -0x14(%ebp)
  10f1b1:	83 c2 30             	add    $0x30,%edx
  10f1b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10f1b7:	88 50 ff             	mov    %dl,-0x1(%eax)
  10f1ba:	89 f8                	mov    %edi,%eax
  10f1bc:	09 f0                	or     %esi,%eax
  10f1be:	0f 85 43 ff ff ff    	jne    10f107 <__ultoa_invert+0x20>
  10f1c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10f1c7:	83 c4 14             	add    $0x14,%esp
  10f1ca:	5b                   	pop    %ebx
  10f1cb:	5e                   	pop    %esi
  10f1cc:	5f                   	pop    %edi
  10f1cd:	5d                   	pop    %ebp
  10f1ce:	c3                   	ret

0010f1cf <__l_vfprintf>:
  10f1cf:	55                   	push   %ebp
  10f1d0:	89 e5                	mov    %esp,%ebp
  10f1d2:	57                   	push   %edi
  10f1d3:	56                   	push   %esi
  10f1d4:	53                   	push   %ebx
  10f1d5:	83 ec 5c             	sub    $0x5c,%esp
  10f1d8:	8b 55 08             	mov    0x8(%ebp),%edx
  10f1db:	8b 45 0c             	mov    0xc(%ebp),%eax
  10f1de:	8b 75 10             	mov    0x10(%ebp),%esi
  10f1e1:	8b 52 04             	mov    0x4(%edx),%edx
  10f1e4:	89 55 b4             	mov    %edx,-0x4c(%ebp)
  10f1e7:	8b 55 08             	mov    0x8(%ebp),%edx
  10f1ea:	f6 42 02 02          	testb  $0x2,0x2(%edx)
  10f1ee:	0f 84 5d 05 00 00    	je     10f751 <__l_vfprintf+0x582>
  10f1f4:	31 ff                	xor    %edi,%edi
  10f1f6:	89 7d c4             	mov    %edi,-0x3c(%ebp)
  10f1f9:	0f be 38             	movsbl (%eax),%edi
  10f1fc:	85 ff                	test   %edi,%edi
  10f1fe:	0f 84 54 05 00 00    	je     10f758 <__l_vfprintf+0x589>
  10f204:	83 ff 25             	cmp    $0x25,%edi
  10f207:	74 06                	je     10f20f <__l_vfprintf+0x40>
  10f209:	40                   	inc    %eax
  10f20a:	89 45 ac             	mov    %eax,-0x54(%ebp)
  10f20d:	eb 0f                	jmp    10f21e <__l_vfprintf+0x4f>
  10f20f:	0f be 78 01          	movsbl 0x1(%eax),%edi
  10f213:	8d 50 02             	lea    0x2(%eax),%edx
  10f216:	83 ff 25             	cmp    $0x25,%edi
  10f219:	89 55 ac             	mov    %edx,-0x54(%ebp)
  10f21c:	75 09                	jne    10f227 <__l_vfprintf+0x58>
  10f21e:	8b 5d c4             	mov    -0x3c(%ebp),%ebx
  10f221:	43                   	inc    %ebx
  10f222:	e9 cd 02 00 00       	jmp    10f4f4 <__l_vfprintf+0x325>
  10f227:	31 db                	xor    %ebx,%ebx
  10f229:	89 5d c0             	mov    %ebx,-0x40(%ebp)
  10f22c:	89 5d bc             	mov    %ebx,-0x44(%ebp)
  10f22f:	31 db                	xor    %ebx,%ebx
  10f231:	66 83 fb 1f          	cmp    $0x1f,%bx
  10f235:	77 3c                	ja     10f273 <__l_vfprintf+0xa4>
  10f237:	8d 47 e0             	lea    -0x20(%edi),%eax
  10f23a:	83 f8 10             	cmp    $0x10,%eax
  10f23d:	77 07                	ja     10f246 <__l_vfprintf+0x77>
  10f23f:	ff 24 85 d0 0d 11 00 	jmp    *0x110dd0(,%eax,4)
  10f246:	8d 47 d0             	lea    -0x30(%edi),%eax
  10f249:	83 f8 09             	cmp    $0x9,%eax
  10f24c:	76 43                	jbe    10f291 <__l_vfprintf+0xc2>
  10f24e:	eb 52                	jmp    10f2a2 <__l_vfprintf+0xd3>
  10f250:	83 cb 01             	or     $0x1,%ebx
  10f253:	e9 ca 00 00 00       	jmp    10f322 <__l_vfprintf+0x153>
  10f258:	83 cb 02             	or     $0x2,%ebx
  10f25b:	83 cb 04             	or     $0x4,%ebx
  10f25e:	e9 bf 00 00 00       	jmp    10f322 <__l_vfprintf+0x153>
  10f263:	83 cb 08             	or     $0x8,%ebx
  10f266:	e9 b7 00 00 00       	jmp    10f322 <__l_vfprintf+0x153>
  10f26b:	83 cb 10             	or     $0x10,%ebx
  10f26e:	e9 af 00 00 00       	jmp    10f322 <__l_vfprintf+0x153>
  10f273:	66 83 fb 7f          	cmp    $0x7f,%bx
  10f277:	77 61                	ja     10f2da <__l_vfprintf+0x10b>
  10f279:	8d 47 d0             	lea    -0x30(%edi),%eax
  10f27c:	83 f8 09             	cmp    $0x9,%eax
  10f27f:	77 21                	ja     10f2a2 <__l_vfprintf+0xd3>
  10f281:	f6 c3 40             	test   $0x40,%bl
  10f284:	74 0b                	je     10f291 <__l_vfprintf+0xc2>
  10f286:	6b 55 c0 0a          	imul   $0xa,-0x40(%ebp),%edx
  10f28a:	01 d0                	add    %edx,%eax
  10f28c:	e9 8e 00 00 00       	jmp    10f31f <__l_vfprintf+0x150>
  10f291:	6b 55 bc 0a          	imul   $0xa,-0x44(%ebp),%edx
  10f295:	01 d0                	add    %edx,%eax
  10f297:	83 cb 20             	or     $0x20,%ebx
  10f29a:	89 45 bc             	mov    %eax,-0x44(%ebp)
  10f29d:	e9 80 00 00 00       	jmp    10f322 <__l_vfprintf+0x153>
  10f2a2:	83 ff 2a             	cmp    $0x2a,%edi
  10f2a5:	75 20                	jne    10f2c7 <__l_vfprintf+0xf8>
  10f2a7:	8b 06                	mov    (%esi),%eax
  10f2a9:	83 c6 04             	add    $0x4,%esi
  10f2ac:	f6 c3 40             	test   $0x40,%bl
  10f2af:	75 6e                	jne    10f31f <__l_vfprintf+0x150>
  10f2b1:	85 c0                	test   %eax,%eax
  10f2b3:	78 08                	js     10f2bd <__l_vfprintf+0xee>
  10f2b5:	83 cb 20             	or     $0x20,%ebx
  10f2b8:	89 45 bc             	mov    %eax,-0x44(%ebp)
  10f2bb:	eb 65                	jmp    10f322 <__l_vfprintf+0x153>
  10f2bd:	f7 d8                	neg    %eax
  10f2bf:	89 45 bc             	mov    %eax,-0x44(%ebp)
  10f2c2:	83 cb 28             	or     $0x28,%ebx
  10f2c5:	eb 5b                	jmp    10f322 <__l_vfprintf+0x153>
  10f2c7:	83 ff 2e             	cmp    $0x2e,%edi
  10f2ca:	75 0e                	jne    10f2da <__l_vfprintf+0x10b>
  10f2cc:	f6 c3 40             	test   $0x40,%bl
  10f2cf:	0f 85 83 04 00 00    	jne    10f758 <__l_vfprintf+0x589>
  10f2d5:	83 cb 40             	or     $0x40,%ebx
  10f2d8:	eb 48                	jmp    10f322 <__l_vfprintf+0x153>
  10f2da:	83 ff 6c             	cmp    $0x6c,%edi
  10f2dd:	74 1f                	je     10f2fe <__l_vfprintf+0x12f>
  10f2df:	77 11                	ja     10f2f2 <__l_vfprintf+0x123>
  10f2e1:	83 ff 68             	cmp    $0x68,%edi
  10f2e4:	74 25                	je     10f30b <__l_vfprintf+0x13c>
  10f2e6:	83 ff 6a             	cmp    $0x6a,%edi
  10f2e9:	74 2d                	je     10f318 <__l_vfprintf+0x149>
  10f2eb:	83 ff 4c             	cmp    $0x4c,%edi
  10f2ee:	74 28                	je     10f318 <__l_vfprintf+0x149>
  10f2f0:	eb 42                	jmp    10f334 <__l_vfprintf+0x165>
  10f2f2:	83 ff 74             	cmp    $0x74,%edi
  10f2f5:	74 2b                	je     10f322 <__l_vfprintf+0x153>
  10f2f7:	83 ff 7a             	cmp    $0x7a,%edi
  10f2fa:	74 26                	je     10f322 <__l_vfprintf+0x153>
  10f2fc:	eb 36                	jmp    10f334 <__l_vfprintf+0x165>
  10f2fe:	f6 c3 80             	test   $0x80,%bl
  10f301:	74 03                	je     10f306 <__l_vfprintf+0x137>
  10f303:	80 cf 02             	or     $0x2,%bh
  10f306:	80 cb 80             	or     $0x80,%bl
  10f309:	eb 17                	jmp    10f322 <__l_vfprintf+0x153>
  10f30b:	f6 c7 01             	test   $0x1,%bh
  10f30e:	74 03                	je     10f313 <__l_vfprintf+0x144>
  10f310:	80 cf 02             	or     $0x2,%bh
  10f313:	80 cf 01             	or     $0x1,%bh
  10f316:	eb 0a                	jmp    10f322 <__l_vfprintf+0x153>
  10f318:	66 81 cb 80 02       	or     $0x280,%bx
  10f31d:	eb 03                	jmp    10f322 <__l_vfprintf+0x153>
  10f31f:	89 45 c0             	mov    %eax,-0x40(%ebp)
  10f322:	ff 45 ac             	incl   -0x54(%ebp)
  10f325:	8b 45 ac             	mov    -0x54(%ebp),%eax
  10f328:	0f be 78 ff          	movsbl -0x1(%eax),%edi
  10f32c:	85 ff                	test   %edi,%edi
  10f32e:	0f 85 fd fe ff ff    	jne    10f231 <__l_vfprintf+0x62>
  10f334:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
  10f338:	79 08                	jns    10f342 <__l_vfprintf+0x173>
  10f33a:	31 c9                	xor    %ecx,%ecx
  10f33c:	83 e3 bf             	and    $0xffffffbf,%ebx
  10f33f:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  10f342:	89 f9                	mov    %edi,%ecx
  10f344:	83 c9 20             	or     $0x20,%ecx
  10f347:	8d 41 9b             	lea    -0x65(%ecx),%eax
  10f34a:	83 f8 02             	cmp    $0x2,%eax
  10f34d:	76 05                	jbe    10f354 <__l_vfprintf+0x185>
  10f34f:	83 f9 61             	cmp    $0x61,%ecx
  10f352:	75 0f                	jne    10f363 <__l_vfprintf+0x194>
  10f354:	83 c6 08             	add    $0x8,%esi
  10f357:	ba 07 00 00 00       	mov    $0x7,%edx
  10f35c:	bf 45 42 11 00       	mov    $0x114245,%edi
  10f361:	eb 52                	jmp    10f3b5 <__l_vfprintf+0x1e6>
  10f363:	8d 47 9d             	lea    -0x63(%edi),%eax
  10f366:	83 f8 12             	cmp    $0x12,%eax
  10f369:	0f 87 5c 01 00 00    	ja     10f4cb <__l_vfprintf+0x2fc>
  10f36f:	ff 24 85 14 0e 11 00 	jmp    *0x110e14(,%eax,4)
  10f376:	8b 06                	mov    (%esi),%eax
  10f378:	ba 01 00 00 00       	mov    $0x1,%edx
  10f37d:	88 45 d2             	mov    %al,-0x2e(%ebp)
  10f380:	83 c6 04             	add    $0x4,%esi
  10f383:	8d 7d d2             	lea    -0x2e(%ebp),%edi
  10f386:	eb 2d                	jmp    10f3b5 <__l_vfprintf+0x1e6>
  10f388:	8d 46 04             	lea    0x4(%esi),%eax
  10f38b:	8b 3e                	mov    (%esi),%edi
  10f38d:	89 45 b8             	mov    %eax,-0x48(%ebp)
  10f390:	85 ff                	test   %edi,%edi
  10f392:	75 05                	jne    10f399 <__l_vfprintf+0x1ca>
  10f394:	bf 3e 42 11 00       	mov    $0x11423e,%edi
  10f399:	83 c8 ff             	or     $0xffffffff,%eax
  10f39c:	f6 c3 40             	test   $0x40,%bl
  10f39f:	74 03                	je     10f3a4 <__l_vfprintf+0x1d5>
  10f3a1:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10f3a4:	52                   	push   %edx
  10f3a5:	52                   	push   %edx
  10f3a6:	50                   	push   %eax
  10f3a7:	57                   	push   %edi
  10f3a8:	e8 b7 fc ff ff       	call   10f064 <strnlen>
  10f3ad:	83 c4 10             	add    $0x10,%esp
  10f3b0:	89 c2                	mov    %eax,%edx
  10f3b2:	8b 75 b8             	mov    -0x48(%ebp),%esi
  10f3b5:	80 e3 08             	and    $0x8,%bl
  10f3b8:	75 37                	jne    10f3f1 <__l_vfprintf+0x222>
  10f3ba:	8b 5d bc             	mov    -0x44(%ebp),%ebx
  10f3bd:	39 da                	cmp    %ebx,%edx
  10f3bf:	73 20                	jae    10f3e1 <__l_vfprintf+0x212>
  10f3c1:	89 55 c0             	mov    %edx,-0x40(%ebp)
  10f3c4:	50                   	push   %eax
  10f3c5:	50                   	push   %eax
  10f3c6:	ff 75 08             	push   0x8(%ebp)
  10f3c9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10f3cc:	6a 20                	push   $0x20
  10f3ce:	ff d0                	call   *%eax
  10f3d0:	83 c4 10             	add    $0x10,%esp
  10f3d3:	85 c0                	test   %eax,%eax
  10f3d5:	0f 88 6f 03 00 00    	js     10f74a <__l_vfprintf+0x57b>
  10f3db:	4b                   	dec    %ebx
  10f3dc:	8b 55 c0             	mov    -0x40(%ebp),%edx
  10f3df:	eb dc                	jmp    10f3bd <__l_vfprintf+0x1ee>
  10f3e1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  10f3e4:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  10f3e7:	01 c8                	add    %ecx,%eax
  10f3e9:	89 5d bc             	mov    %ebx,-0x44(%ebp)
  10f3ec:	29 d8                	sub    %ebx,%eax
  10f3ee:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  10f3f1:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  10f3f4:	8d 1c 0a             	lea    (%edx,%ecx,1),%ebx
  10f3f7:	39 5d c4             	cmp    %ebx,-0x3c(%ebp)
  10f3fa:	0f 84 1f 03 00 00    	je     10f71f <__l_vfprintf+0x550>
  10f400:	ff 45 c4             	incl   -0x3c(%ebp)
  10f403:	89 55 b8             	mov    %edx,-0x48(%ebp)
  10f406:	50                   	push   %eax
  10f407:	50                   	push   %eax
  10f408:	89 f8                	mov    %edi,%eax
  10f40a:	ff 75 08             	push   0x8(%ebp)
  10f40d:	29 c8                	sub    %ecx,%eax
  10f40f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  10f412:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  10f415:	0f be 44 10 ff       	movsbl -0x1(%eax,%edx,1),%eax
  10f41a:	50                   	push   %eax
  10f41b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10f41e:	ff d0                	call   *%eax
  10f420:	83 c4 10             	add    $0x10,%esp
  10f423:	8b 4d c0             	mov    -0x40(%ebp),%ecx
  10f426:	85 c0                	test   %eax,%eax
  10f428:	8b 55 b8             	mov    -0x48(%ebp),%edx
  10f42b:	79 ca                	jns    10f3f7 <__l_vfprintf+0x228>
  10f42d:	e9 18 03 00 00       	jmp    10f74a <__l_vfprintf+0x57b>
  10f432:	f6 c3 80             	test   $0x80,%bl
  10f435:	74 1c                	je     10f453 <__l_vfprintf+0x284>
  10f437:	f6 c7 02             	test   $0x2,%bh
  10f43a:	74 0d                	je     10f449 <__l_vfprintf+0x27a>
  10f43c:	8d 46 08             	lea    0x8(%esi),%eax
  10f43f:	8b 56 04             	mov    0x4(%esi),%edx
  10f442:	89 45 b0             	mov    %eax,-0x50(%ebp)
  10f445:	8b 06                	mov    (%esi),%eax
  10f447:	eb 23                	jmp    10f46c <__l_vfprintf+0x29d>
  10f449:	8d 46 04             	lea    0x4(%esi),%eax
  10f44c:	89 45 b0             	mov    %eax,-0x50(%ebp)
  10f44f:	8b 06                	mov    (%esi),%eax
  10f451:	eb 18                	jmp    10f46b <__l_vfprintf+0x29c>
  10f453:	8d 46 04             	lea    0x4(%esi),%eax
  10f456:	f6 c7 01             	test   $0x1,%bh
  10f459:	89 45 b0             	mov    %eax,-0x50(%ebp)
  10f45c:	8b 06                	mov    (%esi),%eax
  10f45e:	74 0b                	je     10f46b <__l_vfprintf+0x29c>
  10f460:	f6 c7 02             	test   $0x2,%bh
  10f463:	74 05                	je     10f46a <__l_vfprintf+0x29b>
  10f465:	0f be c0             	movsbl %al,%eax
  10f468:	eb 01                	jmp    10f46b <__l_vfprintf+0x29c>
  10f46a:	98                   	cwtl
  10f46b:	99                   	cltd
  10f46c:	89 de                	mov    %ebx,%esi
  10f46e:	83 e6 ef             	and    $0xffffffef,%esi
  10f471:	85 d2                	test   %edx,%edx
  10f473:	79 0e                	jns    10f483 <__l_vfprintf+0x2b4>
  10f475:	f7 d8                	neg    %eax
  10f477:	83 d2 00             	adc    $0x0,%edx
  10f47a:	f7 da                	neg    %edx
  10f47c:	66 81 ce 00 04       	or     $0x400,%si
  10f481:	eb 22                	jmp    10f4a5 <__l_vfprintf+0x2d6>
  10f483:	89 d1                	mov    %edx,%ecx
  10f485:	09 c1                	or     %eax,%ecx
  10f487:	75 1c                	jne    10f4a5 <__l_vfprintf+0x2d6>
  10f489:	f6 c3 40             	test   $0x40,%bl
  10f48c:	74 17                	je     10f4a5 <__l_vfprintf+0x2d6>
  10f48e:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
  10f492:	75 11                	jne    10f4a5 <__l_vfprintf+0x2d6>
  10f494:	89 de                	mov    %ebx,%esi
  10f496:	31 c9                	xor    %ecx,%ecx
  10f498:	83 e6 ee             	and    $0xffffffee,%esi
  10f49b:	31 db                	xor    %ebx,%ebx
  10f49d:	89 4d b8             	mov    %ecx,-0x48(%ebp)
  10f4a0:	e9 40 01 00 00       	jmp    10f5e5 <__l_vfprintf+0x416>
  10f4a5:	83 ec 0c             	sub    $0xc,%esp
  10f4a8:	8d 5d d2             	lea    -0x2e(%ebp),%ebx
  10f4ab:	6a 0a                	push   $0xa
  10f4ad:	e9 d3 00 00 00       	jmp    10f585 <__l_vfprintf+0x3b6>
  10f4b2:	83 e3 ef             	and    $0xffffffef,%ebx
  10f4b5:	b9 0a 00 00 00       	mov    $0xa,%ecx
  10f4ba:	eb 60                	jmp    10f51c <__l_vfprintf+0x34d>
  10f4bc:	83 cb 10             	or     $0x10,%ebx
  10f4bf:	b9 10 00 00 00       	mov    $0x10,%ecx
  10f4c4:	bf 78 00 00 00       	mov    $0x78,%edi
  10f4c9:	eb 51                	jmp    10f51c <__l_vfprintf+0x34d>
  10f4cb:	83 f9 78             	cmp    $0x78,%ecx
  10f4ce:	75 07                	jne    10f4d7 <__l_vfprintf+0x308>
  10f4d0:	29 f9                	sub    %edi,%ecx
  10f4d2:	83 c9 10             	or     $0x10,%ecx
  10f4d5:	eb 45                	jmp    10f51c <__l_vfprintf+0x34d>
  10f4d7:	52                   	push   %edx
  10f4d8:	52                   	push   %edx
  10f4d9:	ff 75 08             	push   0x8(%ebp)
  10f4dc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10f4df:	6a 25                	push   $0x25
  10f4e1:	ff d0                	call   *%eax
  10f4e3:	83 c4 10             	add    $0x10,%esp
  10f4e6:	85 c0                	test   %eax,%eax
  10f4e8:	0f 88 5c 02 00 00    	js     10f74a <__l_vfprintf+0x57b>
  10f4ee:	8b 5d c4             	mov    -0x3c(%ebp),%ebx
  10f4f1:	83 c3 02             	add    $0x2,%ebx
  10f4f4:	50                   	push   %eax
  10f4f5:	50                   	push   %eax
  10f4f6:	ff 75 08             	push   0x8(%ebp)
  10f4f9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10f4fc:	57                   	push   %edi
  10f4fd:	ff d0                	call   *%eax
  10f4ff:	83 c4 10             	add    $0x10,%esp
  10f502:	85 c0                	test   %eax,%eax
  10f504:	0f 88 40 02 00 00    	js     10f74a <__l_vfprintf+0x57b>
  10f50a:	89 5d c4             	mov    %ebx,-0x3c(%ebp)
  10f50d:	8b 45 ac             	mov    -0x54(%ebp),%eax
  10f510:	e9 e4 fc ff ff       	jmp    10f1f9 <__l_vfprintf+0x2a>
  10f515:	b9 08 00 00 00       	mov    $0x8,%ecx
  10f51a:	31 ff                	xor    %edi,%edi
  10f51c:	f6 c3 80             	test   $0x80,%bl
  10f51f:	74 1c                	je     10f53d <__l_vfprintf+0x36e>
  10f521:	f6 c7 02             	test   $0x2,%bh
  10f524:	74 0d                	je     10f533 <__l_vfprintf+0x364>
  10f526:	8d 46 08             	lea    0x8(%esi),%eax
  10f529:	8b 56 04             	mov    0x4(%esi),%edx
  10f52c:	89 45 b0             	mov    %eax,-0x50(%ebp)
  10f52f:	8b 06                	mov    (%esi),%eax
  10f531:	eb 26                	jmp    10f559 <__l_vfprintf+0x38a>
  10f533:	8d 46 04             	lea    0x4(%esi),%eax
  10f536:	89 45 b0             	mov    %eax,-0x50(%ebp)
  10f539:	8b 06                	mov    (%esi),%eax
  10f53b:	eb 1a                	jmp    10f557 <__l_vfprintf+0x388>
  10f53d:	8d 46 04             	lea    0x4(%esi),%eax
  10f540:	f6 c7 01             	test   $0x1,%bh
  10f543:	89 45 b0             	mov    %eax,-0x50(%ebp)
  10f546:	8b 06                	mov    (%esi),%eax
  10f548:	74 0d                	je     10f557 <__l_vfprintf+0x388>
  10f54a:	f6 c7 02             	test   $0x2,%bh
  10f54d:	74 05                	je     10f554 <__l_vfprintf+0x385>
  10f54f:	0f b6 c0             	movzbl %al,%eax
  10f552:	eb 03                	jmp    10f557 <__l_vfprintf+0x388>
  10f554:	0f b7 c0             	movzwl %ax,%eax
  10f557:	31 d2                	xor    %edx,%edx
  10f559:	89 d6                	mov    %edx,%esi
  10f55b:	09 c6                	or     %eax,%esi
  10f55d:	89 de                	mov    %ebx,%esi
  10f55f:	75 1a                	jne    10f57b <__l_vfprintf+0x3ac>
  10f561:	83 e6 e9             	and    $0xffffffe9,%esi
  10f564:	f6 c3 40             	test   $0x40,%bl
  10f567:	74 15                	je     10f57e <__l_vfprintf+0x3af>
  10f569:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
  10f56d:	75 0f                	jne    10f57e <__l_vfprintf+0x3af>
  10f56f:	89 de                	mov    %ebx,%esi
  10f571:	31 c0                	xor    %eax,%eax
  10f573:	83 e6 e8             	and    $0xffffffe8,%esi
  10f576:	89 45 b8             	mov    %eax,-0x48(%ebp)
  10f579:	eb 4b                	jmp    10f5c6 <__l_vfprintf+0x3f7>
  10f57b:	83 e6 f9             	and    $0xfffffff9,%esi
  10f57e:	83 ec 0c             	sub    $0xc,%esp
  10f581:	8d 5d d2             	lea    -0x2e(%ebp),%ebx
  10f584:	51                   	push   %ecx
  10f585:	89 d9                	mov    %ebx,%ecx
  10f587:	e8 5b fb ff ff       	call   10f0e7 <__ultoa_invert>
  10f58c:	83 c4 10             	add    $0x10,%esp
  10f58f:	29 d8                	sub    %ebx,%eax
  10f591:	89 45 b8             	mov    %eax,-0x48(%ebp)
  10f594:	f7 c6 40 00 00 00    	test   $0x40,%esi
  10f59a:	74 2a                	je     10f5c6 <__l_vfprintf+0x3f7>
  10f59c:	89 f0                	mov    %esi,%eax
  10f59e:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  10f5a1:	83 e0 fe             	and    $0xfffffffe,%eax
  10f5a4:	39 4d c0             	cmp    %ecx,-0x40(%ebp)
  10f5a7:	7e 1b                	jle    10f5c4 <__l_vfprintf+0x3f5>
  10f5a9:	85 ff                	test   %edi,%edi
  10f5ab:	74 0f                	je     10f5bc <__l_vfprintf+0x3ed>
  10f5ad:	89 f1                	mov    %esi,%ecx
  10f5af:	8b 5d c0             	mov    -0x40(%ebp),%ebx
  10f5b2:	66 83 e1 10          	and    $0x10,%cx
  10f5b6:	89 c6                	mov    %eax,%esi
  10f5b8:	75 23                	jne    10f5dd <__l_vfprintf+0x40e>
  10f5ba:	eb 29                	jmp    10f5e5 <__l_vfprintf+0x416>
  10f5bc:	83 e6 ee             	and    $0xffffffee,%esi
  10f5bf:	8b 5d c0             	mov    -0x40(%ebp),%ebx
  10f5c2:	eb 21                	jmp    10f5e5 <__l_vfprintf+0x416>
  10f5c4:	89 c6                	mov    %eax,%esi
  10f5c6:	89 f1                	mov    %esi,%ecx
  10f5c8:	66 83 e1 10          	and    $0x10,%cx
  10f5cc:	74 14                	je     10f5e2 <__l_vfprintf+0x413>
  10f5ce:	85 ff                	test   %edi,%edi
  10f5d0:	75 08                	jne    10f5da <__l_vfprintf+0x40b>
  10f5d2:	8b 45 b8             	mov    -0x48(%ebp),%eax
  10f5d5:	8d 58 01             	lea    0x1(%eax),%ebx
  10f5d8:	eb 17                	jmp    10f5f1 <__l_vfprintf+0x422>
  10f5da:	8b 5d b8             	mov    -0x48(%ebp),%ebx
  10f5dd:	83 c3 02             	add    $0x2,%ebx
  10f5e0:	eb 0f                	jmp    10f5f1 <__l_vfprintf+0x422>
  10f5e2:	8b 5d b8             	mov    -0x48(%ebp),%ebx
  10f5e5:	89 f1                	mov    %esi,%ecx
  10f5e7:	66 81 e1 06 04       	and    $0x406,%cx
  10f5ec:	74 03                	je     10f5f1 <__l_vfprintf+0x422>
  10f5ee:	43                   	inc    %ebx
  10f5ef:	31 c9                	xor    %ecx,%ecx
  10f5f1:	f7 c6 08 00 00 00    	test   $0x8,%esi
  10f5f7:	75 5c                	jne    10f655 <__l_vfprintf+0x486>
  10f5f9:	f7 c6 01 00 00 00    	test   $0x1,%esi
  10f5ff:	74 1b                	je     10f61c <__l_vfprintf+0x44d>
  10f601:	8b 45 b8             	mov    -0x48(%ebp),%eax
  10f604:	39 5d bc             	cmp    %ebx,-0x44(%ebp)
  10f607:	89 45 c0             	mov    %eax,-0x40(%ebp)
  10f60a:	7e 10                	jle    10f61c <__l_vfprintf+0x44d>
  10f60c:	8b 45 bc             	mov    -0x44(%ebp),%eax
  10f60f:	8b 55 b8             	mov    -0x48(%ebp),%edx
  10f612:	29 d8                	sub    %ebx,%eax
  10f614:	8b 5d bc             	mov    -0x44(%ebp),%ebx
  10f617:	01 d0                	add    %edx,%eax
  10f619:	89 45 c0             	mov    %eax,-0x40(%ebp)
  10f61c:	89 da                	mov    %ebx,%edx
  10f61e:	39 55 bc             	cmp    %edx,-0x44(%ebp)
  10f621:	7e 26                	jle    10f649 <__l_vfprintf+0x47a>
  10f623:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  10f626:	89 55 a8             	mov    %edx,-0x58(%ebp)
  10f629:	50                   	push   %eax
  10f62a:	50                   	push   %eax
  10f62b:	ff 75 08             	push   0x8(%ebp)
  10f62e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10f631:	6a 20                	push   $0x20
  10f633:	ff d0                	call   *%eax
  10f635:	83 c4 10             	add    $0x10,%esp
  10f638:	85 c0                	test   %eax,%eax
  10f63a:	0f 88 0a 01 00 00    	js     10f74a <__l_vfprintf+0x57b>
  10f640:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10f643:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
  10f646:	42                   	inc    %edx
  10f647:	eb d5                	jmp    10f61e <__l_vfprintf+0x44f>
  10f649:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  10f64c:	29 d8                	sub    %ebx,%eax
  10f64e:	89 d3                	mov    %edx,%ebx
  10f650:	01 d0                	add    %edx,%eax
  10f652:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  10f655:	66 85 c9             	test   %cx,%cx
  10f658:	74 2c                	je     10f686 <__l_vfprintf+0x4b7>
  10f65a:	50                   	push   %eax
  10f65b:	50                   	push   %eax
  10f65c:	ff 75 08             	push   0x8(%ebp)
  10f65f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10f662:	6a 30                	push   $0x30
  10f664:	ff d0                	call   *%eax
  10f666:	83 c4 10             	add    $0x10,%esp
  10f669:	85 c0                	test   %eax,%eax
  10f66b:	0f 88 d9 00 00 00    	js     10f74a <__l_vfprintf+0x57b>
  10f671:	85 ff                	test   %edi,%edi
  10f673:	75 05                	jne    10f67a <__l_vfprintf+0x4ab>
  10f675:	ff 45 c4             	incl   -0x3c(%ebp)
  10f678:	eb 13                	jmp    10f68d <__l_vfprintf+0x4be>
  10f67a:	83 45 c4 02          	addl   $0x2,-0x3c(%ebp)
  10f67e:	50                   	push   %eax
  10f67f:	50                   	push   %eax
  10f680:	ff 75 08             	push   0x8(%ebp)
  10f683:	57                   	push   %edi
  10f684:	eb 32                	jmp    10f6b8 <__l_vfprintf+0x4e9>
  10f686:	66 f7 c6 06 04       	test   $0x406,%si
  10f68b:	75 05                	jne    10f692 <__l_vfprintf+0x4c3>
  10f68d:	8b 75 c4             	mov    -0x3c(%ebp),%esi
  10f690:	eb 4b                	jmp    10f6dd <__l_vfprintf+0x50e>
  10f692:	89 f0                	mov    %esi,%eax
  10f694:	83 e0 02             	and    $0x2,%eax
  10f697:	66 83 f8 01          	cmp    $0x1,%ax
  10f69b:	19 c0                	sbb    %eax,%eax
  10f69d:	83 e0 f5             	and    $0xfffffff5,%eax
  10f6a0:	83 c0 2b             	add    $0x2b,%eax
  10f6a3:	66 f7 c6 00 04       	test   $0x400,%si
  10f6a8:	74 02                	je     10f6ac <__l_vfprintf+0x4dd>
  10f6aa:	b0 2d                	mov    $0x2d,%al
  10f6ac:	ff 45 c4             	incl   -0x3c(%ebp)
  10f6af:	56                   	push   %esi
  10f6b0:	56                   	push   %esi
  10f6b1:	ff 75 08             	push   0x8(%ebp)
  10f6b4:	0f b6 c0             	movzbl %al,%eax
  10f6b7:	50                   	push   %eax
  10f6b8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10f6bb:	ff d0                	call   *%eax
  10f6bd:	83 c4 10             	add    $0x10,%esp
  10f6c0:	85 c0                	test   %eax,%eax
  10f6c2:	79 c9                	jns    10f68d <__l_vfprintf+0x4be>
  10f6c4:	e9 81 00 00 00       	jmp    10f74a <__l_vfprintf+0x57b>
  10f6c9:	51                   	push   %ecx
  10f6ca:	46                   	inc    %esi
  10f6cb:	51                   	push   %ecx
  10f6cc:	ff 75 08             	push   0x8(%ebp)
  10f6cf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10f6d2:	6a 30                	push   $0x30
  10f6d4:	ff d0                	call   *%eax
  10f6d6:	83 c4 10             	add    $0x10,%esp
  10f6d9:	85 c0                	test   %eax,%eax
  10f6db:	78 6d                	js     10f74a <__l_vfprintf+0x57b>
  10f6dd:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10f6e0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  10f6e3:	01 d0                	add    %edx,%eax
  10f6e5:	29 f0                	sub    %esi,%eax
  10f6e7:	39 45 b8             	cmp    %eax,-0x48(%ebp)
  10f6ea:	7c dd                	jl     10f6c9 <__l_vfprintf+0x4fa>
  10f6ec:	8b 7d b8             	mov    -0x48(%ebp),%edi
  10f6ef:	85 ff                	test   %edi,%edi
  10f6f1:	74 1a                	je     10f70d <__l_vfprintf+0x53e>
  10f6f3:	52                   	push   %edx
  10f6f4:	4f                   	dec    %edi
  10f6f5:	52                   	push   %edx
  10f6f6:	ff 75 08             	push   0x8(%ebp)
  10f6f9:	0f be 44 3d d2       	movsbl -0x2e(%ebp,%edi,1),%eax
  10f6fe:	50                   	push   %eax
  10f6ff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10f702:	ff d0                	call   *%eax
  10f704:	83 c4 10             	add    $0x10,%esp
  10f707:	85 c0                	test   %eax,%eax
  10f709:	79 e4                	jns    10f6ef <__l_vfprintf+0x520>
  10f70b:	eb 3d                	jmp    10f74a <__l_vfprintf+0x57b>
  10f70d:	8b 45 b8             	mov    -0x48(%ebp),%eax
  10f710:	8b 7d bc             	mov    -0x44(%ebp),%edi
  10f713:	01 f0                	add    %esi,%eax
  10f715:	29 df                	sub    %ebx,%edi
  10f717:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  10f71a:	8b 75 b0             	mov    -0x50(%ebp),%esi
  10f71d:	eb 05                	jmp    10f724 <__l_vfprintf+0x555>
  10f71f:	8b 7d bc             	mov    -0x44(%ebp),%edi
  10f722:	29 d7                	sub    %edx,%edi
  10f724:	8b 5d c4             	mov    -0x3c(%ebp),%ebx
  10f727:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  10f72a:	01 f8                	add    %edi,%eax
  10f72c:	29 d8                	sub    %ebx,%eax
  10f72e:	85 c0                	test   %eax,%eax
  10f730:	0f 8e d4 fd ff ff    	jle    10f50a <__l_vfprintf+0x33b>
  10f736:	50                   	push   %eax
  10f737:	43                   	inc    %ebx
  10f738:	50                   	push   %eax
  10f739:	ff 75 08             	push   0x8(%ebp)
  10f73c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10f73f:	6a 20                	push   $0x20
  10f741:	ff d0                	call   *%eax
  10f743:	83 c4 10             	add    $0x10,%esp
  10f746:	85 c0                	test   %eax,%eax
  10f748:	79 dd                	jns    10f727 <__l_vfprintf+0x558>
  10f74a:	8b 45 08             	mov    0x8(%ebp),%eax
  10f74d:	80 48 02 04          	orb    $0x4,0x2(%eax)
  10f751:	c7 45 c4 ff ff ff ff 	movl   $0xffffffff,-0x3c(%ebp)
  10f758:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  10f75b:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10f75e:	5b                   	pop    %ebx
  10f75f:	5e                   	pop    %esi
  10f760:	5f                   	pop    %edi
  10f761:	5d                   	pop    %ebp
  10f762:	c3                   	ret

0010f763 <__file_str_put>:
  10f763:	55                   	push   %ebp
  10f764:	89 e5                	mov    %esp,%ebp
  10f766:	53                   	push   %ebx
  10f767:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10f76a:	8b 45 08             	mov    0x8(%ebp),%eax
  10f76d:	8b 51 10             	mov    0x10(%ecx),%edx
  10f770:	3b 51 14             	cmp    0x14(%ecx),%edx
  10f773:	74 08                	je     10f77d <__file_str_put+0x1a>
  10f775:	8d 5a 01             	lea    0x1(%edx),%ebx
  10f778:	89 59 10             	mov    %ebx,0x10(%ecx)
  10f77b:	88 02                	mov    %al,(%edx)
  10f77d:	5b                   	pop    %ebx
  10f77e:	0f b6 c0             	movzbl %al,%eax
  10f781:	5d                   	pop    %ebp
  10f782:	c3                   	ret

0010f783 <z_object_gperf_find>:
  10f783:	55                   	push   %ebp
  10f784:	89 e5                	mov    %esp,%ebp
  10f786:	53                   	push   %ebx
  10f787:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10f78a:	0f b6 45 0a          	movzbl 0xa(%ebp),%eax
  10f78e:	0f b6 d5             	movzbl %ch,%edx
  10f791:	0f b6 80 e0 4a 11 00 	movzbl 0x114ae0(%eax),%eax
  10f798:	0f b6 92 e0 4a 11 00 	movzbl 0x114ae0(%edx),%edx
  10f79f:	01 d0                	add    %edx,%eax
  10f7a1:	0f b6 d1             	movzbl %cl,%edx
  10f7a4:	0f b6 92 e0 4a 11 00 	movzbl 0x114ae0(%edx),%edx
  10f7ab:	01 d0                	add    %edx,%eax
  10f7ad:	31 d2                	xor    %edx,%edx
  10f7af:	83 f8 25             	cmp    $0x25,%eax
  10f7b2:	7f 13                	jg     10f7c7 <z_object_gperf_find+0x44>
  10f7b4:	c1 e0 04             	shl    $0x4,%eax
  10f7b7:	3b 88 40 30 12 00    	cmp    0x123040(%eax),%ecx
  10f7bd:	8d 98 40 30 12 00    	lea    0x123040(%eax),%ebx
  10f7c3:	75 02                	jne    10f7c7 <z_object_gperf_find+0x44>
  10f7c5:	89 da                	mov    %ebx,%edx
  10f7c7:	5b                   	pop    %ebx
  10f7c8:	89 d0                	mov    %edx,%eax
  10f7ca:	5d                   	pop    %ebp
  10f7cb:	c3                   	ret

0010f7cc <z_object_gperf_wordlist_foreach>:
  10f7cc:	55                   	push   %ebp
  10f7cd:	89 e5                	mov    %esp,%ebp
  10f7cf:	53                   	push   %ebx
  10f7d0:	bb 40 30 12 00       	mov    $0x123040,%ebx
  10f7d5:	83 3b 00             	cmpl   $0x0,(%ebx)
  10f7d8:	74 09                	je     10f7e3 <z_object_gperf_wordlist_foreach+0x17>
  10f7da:	ff 75 0c             	push   0xc(%ebp)
  10f7dd:	53                   	push   %ebx
  10f7de:	ff 55 08             	call   *0x8(%ebp)
  10f7e1:	58                   	pop    %eax
  10f7e2:	5a                   	pop    %edx
  10f7e3:	83 c3 10             	add    $0x10,%ebx
  10f7e6:	81 fb a0 32 12 00    	cmp    $0x1232a0,%ebx
  10f7ec:	75 e7                	jne    10f7d5 <z_object_gperf_wordlist_foreach+0x9>
  10f7ee:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10f7f1:	c9                   	leave
  10f7f2:	c3                   	ret

0010f7f3 <_kobject_text_area_end>:
	...
